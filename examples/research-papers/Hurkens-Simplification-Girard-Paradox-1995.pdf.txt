

A  Simplific ation  of  Girard's  P a r a d o x 

Antonius  J.C.  Hurkens 
Klaasstokseweg 7,  5443  NS  Haps,  The  Netherlands e-mail: hurkensffi9  kun. nl 

Abstract.  In  1972 J.-Y.  Girard  showed  that  the  Burali-Forti  paradox can be formalised in the type system U. In 1991 Th.  Coquand  formalised 
another  paradox  in  U-.  The  corresponding  proof terms  (that  have  no normal form) are large.  We present  a  shorter  term of type  _l_ in the Pure 
Type  System  )~U-  and  analyse  its  reduction  behaviour.  The  idea  is  to construct  a  universe  L/  and  two  functions  such  that  a  certain  equality 
holds.  Using this  equality, we prove and disprove that  a certain object in U  is well-founded. 

1  I n t r o d u c t i o n  
Jean-Yves  Girard  (1972)  derived  a  contradiction  in  the  type  system  U  by  for- 
malising  a  paradox  inspired  by those  of Burali-Forti  and  Russell.  By  formalising 

another  paradox,  Thierry  Coquand  (1994)  showed  that  the  type  system  U -   is 
also inconsistent.  So there  are  large proof terms  of type  _l_ in  these  type  systems. 

In  Section  3  we  present  a  relatively short  term  of type  _l_ in  AU-.  This  Pure 
Type  System  and  some notation  is  described  in  Section  2.  In  the  last  section  we 
show  that  the/~-reduction  behaviour  of the  proof term  is  very  simple. 

In  the  other  sections  we  will  see  that  the  proof  has  the  same  ingredients  as 
Burali-Forti's  paradox:  a  universe  L/,  a  relation  <  on/~,  an  o b j e c t / 2   in  L/,  and 
the  question  whether  ~  is  well-founded  or  not. 

In  Section  4  we describe  Burali-Forti's  paradox  and  some simplifications.  We 
analyse  the  connection  between  the  universe  of all  ordinals  at  its  power  set.  In 
Section  5  we introduce  paradoxical universes.  These  are connected  to their  power 
set  in  such  a  way  that  we  can  derive  a  Burali-Forti  like  contradiction.  This 
can  be  formalised  in  Pure  Type  Systems.  The  formalisation  can  be  simplified 
by  considering  powerful universes.  In  Section  6  we  see  how  these  universes  are 
connected  to  the  power  set  of their  power  set. 

2  P u r e   T y p e   S y s t e m s  
In  this  section,  we  describe  some  Pure  Type  Systems.  For  more  details,  see  for 
example  (Barendregt  1992)  or  (Geuvers  1993). 

2.1  The  P ur e  T y p e   S y s t em s   AHOL,  A U - ,   and  AU 
The  typed  A-calculus  AHOL  (Higher  Order Logic)  is the  Pure  Type System  (with 
/~-conversion)  given  by  the  sorts  *,  D,  and  A,  the  axioms  *  :  []  and  []  :  A,  and 

267 
the  rules  (*, *),  ([:], D),  and  ([:], *).  It  is  a  consistent  system,  even  if  one  adds 
the  rule  ( A , , ) .   Adding  the  rule  (A, D),  one  gets  the  Pure  Type  System  s  
Adding  both  rules,  one gets  )~U. 

2.2  T y p i n g   T e r m s   in  a  P u r e   T y p e   S y s t e m  
Each  term  A  in  a  Pure  Type  System  is  either  a  variable  x,  a  sort  s,  a  product 
IIx  : B. C,  an  abstraction  )~x : B. C,  or  an  application  (B  C). 

By  B [C / x]   we  denote  the  result  of  substituting  the  term  C  for  the  free 
occurrences  of the  variable  x  in  B  (renaming  bound  variables  if necessary).  By 

=Z  we  denote  the  equivalence  relation  between  terms  that  is  induced  by  /3- 
reduction:  replacing  a  subterm  of the  form  (Ax  : A. B  C)  by  the  term  B [C/ x] . 
If a  term  does  not  contain  such  a  subterm,  then  the  term  is  called  normal. 

In  a  Pure  Type  System,  we  can  derive  formal judgements  xl  :  A 1 , . . . ,   x~  : 
An  }- B  : C,  expressing that  B  has  type  C  in the  given context, that  is,  assuming 
that  for i  =  1,...  ,n,  variable  xi  has  type  Ai. 

We  start  in  the  empty  context.  If,  in  some  context,  A  has  type  s  for  some 
sort  s,  then  we  are  allowed to  introduce  a  new  variable  x  of type  A. 

The  context  gives  the  types  of some  variable~. 

The  axioms  give the  types  of some  sorts. 
We  use  the  rules  (s r, s ) t o   type  products  as  follows:  if  A  has  type  s r  and 
(under  the  extra  assumption  x  : A)  B  has  type  s,  then  (in  the  original  context) 
Hx  : A. B  also  has  type  s. 

If IIx  : A. B  has  type  s  and  (under  the  extra  assumption  x  : A)  C  has  type 
B,  then  (in  the  original  context)  )~x : A. C  has  type  Hx  : A. B. 

If F  has  type  Hx  : A. B  and  C  has  type  A,  then  (F  C)  has  type  B [C/x]. 

Finally,  we use/3-reduction  to  change  types:  if A  has  type  B,  B  =Z  C,  and 
C  has  type  s,  then  we may  conclude that  A  has  type  C. 

Note  that  if a  variable,  abstraction  or  application  has  type  A,  then  A  is  of 
type  s  for some  sort. 

2.3  S o m e   U s e f u l   p r o p e r t i e s   o f  AU 
Two  terms  A  and  B  are  /3-equal  if  and  only  if  for  some  C,  both  A  and  B 
reduce  to  C.  If term  B  has  a  type  D,  then  this  type  is  unique  up  to/3-equality. 

Furthermore,  if B/3-reduces  to  C,  then  C  is  also  a  term  of type  D. 

We  can  calculate  the  level  of  a  term  (and  its  subterms)  in  a  given  context 
xl  :  A 1 , . . . , x ~   :  AN  as  follows:  The  s o r t s . ,   (2,  and  A  have  level  2,  3,  and  4, 
respectively. The level of variable xi  is one less then the level of Ai  in the  context 
Xl  :  A 1 , "   fi9 ,xi- 1   :  Ai-1.  The  level  of  a  product  Hx  :  B. C  or  an  abstraction 

,kx  : B . C   is  the  level  of  C  in  the  extended  context  xl  : A 1 , "   .,x~  : A n , x   : B. 
The  level of an  application  (B  C)  is  the  level of B  in  the  original  context. 

One  can  prove  that  if B  has  type  C  in  some  context,  then  the  level  of B  is 
one  less  than  that  of  C.  So  each  term  has  level  0,  1,  2,  3,  or  4.  One  can  also show that  no term  in  )~U contains  a  subterm  of lower level  (in the  corresponding 

268 
context).  This  implies  that  if we  use  a  rule  (s, s)  to  form  a  product  IIx  : B .  C, 
then  level(x)  <  level(B)  =  level(s)  -  1  =  level(C),  so  the  variable  x  has  no  free 

occurrence  in  C. 

It  turns  out  t hat  each  term  A  of level  1  is  strongly  normalising:  there  is  no 
infinite  sequence  A  --~Z A I  ~ Z   A"  ~ Z   ...  of/~-reduction  steps.  The  terms  of 
higher  level  are  normal,  since  each  abstraction  or  application  has  level  0  or  1. 

2.4  T h e   F i v e   Le v el s   o f   T e r m s   in  AU 
We  describe  the  five levels  and  introduce  some  notation  to  distinguish  terms  of 

different  levels. 

The  only  term  of level  4  is  A  and  the  only  term  of level  3  is  C]. 
We  will  call  the  terms  of level 2  sets  or  universes.  We  think  of *  as  the  set  of 
all  propositions.  We  use  calligraphic  letters  X , . . .   for  set  variables. 

We  will  call  the  terms  of level  1  objects.  Objects  ~, X,. ..   of type  *  are  called 
propositions.  We  use  italic  letters  x , . . .   for  object  variables. 

Finally,  the  terms  of level  0  are  called  proofs  or  proof  terms.  We  use  natural 
numbers  0, 1,...  for  proof  variables.  These  correspond  exactly  to  the  labels  of 

assumptions  in  a  natural  deduction  in  Gentzen's  style. 

Using  the  rule  (E], [:]), we  can  form  the  set  of all  functions  from  a  set  8  to  a 
set  T: 

($  -~  7-)  -  Hx  : $ . T  

In  particular,  the  power  set  of S  can  be  seen  as  the  set  of all  predicates  on  S: 

~S  =  (8  -+  *) 
Using the  rule  (A,  0),  which is not  allowed in  AHOL, we can form a  'polymorphic 
domain'  I IX  :  [:]. T  (where  X  may  occur  in  T).  This  product  of  level  2  has 
no  clear  set-theoretical  interpretation.  The  products  corresponding  to  the  rules 

(.,  .),  ({:], *),  and  (A, *)  are  propositions: 

[~  ~  )r  -  II0  :  w.  x 
Vx  : S . x   =  H x  : S.)C 
V X   : []. X  =- l-IX  : []. X 

Other  connectives  can be defined  as usual.  We only need  falsehood  and  negation: 

*  
~  -  [~  ~  * 

There  are  two  kinds  of  abstractions  and  applications  of  level  1.  We  introduce 
some  new  notation  only  for  the  'polymorphic' ones: 

AX  : E].c ~  AX  : E].c  {b  T}  -  (b  T ) 
Here  b and  c  are  objects  and  T  is  a  set. 

269 
There  are  three  kinds  of abstractions  and  applications  of level 0: 

suppose  n  : ~. P  =  An  : ~o. P 

let  x  : $.  P  =  Ax  : $.  P 
let  X  : [2. P -   AX  : [2. P 

[P Q] =  (P  Q) (P  c) -  (P  c) 
(P  T)  -  (P  T) 
Note that for proofs P  and Q, the application [P Q] Corresponds to  modus  ponens 
in  a  natural  deduction. 

3  A  T erm   of  T y p e   _L  in  A U -  
We  consider the  following universe: 

u  -  H X  :  [2.  ( (~ X- +X )- +~ X)  
For  each  term  t  of type  ppb/,  we  define  a  term  of type L/: 

Tt --  A X :   [2. A f :   (p~aX--}X).  Ap:  ~aX. (t  Ax: L/. (p  (f  ({x  2c'} f)))) 
For  each  term  s  of type/4,  we  define a  term  of type  ~apL/: 

a s   --  ({s  u) At :   p ~u .   Tt) 
(So  we  do  not  consider  a  and  ~- as  terms.) 

We  define normal  terms  of type  pL/and/4,  respectively: 

A  ~  Ay: L/.-~Vp:  pL/. [(ay  p)  ~  (p  ray)] 
O  ~- the  normal  form of ~- Ap : pS/. Vx  : L/. [(ax  p)  =~  (p  x)] 

In  other  words,  O  ~  AX  :  l:3. Af  :  (~apX-+X).Ap  :  p X . V x   :  Lt.[(ax  Ay  : 
/4. (p  (f  ({y  X}  f))))  ::~  (p  (:   ({x  X}  f)))]. We  claim that  the  following is  a  term  of type  _L in  AU-: 

[suppose  0:  Vp:  ~U. [Vx: U. [(crx p)  ~  (p  x)]  =:~ 09 D)]. 
[[(0  A)  let  x :   U. suppose  2:  (ax  A).suppose  3:  Vp:  pU.[(ax  p)  ~  (p  Tax)]. 

[[(3  A)  2]  let p :   pL/. <3 Ay:  Lt. (p  ray)>  ]]  let p :   pL/. (0  Ay: L/. (p T#y))] 

let p :  ~aU. suppose  1:  Vx:/4.  [(ax  p)  =~ (p  x)]. [(1  /~)  let  x :   U. (1  Tax)]] 

Note that  each subterm  (except for the term  itself)  is normal.  One easily verifies 
that  (in  the  empty  context)  there  is  no  normal  term  of type  _L in  AU-.  At  the 
end  of this  article,  we  analyse the  fl-reduction behaviour  of this  proof term. 

The  proof  is  simple  in  the  sense  that  it  contains  just  6  applications  corre- 
sponding  to  modus  ponens.  In  order  to  get  an  idea  of  the  influence  of  abbre- viations,  one  can  also  calculate  the  length:  the  total  number  of  applications, 

abstractions,  products,  and  occurrences  of variables  and  sorts.  For example,  the 
terms  abbreviated  by  _l_, /4,  A,  and  $2  have  length  3,  15,  241,  and  145.  The complete  proof term  has  length  2039. 

In  order  to  explain  the  idea  of this  proof,  we  first  describe  the  paradox  of Burali-Forti. 

270 
4  B u r a l i - F o r t i ' s   P a r a d o x  

Cesare  Burali-Forti  (1897)  published  a  result  that  lead  to  the  first  paradox  in 
naive  set  theory.  He  showed  that  there  are  different  ordinal  numbers  c~ and  fl 
such  that  neither  a  </3  nor  fl  <  a,  which  contradicts  a  result  of Georg  Cantor 

(1897).  (In  fact,  Burali-Forti  considered perfectly  ordered classes  instead  of well- 
orderings,  so  one has  to  adapt  his  proof in  order  to  get  a  contradiction.) 

A  binary  relation  -~ on  a  set  X  is called  a  well-ordering  if it  is connected  (for 
all  different x  and  y  in  X,  x  -~ y  or  y  -4 x)  and  well-founded  (there  is  no  infinite 
descending  sequence  ...  -4  x2  -4  xl  -4  x0  in  X).  Then  it  is  also  irrefiexive and 
transitive.  Each  member  x  of X  determines  an  initial  segment of (2(, -4):  the  set {y  C 2dly -~ x}, 

ordered  by the  restriction  of -4  to  this  set. 
An  ordinal  nurab.er is  the  order  type  of a  well-ordered  set.  Let  a  and  ~  be 
the  order  types  of  the  well-ordered  sets  (X,-~)  and  (y,  -4').  Then  fl  =  a  ex- 
presses  that  (Y, -4r) is  isomorphic  to  (X, -~)  and  fl <  a  expresses  that  (3;, -~')  is 

isomorphic  to  an  initial  segment  of  (X, -~).  (This  is  well-defined,  since  isomor- 
phic  well-ordered  sets  have  isomorphic  initial  segments.)  It  is  equivalent  to  the 
existence  of a  monotone function  from  (y, -~r) to  an  initialsegment  of (X, -4). 

Assuming  that  the relation  <  on the  collection AfCo of all ordinal  numbers  is 
connected,  Burali-Forti  (could  have)  showed that  it  is  a  well-ordering.  So it  has 

an  order  type  $2. 

Let  c~ be  the  order  type of a  well-ordered set  (X, -~).  Then  the  function  that 
assigns  to  each x  in X  the  order type  of the  initial  segment  of (X, -~) determined 
by  x,  is  an  isomorphism  from  (X,-~)  to  the  initial  segment  of  (AfCo, <)  deter- 
mined  by  a.  This  shows  that  for  each  ordinal  a,  c~ <  $2.  In  particular,  39  <  /2. 
This  contradicts  the  fact  that  <  is  a  well-ordering. 

4.1  Simplifications  of Burali-Forti's  Paradox 
Burali-Forti's  paradox  can  be  simplified  in  such  a  way  that  Cantor's  result  is 
irrelevant.  Girard  (1972)  considered  the  universe  L/C0 of  all  orderings  without torsion: 

irreflexive,  transitive  relations  such  that  different  elements  determine 
non-isomorphic  initial  segments.  The  definition  of  <  can  be  extended  to  L/C0. 

Then  the  following contradictory statements  can  be  proved in  system  U: 

An  ordering  without  torsion  is  not  isomorphic  to  any  of its  initial  seg- 
ments.  (L/CO, <)  is  an  ordering  without  torsion.  Each  ordering  without 
torsion is  isomorphic  to  an  initial  segment  of (L/CO, <). 

Coquand  (1986)  formalised  a  version by  considering the  universe  of order  types 
of transitive,  well-founded  relations  (and  using  the  definition  of  <  in  terms  of 
monotone  functions).  This  version  is  similar  to  the  paradox  of  Dimitry  Miri- 
manoff  (1917): 

A  set  x  is  well-founded  (with  respect  to  the  membership  relation)  if no 
infinite descending sequence...  E xl  E  x0  C x  exists.  The collection )/Y~" 
of all  well-founded sets  is well-founded,  so  14;2- C 14;5 r.  This  contradicts 
the  well-foundedness of W$'. 

271 
A  still  simpler  paradox  is  that  of Bertrand  Russell  (1903): 

Let A  be the collection of all sets x  such that  x  r  x.  Then the proposition 

A  E  A  is  equivalent  to  its  negation. 

One  could  try  to  formalise  this  paradox  in  a  type  system  like  )~U as  follows: 

Define  some  universe  L/,  together  with  a  function  a  from  U  to  its  power 
set  ~ 5 / a n d   a  function  z  in  the  other  direction,  such  that  for  each t e r m   X  of 
type  ~ / ,   (a  (v  X))  is  fl-equal  to  X.  For  x  and  y  in  L/,  write  y  E  x  instead  of 

((a  x)  y).  Write  {xix  (~ x}  instead  of  Ax  : U.-~  x  E  x  and  let  A  be  the  term 
(~-  {x]x  r  x}).  Then  the  term  A  E  A  of type  *  is  fl-equal  to  its  negation.  So 
[suppose  0  :  A  E  A.  [0 0]  suppose  0  : A  E A .   [0 0]]  is  a  proof term  of type  _L. 

However,  as  noted  by  Coquand  (1986),  Russell's  paradox  cannot  be  for- 
malised  in  this  way  since  each  proposition  has  a  normal  form.  (Of  course,  in 

an  inconsistent  system  each  proposition  is  provable  equivalent  to  its  negation.) 

4.2  F r o m   O r d i n a l   N u m b e r s   t o   C o l l e c t i o n s   o f   O r di n a l   N u m b e r s   a n d  
B a c k  

We  return  to  Burali-Forti's  paradox  and  analyse  the  connection  between  N O  

and  its  power  set. 

For  each  ordinal  number  a,  let  aa  be  the  collection of all  smaller  ordinals. 
Let  X  be  a  collection of ordinals  and  let  ~-X  be the order  type  of (X, -~),  where 

-<  is  the  restriction  of  <  to  X.  Then,  by  definition  of  <,  for  each  ordinal  fl, 
fl  <  ~-X  expresses  that  fl  is  the  order  type  of  some  initial  segment  of  (X, -<). 

Now  assume  that  for each  c~ i n X ,   all smaller  ordinals  are  also  in  X.  Then  each 
initial  segment  of  (X, -~)  is  of the  form  (aa,  .~t)  for  some  a  in  X,  where  -~'  is 
the  restriction  of <  to  aa.  Therefore a T X   =  {fllfl  <  T X }   =  {fllfl  is  of the  form 
T~ra for  some  a  in  X}  =  {~-aala  in  X}. 

In  fact  one  can  show  that  for  each  a,  TaC~ =  a,  but  we  will  see  that  we  do 
not  need  that  in  order  to  get  a  contradiction. 

5  P a r a d o x i c a l   U n i v e r s e s  
5.1  F r o m   a  U n i v e r s e   to   Its  P o w e r   Set  a n d   B a c k  
Let  us  call  a  universe  5/,  together  with  functions  a  : U  -+  ~U  and  7  : pU  -~  5/, paradoxical 

if for each  X  in  pL/,  a T X   =  {TaXlX  !n  X } .  
Each  function  ]  : S  --+  T  induces  a  function  f ,   :  pS  -+  ~gT as  follows:  for 
each subset X  o f $ ,   f , X   =  { f x l x   in X}.  Using this notation, we see that  (U, a, T) 
is paradoxical if and  only if the  composition a o 7  is equal to  (T o a),.  Note that  if 

(U, a, ~-) is  paradoxical,  then  (~Z/, a,, ~-,) is also  paradoxical:  a ,   o T,  =  (a o T),  = 
(~- o a)**  =  (~-, o a ,) ,.   (Here  we  need  extensionality:  if two  sets  have  the  same 
elements,  then  they  are  equal.) 

272 
5.2  E x a m p l e   o f   a  P a r a d o x i c a l   U n i v e r s e  
Let  14  be  the  universe  of  all  triples  (A,-~,  a)  consisting  of  a  set  A,  a  binary 
relation  -~ on  A,  and  an  element  a  of .4.  For  each  triple  (A, -~, a),  let  a(A,  -~, a) 
be  the  collection  of  all  triples  of  the  form  (A,-~, b),  where  b  -~  a.  So  a  is  a 
function  from  5(  to  p/4.  It  induces  a  relation  <  on  to/4 as  follows: 

For  all  collections  X  and  Y  of triples,  Y  <  X  if and  only if Y  is  in  a , X ,   that 
is,  if Y  is  of the  form  a(A,-~,a)  for  some  triple  (A,-~,a)  in  X. 

For  each  X  in  ps(,  let  T X   denote  the  triple  (9/4,  < , X ) .  

Now  ~7TX  =  o'(goU,<~,Z)  ---- { ( p U , < , Y ) I Y   <  X }   =  {7-YIY  is  in  a , X }   = 
{ra(A,-~,  a)l(A,-<,  a)  in  X}. 

5.3  C o n t r a d i c t i o n   f r o m   t h e   E x i s t e n c e   of  a  P a r a d o x i c a l   U n i v e r s e  
Let  (5(, o, r)  be  paradoxical.  It  is  possible  to  derive  a  contradiction  similar  to 
Russell's  paradox: 

Let  ~  b e  the  least  equivalence  relation  on  14 such  that  for  each  x  in  U, 
x  ~  Tax.  Define  a  relation  E  on/4  as  follows:  y  E  x  if and  only  if y  ~  z 
for some  z  in  ax.  Let  A  =  v{xlx  ([ x}.  Prove that  for each  y  in/4,  y  E  A 
if and  only  if y  ~  y.  Take  y  =  A. 

We  will  derive  a  contradiction  in  another  way. 

Elements  of 5(  will  be  denoted  by  x , y , . . ,   and  subsets  of/4  by  X , Y ,   .... 

If y  is  in  ax,  then  we  say  that  y  is  a  predecessor  of  x  and  we  write  y  <  x. 
Since  (U, a, r)  is  paradoxical,  the  predecessors  of  Tax  are  the  elements  of  the 
form  r a y   for  some  predecessor  y  of x  (take  X  =  a x  =  {y}y  <  x}).  So  if y  <  x 
then  T(Ty  <:  TtTX.  (We will  use  the  special  case  y  =  ta x . ) 

There  are  several ways to  define well-foundedness.  The  following formulation 
immediately  leads  to  the  principle  of  proof  by  transfinite  induction  (without 
using  classical  logic  or  the  axiom  of  choice).  Furthermore,  the  only  quantifiers 

and  connectives  that  it  uses  are  'for  all'  and  'if  ...  then'. 

We  call X  inductive  if the  following holds:  for each x,  if each  predecessor  of x 
is in X,  then  x  itself is in X.  We say that  x  is well-founded if x  is in each inductive 

X.  (One  can  easily  prove that  {xlx  is  well-founded}  is the  least inductive  subset 
of U,  but  we  do  not  use  this  fact.) Let  ~2 --- r {x lx  is  well-founded}.  Since  (L/, a, r)  is  paradoxical,  the  predeces- 

sors  of  ~2 are  of the  form  vcrw for  some  well-founded  w. 

We  claim  that  ~2 is  well-founded: 

Let  X  be  inductive.  In  order  to  show  that  f2  is  in  X,  we  only  need  to  show 
that  each  predecessor  of  ~  is  in  X.  Such  a  predecessor  is  of the  form  r~rw  for 

some  well-founded  w.  We  want  to  show  that  w  belongs  to  the  set  {y]Ttyy  is  in 
X}.  This  follows  from  the  fact  that  this  set  is  inductive: 

Let  x  be  such  that  for  each  y  <  x,  r a y   is  in  X.  Then  Tax  is  in  X  since  X  is 
inductive  and  each  predecessor  of TtTX is  in  X,  since  such  a  predecessor  is  of the 
form  r ay  for  some  y  <  x. 

273 
Note  that,  until  now,  we  only used  the  fact  that  for each  X,  a T X   C_ {Taxlx 
in  X}.  Using  the  other  inclusion,  we  now  show  t h a t / 2   is  not  well-founded: 

Suppose t h a t / 2   is well-founded.  Then  Tal2  is of the  form Taw  for some well- 
founded  w,  so  7a/2  is  a  predecessor  of  39.  On  the  other  hand,  TaY2 ~  /2,  since 

Y2 is  well-founded  and  the  set  {ylTay  ~  y}  is  inductive: 

Let  x  be  such that  for each y  <  x,  7ay  ~  y.  Then TaX  ~  X. For suppose  that 
Tax  <  x.  Then  7aTax  ~  Tax  (take  y  =  TAX).  But  7aTax  is  of the  form Tay  for 
some  y  <  x,  so TaTaX  is  a  predecessor  of Tax. 

5.4  Formalisation  in  Pure  Type  Systems 
The  preceding  derivation  of a  contradiction  from  the  existence  of a  paradoxical 
universe can  be formalised in  )~HOL:  we can find a  term  of type  _L in the  context 
U  :  D,  a  :  ( U - ~ U ) ,   T  :  (~- - ~U ),  0  :  VX  :  ~ .   (a  (7  X))  =~u  ~u  :  U. 3x  : 
U. ((X  x)  A u  = u   (7  (a  x))).  Here for  each  set  A,  =A  denotes  Leibniz  equality 

on  ~4. Instead  of =~u  one  can  also  take  the  weaker  relation  of 'having  the  same 
elements'.  Since  the  proof does  not  use  ex falso  sequitur  quodlibet  at  all,  _L can 
be  replaced  by  any  formula ~. 

We  need  a  stronger  Pure  Type System to  prove _L in the  empty  context.  Let 
U  be  the  paradoxical  universe  given  in  the  example.  Using  the  rule  (A, O),  we 
formalise  the  power  set  gv/4 as  the  term  FIX  : []. ((X-+goX)-~gwY)  of type  D.  In 

other  words,  we  read  IIu  : U. *  as  abbreviation  for  IL4  : D. H-~  : (~4-~p~4). Ha  : 
Jl. *.  It  is  not  necessary  to  find  a  term  corresponding  t o / 4   itself.  For  example, 
Vu  : b/. (X  u)  stands  for  VA  :  [3. V-~  :  (A--+pA). Va  :  A.  (({X  ,4}  -~)  a).  Note 

that  the  rule (A, ,)  is  needed  for the  quantification  over  [:3. So this  can  be  done 
in  s 

One  can  also formalise the  preceding paradox  in  )~U-,  using  for example  the 
paradoxical  universe  HA'  : [2. ( ( p X - ~ X ) ~ X )   or  the  following one: 

U  -  HX  :  [].  ( (~ X~ X )- -+ ~X ) 
Define a  term  of type  (~L{ -+/4): 

T -  ~X  : ~/4. AA  : []. Ac : (~A  -+  A). ha  : A. 
Here  ~  expresses  that  a  is  of the  form  (c  ({x  .A}  c))  for  some  x  :/4  such  that 

(X  x).  (Note  that  ({x  A}  c)  :  pA,  so  (c  ({x  A}  c))  :  .4.)  This  can  be  done 
without  defining  3,  A,  and  =A,  as  follows: 

=  V P :  pA.  [Vx:/4.  [(X  x)  ~  ( P   (c  ({x  A)  c)))]  ~  ( P   a)] 
Define a  term  of type  (/4  --+ pU): 

a  -  ~x  : U.  ({z  u }  7) 
Then  one  easily  verifies that  (L/, a, 7)  is  paradoxical.  In  fact,  for  each  X  of type 

p/4,  (a  (7  X))  is  g-equal  to  the  term  corresponding  to  "the  intersection  of 
all  subsets  P  o f/4   containing  (7  (a  x))  for  each  x  in  X ".  This  simplifies  the 

274 
formal  proof  term,  since  ~-conversion  between  two  propositions  ~p and  X  does 

not  "count"  as  a  proof step:  if P  is  a  proof term  of type  ~,  then  P  also has  type 

X.  In  this  way,  one  finds  a  term  of type  *  in  AU-  that  uses  modus  ponens  12 

times.  It  is  of the  form  [P  Q],  where  P  is  a  normal  term  of type  "[2  is  not  well- 
founded"  and  Q  is  a  normal  term  of type  "$2 is  well-founded".  The  terms  5/,  ~2, 

"~2 is  well-founded",  P,  and  Q  have  length  11,163,  285,  1849,  and  1405. 

6  P o w e r f u l   U n i v e r s e s  
The  proof term  that  we presented  earlier, is  shorter  and  has  a  simpler reduction 
behaviour.  Furtherniore,  we  defined  terms  Tt  and  as  without  using  quantifiers 
or  connectives.  The  main  idea  of  the  simplification  is  to  consider  the  power 

set  of  the  power  set  of  some  universe  5/.  In  fact,  we  already  considered  p~L/ 
implicitly:  Let  for  each  subset  C  of ~U,  N C  be  the  intersection  of all  members 

Y  of  C,  that  is,  N  C  -=  {ylfor  each  Y  in  C,  y  is  in  Y}.  Then,  by  definition, {xlx 

is  well-founded}  -  N { Z l Z   is  inductive}  and  for  each  X  in  ~U,  {Taxlx 
in  X}  =  N(Ylfor  each  x  in  X,  Tax  is  in  Y}.  In  the  example  of  a  paradoxical 
universe,  we  defined  a(A,-~, a)  =_ ~{XIfor  each  b  -~  a,  (A,-~, b)  is  in  X}.  The 
relation  -~  on  ,4  induces  a  function  s  :  A  --+  p p A   as  follows:  sa  =  {B  in 

p a l l o r   each  b  -~  a,  b  is  in  B}.  In  terms  of this  function,  a(A,-~,a)  =  N{Xl{b 
in  AI(A, -~, b)  is  in  X}  is  in  sa}.  Note  that  if -~ is  (Leibniz)  equality on  A,  then 

the  function  s  can  be  defined without  using  quantifiers  or  connectives:  sa  =  {B 
in  pain  is  in  B}. 

By  using  the  fact  that  no  set  is  isomorphic  to  the  power  set  of  its  power 
set,  John  Reynolds  (1984)  proved  that  there  is  no  set-theoretic  model  of poly- 
morphic  (or  second-order)  typed  A-calculus.  By  refining  this  result  and  using 

a  computer,  Coquand  (1994)  found  a  formal  proof  of  a  contradiction  in  sys- 
t e m  U - .   He considered the  universe  A0  -  IIX  : [3. ((ppX-+X)-~X)  and  defined 
functions  match :  A0  --+ ppA0  and  intro  : ppA0  -+  A0. Then he showed that  these 
functions  constitute  an  isomorphism  with  respect  to  certain  partial  equivalence 

relations.  In  fact,  (Ad, match, intro)  can  also  be  used  to  formulate  a  Buraii-Fort[ 
like paradox:  it  is  an  example  of a  powerful  universe. 

6.1  F r o m   a  U n i v e r s e   to  t h e   P o w e r   Set  o f  Its  P o w e r   Set   a n d   B a c k  
Let us  call a  universe 5/, together with functions a  : L/-+  p ~5 /a nd   T  : p~5/  ~  L/, powerful 

if for each  C  in  ppU,  aTC  =  {Xlthe  set  {ylTay  is  in  X}  is  in  C}. 
Each  function  f  :  S  -~  7"  induces  a  function  f*  :  p T   --+  p S   as  follows: 
for  each  subset  Y  of  T,  f * Y   =  {x  in  $1fx  is  in  X}.  Using  this  notation,  we 

see  that  (U, a, T)  is  powerful  if  and  only  if  the  composition  a  o ~-  is  equal  to 

(T o a)**.  Note  that  if  (5/, a, ~-)  is  powerful,  then  (~oU, T*, a*)  is  also  powerful: ~-* o (7* =  (a o ~-)* =  (T o a)***  =  (a* o 7-*)**. (Here we do not  need extensionality.) 

275 
6.2  E x a m p l e   o f   a  P o w e r f u l   Universe 

Let  g/  be  the  universe  of  all  triples  (A, s, a)  consisting  of  a  set  A,  a  function 
s  : A  --+ gagaA, and  an  element  a  of A.  For  each  triple  (A, s, a),  let  a(A,  s, a)  be 
the  collection of all  subsets  X  of U  such  that  {b in  A I(A  , s, b)  is  in  X}  is  in  sa. 

Since a  is  a  function from U  to  gap/g, a**  is a  function from  gagag/to  gagagagaU. For 
each  C  in  gagag/, let  TC  denote  the  triple  (gagag/, a**, C). 

In  order to  verify that  (U, a, r)  is powerful, let  C  in  gagag/and  X  in  gag/. Then 
the  following propositions  are  equivalent  (by  definition): 

X  is  in  arC; 
X  is  in  a(gagag/, a**, C); 

{b in  gagag/l(gagag/, a**, b)  is  in  X}  is  in  a**C; 
a*{b  in  gapg/Irb  is  in  X}  is  in  C; 

{y in  g/Iray  is  in  X}  is  in  C. 

6.3  C o n t r a d i c t i o n   f r o m   t h e   E x i s t e n c e   of  a  P o w e r f u l   U n i v e r s e  
Let  (U, a, z)  be  powerful.  We  will  derive  a  contradiction  in  a  similar  way  as  for 
paradoxical  universes. 

Elements  of g/will  be  denoted  by  x, y , . . .   and  subsets  of g / b y   X,  Y, ....  For 
each  x,  ax  is  in  gaga/g. (g/, a, r)  is  powerful,  so: 

a r a x   =  {Zlthe  set  {yl'cay  is in  X}  is  in  ax} 
We  say  that  y  is  a  predecessor  of x  (and  we  write  y  <  x)  if for each  X  in  ax,  y 
is  in  X  (in  other  words,  if y  is in  [~ ax).  One  can  easily prove that  if y  <  x  then 
Tay  <  Tax.  We  will only  do  this  for  the  special  case  y  =  ta x .   Note  that  if X  is 
in  ax,  then  each  predecessor  of x  is  in  X. 

X  is called  inductive  if the following holds:  for each x  in U,  if X  is in  ax,  then 
x  is  in X.  We say that  x  is  well-founded  if x  is in each inductive X.  (Note that  it 
is  not  clear whether  {xlx  is well-founded} is  inductive:  if one tries  to  prove this, 
one would  like to  use  something  like: if Y  is in  ax  and  Y  C "X, then  X  is in  ax.) 

Let  /2 ___- r { X l Z   is  inductive}.  (g/, a, r)  is  powerful,  so: 

~D  =  {X 1 the  set  {ylr~y  is  in  X}  is  inductive} 
We  claim  that  /2  is  well-founded: 

Let  X  be  inductive.  In  order  to  prove that  ~2 is  in  X,  we  only need  to  show 
that  X  is in a~2.  In other words, we show that  the set  {ylray is in X}  is inductive. 

So  let  x  be  in  g/.  Since  X  is  inductive,  we  have  the  following:  if X  is  in  a r a x ,  
then  t a x   is  in  X.  In  other  words,  if the  set  {y['cay  is  in  X}  is  in  ax,  then  x  is 
in  {y[ray  is  in  X}.  This  is exactly what  we  had  to  prove. 

In  order  to  show  that  ~2  is  not  well-founded,  we  first  prove  that  the  set 
{y]ray  ~  y}  is  inductive: Let  x  be  such  that  {ylvay  5~ y}  is  in  ax.  Then  TaX  5~ x.  For  suppose  that 

TaX  <  X.  In  other  words,  for  each  X  in  ax,  Tax  is  in  X.  Applying  this  to  the 

set  {ylray  ~  y},  which  is  in  ax,  we  see that  v a r a x   ~  tax :  On  the  other  hand, 

276 
~-a~-ax <  Tax:  Let X  be in  pN.  We have to  show  the  following: if X  is  in  a~-ax, 
then  TaTaX  is  in  X.  In  other  words,  if {y]Tay  is  in  X}  is  in  ax,  then  t a x   is  in {y]Tay 

is in  X}.  This  follows from the  assumption  that  TaX  <  X, i.e.  for each  Y 
in  ax,  ~-ax is  in  Y. 

Now  suppose  that  /2  is  well-founded.  Then,  since  {y]Tay  ~  y}  is  inductive, Tar2  ~  ~2. 

On  the  other  hand,  ~-a(2  <  $2:  Let  X  be  in  ~gb/. We  have  to  show: 
if X  is  in  aY2, then  TaQ  is  in  X.  In  other  words,  if the  set  {y]Tay  is  in  X}  is 
inductive,  then  ~2 is  in  {ylTay  is  in  X}.  This  follows from  the  assumption  that 

~2 is  welt-founded,  i.e.  for each  inductive  Y,  /2  is  in  Y. 

7  R e d u c t i o n   B eh av i ou r 
Douglas  Howe  (1987)  used  a  computer  to  study  the  reduction  behaviour  of  a 
massive  term  corresponding  to  one  particular  proof  of  Girard's  paradox.  Just 
like  the  proofs  we  gave,  it  did  not  use  ex/also  sequitur  quodlibet,  so  *  can 
be  replaced  by  a  variable  of  type  *.  Using  this,  Howe  constructed  a  looping combinator 

(but  not  a  fixed-point  combinator).  (See  (Coquand  and  Herbelin 
1994)  and  also  (Geuvers  and  Werner  1994).) 

We now return  to the  proof term that  we presented in  Section 3. It  formalises 
the  preceding  derivation  of a  contradiction,  using  some  other  powerful  universe 
than  the  two  that  we mentioned  earlier. 

One  easily  verifies  that  (5/, As  : N. as, At  :  ploN. ~-t) is  powerful:  in  fact,  for 
each term  t  of type  ~pN,  the  term  aTt  fl-reduces to  Ap : ~/4.  (t  Ax  : U. (p Tax)). 

One  can  calculate  the  normal  form  of  ({TaTa-..TaX  X}  f),  where  x,  2(,  and 
f  are  variables.  It  contains  nested  expressions  of the  form  Ap  :  tvX. (ax ~ Ax"  : u.  (p  (/  ..-))). 

For  each  term  s  of type U,  let  O~  be  s  and,  for each  natural  number  n,  let on+is 

be  the  normal  form  of raO'~s.  For  each  term  p  of type  ~/4,  let  O~p  be 
p  and,  for  each  natural  number  n,  let  O*~+lP be  Ay  : U. (p  O~+ly).  Then,  for 

variables  x  and  p,  for  each  natural  number  n,  the  normal  form  of  (aOnx  p)  is (az  o~p). 

The  fact  that/%reduction  of the  proof  term  goes  on  indefinitely,  is  caused 
by  steps  that  correspond  to  the  rule  (., .),  that  is,  replacing  a  subterm  of the 

form  [suppose n  : ~. P  Q]  by  P[Q/n].  One  can  show  that  each  infinite  sequence 

of  fl-reduction  steps,  starting  with  a  term  in  AU,  contains  such  a  step.  So  we 
can  concentrate  on  "big  steps":  steps  that  correspond  to  (*, *),  followed  by  a 
maximal  sequence  of steps  corresponding  to  other  rules. 

Let  n  be  a  natural  number.  We  first  define two  propositions: 

~n  _= Vp:  eu.  [Vx: u.  [(ox  O*~p) ~  (p onx)]  ~  (p O"O)] 
r   _---- Vx:/4.  [(ox  O*~)  ~  ~Vp:  p/4.  [(ax  O'p)  ~  (p O~+lx)]] 

So  ~ ,   expresses  that  O n ~   is  in  each  subset  X  of/4  for  which  {ylOny  is  in  X} 
is  inductive.  Note  that  ~o  is  "~2 is  well-founded"  and  ~ + 1   is  the  normal  form 

277 
of "0n+1~2  <  On(2 ''.  The  proposition  r  expresses  that  {ylOn+]y  ~  O~y}  is 
inductive.  We  also  define  five proof terms: 

Rn  -  let p  : fag/. suppose  1  Vx  : b/. [(ax  ~,*.p) ~  (p  Onx)]. 

[(1  O)  let  x:/%.  (1  TAX)] 
M,~  --  let  x  : U. suppose  2  : (ax  @*A). 

suppose  3:  gp:  fag/. [(ax  8*np )  =>  (p  ~n+lx)]. 

[[(3  A)  21  let p :   gag/. (3  Ay:  g/. (p ray)>] 
Pn  --  suppose  4  : ~bn. suppose  0  : ~on. [[(0  A>  41  let p :  ~ / .   (0  Ay:  L/. (p  ray)>] 
Ln  --  suppose  0:  9PR. [[(0  A)  Mn]  let p:   fag/. (0  Ay: g/. (p  ray)>] 
Qn  --  suppose  4:  ~n.  [(4  ~'~> let  x :  g/. (4  TAX}] 

Then  R ,   proves  g~,,  M~  proves  r  Pn  proves  [%bn ~  -:g~],  L ,   proves  -~io,,  and 

Qn  proves  [~bn ~  -~On+l]. Note  that  [L0  R0]  is  the  proof  term  that  we  presented  in  Section  3. 

For  each  natural  number  n,  [[P~  Mn]  R~]  reduces  in  one  step  to  [nn  Rn]. 
(Variable  4  disappears.)  This  reduces  in  a  big  step  to  [[QR Mn]  Rn+l].  (Variable 0  disappears  and  some  occurrences  of  1  are  renamed  as  4.)  This  reduces  to 

[[Pn+l  Mn+I]  Rn+l].  (Variable  4  disappears  and  some  occurrences  of  2  and  3 
are  renamed  as  4  and  0.) So  these  proof terms  of type  i  in  AU-  reduce  in  three  big  steps  to  a  similar 

proof  term:  only  the  types  of the  proof  variables  change  a  little  bit. 

R ef e re nc e s 
Barendregt,  H.P.:  Typed  lambda  calculi,  in:  Handbook  of Logic  in  Computer  Science (Vol.  2),  S.  Abramsky  et  al.  (editors),  Clarendon  Press,  Oxford  (1992) 
Burali-Forti,  C.:  Una  questione  sui  numeri  transfiniti,  Rendiconti  del  Circolo  Matem- atico  di Palermo 11  (1897)  154-154 

Cantor,  G.:  Beitrgge  zur  Begriindung  der transfiniten  Mengenlehre,  II,  Mathematische Annalen 49  (1897)  207-246 
Coquand,  Th.:  An analysis of Girard's  paradox,  in:  Proceedings Symposium  on Logic in Computer  Science:  Cambridge,  Massachusetts,  June  16-18,  1986, IEEE  Computer 

Society Press,  Washington,  D.C.  (1986)  227  236 Coquand,  Th.:  A  New  Paradox  in  Type  Theory,  in:  Logic  and  philosophy  of  science 

in  Uppsata: papers  from  the  9th  international  congress  of  logic,  methodology  and philosophy  of  science,  D.  Prawitz,  D.  Westerstaahl  (editors),  Kluwer  Academic 
Publishers,  Dordrecht  (1994)  ?-? Coquand,  Th.,  Herbelin,  H.:  A-translation  and  looping  combinators  in  pure  type  sys- 
tems,  Journal  of Functional Programming  4  (1994)  77-88 Geuvers, J.H.:  Logics and  Type Systems, Proefschrift,  Katholieke Universiteit  Nijmegen 

(1993) Geuvers,  H., Werner,  B.:  On the  Church-Rosser  property for Expressive  Type Systems 
and  its  Consequences  for  their  Metatheoretic  Study,  in:  Proceedings  of  the  Ninth Annual Symposium  on Logic in  Computer Science,  Paris,  France, IEEE  Computer 

Society Press,  Washington,  D.C.  (1994)  320-329 

278 
Girard, J.-Y.:  Interpretation fonctionnelle  et dlimination  des coupures de l'arithmgtique d'ordre  supdrieur,  Thbse de Doctorat d'l~,tat,  Universit~ Paris  VII  (1972) 
Howe,  D.J.:  The  Computational  Behaviour of Girard's  Paradox, in:  Proceedings Sym- posium  on Logic in  Computer Science:  Ithaka,  New  York,  June  22-25,  1987, IEEE 

Computer Society Press,  Washington,  D.C.  (1987)  205-214 Mirimanoff, D.: Les antinomies de Russell et de Burali-Forti et le problbme fondamental 
de la th6orie des ensembles,  L'Enseignement  Mathdmatique  19  (1917)  37-52 Reynolds,  J.C.:  Polymorphism is  not  Set-Theoretic, in:  Semantics  of Data  Types, G. 
Kahn  et  al.  (editors),  Lecture  Notes  in  Computer  Science  173,  Springer-Verlag, Berlin Heidelberg (1984)  145-156 
Russell,  B.:  The  Principles  of Mathematics,  Cambridge  University Press,  Cambridge, G.B.  (1903) 