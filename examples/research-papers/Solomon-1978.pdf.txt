

Conference Record of the Fifth Annual ACM Symposium on principles of Programming Languages

TYPE DEFINITIONS WITH PARAMETERS*

(Extended Abstract)

Marvin Solomon
university of Wisconsin -- Madison

Introduction

It has long been known that recursively defined types in a highly typed language such
as Algol 68 or Pascal may be tested for structural equivalence by the same algorithm that
compares finite automata [5,11] . Several authors (for example, [3,8,9,16]) have proposed

that classes of types be simultaneously defined by the use of parametrized type definitions, such as

~ list(x) +_= record val:x; next: list(x) end .
This paper shows that unless the use of such parameterized definitions is restricted,
new (unparameterized) types may be defined which more closely resemble deterministic
context-free languages. In fact, the equivalence problem for such types becomes as hard
as the (currently unsolved) deterministic pushdown automaton equivalence problem. Several

restrictions on type definitions are considered which allow known equivalence algorithms
to be applied.

Equivalence and compatibility

The type of a value limits which operations may be performed on it. For example,
character strings and integers have different types; only strings may be concatenated and
only integers may be added. Moreoverr the type of a value also dictates the type of the

result obtained when a legal operator is applied to it. For example, a pointer value may
be subjected to the operation deref, which retrieves the value to which it points. But a
pointer to an integer should be distinguished from a pointer to a string, since the

results of applying the deref operator to them have different types. In other words, the

sequence <deref, add> is applicable to a pointer-to-integer valuer but not to a pointerto-string.

Informally, Behavior(t) is the collection of all information about which operations
are applicable to t. Clearly, types with distinct behaviors are not equivalent. Whether

-----------

*A much more detailed version of these results may be found in [12] .

31

the converse is true is largely a matter of taste. The Algol 68 definition [15] takes the
viewpoint that types that have identical behaviors are equivalent. Pascal implementations, largely for reasons of convenience, generally take a more restrictive view and require that equivalent types be declared "in the same way." Those who prefer the latter
viewpoint may prefer to use the term "compatibility" rather than "equivalence." We will,
however, identify a type with its behavior.

The behavior of a type may be conveniently represented by a tree. For example, the
type declared

~ rec = record i:integer; ip:+real @
might be represented thus:

Behavior(rec) = .#coQ\ip

integer poi~~er

r e-a 1
Leaves are labelled by built-in-t= ("integer" and---- --.
nal nodes are labelled by ~ constructors ("record"

(1)

(2)
"real" in this example) , interand "pointer"), and arcs are labelled by selectors ("i", `rip", and "4" ) . (From the point of view of type checking, a
pointer is like a record with one field called "~" or "deref"). For technical reasons, it

is helpful to assume that each constructor has a unique number of arguments. This is the
reason for the subscript 2 on record. Certain types are amenable to arbitrarily long sequences of operations and so have behaviors represented by infinite trees. For example,

~ intlist = record val:integer; next:tintlist end (3)

val~cor~next
Behavior(intlist) = integer

`"'[ier

(4)

i;:;[co%e't

`"'~ier

..

Behavior trees can be completely specified by sets of strings as follows. Each node
in a tree t has an "address" which is the (unique) sequence of selectors leading from the
root to the given node. For each built-in type or constructor s, let Address(s,t) be the
set of addresses of nodes in t labelled by s.

Regular and context-free types--.

In [11] , we proved the following:
Theorem 1. (See also Kral [5])\

A tree t is the behavior of a type defined by a
and only if Address(s,t) is a regular set for each s

type definition such as (1) or (3) if
appearing in t. M

32

Example

If t = Behavior (intlist) then

Type
built-in

[3,8,9,16

Address (record2,t) = (next 4)*
Address (integerrt) = (next 4)* val

Address (pointerrt) = (next +)* next .

definitions in languages like Algol 68, Pascal, or PL\I
types, built-in type constructors, and defined types.

that it would be useful to include, in addition, defined

(5)

N
are constructed from

It has been suggested
type constructors, to
allow definitions such

~ list(x)

intlist
reallist
intlistlist

as
= record val:x; next:+list(x) ~;
= list(lnteger); (6)
= list(real);
= list (list(integer)); etc.

Unfortunately, with the addition of defined type constructors (called medals in [31
and [8]) , Theorem 1 no longer holds. For example

!222 cf(x) = record val:x; next:cf(~x) end;cfg = cf(integer) ; (7)

is superficially similar to (3) or (6). However, it defines this behavior:

record
i;:g ~:::,
t = Behavior(cfg) = -

PoiX~~ ~next

~'rinteger

re?ord2
val/ \ next

q~: :

int!~er "

(8)

and Address (integer,t) = {nextn val `~n I n ~ 0}, which is not a regular set. FOr this

reason, we will call types defined in this way context-free types.

Nonetheless, the situation is not hopeless. The address sets of context-free types
are no more complicated than deterministic context-free languages.
Theorem 2--

If t is the behavior of a context-free type, then for each built-in type or constructor s appearing in t, Address(s,t) is'deterministic context-free.
Proof (Sketch).

Consider the definition

~ t(x~,xz) =

record

a:t(record a:integer;----

record a:integer;

b:xl;C:X2
end .

The right-hand side of this definition is

b:xl; c:real
b:real; C:X2

more clearly

@r

end) ; (9)

represented as a tree:

33

in

(10)

Behavior(t) is the infinite tree that results from repeatedly expanding (10) by replacing a node labelled t with the definition of t (viz., the tree (10)). When a node is

replaced, a copy of its left subtree is substituted for each occurrence of xl in (lQ) , and
a copy of its right subtree is substituted for each X2. The process is formalized in
various ways in [2,7,10,11,12].

Consider an occurrence of "integer" in Behavior(t) . Either it is one of the two
"top-level" occurrences explicitly shown in (10), or it is an "embedded" occurrence
resulting from the expansion of the shown occurrence of t. A path from the root to an occurrence of "integer" is thus of one of the three forms au, ava, or awa, where u is a

(shorter) path to an occurrence of "integer", v is a path to an occurrence of "X1", and w
is a path to an occurrence of "X2". From this we see that Address (integerrt) is generated
by the context-free grammar

<integer> ::= a <integer> [ a <t-xl> a I a <t-X2> a

<t-xl> ::= b I a <t-xl> b (11)

<t-x2> ::= c I a <t-x2> c

where <t-xl> generates the set of paths from the root of partially expanded versions of t

to an occurrence of xl . Thus Address (integer,t) = {ambnalm~n~l} ~

{amcna I m ~ n~ 1]. More generally, a mutually recursive set of declarations can be
modelled by such a grammar.

To show that this language is deterministic, we construct a deterministic pushdown
automaton P. The states of P are nodes of the tree on the right-hand side of (10). Stack

symbol's are those nodes that are labelled by defined types and type constructors. (There

is only one stack symbol in this example) . Final states are nodes labelled by "integer".
The action of P in state n is as follows:

If n is labelled by a built-in constructor or type, then n heads a subtree of the
form s(a:e1;b:e2;c:e3). Then P reads the next input symbol and goes to the root of el,
e2, or e3 according to whether the input was a, b, or c.

If n is labelled by the defined type or type constructor t, then P stacks its current
state and goes to the state which is the root of the tree defining t. The input is not
examined.

If n is labelled by the symbol "xi", then P pops the top symbol off the stack. This
symbol will be the root of a subtree of the form t(e~,. ..,ek). P goes to the state that

is the root of ei. (If the stack is empty or k < i, then P rejects. ) The input is not

34

examined.

In contrast to Theorem 1, we have only a partial converse to Theorem 2.
Lemma

If L is a deterministic context-free language with the prefix property (i.e., if
xf3L then no proper prefix ofxisinL), then there exists a context-free type with
behavior t constructed from the built-in constructors "struct" and "integer" such that

Address (integerrt) = L
Address(struct,t) = {y I no prefix of y is in L}.

Proof (Sketch)

By the construction in [1, p. 691], we may assume that L is recognized by a pushdown
automaton P in "normal form". Roughlyr this means that the states of P are partitioned

into "scan states" Qs, which read input without modifying or examining the stack, "write
states" Qw and "erase states" Qe, which manipulate the stack without examining the input,
and a unique final state qf from which no moves are possible. Also, an erase state is
never the immediate successor of a write state. It is not hard to show that P may be

further restricted so that the symbol pushed on the stack by a write state is the write
state itself.

NOW construct a definition as follows: Let {al,. ..an } be the alphabet of L,, let
Qe = {Pi,...,Pm}, and let 6 be the transition function of P. Introduce an m-argument defined type constructor tq for each q @ Qe.

lf q ~ Qs, then for each air there is a state qi such that 6(q,airY) = (qi,y) for any
stack symbol Y. Include the declaration

tq(xl,...xm) = record al:el; a2:e2; . . . . an:en end

{

`j if

qi = ??j ~ Qe

where ei =

tqi(xl,. ..,xm) if qi @ Qe

If q ~ Qw, then there is a state q' @ Qe such that for any stack symbol Y, 6(q,c,Y) =
(q',qY). Include the declaration

tq(xl,...,xm) = tql(el,. ..,em)

{ `j

if 6(Pi,c,q) = (Pj,c); Pj ~ Qe
where ei =

tq'l (xl,. . . ,Xm) if ~(pirc,q) = (q'',c), q" $? Qe

Finally, for the final state qf, add the declaration

%f = integer. lx
Theorem 3--

The equivalence problem for context-free types is solvable if and only if the
equivalence problem for deterministic context-free languages is solvable.

35

Proof

By Theorem 2, equivalence of types reduces to equivalence of deterministic languages.
To prove the converse, let Ll and L2 be deterministic languages and let $ be a new symbol.

Construct type definitions corresponding

and only if the defined types are equ.

Restrictions

to Ll$ and L2$ as in the lemma. Then L1 = L2 if
va ent.

Ml

Since a good deal of effort has been expended on unsuccessful attempts to solve the
deterministic language equivalence problem, it may be a good idea to restrict the range of
definable types to keep the corresponding behaviors within some class that has a known

equivalence algorithm. We know of no example of a non-regular type that is of practical

use for programming.

finition of regular
non-regular types.
Proposition 1--

The idea of allowing definitions like (6) was to facilitate the detypes, not to allow new types, so it might be reasonable to prohibit

It is decidable whether a context-free type is regular.
Proof

Theorem 2 give an effective procedure for constructing a deterministic pushdown automaton (dpda) from a def

[131 .

The decision procedure

nition. It is decidable whether a dpda accepts a regular set

M
testing an m-stateof [13] is rather complex. It involves
dpda over an n-symbol alphabet for equivalence with all finite automata having fewer than
nm mm states. In practice, one would probably like to restrict the allowable definitions

still further, so that definable types are "obviously" regular. For example
Proposition ~

If all applications of defined type constructors in
t(e~?. ..,ek) where each ei is either a built-in type or

are regular. (Note that the definition (6) satisfies this
Proof

Under these restrictions, the grammars constructed in
are all right linear.

a definition have the form
`ome `j' then all types defined

restriction. )

(11) of the proof of theorem 2

N

36

In spite of the above remarks, it is of some theoretical interest to see how far we
can extend the range of definable types and still have an equivalence algorithm.

=_ 2

Under the restriction that no defined type constructor is applied to an expression

containing a defined type constructor or type, equivalence of types is decidable.
Proof

The restriction ensures that the push<own automata constructed as
theorem 2 are linear (i.e., all "push" moves precede any "pop" moves on
contains a proof that equivalence is decidable for linear dpda,

All examples presented in this paper are linear.

References
[1]
[2]
[3]

[4]
[5]
[6]
[7]

in the proof of
each input) . [14]

Aho , A. V. and Unman, J. D. The Theory of Parsingr Translation and Compiling,--

Volume II: Compiling. Prentice-Hall, Englewood Cliffs,--

Goguen, J. A. and Thatcher, J. W. Initial algebra semant

Switching and Automata Theory, v. 15, 1974, 63-77.

IFIP Working Group 2.1. Report of the subcommittee

N.J., 1973.

Cs. IEEE Symposium on

on data-processing and
transport--modals, with application to sorting. W `ulletin AB 37.4.3 (MaY
1971) .

Jensen, K. and Wirth, N. Pascal User Manual and Report. Lecture Notes in-- -- Computer

Science, v. 18. Springer

Krkl, J. The equivalence of

Bulletin AB 35.4.5

Lampson, B. W., et al.----

(March

Verl'ag, Belin, 1974.
modes and the equivalence of finite

1973) .

Report on the programming language Euclid.

automata. Algol

SIGPLAN Notices
~, 2 (February, 1977).

Lewis, C. H. and Rosen, B. K. Recursively defined datatypes, part I. ACM Symposium

on Principles of Programming Languages, Bostonr Mass. , 1973.

3-?

[8] Lindsey, C. H. Medals. AlgOl Bulletin AB 37.4.3 (1974).
[9] Liskov, B., et al. Abstraction Mechanisms in CLU.---- M.I.T. Computation

Group Memo 144-1. Januaryr 1977.

[10] Rosen, B. K. and Lewis, C. H. Recursively defined datatypes, part 11.

4713, IBM T. J. Watson Research Center, Yorktown Heights, N. Y., 1974.

Structures
Report RC
[11] Solomon, M. Modes, values and expressions. Second ACM Symposium on Principles of

Programming Languages, Palo Alto, Calif., 1975, 149-159. (Also available as Tech.
Rept. TR 74-219, Computer Science Dept., Cornell University, Ithaca, N. Y., 1974).

[12] Solomon, M. On type definitions with parameters. DAIMI Publication PB-54. Aarhus

University, Aarhus, Denmark, November, 1975. (Also available as chapter I of
Theoretical issues in the implementation of programming languages. Ph. D. Thesis.
Tech. Rept. 300, Computer Sciences Department, university of Wisconsin, Madison,
WI . June 1977.)

[131 Stearns, R. E. A regularity test for pushdown machines. Inf. and Control U, 3--.

(September, 1967), 323-340.

[14] Valient, L. B. The equivalence problem for deterministic finite-turn pushdown automata. Inf. and Control ~, 2 (Juner 1974), 123-133.----

[15] Wijngaarden, A. van et al. Revised report on the algorithmic langua9e ALGOL 68.----

Acts Informatica ~ (1975), 1-236.

[16] wulf, w. A., London, R. L., and Shaw, M. Abstraction and verification in Alphard:

introduction to language and methodology. Technical report, Carnegie-Mellon
University, June 14, 1976.

38