

Minimal  and Complete  Word  Unification 

JOXAN  JAFFAR 
IBM  Thomas J.  Watson Research Center,  Yorktown Heights,  New  York 

Abstract.  The  fundamental  satisfiability  problem  for  word  equations  has  been  solved  recently  by Makanin.  However,  this  algorithm  is purely  a decision algorithm.  The  main  result of this paper solves 
the  complementary  problem  of  generating  the  set of  all  solutions.  Specifically,  the  algorithm  in  this paper generates, given  a word  equation,  a minimal  and  complete  set of unifiers.  It  stops if  this  set is 

finite. 
Categories and Subject  Descriptors:  F.2.2  [Analysis  of  Algorithms  and  Problem  Complexity]:  Nonnu- merical  Algorithms  and Problems-computations  on discrete structures; F.4.3  [Mathematical  Logic  and 

Formal  Languages]:  Formal  languages-decision  problems 
General Terms:  Algorithms,  Theory 

Additional  Key  Words and Phrases: Unification,  word  problems 

1.  Introduction 
The  fundamental  problem  for  equations  in  free monoids,  or  equivalently,  word equations,  can  be phrased  as follows:  Let  G be a free monoid  with  generators  Z 

(whose cardinality  is at least 2). Thus,  G =  Z*.  We shall call  the elements of Z and Z*  letters and  words, respectively.  A  word  expression  is defined  recursively  to  be 
either  a letter,  a variable  over  Z*,  or  a nonempty  finite  sequence of  word  expres- sions.  A  word  equation  is  of  the  form  IV,  ==  W,  where  W,  and  IV,  are  word 
expressions. A  solution  to  a  word  equation  I+`,  ==  W,  is  a  mapping  from  the variables  in  the  word  equation  into  (possibly  empty)  words  which  maps  IV,  and 

IV, into  identical  words.  Thus,  the  satisfiability  problem  for  word  equations  is the existence problem  of solutions  of word  equations. 

The word  equation  satisfiability  problem  apparently  had its source with  Markov and  it  remained  an  open  problem  for  a  considerable  period,  in  spite  of  some 
significant  results.  For  example,  Hmelevskii  [5]  solved  the  problem  in  restricted cases. The  breakthrough  came with  Makanin  [6].  Since then,  the work  of Pecuchet 

[8], which  resembles Makanin's  algorithm  closely, eliminated  some of the technical details  of  the  algorithm.  This  was followed  by  the  system of  Abdulrab  [ 11, which 
implemented  the  Pecuchet version  of the  algorithm. An  intimately  related  problem  arises  from  studies  in  the  area  of  universal 
unification  (see, e.g., [ 111). Here, the problem  was not  only  to solve word  equations 

An  early  version  of  this  work  appears  in  Technical  Report  51,  Department  of  Computer  Science, Monash University,  Victoria  3 168, Australia,  March  1985. 
Author's  address: IBM  Thomas  J.  Watson  Research Center,  P.O.  Box  218,  Yorktown  Heights,  NY 10598. 

Permission to  copy  without  fee all  or  part  of this  material  is granted  provided  that  the  copies are not made or  distributed  for  direct  commercial  advantage,  the  ACM  copyright  notice  and  the title  of  the 
publication  and its date appear, and notice is given that copying  is by permission  of the Association  for Computing  Machinery.  To  copy otherwise, or to republish,  requires a fee and/or  specific permission. 
0  1990 ACM  0004-541 l/90/0100-0047  $01.50 
Journal  of  the  Association  for  Computing  Machinery,  Vol.  37,  No.  1, January  1990,  pp.  47-85. 

48  JOXAN  JAFFAR 

(or,  in  their  terminology,  equations  in  the  theory  of an  associative function),  but also to generate the  collection  of all  solutions.  A  solution  is given  in  the  form  of a 

unifier,  a mapping  from  the  variables  in  the  equation  into  word  expressions not containing  these variables. 

This  problem  of  generating  a collection  C  of  unifiers  representing  all  solutions becomes even  harder  when  two  constraints  are placed:  first,  C  must  be  minimal 
(there  is no  unifier  in  C that  is an instance  of a unifier  of the  word  equation)  and complete (every  solution  is an  instance  of  a unifier  in  C).  Second, the  generating 
procedure  must  terminate  if  C  is  finite  and  when  C  has been  generated.  Early efforts  in  word  unification  such  as those  by  Bennett  [2]  and  Nevins  [7]  do  not 
satisfy either  of these two  requirements;  Plotkin  [9]  and  Siekmann  [lo]  satisfy the first  requirement  only. 

The  main  result  of  this  paper  is  a procedure  that  meets the  two  requirements. We obtain  this  result  in  two  main  parts: first,  we present a decision  procedure  that 
is  simpler  than  Makanin's.  The  primary  point  here  is that  our  algorithm  can  be implemented  directly.  The  major  departure  from  Makanin's  work,  which  is clearly 
not  designed for an implementation,  is that  the mathematical  complications  in  our presentation  are localized  within  the proof  of correctness as opposed to being in  the 
algorithm  itself.  Our  decision  procedure  is essentially  a tree generation  process and a negative  or  positive  response is  always obtained  by  simply  examining  all  nodes 
in  the  tree  not  exceeding  a certain  level  (which  is,  of  course, determined  by  the word  equation  in  question).  The  second part  of  our  work  proves  that  there  is  a 
one-one  correspondence between the leaves of the tree and C, the desired collection of unifiers. 

2.  Generalized  Equations 
Any  word  equation  may  be expressed as a "generalized  equation,"  the  basic data structure  of our  algorithm.  This  section is devoted  entirely  to  showing  this. 

Definition.  A  generalized  equation  is a system (BS,  BD,  FF,  BR)  comprising the  following  four  entities: 
(1)  Bases. BS=(bs,,bsz,...,bs,jwhereN?  land (a)  each bsi is either  a variable  base or  a constant  base; each constant  base in 

BS  is  associated with  a letter  in  the  alphabet  Z.  (Note  that  two  distinct constant  bases in  BS may be associated with  the  same letter.) 
(b)  each variable  base bsi E  BS  is  paired  off  with  exactly  one  other  variable bsj E  BS;  we  say that  bsi and  bsj are  duals  of  one  another.  (Thus,  the 

number  of variable  bases in  BS is even.) 
(2)  Boundaries.  BD  =  (0, bd,,  bdl,  . . . , bd,),  where M  2  0. 
(3)  Base-Boundary  Functions.  FF  =  a collection  of two  total  functions: 

LEFT:  BS+  BD, RIGHT  : BS +  BD, 

(4)  Boundary  Relations.  BR  =  a conjunction  of the  following  integer  formulas: 

(4.1)  0 I  bd, for  all  boundaries  bd E  BD  different  from  0; (4.2)  zero or  more  integer  inequalities  of the  form 

bdi I  bd,  or  bdi <  b4, 
where  (bd;, bdj}  Z  BD, 

Minimal  and  Complete  Word  Unification 

(4.3)  zero or  more  integer  conjunctions  each of which  is of the  form 

(a)  bdi -  LEFT(bsk)  =  bd  -  LEFT(bsk,)  A (b)  LEFT(bsk)  c  bdi <  RIGHT(bSk)  A 

(C)  LEFT(bsk,)  C bdi c  RIGHT(bskf) 

49 

where  (bdi,  bdj)  C  BD,  (bsk, bsk,J C  BS, and  pair  bsk, bsk, are duals  of one another. 
Dejkition.  A complete generalized  equation  is a generalized equation  (BS, BD, FF,  BR),  where BR contains  a linear  ordering,  according  to  C,  of BD. 
Definition.  The  size of  a generalized equation  GE  =  (BS,  BD,  FF,  BR)  is the pair  (N,  M),  where  N  is  the  number  of  bases in  BS  and  A4 is  the  number  of 
boundaries  in  BD  different  from  0. 

We  sometimes  denote  a  generalized  equation  GE  by  GE(N,  M)  in  order  to denote  its  size. Given  two  generalized  equations  GE,(N,,  M,)  and  GEz(N2, Mz), 

we write  SZZE(GE,)  I  SIZE(GE2)  to  mean  N,  5  N2 and  MI  5  M2.  We say that two  generalized  equations  are equal if  they  can be made identical  by  a change of 

names of boundaries  and variable  bases, that  is, if  they  are isomorphic. Bases that  represent letters  (variables)  are called  constant  (resp., variable)  bases. 
For  any  pair  of variable  bases bsi and bsj, which  are duals of one another,  we write i  =  A(j)  and j  =  A(i).  Thus,  if  bsk is any  variable  base, bsak is its dual.  A  base bs is 

empty (nonempty)  if  LEFT(bs)  L  RIGHT(bs)  (resp., LEFT(bs)  <  RIGHT(bs))  is implied  by  BR.  Leji(right)  boundaries  bd  are  such  that  LEFT(bs)  =  ,bd (resp., 
RIGHT(bs)  =  bd)  for  some base bs. The  boundary  bd is involved  in  an integer  inequality  (4.2) or  an integer  equality 

(4.3a) if  bd is bdi or  bd,. The  pair  of boundaries  bd,  and  bd,  are involved  together in  an  integer  inequality  (4.2)  or  an  integer  equality  (4.3a)  if  (bd,,  bd,}  = 

(bdi,  bd,).  We write  bdi  5  bd, to  denote  the  fact that  either  bdi 5  bd, or  bd; c  bd appears in  BR,  or  that  i  =  j.  The  shorthand  bd;  <  bdj  c  bdk stands  for  bdi  < 
bd,  A  bdi  <  bdk  A  bd,  <  bdk;  similarly,  for  more  general  expressions  like bd, <  bdz <  . . - c  bd,,. We assume that  the collection  of integer inequalities  in  any 
generalized equation  is transitively  closed. We shall  often  be reasoning  about  conjunctions  of  the  form  (4.3).  The  primary 

object  in  such  reasoning  will  almost  be  eq.  (4.3a),  and  we  may  omit  explicit mention  of the associated inequalities  (4.3b) and (4.3~). For  notational  brevity,  we 
henceforth  write 

(bdi,  bs, bdj) 

to  denote  an  integer  formula  of  the  form  (4.3).  Thus,  for  example,  (bdi,  bs,,  bdj) and (bd,  bsau, bdi)  denote the  same conjunction  of the  form  (4.3). 

We shall  abuse terminology,  for  the  sake of  intuition,  by  calling  such an  object a boundary  equation.  If  we say that  a generalized equation  GE,  is exactly  the same 
as another  generalized equation  GE2 except that  GE, does (not)  contain  a particular instance  of  a boundary  equation  (4.3),  then  it  is  understood  that  GE2 also does 
(not)  contain  the corresponding  instances of (4.3b) and (4.3~). 

Definition.  A  solution  S for  a generalized equation  GE(N,  M)  =  (BS,  BD,  FF, BR )  is given  by: 

(1)  A  mapping  from  BD  into  nonnegative  integers  such  that  the  values  S(O), S(bdl),  S(bd&  . . . , S(bdM) satisfy 

(a)  S(0)  =  0, and (b)  BR  is true  under  the usual  interpretation  for  integer  formulas. 

50  JOXAN  JAFFAR 

(For  example,  from  (4. l),  we have that  S(M)  2  0 for  all  bd E  BD.)  Let  MclX denote the  largest of the boundary  values. 

(2)  A  mapping  from  BS into  possibly empty  words of the alphabet  Z such that  for all  1 I  i  I  N, the words S(bsJ,  (bsZ), . . . , S(bs,)  satisfy 

S(h)  ==  {&,,,,)  if  bs; represents a constant  base "a" if  bsi is a variable  base. 
(3)  A  word  S(GE)  of length  MAX  over the alphabet  Z  such that  for  all  bs E BS, 

S(GE)[S(LEFT(bs))  . .  S(RIGHT(bs))]  ==  S(bs), 
where  the  notation  w[i  . .  j]  stands  for  the  subword  of  W  obtained  by concatenating  the  (i  +  l)st,  (i  +  2)nd,  . . . , jth  letters of  IV. 

If  S  is  a  solution  of  some  generalized  equation  GE,  let  the  shorthand S[bd,  . .  bdz] stand for 

S(GE)[S(bdJ  . .  S(bdz)]. 
We sometimes omit  the  specification  of  a particular  solution,  for  example,  when we say GE[bd,  . .  bdz] ==  GE[bd,  . . bd,]  we mean that  the two  words 

S(GE)KWd,) . . Wddl  and  S(GE)KWd,) . . SWdl 
are identical  for  any  choice  of  solution  S. Similarly,  the  notation  bs[bd]  denotes the word 

S(GE)[S(LEFT(bs))  . .  S(bd)], 
where  S  is  some  solution  of  GE.  For  example,  the  expression  1 bsl[bd,]  1 = ] bsz[bdz] ] means that  the two  words 

S(GE)[S(SLEFT(bs,))  . .  S(bd,)]  and  S(GE)[LEFT(bsz))  . .  S(bdz)] 
are equal  in  length  for  any  choice  of solution  S of GE. 

Dtlfinition.  Let  w", where n 1  1, denote the word  ww  . . .  w (n copies). Given  a solution  S for  a generalized  equation  GE(N,  M),  we say that: 

-the  mapping  from  bases into  nonnegative  integers given  by S(O), S(bdJ,  S(bd& . . . ) S(bd,)  is the  boundary  valuation  of S; 
--MAX  is the  length  of S, -the  mapping  from  bases into  words  given  by  S(bs]),  S(bs,),  . . . , S(bs,)  is the 

base valuation  of S, -S(GE)  is the word valuation  of S, the mapping  from  boundaries  into  words given 
by  S(GE)[O  . .  bd,],  S(GE)[O,  . .  bd,],  . . . ,  S(GE)[O  . .  bd,],  is  the  subword valuation  of S, and  finally, 
-the  largest number  e such that  S(bs), for  some bs E  GE,  can be written  in  the form  w1 w5 w3, where  w2 is nonempty,  is the  exponent  ofperiodicity  (or  simply 

exponent)  of S. 
As an  example,  consider  the  word  equation  axya  ==  xabx,  where x  and  y  are variables  and  "a"  and  "b"  are  letters.  We  illustrate  E  in  Figure  la  wherein  we 

consider the case where the lengths of x  and y both  exceed one. Figure  1 b contains a  generalized  equation  GE,  which  we  have  constructed  to  be,  in  a  sense made 
precise  below,  equivalent  to  E.  Note  that  GE  contains  ten  bases and  seven boundaries.  The definitions  of the LEFT  and RIGHT  functions  of GE are obvious. 

Minimal  and  Complete  Word  Unification  51 

E 

--a-  I-X-IY-  I -a- l  I 

----I-a-I-Ll-x- X I  I  I  I  I 

I  I  I  I  I .  .  .  .  .  .  . 

(a) 

GE 

x  -  bsl,  bs3 
Y  -  bs2 -a-  I-bsl-l-bs~~  l --a- 

l  I -bsAl-...l---a-/-Ll  s..-bsA3- 
I  I  I  I -bq-.-  -bs,z- 
I  I  I  I  I  I 
;  bill  b&  bi3  bi4  b&  big 

(b) 
FIGURE 1 

Associating the bases bs2 and bsaz with  the variable  y and associating the remaining four  variable  bases with  the  variable  x,  it  is easy to  see that  for  each solution  S, of 
E, we can construct  a solution  S, of GE wherein  S,(x)  ==  &(bs,)  ==  Sz(bsal) == S2(bss) ==  S2(bsa3) and  S,(y)  ==  &(bsz)  ==  &(bs&.  Similarly,  we  can  do  the 
converse and construct  a solution  of E from  a given  solution  of GE. Let  S,  and  S,  be solutions  to  two  generalized  equations  GE,  and  GE*,  respec- 
tively.  We say that  SI is a sufix  of S2 if  GE,  and  GE2 have the  same variable  bases and  for  each such  base bs, S,(bs)  is  a  suffrx  of  S,(bs)  (i.e.,  &(bs)  is  of  the  form 

wS,(bs) where  w is a possibly  empty  word).  S,  and  S,  are equivalent  if  S,  and  S, are suffixes  of  each other.  S,  is a strict  suffix  of  S2 if  S,  is a suffrx  of  SZ and  S,  is 
not  equivalent  to S,.  For generalized equations  GE,  and  GE*, we also say that  GE, is a (strict)  suffix  of  GE,  iff  (a) for  every solution  S, of  GE,,  there  is a solution  S2 
of  GE,  such that  S,  is a (strict)  suffix  of S,,  and  (b)  for  every  solution  S,  of  GE2, there  is a solution  S,  of  GE,  such that  S,  is a (strict)  suffix  of  &.  Similarly,  GE, 

and  GE,  are equivalent  if  they  are suffixes of each other. We present now  a result  relating  a word  equation  and  its generalized  form.  Let 
S2 be a solution  of a word  equation  E and write  S,(x)  to  denote the word  assigned by S, to  the variable  x  appearing  in  E.  We say the  solution  S, of E  is equivalent  to 

a solution  S', of a generalized equation  GE if  there  is an  onto  mapping ffrom  the variable  bases in  GE  into  the  variables  in  E  such that  S,(f(bs))  ==  &(bs)  for  all 
variable  bases bs in  GE. We say that  E  and  GE are equivalent  if  for  every solution of E there  is 

an  equivalent  solution  of  GE, and vice  versa. 

GENERALIZATION  THEOREM.  Given  any  word  equation  E,  we can construct  an equivalent  generalized  equation  GE. 

52  JOXAN JAFFAR 

PROOF.  Let  E take the general form 

w,  w,  * * *  w-n ==  wn+, wn+2  * * *  wn+m, 
where  y1 z  1, m  1  1, and  I+$, 1 5  i  I  y2 +  m,  is either  a letter  or  a variable.  We construct  GE =  (KS,  BD,  FF,  BR ),  as follows.  First,  we construct  the  sets 

BS'  =  (bs,,  bs2, . . . ,  bs,+,),  and BD  =  (0,  bd,,  bd3, . . . , bd,,,}. 
Then,  we define  the  function  LEFT  and RIGHT  (with  domain  BS'): 

LEFT(bs,)  =  0,  RIGHT(bs,)  =  bdz, LEFT(  bs2) =  bdz ,  RIGHT(bs2)  =  bd,, 

LEFT(bs,-,)  =  bd,,-, ,  RIGHT(bs,-,)  =  bd,,, LEFT(bs,)  =  bd,,,  RIGHT(bs,)  =  bd,,,,, 
LEFT(bs,+,)  =  0,  RIGHT(bs,+,)  =  bd,,,, , 
LEFT(bs,cz)  =  bd,,,  ,  RIGHT(bs,,,z)  =  bd,+z, 

LEFT(bs,+,-,)  =  bd,+,-2,  RIGHT(bs,+,-,)  =  bd,,+,-,  , LEFT(bsn+,)  =  bdn+,-,  ,  RIGHT(bs,+,)  =  bd,,,,. 
Finally,  we construct  the  integer  formula  BR: 

0  5  bdz  I  bd3  :  . . .  5  bd,,  5  bd,,,,, 0  5  bd,,,  5  bd,,,,  5  . . .  5  bd,,+,-,  5  bd,,,. 

Initially,  we say that  a base bsi E  BS'  represents a variable  x  in  E  if  Wi is x.  The procedure  in  Figure  2 eventually  obtains,  for  each x  in  E,  a collection  of bases in 

GE that  represent x.  That  is, it  obtains  from  BS'  a set BS such that  any  variable  x appearing in  E is represented by a nonempty  collection  of an even number  of bases 
in  BS. Furthermore,  each base in  this  collection  has its dual  in  the collection  also. The  functions  LEFT  and  RIGHT  will  now  have  domain  BS,  and  the  desired 

GEis 

(BS,  BD,  (LEFT,  RIGHT],  BR). 
The  proof  of  correctness  of  the  construction  in  Figure  2  is  straightforward. Details  may  be  easily  obtained  by  slightly  modifying  a  similar  construction  in 

[6, pp.  137-1401.  0 

The  above  theorem  provides  an  algorithm  for  a  function  that  maps  an arbitrary  word  equation  into  a  generalized  equation.  We  shall  call  this  function 

GENERALIZE. We conclude  this  section  now  with  a few more definitions.  GE is trivially  true  if 
all  its variable  bases are empty  and  GE is satisfiable. A  generalized equation  GE is true if  either  it  is trivially  true,  or  if  all  of its constant  bases are associated with  the 

same letter and GE is satisfiable. GE is triviallyfalse  if two constant bases associated with  two  distinct  letters  possess the  same left  boundary.  GE  =  (BS,  BD,  FF,  BR) 
isfalse  if  either  it  is trivially  false, or if  there exists no  mapping  S from  boundaries 

Minimal  and Complete Word Unification  53 
These abbreviations  are used below: CASE  1: x  is represented by  exactly  one base bsi in  BS; 

CASE  2:  x  is represented by  exactly  two  bases bsi,  bsj in  BS  which  are (as yet)  not  duals  of  one another; 
CASE  3:  x  is represented by  at least three bases bsi, bsj, bsk in  BS where one of these three bases bsk has (as yet) no dual. 

BS := BS'; VAR :=  the set containing  exactly  the variables appearing in E; 
while  (VAR  is nonempty)  do [ choose a variable  x  in  VAR; 

if (CASE  1) then  [ create a new base bs'  in BS which  also represents x; 

make bsi and bs'  duals of one another; remove x  from  VAR; 
1 if  (CASE  2) then  [ 

make bsi and bsj duals of one another; remove x  from  VAR; 

1 if  (CASE  3) then  [ 

create two  new bases bs'  and bs"  which  represent x; make these two  new bases duals of one another; 

modify  the functions  LEFT  and RIGHT  to have the following: LEFT(bs')  =  LEFT(bSj);  RZGHT(bs')  =  RIGHT(bs,); 

LEFT(bs")  =  LEFT(bsk);  RZGHT(bs")  =  RZGHT(bs& bsk is removed  from  BS; 
1 1 

FIGURE 2 
into  non-negative  integers such that 
-BR  is satisfied by  S, -for  each constant  base bs, S(RZGHT(bs)) -  S(LEFT(bs))  =  1, and 

-for  each variable  base bs,, 

S(RZGHT(bs,)) -  S(LEFT(bs,))  =  S(RZGHT(bsa,)) -  S(LEFT(bsa,)). 
Finally,  GE is trivial  if  it  is either  trivially  true  or trivially  false. In  the next section, we provide  a procedure to reduce a given arbitrary  generalized 

equation  into  an  equivalent  collection  of  generalized  equations  each of  which  is either  true  or  false.  This  provides  a  decision  procedure  because we  can  detect 
whether  or  not  a  generalized  equation  is  true  or  false by  employing  a  decision algorithm  for  the  satisfiability  of  unquantified  linear  arithmetic  formulas.  (Since 
these  are  existentially  quantified  Presburger  arithmetic  formulas,  we  can,  for example,  use Cooper's algorithm  [4].)  In  the  following  section,  we then  deal with 
the problem  of extracting  the desired solutions,  if any, from  the original  generalized equation. 

Throughout  this  paper,  we  consistently  use the  symbols  E,  GE,  CGE, and  S (with  or  without  subscripts)  to  denote  word  equations,  generalized  equations, 
complete generalized equations,  and  solutions,  respectively. 

3.  The Decision Algorithm 
The main  result in  this section is a decision procedure that, when given a generalized equation  GE,  reduces it  to  a  finite  set of  generalized  equations  that  are closely 

54  JOXAN JAFFAR 

related  to  GE.  This  reduction  process is  continued  with  the  equations  in  the  set until  either  (a) a true  equation  is found,  or  (b) the  set is larger than  a given  bound 

determined  by  GE.  This  process always  terminates  and  we are  able to  conclude that  GE is satisfiable iff  (a) occurs. 

Firstly,  we  define  a  procedure  COA4PLETE  that  maps  a  given  generalized equation  into  a  finite  collection  L  of  complete  generalized  equations  CGE  as 
follows:  let  L  initially  contain  GE. So long  as L  contains  a noncomplete  equation GE,  say bd; and  bd, are two  boundaries  for  which  neither  bdi <  bd, nor  bd  <  bdi 
appear in  GE,  remove  GE  from  L  and  then  add  to  L  three  new  equations  GE,, GE2, and  GE3 : 

-GE,  is GE but  with  the boundary  inequality  bd; <  bd  added; -GE2  is GE but  with  the  boundary  inequality  bd, <  bdi added; 
-GE3  is GE but  where the boundaries  bdi and  bdj are "identified".  That  is, GE3 is obtained  from  GE  by  renaming  all  occurrences  of  bdj  by  bdi.  The  functions 

LEFT  and RIGHT  are otherwise  the  same in  GE,  as in  GE. 
The  above  process is  continued  until  L  contains  only  complete  generalized equations.  Using  a proof  by induction  on the number  of pairs of boundaries  in  GE 

which  are unrelated,  we easily have the 

COMPLETION THEOREM.  Let  L  =  COMPLETE(GE).  Then 
(a)  For  all  CGE  E  L,  SIZE(CGE)  I  SIZE(GE). (b)  GE  has  a  solution  S  implies  that  some  CGE  E  L  has  a  solution  equivalent 

to s. (c)  For  all  CGE  E  L,  CGE  has  a  solution  S  implies  that  GE  has  a  solution 
equivalent  to S. 
Next  we  define  a procedure  REDUCE  that  maps a given  nontrivial  complete generalized  equation  CGE  into  a generalized  equation  GE.  The  idea  here is that 

the  satistiability  problem  for  CGE  is equivalent  to  that  for  GE.  However,  GE is a somewhat "simpler"  equation  than  CGE.  Details  are given  below;  meanwhile,  the 
procedure  REDUCE  is defined  as follows: Let  CGE  =  (BS,  BD,  FF,  BR ),  and  let  bs, be a distinguished  base in  BS such 

that 
-bs,  is a nonempty  variable  base, -LEFT(bs,,)  is  minimal  (according  to  <)  amongst  the  left  boundaries  of  all 

nonempty  variable  bases in  BS, and -RZGHT(bs,)  is maximal  amongst  the  right  boundaries  of all  bases in  BS whose 
left  boundary  is LEFT(bs,). 
In  case there is more than  one choice for  bs,, we may arbitrarily  choose one. Let bs, be any  base different  from  bs,  and  whose left  boundary  is  minimal  amongst 

those left  boundaries  2  LEFT(bs,).  In  case there  is more  than  one choice  for  bs,, we choose one  whose length  is  minimal.  Note  that  bs, may  be an  empty  base, a 
constant  base, or  it  may  be bsau. Intuitively,  bs,, is the  "largest  leftmost  variable" base and  bs, is the  "second  leftmost"  base. Clearly  such  bs,  and  bs, exist  in  any 

nontrivial  complete  generalized equation. We proceed now  by  case analysis on  the left  boundaries  of bs,,  bsat,, and  bs,. In 
each case, we shall  produce  the  desired  GE  =  (BS',  BD',  FF',  BR'),  where  the functions  LEFT'  and  RIGHT'  comprise  FF'. 

Minimal  and  Complete  Word  Unification  55 

Case  1.  LEFT(bs,)  >  0.  All  the  nonempty  bases whose left  boundaries  are less than  LEFT(bs,)  must  be  constant  bases. Since  CGE  is  nontrivial,  all  these 

constant  bases are of length  one and so their  right  boundaries  are less than  or equal to  LEFT(bs,).  Essentially,  GE  is  obtained  from  CGE  by  deleting  these constant 
bases, deleting  their  left  and right  boundaries,  and finally  deleting  all  the boundary relations  involving  these boundaries.  Note  that  no  boundary  equations  will  be 

deleted. 
(1.1)  BS'  `%f BS  -  BS"  where  -  denotes  set subtraction  and  BY  denotes  the set  of  all  (constant)  bases E  BS  whose  right  boundary  is  less  than  or 

equal to  LEFT(bs,). (1.2)  BD'  `Zf BD  -  BD"  where  BD"  is the  subset of  BD  containing  all  nonzero 
boundaries  less than  or equal  to  LEFT(bs,). (1.3)  For  all  bs E BS'. 

LEFT'(bs)  gf  0  if  LEFT(bs)  5  LEFT(bs,); LEFT(bs)  otherwise 
RZGHT'(bs)  sf  0  if  RZGHT(bs)  5  LEFT(bs,); LEFT(bs)  otherwise 
Note  here  that  we  have  set to  zero  the  left  and  right  boundaries  of  empty bases whose left  boundaries  did  not  exceed LEFT(bs,). 
(1.4)  BR '  is  defined  to  be  BR  but  with  all  boundary  inequalities  involving boundaries  in  BD"  removed. 

Figure  3 illustrates  an example  of the above reduction  CGE  into  GE. 

Case 2.  LEFT(bs,)  =  LEFT(bsa,)  =  0.  The essential idea here is that  the pair of  bases, bs, and  bsau, are redundant.  They  can thus  be henceforth  ignored  (and 

we do this  by  making  them  empty  bases), and so too  can those boundary  relations which  are relevant  only  to  this  pair  of bases. 

Suppose there  are k  2  0  nonzero  boundaries  less than  RZGHT(bs,).  For  nota- tional  convenience,  we assume that  they  are bd,,  bd,,  . . . , bd,  and  that  bd,  <  bd* 
<  . . .  <  bdk appears in  CGE  if  k >  0. Let  J be the  set of indices  i  E  ( 1, 2, . . . , k} 
such that  bdi is involved  with  bs, in  a boundary  equation.  Since CGE  is nontrivial, these boundary  equations  must  be of the  form 

(bdi,  bs,,  bd;). 
The  following  thus  appears in  BR: 

(i)  0 <  bd,  <  bd,  <  - . .  <  bdk <  RZGHT(bs,),  and (ii)  (bd,, bs,,  bd,), i  E J C  (1, 2, . . . , k} 

(See Figure  4  where  we  have  chosen  LEFT(bs,)  <  RZGHT(bs,),  k  =  4, J=  {2, 41.) 

(2.1)  BS'  gf BS. (2.2)  BD'  Ef BD  -  BD"  where BD"  is the possibly  subset of BD  containing  all  the 

nonzero  boundaries  less than  or  equal to  LEFT(bs,). (2.3)  If  RIGHT(bs&  >  LEFT(bs,),  define  LEFT'(bs,)  sf  LEFT'(bsa,)  gf 
RZGHT'(bs,)  `!A?? RZGHT'(bQ  gf  RIGHT(bs,,);  otherwise,  define LEFT'(bs,)  gf LEFT'(bs,,)  Ef RZGHT'(bs,)  %f RZGHT'(bsa,)  sf  0. 

56 

CGE 

JOXAN  JAFFAR 

a  I I  I  - 

I  lb  I 

b*ll  I I 

;  .  .  .  .  . . . bdl  bd2  bd3 

BS  =  BSo BD  =  BOO 

GE  =  REDUCE(CGE) 

BS'  =  BSD  -  [a,  b) 

BD'  =  BDD  -  (bdl,  bd2,  bdgl 

I  b*,  I I  I 

.  .  .  ;  .  . . . 

FIGURE  3 

CCE 

BD  =  BDD BR  =  BRo  u  ((Ix+,  b*,,,  bdz), 

(bdq,  b*,,  bdq)f b*,  I  I 

I  I  b*,,  I  I 

I  bSAU  1 I 

GE  =  REDUCE(CGE) 

BD'  =  EDO -  lb+,  &f BR'  =  BRo 
I  b*V I 
I  I .  .  . 
;  bi4  big  .  . . . 

FIGURE 4 

Minimal  and  Complete  Word  Unification  57 

Thus,  bs, and  bsau become empty  bases, but  note  however,  that  we may assign their  boundaries  to  nonzero  boundaries.  For  all  bs E  BS'  different 

from  bs, and bsa,, 

LEFT  `(bs)  gf  0  if  LEFT(bs)  5  LEFT(bs,): LEFT(bs)  otherwise. 

RIGHT  `( bs) `A%' 0  if  RIGHT(bs)  I  LEFT(bs,); LEFT(bs)  otherwise. 
(2.4)  BR'  is defined  to  be BR  but  with  the  following  removed: 

-all  boundary  inequalities  involving  boundaries  in  BD",  and -the  boundary  equations  (ii). 

Case 3a 

LEFT(bs,)  =  0,  LEFT(bs&  >  0, LEFT(bs,)  =  0, RZGHT(bs,)  r  RIGHT(bs,). 

The  essential idea here is as follows:  Move  bs, so that  it  is now  not  aligned  with bs,,  but  instead  with  its  dual  bsa,.  It  is important  that  all  information  associated 
with  the "old  location"  of bs,, particularly  that  of the boundary  equations  involving bs,, is preserved. (Of  course, there  are no  such boundary  equations  if  bs, is empty 

or if it  is a constant  base.) This  is done by first duplicating  these boundary  equations in  which  we involve  bs, instead of bs,. Then  we rewrite  the old boundary  equations 
to  reflect the new position  of bs,. The  details  follow. Suppose there  are  k  L  0  nonzero  boundaries  that  are  less than  RIGHT(bs,). 

For  notational  convenience,  we assume, if  k  >  0, that  they  are bdl,  bd,,  . . . , bdk and  that  bd,  <  bdz <  - - -  <  bdk appears in  CGE.  Let  J  be the  set of  indices  i  E 

11, 2,  *.*,  k)  such  that  bdi  is  involved  with  bs, in  a boundary  equation.  (Thus, J  is  empty  if  bs,  is  a  constant  base.) If  J  is  nonempty,  let  J  =  ( 1, 2,  . . . ,  m] 
where  1 5  m  5  k.  Finally,  let  RZGHT(bs,)  be  called  bdk+,.  The  following  thus appears in  BR: 

(i)  0 <  bd,  <  bdz <  . . .  <  bdk I  bdk+, =  RIGHT(bs,),  and (ii)  (bdi,  bsY, bd,,),  i  E J =  (1, 2, . . . , m). 

(See Figure  5a where we have chosen m =  1 and k  =  2.) 
(3.1)  BY  gf  BS (3.2)  Let  m'  =  m if  bs, is empty;  otherwise,  let  m'  =  m  +  1. Then  BD'  `%`BD 

U (bd,w+, , bdzw+l, . . . , bdzw,,,). 

(3.3)  LEFT'(bs,)  gf  LEFT(bQ  and  RIGHT'(bs,)  ef  bdM+,,.  For  all  bs  E  BS' different  from  bs,,  LEFT'(bs)  gf  LEFT(bs)  and  RIGHT'(bs)  gf 

RIGHT(bs). (3.4)  BR'  is BR but  with  the  following  changes: 

(i)  above is conjoined  with 

LEFT(bs,)  <  bd,,,  <  bd,,z  <  `.  .  c  bd,,.,,,~; 
(ii)  above is replaced with  the  following  two  kinds  of boundary  equations: (iii)  (bdi,  bs,,  bdM+i)y (bdM+;, bs,, bd,,,), i  E J, and 

(iv)  if  bs, is nonempty,  (bdk+, , bs,,  bd,,,,,). 

58  JOXAN  JAF'FAR 

CGE 

BIJ =  BDo 
BR  =  BRD u  ((bdl,  bsy,  bdnl)j 

I  b*,  I 

bS"  I  bsA"  1  bsA" 

I  I  I 

I  I  I  I  I  I 

;  bi,  bi2  bi3  bi4  big  '*'  .  0  . 

.  .  .  l  . 

bd"l 

GE  =  REDUCE(CGE) 

BD'  =  BDD u  (bdM+l,  bdM+2j 
BR'  =  BRo  u  ((bdM+l,  bs,,  bdn  1, 

(bdl,  b*",  bdM+l  3 s (bd3,  bs,,,  bdM+p)l 

I  b*,  I I  bsA"  1  1  bsAU 

I  I  bS"  I  I I  I  I  I  I 
.  0  .  .  .  .  . . .  .  0  .  .  0  0  . . . . 
0  bdl  bd2  bd3  bdq  bdg  bdnl  bdM+l  bdM+2 

FIGURE  5(a) 

It  will  be shown  below  that  no  essential information  is lost  in  the  relocation  of bs,. For  example,  we can  show that  bd M+i  <  RIGHT'(bs&  is in  GE,  1 5  i  5  m, 
because GE  contains  the  following  boundary  equations  from  (iii): 

Case  3b 

(bdi,  bsu, bdM+i),  iEJ=  (1,2  ,...,  m). 

LEFT(bs,)  =  0,  LEFT(bsa,)  >  0, 

LEFT(bs,)  =  0,  RZGHT(bs,)  =  RZGHT(bs,). 

This  case is  almost  identical  to  Case 3a.  The  only  essential  difference  with Case 3a is that  no  new boundary  is created in  GE  to  represent the  right  boundary 

of  bs,.  In  Case 3a, if  bs,  were nonempty,  this  boundary  was bd,+,+,  ; in  this  case, we  use RIGHT(bsA,)  instead.  (See Figure  5b where  we have  again  chosen m  =  1 
and k  =  2.) Assume now  the  notational  convention  in  Case 3a. We then  define  that: 
(3.lb)  BS'  is BS. (3.2b)  BD'  is BD 

U  (bdM+,,  bdM+z,  . . . , bdM+,,J. (3.3b)  LEFT'(bs,)  =  LEFT(bs&  and  RZGHT'(bs,)  =  RIGHT(bsAu).  For  all 

bs  E  BS'  different  from  bs,,  LEFT'(bs)  =  LEFT(bs)  and  RIGHT'(bs)  = RIGHT(bs). 

Minimal  and Complete Word UniJication 

CGE 

59 

BD  =  BDo 
BR  =  BRD u  {(bdl,  bs,,  bd,$) 

. . 

I  bsA"  1  bsA" I  I  I 
I  I  I  I 
.  l  0  .  .  .  .  l  . 

bd"l 

GE  =  REDUCE(CGE) 

BD'  =  BDo  u  {bdM+lj 
BR'  =  BRo  u  ((bdM+l,  bsy,  bd,  ), 

(bdl,  bs,,,  bdM+l  9 Ii (bd3,  bsu,  b++p)f 

I  bsA"  1  I  bsAU  I 
I  I  1  bS"  I I  I  I 
.  l  Cl  .  .  .  .  l  0  . 

bd"l  bdM+l 

FIGURE 5(b) 

(3.4b)  BR'  is BR but  with  the  following  changes: 

(i)  above is conjoined  with 

LEFT(bs,)  <  bd,,,  <  bdM+z c  . . -  c  bd,,,; 
(ii)  above is replaced with  the following  boundary  equations: (iii)  (bdi, bs,, bdM+;), (bdM+i, bsY, bdni), i E J. 

Note  that  the boundary  equation  (iv)  in  Case 3a is not  needed here. 

Case 4a 

LEFT(bs,)  =  0, LEFT(bsA.,) >  0, LEFT(bs,)  >  0, LEFT(bs,)  <  RIGHT(bs,). 

Suppose there  are k  -  1 2  0 nonzero  boundaries  that  are less than  LEFT(bs,). For  notational  convenience,  we assume that  they  are bdl,  bdz, . . . , bdk-, and that 
bd, <  bdz c  - - .  <  bdk-, appears in  CGE. Let  LEFT(bs,)  be called  bdk. Let  J be thesetofindicesiE(1,2,...,  kj  such that  bdi is involved  with  bs, in  a boundary 
equation.  For  notational  convenience  again,  we assume that  J, if  it  is nonempty, 

60 

CGE 

JOXAN  JAFFAR 

BD  =  B&J  u  (bdl,  bdz,  bdj,  bdql BR  = 

NJ  u  f(bdl,  bs,,,  bd+ 

(bd2,  bs,,  bdn2)1 

I  b*"  I  1  bsA" 

I 

I 
I  k,  I I  I  I  I  1 

.  0  0  .  .  .  .  .  0  0  . . . . 
0  bdl  bd2  bd3  bdq  bd5  4  p"2 

GE  =  REDUCE(CGE) 

BD'  =  BDg  u  (bdM+l,  bdn+zl BR'  =  BRg 

I  bs,  I  1  bsA,  1 I  I 

I  bsv  I  I  I 
I  I  I LEFT(bsA,)  I  I .  .  .  .  .  .  .  . . .  .  ,  .  .  .  .  . 
0  bdg  "d,l'J%2bdM+lbdM+2 

FIGURE 6(a) 

is (1, 2,.  . . , m) where  1 5  m 5  k. The  following  thus  appears in  BR: 

(i)  0 <  bd,  <  bdz <  . . .  <  bdk, and (ii)  (bd,, bs,,  bdni), 1 5  i  5  m I  k. 

(See Figure  6a wherein  we chose bs, to be different  from  bsa,, k =  4, m =  2 and  so J=  (1, 21.) 
(4.1)  BS'  gf BS. (4.2)  BD'  5~~ (BD  -  (bdl,  bdz, . . . , bdkJ) 

U  BD",  where  BD"  contains  p  =  k  -  m (0 5 
p  5  k) new boundaries  bdM+l, bd,+,,  . . . , bdM,.  Thus,  while  we delete the  k  smallest  boundaries,  bd,,  bdz,  . . . ,  bdk, we  add  a  new  boundary  for 

each  one  of  these  that  were  not  involved  in  a  boundary  equation  (i.e., for  each bdi where  i  4  J).  The  reason why  we need not  add a new boundary 
for  every one of  these k  boundaries  is as follows:  the  k  boundaries  bdl , bdz, . . . ) bdk, in  CGE  pertain  to  the  base bs,.  The  new boundaries  in  GE  are to 
pertain  to  the  dual  base bs AU in  such a way  that  they  form  a counterpart  to these k boundaries.  There  is no  need to  introduce  new boundaries  for  those 
boundaries  that  were  already  involved  in  a  boundary  equation  in  CGE because the  counterparts  are already  in  CGE  and  hence remain  in  GE. 

Minimal  and  Complete  Word  UniJication 

CGE 

61 

BD  =  BDo  u  (bdl,  bd2,  . . .  ,  bd5J 
BR  =  BRo  u  {(bdl,  bs,,  bd,l), 

(bd2,  bs,,  bdn2)f 

I  bS"  I  bsA" 

I  I 

;  bil  b;2  b:3  b&  bi15  big 

. . .  .  ;d,l;dn2 

GE  =  REDUCE(CGE) 

;;I  q  $I  u  lbdM+l, 

-  0 

LEFT'(bs,)  =  RIGHT'(bs,)  =  0; LEFT'(bsA,)  =  RIGHT'(bsA,)  =  RIGHT(bsA,) 

I . 
'  bdM+3 1 

.  . .  .  .  .  .  .  .  . . .  .  .  .  .  . 0 
bd,lbd,2bdM+1  ...  bdM+3 

FIGURE 6(b) 

(4.3)  LEFT'(bs,)  `Zf  0,  and  RIGHT'(bs,)  gf  RIGHT(bs,).  If  p  #  0,  then LEFT  `(bsa,,) `&f bd,,,.  If  p  =  0,  then  bdk  must  be  involved  with  bs,  a 

boundary  equation  of the  form  (bdk, bs,,  bd,,);  in  this  case, LEFT'(bs,,)  gf bd,,,. Defining  now  RIGHT'(bsa,)  `&' RIGHT(bs&  we  are  done  with  bs, 
and  bsA,. Consider  next  bs,: If  bs, 1s bsA,, then  LEFT'(bs,)  and  RZGHT'(bs,)  have 

already  been  defined  above.  Otherwise,  if  bs, is  empty  and  if  p  =  0,  then define  LEFT'(bs,)  gf RIGHT'(bs,)  gf bd,,,. Otherwise,  LEFT'(bs,)  ef 0 and 
RZGHT'(bs,)  Gf RZGHT(bs,).  For  all  bs  E  BS'  different  from  bs,,  bsau, and  bs,: 

LEFT'(&)  gf  ytbs)  if  LEFT(bs)  >  bdk; otherwise. 
Finally,  for  all  bs E  BS'  different  from  bs,,  bsa,,  and  bsY, RZGHT'(bs)  `Sf RIGHT(bs). 
(4.4)  BR'  is  BR  but  with  the  following  changes: all  boundary  inequalities  and boundary  equations  involving  boundaries  from  (bdl ,  bd,,  . . . ,  bdk)  are 

removed,  and the  following  boundary  inequality  is added: 

LEFT(bsA,,)  <  bd,,, c  . . .  <  bd,,,, c  bd,,,  <  bd,+,+z <  . . .  <  bd.v, 
Case 4b 

LEFT(bs,)  =  0,  LEFT(bs,,)  >  0, LEFT(bs,)  >  0,  LEFT(bs,)  2  RZGHT(bs,). 

62  JOXAN JAFFAR 

This  case is almost  identical  to  Case 4a. The  only  essential difference  is that  bs, and 

bsa,  become empty  bases in  GE  here. We use the same notational  conventions as in  Case 4a except that  we let  RIGHT(bs,),  as opposed to  LEFT(bs,),  be called 

bdk.  Note  the  similarities  between  parts  4.lb,  4.2b,  and  4.4b  below  to  the  above parts  4.1,  4.2,  and  4.4,  respectively.  (See Figure  6b  wherein  we  chose  k  =  6, 
m  =  2, and  so J=  (1, 21.) 
(4.1 b)  BS'  is BS. (4.2b)  Let p  =  k  -  m  as in  (4.2). If  p >  1, then  BD'  is (BD  -  (bd,,  bdz,  . . . , bd,)) 

U  BD",  where  BD"  contains  p  -  1 new  boundaries  bdMcl,  bdM+z,  . . . , bdM+pp-,; otherwise, BD'  is simply  (BD  -  (bdl,  bd,,  . . . , bd,)).  Note  that  we 
introduce  here possibly  one less new boundary  than  in  4.2. This  is because we now  have a boundary  for  LEFT'(bs,,),  namely  RIGHT(bs,,). 
(4.3b)  LEFT'(bs,)  gf  RIGHT'(bs,)  Ef 0  and  LEFT'(bs&  `%lf RIGHT'(b&j  sf RIGHT(bs,,).  Thus,  both  bs,  and  bsau become empty  bases. For  all  bs  E 

BS'  different  from  bst, and  bsa,, 

LEFT  `( bs)  gf  LEFT(  bs)  if  LEFT(bs)  >  RIGHT(bs,), o  otherwise. 
RIGHT  t ( bs) `i$  ~HT(bs)  if  RZGHT(bs)  >  RIGHT(bs,), otherwise. 
(4.4b)  BR'  is  BR  but  with  the  following  changes: all  boundary  equalities  and boundary  equations  involving  boundaries  from  fbd,  ,  bdz,  . . . ,  bdkJ  are 

removed,  and the  following  boundary  inequality  is added: 

LEFT(bsa,)  <  bd,,,  <  . . .  <  bd,,,  <  bdM,,  c  bd,w+z <  . . .  <  bd,++,. 
Thus,  we have our  procedure REDUCE.  We can now  state formally  the required relationship  between  a  nontrivial  complete  generalized  equation  CGE  and  its 

reduced form  GE  =  REDUCE(CGE): 

REDUCTIONTHEOREM 
(a)  The  number  of  bases  in  GE  is  at  most  that  in  CGE,  and (b)  GE  is  a  suflx  of  CGE. 

PROOF IN  CASE 1.  That  property  (a) holds  is obvious  since only  constant  bases are deleted from  CGE  to obtain  GE.  We now  prove  one part  of(b),  that  is, if  CGE 
has a solution  S, we show that  GE  has a solution  S'.  The  essential idea is this:  Let w1 be the  nonempty  subword 

S(CGE)[O  . .  LEFT(bs,)]. 
Thus,  the  word  valuation  S(CGE)  is  of  the  form  wI w2 for  some word  w2. We then  define  S'(GE)  to  be wz. The  details  follow: 

(i)  S'(bd)  =  S(bd)  -  S(LEFT(bs,),  for  all  bd  E  BD'. (ii)  S'(bs)  ==  S(bs),  for  all  bs E  BS'. 
(iii)  S'(GE)  is the  (strict)  suftix  of S(CGE)  such that  S(CGE)  ==  wI S'(GE). 

That  S '  is indeed  a solution  of  GE  is straightforward  to  verify.  First,  S '  satisfies BR'  because all  the  boundary  relations  in  CGE  that  involve  boundaries  in  BD' 

also appear in  GE.  That  S'  maps dual  bases to  the  same word  follows  from  (ii). Let  z  =  S(LEFT(bs,),  that  is, z  =  1 wI 1. Finally,  we show that  S `[LEFT'(bs)  . . 
RIGHT'(bs)]  ==  S'(bs)  for  all  bs E  BS'. 

Minimal  and  Complete  Word  Unification  63 

That  this  holds  for  the  special  case LEFT'(bs)  =  0  can  be  easily  verified  as follows.  Let  bdL  and  bdR,  respectively,  denote  the  boundaries  LEFT  `(bs)  and 

RIGHT  `(bs),  then: 

-S'[O  .*  S'(bdR)]  ==  S'[O  . .  S(bdJ  -  z],  by  (i); -S'[O  . .  S(bdR)  -  z]  ==  S[z  . .  S(bdR)],  by (iii); 

-S[z  * * S(bdR)]  ==  S[LEFT(bs)  ..  S(bdR)],  since LEFT'(bs)  =  0 implies  that Li?FT(bs)  =  z; 

-S[LEFT(bs)  . .  S(bdR)]  ==  S[LEFT(bs)  9 .  S(RZGHT(bs)],  since RZGHT'(bs) =  RZGHT(bs); 

-S[LEFT(bs)  . .  RZGHT(bs)]  ==  S(bs),  since S is a solution  of  CGE; -S(bs)  ==  S'(bs),  by  (ii). 

The  remaining  argument,  that  S'[LEFT'(bs)  . .  RZGHT'(bs)]  ==  S'(bs)  for  all bs  E  BS'  such  that  LEFT'(bs)  >  0,  follows  easily  from  the  following  chain  of 

equalities: 
-S'[S'(bdJ  . .  S'(bdR)]  ==  S'[S(bdJ  -  z  . .  S(bdR)  -  z],  by  (i); -S'[S(bdL)  -  z  . .  S(bdR)  -  z]  ==  S[S(bdL)  . . S(bdR)],  by  (iii); 

-S[S(bdL)  . .  S(bdR)]  ==  S[LEFT(bs)  . .  RZGHT(bs)],  since LEFT  and RIGHT are the  same as LEFT'  and RIGHT',  respectively; 

-S[LEFT(bs)  . .  RZGHT(bs)]  ==  S(bs),  since S is a solution  for  CGE; -S(bs)  ==  S'(bs),  by  (ii). 

Thus,  S'  is a solution  for  GE. Finally,  that  S'  is a suffrx  of S (in  fact, S ' is equivalent  to  S) is given  by (ii)  and 
the fact that  BS  and BS'  contain  the same variable  bases. To  prove  the  remaining  part  of(b),  suppose that  S'  is a solution  of  GE.  Using 
the notational  convention  in  Case 1 in  the definition  of REDUCE,  let  bdo =  0 and bdk =  LEFT(bs,,).  We can then  define  a solution  S for  CGE  as follows: 

(i)  Consider  first  the  boundaries  in  CGE  that  do  not  appear  in  GE;  these are (0  =  bdo,  bd, ,  . . . ,  bdk  =  LEFT(bs,)).  We now  define  S(bdi),  0  <  i  5  k,  as 

follows: 

S(bdi-1)  +  1  if  bdi-1  and  bdi  are the  left  and  right S(bdi)  = 

i 

boundaries  respectively  of  a constant  base; SW-,)  +  j  for  any  positive  number  j,  otherwise. 

(Recall  that  there  is  no  nonempty  variable  base whose left  boundary  is  less than  bdk.) 
(ii)  Consider  now  the  remaining  boundaries  in  BD;  define  S(bd)  =  S'(bd)  + S(bdk),  for  all  bd  E  BD'. 
(iii)  S(bs)  ==  S'(bs),  for  all  variable  bases bs E  BS'. (iv)  S(CGE)  is the word  such that  S(CGE)  ==  wI w2 . . .  wJ'(GE)  where for  each 

llilk, 

Wi  = 

1 

"  99 a  if  bdi-1  and  bdi  are the  left  and  right 

boundaries,  respectively,  of  a constant base representing  "a"; 

any  word  of  length S(bdi)  -  S(bdi-1)  otherwise. 

We proceed to  show that  S is indeed  a solution  for  CGE.  The  set of boundaries  in CGE  and  GE  differ  only  because GE  does not  have the  nonzero  boundaries  less 

64  JOXAN JAFFAR 
than  bdk.  However,  none  of  these  boundaries  are  involved  in  any  boundary equation  in  CGE;  their  only  appearance in  BR  is such that 

O<bd,<bd2<  ...  cbdk. 
Thus,  S gives a boundary  valuation  (i)  and  (ii)  satisfying  BR.  The  only  nonempty bases that  appear  in  CGE  but  not  in  GE  are  those  constant  bases mentioned 

in  (iv).  S clearly  maps these constant  bases into  the  appropriate  letters.  For  the variable  bases, S  has  the  same base valuation  as S'.  It  remains  to  show  that 
S[LEFT(bs)  . .  RIGHT(bs)]  ==  S(bs)  for  all  bs  E  BS.  That  this  is  true  for  all empty  bases and  all  the  (constant)  bases bs mentioned  in  (iv)  is immediate. 

We  now  show  that  this  is  also  true  for  the  remaining  bases, that  is,  for  all nonempty  bs  E  BS'.  Let  z  =  S(bdk).  Let  bd,  and  bdR,  respectively,  denote  the 
boundaries  LEFT(bs)  and RIGHT(bs)  for  any  bs E  BS. Once again, consider  first  the class of nonempty  bases bs such that  S(LEFT(bs)) 

=  z, or equivalently,  S'(LEFT(bs))  =  0. The  proof  is as follows: 
-S[z  * * S(bdR)]  ==  S[z  . .  S'Wd  + ~1, by (9; -S[z  - * S'(bdR)  +  z]  =  S'[O  . .  S'(bdR)],  by  (iv); 

-S'[O  * * S'(bdR)]  ==  S'[LEFT'(bs)  . .  S'(bdR)],  since LEFT'(bs)  =  0 implies that  LEFT(bs)  =  z; 
-S'[LEFT'(bs)  . .  S'(bdR)]  ==  S'[LEFT'(bs)  . .  RIGHT'(bs)],  since  bdR  = RIGHT(bs)  =  RIGHT'(bs); 
-S  `[LEFT  `(bs)  . .  RIGHT'(bs)]  ==  S'(bs),  since S'  is a solution  for  GE, -S'(bs)  ==  S'(bs),  by  (ii). 

It  now  remains  to  consider  the  nonempty  bases  bs  E  BS'  such  that S(LEFT(bs))  >  z, or  equivalently,  S'(LEFT(bs))  >  0. The  proof  is as follows: 
-S[bdL  . .  bd,]  ==  S[S'(bdJ  +  z  . .  S'(bdR)  +  z],  by  (i); -S[S'(bdJ  +  z  . a S'(bdR)  +  z]  =  S'[S'(bdJ  a .  S'(bdR)],  by  (iv); 
-S'[S'(bdL)  . .  S'(bdR)]  ==  S'[LEFT'(bs)  . .  RIGHTI(b  since LEFT(bs)  = LEFT'(bs)  and RIGHT(bs)  =  RIGHT'(bs); 
-S'[LEFT'(bs)  . .  RZGHT'(bs)]  ==  S'(bs),  since S'  is a solution  for  GE, -S'(bs)  ==  S(bs),  by  (ii). 

Thus,  S is a solution  for  CGE.  That  property  (b)  holds  follows  easily from  (iii), which  says that  S and S'  are, in  fact, equivalent. 
PROOF IN CASE 2.  We consider here only  the subcase LEFT(bs,)  <  RIGHT(bs,); the  proof  for  the  alternative  case is similar  and,  in  fact, easier. Now,  that  property 
(a) holds  is obvious  since GE  has the  same bases as CGE  except that  GE  does not contain  the pair  bs,  and  bsA,. 

To  prove  one  half  of(b),  suppose that  GE  has a solution  S'.  A  solution  S for CGE  can be constructed  as follows. 

(i)  Let  there  be  m  2  0  boundaries  in  BD".  (Thus,  m  I  k.)  By  our  notational convention  on  boundary  subscripts,  they  are  bd,,  bd2,  . . . ,  bd,,,  if  m  2  1. 

Thus,  if  LEFT(bs,)  >  0,  then  m  I  1 and  LEFT(bs,)  =  bd,,,.  Now  define S(bd,)  =  1 and 

S(bdi)  =  1 +  S(bd,-,)  =  i,  for  2  5  i  5  m. 
For  the  remaining  CGE  boundaries,  that  is, for  all  bd  E  BD',  define 

S(bd)  =  S'(bd)  +  S(LEFT(bs,))  =  S'(bd)  +  m. 

Minimal  and  Complete  Word  Unification  65 

(ii)  Define  S(bs,)  and  S(bsa,) to  be wS'(GE)[O  . .  S'(bdk)]  where  w is any  word of  length  m.  For  the  remaining  bases, that  is,  for  all  bs  E  BS'  -  (bs,,,  bsa,), 

define  S'(bs)  =  S(bs). (iii)  S(CGE)  is the word  wS'(GE). 

We now show that  S is a solution  for  CGE.  Since CGE  is nontrivial,  all boundary equations  therein  involving  bs,  are of the  form 

(bd,  bsu, bd) 
and  hence are trivially  satisfied by  S. Since these boundary  equations  are the  only ones in  CGE  that  do  not  appear in  GE,  S satisfies all  the  boundary  equations  in 

CGE.  The only  other boundary  relations  in  CGE  that  are not  in  GE  are inequalities that  involve  the  boundaries  in  BD".  These too  are clearly  satisfied by  (i)  above. 
Thus,  S satisfies BR. That  S  maps  the  empty  bases into  empty  words,  constant  bases into  the 
appropriate  letters, and that  S maps each pair  of variable  bases into  the same word is immediate  to  see. We show now  that  S[LEFT(bs)  . .  RIGHT(bs)]  ==  S(bs)  for 
all  nonempty  bs E BS.  This  is clearly  true  for  the pair  bs,  and bsa,.  Consider  next the bases bs where LEFT(bs)  =  bd,;  clearly  LEFT'(bs)  =  0 for these bases bs. The 

following  chain  of reasoning gives the proof  for  this  class of bases: 
-S[LEFT(bs)  . .  RIGHT(bs)]  ==  S[m  . .  RIGHT(bs)],  since LEFT(bs)  =  m; -S[m  . .  RZGHT(bs)]  ==  S'[O  . .  S(RIGHT(bs))  -  m],  by (iii); 

-S'[O  * * S(RZGHT(bs))  -  m]  ==  S'[O  . .  RZGHT'(bs)],  by  (i); -S'[O  a. RIGHT'(bs)]  ==  S'[LEFT'(bs)  . .  RlGHT'(bs)],  since LEFT'(bs)  = 

0; -S'[LEFT'(bs)  . .  RZGHT'(bs)]  ==  S `(bs),  since S '  is a solution  for  GE; 
-S'(bs)  ==  S(bs),  by  (ii). 
The  remaining  bases bs  to  be  considered  are  those  nonempty  bases in  BS'  - (bs,,  bsa,)  such that  LEFT'(bs)  >  0. We have, for  these bases, the  following: 

-S[LEFT(bs)  . .  RIGHT(bs)]  ==  S[S'(LEFT'(bs))  +  m  . .  S'(RZGHT'(bs))  + ml, by (9; 
-S[S'(LEFT'(bs))  +  m  ..  S'(RIGHT'(bs))  +  m]  ==  S'[LEFT'(bs)  .. RIGHT'(bs)],  by  (iii); 
-S'[LEFT'(bs)  . .  RIGHT'(bs)]  ==  S `(bs),  since S '  is a solution  for  GE, -S'(bs)  ==  S(bs),  by  (ii). 

Thus,  S is indeed  a solution  for  CGE.  That  (b) holds,  that  is, that  S'  is a suffix of  S,  follows  directly  from  (ii)  and  the  fact  that  S'(bs,)  and  S'(bs,,)  are  empty 
words. The  converse proof  of  (b),  that  from  a solution  S of  CGE  one  can  construct  a 

solution  S '  of  GE  where  S '  is  a  suffix  of  S,  is  similar  and  slightly  easier. It  is therefore  omitted. 

PROOF IN CASE 3.  In  what  follows,  let  k 1 denote  k  +  1 for  Case 3a, and  let  k I denote k  for  Case 3b. 
That  (a) holds is immediate  to  see. We prove  one part  of(b)  as follows.  Suppose S is a solution  for  CGE.  Define  a solution  S '  for  GE  as follows: 

(i)  S'(bd)  =  S(bd),  for  all  bd  E  BD. (ii)  S'(bdM+i)  =  S(LEFT(bs&)  +  S(bdi),  i  E  (1, 2, . . . , kl}. 
(iii)  S'(bs)  ==  S(bs),  for  all  bs E  BS'. (iv)  S'(GE)  ==  S(CGE). 

66  JOXANJAFFAR 

That  S'  is  indeed  a  solution  of  GE,  which  in  fact  is  equivalent  to  S,  is straightforward  to  check. 

We can  prove  the  remaining  part  of  (b)  once  again  by  showing  that  if  S '  is  a solution  for  GE,  we can  construct  a solution  S for  CGE.  In  fact, we may  simply 
define  S to  be the  restriction  of S'  to  the  boundaries  BD  of CGE. 

PROOF IN  CASES 4a  AND  4b.  That  (a)  holds  is  yet  again  obvious.  We  show that  (b)  holds  in  the  Case 4a,  that  is,  where  LEFT(bs,)  <  RZGHT(bs,).  Thus, 

LEFT(bs,)  =  bdk.  The  proof  below  for  the  alternative  Case  4b,  that  is, RIGHT(bs,)  5  LEFT(bs,),  needs only  a simple  modification  and hence is omitted. 
An  assumption  we make  for  notational  convenience  is that  J  =  ( 1, 2,  . . . ,  1 J  I ); no  generality  will  be lost. 

Recall  that  the  boundaries  bdM+iy  1 5  i  I  p,  were created in  GE  to  replace the m boundaries  which  lay  between 0 and  LEFT(bs,)  in  CGE  and were not  involved 
in  a boundary  equation. As  above,  we  first  prove  one  part  of  (b)  by  supposing  that  S is  a solution  for 

CGE  and  then  constructing  a  solution  S '  for  GE.  Clearly  the  following  defines such a solution  S `: 

(i)  S'(bd)  =  S(bd)  -  S(LEFT(bs,)),  for  all  bd  E  BD  U  BD'. (ii)  S'(bdM+i)  =  S(LEFT(bs,,))  -  S(LEFT(bs,))  +  S(bdlJl+i),  for  all  i  E 

{1,2,.  . .)  m). (iii)  S'(bs)  ==  S(bs),  for  all  bs E BS'  different  from  bs,  and  bsau. 
(iv)  For  bs =  bs,  or  bs =  bsau, S'(bs)  is such that  S(CGE)[O  . .  RIGHT(bs,)]  == S(CGE)[O  . .  S(LEFT(bs,))]S'(bs). 
(v)  S'(GE)  is such that  S(CGE)  ==  S(CGE)[O  . .  S(LEFT(bs,))]S'(GE). 

That  S '  is a suffix  of  S follows  from  (iii)  and  (iv).  The  remaining  part  of  (b)  is easily proven  along  similar  lines.  Cl 

The  reduction  tree  for  a  non-false-complete-generalized  equation  CGE  is  a finitely  branching  unordered  tree  whose root  node  is  labeled  with  CGE,  and  all 
nodes n labeled with  CGE'  in  the tree are such that  CGE'  is a non-false-complete- generalized equation  and 

-if  CGE'  is true  or  if  CGE'  is equal  to  the  label  of an ancestor node,  then  yt is a leaf; 

-otherwise,  the children  of n  are the  nodes which  are each labeled with  a distinct nonfalse  complete  generalized equation  in 

COMPLETE(REDUCE(CGE')). 

The  reduction  tree for  a (not  necessarily complete)  non-false-generalized  equation GE  is a finitely  branching  unordered  tree whose root  node is labeled with  GE,  and 

whose  immediate  subtrees  are  the  reduction  trees  of  the  non-false-complete- generalized equations  in  COMPLETE(GE). 

We  can  now  describe  our  decision  procedure  for  GE  simply  as reduction  tree generation  procedure  for  GE.  Since reduction  trees can be infinite,  the  remainder 
of this  section concentrates on the termination  criteria  for  our  procedure.  So, given GE,  we generate its reduction  tree in  some systematic way, stopping  with  a positive 
answer  when  a  true  equation  is  encountered.  The  correctness  of  this  response follows  easily from  the  Completion  and  Reduction  Theorems  that  imply  that  any 

equation  GE  is  satisfiable  iff  one  of  the  children  equations  is  satisfiable.  The Completion  and  Reduction  Theorems  also help  to  show that  a true  equation  will 
indeed be found  when  GE  is satisfiable. This  is firstly  because each satisfiable child 

Minimal  and Complete Word Unification  61 

equation  (and there must be at least one) has a solution  that  is a suffix  of a solution of  GE.  The  second  point,  proven  below,  is  that  some  child  of  GE will  have  a 

solution  that  is a strict  suffix  of  a solution  of  GE. Clearly,  it  is impossible  to  have an  infinite  sequence of  satisfiable  generalized  equations  containing  an  infinite 
subsequence of equations,  each of which  is a strict  suffix  of its predecessor. What  remains,  therefore,  is to  have the tree generation  process terminate  with  a 

negative response precisely  when  CGE is unsatisfiable.  To  do this,  we employ  the Periodicity  Lemma  below  to  show that  if  CGE(N, M)  is satisfiable, then,  at most, 
h(N,  M)  equations  need to  be considered  for  satisfiability,  where  h  is  a recursive function.  In  other  words,  we can place a bound  on  the  length  of  each path  of the 
reduction  tree for  CGE that  we need to  generate. Define 

f(N)  gf  2  +  (6N)2(2d'  and g(N,  M)  `isf A4 *  (f(2(N  +  2M)(M  +  2)) +  1). 
The  first  lemma  is  a  backbone  result  for  the  proof  of  correctness of  Makanin's algorithm.  It  originated  in  [3]  and  a proof  can be found  in  Lemma  1.3 in  [6].  Let 
E(N)  denote  that  the  word  equation  E  contains  N  occurrences  of  letters  and variables, that  is, N is length of E. 

PERIODICITY LEMMA [3]  (FOR  WORD  EQUATIONS).  ZfE(N)  is satisfiable, the exponent of periodicity  of one of its solutions is at most f (N). 
PERIODICITY  LEMMA  (FOR  GENERALIZED  EQUATIONS).  If  GE(N,  M)  is satisfi- able, the exponent of periodicity  of one of its solutions is at most g(N, M). 
PROOF.  We may as well  assume that  GE is complete because of the Completion Theorem.  We  firstly  transform  GE into  another  satisfiable  complete  generalized 
equation  CGE such that  CGE has a solution  with  exponent  e implies  that  GE has a solution  with  exponent  5  e. We require,  however,  that  every boundary  in  CGE 
be a left  or  right  boundary,  and that  there be no boundary  equations. Consider  any boundary  bd in  GE that  is either  involved  in  a boundary  equation 
or  is  not  a left  or  right  boundary.  If  there  is  no  such bd, CGE  =  GE and  we are done. Otherwise,  consider  separately the two  cases: 

(a)  if  bd is not  involved  in  any boundary  equation,  then  create a pair  of dual  bases bs and  bs',  both  of  which  have  0  and  bd as their  left  and  right  boundaries, 

respectively; (b)  if  bd is involved  in  a boundary  equation  say: (bd, bs;, bd'),  then  create a new 
pair  of dual  bases bs and bs' where LEFT(bs)  = LEFT(bsi),  RZGHT(bs) = bd, and LEFT(bs')  = LEFT(bs&  RIGHT(bs')  =  bd'.  Now remove this boundary 
equation. 
Clearly,  repeated application  of  (a) and  (b)  results in  the  desired CGE(N',  M). Furthermore,  N ' does not exceed the sum of N and twice the number  of boundaries 

in  GE(N, M).  Thus,  N'  5  N  +  2M. The  next  step in  this  proof  is to  transform  CGE(N',  M)  into  a satisfiable word 
equation  E  such that  E has a solution  with  exponent  e implies  that  CGE(N',  M) has a solution  with  exponent  M(e  +  1). We do this  as follows: 

For  notational  convenience,  let  bdO =  0.  Associate to  each pair  of  consecutive boundaries  (bdi-1, bdi) in  CGE,  1 5  i  5  M,  a variable  wi.  Now,  for  each pair  of 
dual  variable  bases bs and  bs'  in  CGE, construct  the word  equation 

WiWi+I  *"  wj  ==  wi*  wit+,  .  .  .  w,,, 

68  JOXAN  JAFFAR 

where LEFT(bs),  RIGHT(bs),  LEFT(bs'),  RIGHT(bs')  are bd;-1, bdj,  bdi,-1  and bd,,, respectively.  For  each constant  base bs in  CGE,  say it  represents the constant 

"a",  construct  the word  equation 

wi ==  a, 
where bd,-,  and  bdi are the  left  and  right  boundaries  of bs, respectively. There  are three  points  to  note.  First,  the  resulting  system of  word  equations  is 

satisfiable;  it  is  clear  from  a given  solution  of  CGE  that  a  solution  of  the  word equations  can  be  constructed.  Second, the  system consists  of  at  most  N'  word 
equations  each of  which  has a length  not  exceeding  2M.  Third,  the  system has a solution  with  exponent  e implies  that  CGE  has a solution  with  exponent  less than 
or equal  to M  * (e +  1). This  is because a variable  in  CGE  corresponds to  at most M  variables  in  the  system of word  equations.  If  M  =  2, then  clearly  the  exponent 
in  CGE  is  at  most  1 +  2e. If  M  =  3,  this  number  becomes 2  +  3e. In  general, therefore,  the  number  is (M  -  1) +  M  *  e 5  M(e  +  1). 

Now  consider  the general property  that  a system of two  word  equations,  say 

has precisely the  same solutions  as the  single word  equation 
where  "a"  and  "b"  are any  two  distinct  letters.  Note  that  such  a combination  of two  word  equations,  each of  whose lengths  are bounded  by,  say nl  and  n2, results 

in  a word  equation  whose length  is bounded  by  ~1~ +  n2 +  4. Consider  now  the  above-mentioned  system  of  at  most  N'  word  equations. 
Performing  the above combination  N'  -  1 times  on  this  system to  obtain  a single word  equation  E,  we have that  the length  of E  does not  exceed 

(N'  *  2M)  +  (N'  -  1) *  4  <  (N'  *  2M)  +  4N'  5  2(N  +  2M)(M  +  2). 
Applying  the  Periodicity  Lemma  for  word  equations,  we have  that  E,  since it  is satisfiable,  has a solution  with  exponent  e where  e <f(2(N  +  2M)(M  +  2)).  This 

implies  that  CGE  has  a  solution  with  an  exponent  not  exceeding  M(f(2(N  + 2M)(M  +  2))  +  1). That  is,  CGE  has a solution  with  an  exponent  not  exceeding 
g(N,  M).  Thus,  GE has a solution  with  an exponent  not  exceeding g(N,  M).  Cl 

In  what  follows,  we define  the  notion  of a proper  generalized equation.  The  idea here is that  if  a proper  equation  CGE(N,  M)  contains  more than  a certain  number 

of  boundaries,  then  every  solution  of  CGE  will  have  an  exponent  exceeding  a certain  number  depending  on  N  and  M.  Now  recall  the  above  reduction  tree 
generation  process for  a  complete  generalized  equation  CGE(N,  M).  We  argue that,  if  CGE  is proper,  then  so are all  the equations  CGE'  in  this  tree. It  will  follow 
that  for all K there exists M  ' such that  if  CGE'  contains  more than  M  ' boundaries, then  the  exponent  of  any  solution  of  CGE'  exceeds K.  Thus,  by  the  Periodicity 

Theorem,  choose K  =  g(N,  M)  so that  we need never generate any node in  the tree whose label  is a complete  generalized equation  with  more than  K boundaries.  This 
gives us a decision  procedure  for  the  satisliability  of  CGE.  The  details  follow. Define  the  following  binary  relation  =$ on  boundary  equations  in  a generalized 

equation  GE(N,  M)  =  (BD,  BS, {LEFT,  RIGHT],  BR):  We say that 

@A,  bs/,, bd2) *  (b&,  bse, W, 

Minimal  and Complete Word Unification  69 

whenever LEFT(bs,,)  2  LEFT(bs,).  (Note  that  it  is the boundary  bd, in  common that  gives the  direction  to  the  arrow.)  Thus,  for  example,  e +  e for  any  boundary 

equation  e because 

We say 

(bd, , bs, , bdz) *  (bdz, bsaA , bd,). 

if  there  is a nonempty  sequence el , e2, . . . , e,, of  boundary  equations  in  GE such that  e, =  e,,  e, =  eb, and  ei *  e,+, for  all  1 5  i <  n. The  notation 

means e, A  e2 and e2 &  el , and clearly 6  is an equivalence  relation.  We henceforth write  I[el) to  denote the equivalence  class of a boundary  equation  e. 

Now  consider  a special case of the relation  =X  We say that 

(bd,,  bsA, bdd  4  (bd,,  bss, b&h 
if  LEFT(bs,,)  >  LEFT(bs,).  We then  say 

ea 4  eb 

if  there are boundary  equations  el and  e2 such that  e, 4  el,  el 4  e2, and  e2 4  eb. The following  propositions,  all of which  refer to boundary  equations in  nontrivial 

generalized  equations  GE(N, M)  or  complete  generalized  equations  CGE(N, M), are straightforward  to  verify: 

PROPOSITION 1.  (bdl,  bs,,  bd2)  *  (bd2,  bsB,  bd,)  implies  ] bsa[bd,] ]  I I bdbd21 I. 

PROPOSITION 2.  (bd,,  bsa,  bd2)  A  (bd,,  bse,  bdx)  implies I bsdbdzl I. 
PROPOSITION 3.  (bd,,  bsA,  bd2)  &  (bd,,  bs,,  bd3)  implies I bdbd21 I. 

PROPOSITION 4.  el A  e2 iff(a)  e, A  q,  and(b)  not (e2 &  e,). 

I bs,[bd,l I  = 
I h[bd,l  I  < 

PROOF.  (a) and (b) imply  that  el &  e2 by definition.  The  converse follows  easily from  Propositions  1 and 2.  Cl 
PROPOSITION 5.  (bd, ,  bs,  bd2) A  (bd3, bs, bd,)  implies  that  bd,  =  bd,  and bd2 =  bd,. 
PROPOSITION 6.  Let  @be any subset of boundary equations in CGE(N, M). 
(a)  Ve E 9,  [el) contains at most N boundary equations. (b)  (ZeOVe E  9:  e &  eO) implies that  ] 9'1  5  2N. 

PROOF 
(a) Suppose [e]  contains  more  than  N  boundary  equations.  Then  for  some base bs in  GE, there  are at  least two  distinct  equations  of  the  form  (bd,,  bs, bd2) and 

(bd,,  bs, bd,) in  CGE. Since CGE is complete,  it  follows  that  either  bd, <  bd,  or bd, <  bd3 appears in  CGE. By Proposition  5, however, we have that  bd, =  bd, and 
bd, =  bd,,  and we so have a contradiction. 

70  JOXAN JAFFAR 

(b)  Let  e.  be  of  the  form  (Ma,  bso, b&J.  All  boundary  equations  e'  such  that e'  4  e. must  be of the  form 

(i)  (bd, bs,,  bd,)  or (ii)  (bd, bs,, bdt,). 

Consider  case (i),  and  suppose we have (bd, , bsl , bd,) 4  e. and there is another boundary  equation  (bd?, bsZ, bd,) such that  (bdz, bsZ, bd,) 4  eo. If  bs, are bsZ the 
same base bs, then  bd,  =  bd2 for  otherwise  ] bs[bdl]  ] =  ] bs[bd,] 1 is not  equal  to ) bs[bd*] ] =  I bs[bd,]  1 and  so GE would  be false. That  is, if  e, 4  e. and  e2 4  e. 
are both  e, and  q  involve  the same pair  of dual  bases, then  it  must be that  el =  e2. Thus,  the  number  of boundary  equations  e of the form  (i)  such that  e 4  e. cannot 
exceed N. A  similar  argument  holds  for  case (ii),  and  so the proof  follows.  Cl 

Let  us define  that  a superfluous boundary  is one that  is not  a left  boundary,  not a right  boundary  and  that  is not  involved  in  any  boundary  equation.  A  boundary 
bd is terminal if  there  exists boundary  equations  e and  e, such that  e involves  bd, e, involves  a right  boundary,  and e, 4  e. We now define that  a generalized equation 
GE(N, M)  is proper if  it  satisfies the  following  two  properties: 
P 1:  (Property on Boundaries) The  total  number  of left  and  superfluous  boundaries  is at most N. 

P2:  (Property on Boundary Equations) For  all  boundary  equations  e in  GE, there  exists a boundary  equation  e. such 

that  (a) e 4  e. and  (b)  e. involves  a terminal  boundary. 
LEMMA  3.1.  If  a generalized equation GE  is proper,  then so are all  nonfalse equations in COMPLETE(GE). 

PROOF.  Let  CGE  be any  nonfalse  equation  in  COMPLETE(GE);  clearly  the number  bases in  CGE equals that  in  GE, and  the  number  of  boundaries  in  CGE 
does not  exceed that  in  GE. The  proof  of Pl  for  CGE is now  immediate  from  the fact that  a superfluous  boundary  in  CGE was also a superfluous  boundary  in  GE, 

similarly  for  left  boundaries. We now  verify  that  P2 also holds  for  CGE; if  e, =  (bd, , bs, bd) appears in  CGE, 
then  there  is a corresponding  boundary  equation  e2 in  GE such that  either  el  =  q, or else e2 =  (bd,,  bs, bd)  where bd, and  bd2 were identified  in  CGE. In  either  case, 

e2 4  e. implies  el 4  e. for  all  eo. The  lemma  follows.  q 

LEMMA  3.2.  If  a nontrivial  complete generalized equation CGE  is proper, then so is REDUCE(CGE). 

PROOF.  We proceed by  cases, using  the  same four  cases as in  the  proof  of the Reduction  Theorem  above. Thus,  let  GE = REDUCE(CGE). 

Case 1.  Clearly,  P 1 holds  for  GE because GE has no  more  bases and  no  more left  or superfluous  boundaries  than  CGE.  For  P2, we first  note  GE and  CGE have 
the  same set of  boundary  equations.  They  also  have  the  same right  boundaries except  for  those  in  BD"  (i.e.,  those  nonzero  boundaries  less than  the  smallest 
LEFT(bs,)).  Clearly,  these boundaries  in  BD"  cannot  be involved  in  any boundary equation,  and  so P2 must  hold  for  GE. 

Case 2.  Clearly,  the  number  of left  boundaries  in  GE is not  more  than  that  in CGE. Consider  now  the  superfluous  boundaries. 

Minimal  and  Complete  Word  Unljkation  71 

We first  note  that  no  new boundaries  are introduced  into  GE.  However,  some boundaries  bd that  are involved  in  a boundary  equation  in  CGE  may  not  be so in 

GE. Any  such candidate  bd must  be in  the  collection  {bd, , bdz, . . . , bdk], and  bd must  have been involved  with  only  the bases bs, and  bsA, in  CGE. 

If  no  such  boundary  bd  exists, then  clearly  Pl  holds  in  GE.  Assume  now  that such a boundary  bd exists (see, e.g., bd4 in  Figure  4).  Using  the  fact  that  CGE  is 
proper,  and  more  specifically  that  CGE  satisfies property  P2, bd  must  be a right boundary  (of a base different  from  bs, and bsau) in  CGE.  Since GE and  CGE  have 
precisely the  same right  boundaries  for  bases different  from  bs, and  bsa,, bd is not superfluous  in  GE, and so PI  holds  in  GE. 

The  argument  immediately  above also helps establish that  GE  has property  P2. Suppose otherwise,  that  is,  for  some boundary  equation  e in  GE  that  does not 
involve  a terminal  boundary,  there  does not  exist  a e. in  GE involving  a terminal boundary  such that  e 4  eo. Since CGE  is proper,  there must  be a sequence, of the 

following  form  in  CGE: 

e*  en =3 envl 4  e-e *  el  *  e.  mu 
for  some n 2  0 and  some e. involving  a terminal  boundary.  Now  GE contains  all the  boundary  equations  in  CGE  except some of  the  special form  (bd,  bs,,  bd).  It 

is easy to  verify  that  if  el =+ e2 =$ e3, where  e2 is one such special equation,  then el *  e3. Assuming,  without  loss of generality,  that  (EO) is the  shortest sequence of 

its  kind  (that  is,  starting  with  the  given  e and  terminating  with  some  e.  which involves  a terminal  boundary)  appearing  in  CGE,  it  follows  that  all  the  equations 
in  (EO) also appear in  GE with  the  possible exception  of eo. That  is, e. is a special equation.  The  contradiction  is  now  clear:  Since e. involves  a terminal  boundary, 
say bd, and  e. does not  appear in  GE,  it  must  be that  bd is less than  LEFT(bs,). But  this  is  impossible  by  our  choice  of  LEFT(bs,).  Therefore,  GE  satisfies 
property  P2. 

Case  3a.  That  Pl  holds  for  GE  is  easy to  see since  GE  has  no  more  left boundaries  than  CGE, and  no  more superfluous  boundaries  than  CGE  (every new 

boundary  in  GE is involved  in  a boundary  equation).  To  see that  P2 holds  for  GE, we consider separately the two  kinds  of boundary  equations  that  may be introduced 

in  GE: 
(a)  one kind  involves  bs, (cf. (iv)  in  Case 3a of the definition  of REDUCE). (b)  The  other  kind  involves  bs, (cf. (iii)  in  Case 3a of the definition  of REDUCE). 

Recall  that  each boundary  equation  evi =  (bdi,  bs,,  bd,,),  i  E  .I =  (1, . . . , m] in  CGE  is replaced in  GE by  two  boundary  equations 

evl  =  (bdi,  bs,,  bdM+i) and  eu; =  (bdM+i, bs,,  bd,J. 
We now  show that  every boundary  equation  e in  GE is such that  e &  e. for  some e. in  GE that  involves  a terminal  boundary.  This  is immediate  if  e itself  involves  a 

right  boundary,  and  so we need not  consider  e to  be in  class (a) above. Consider  then  the  class (b).  Now  e either  appears in  CGE  also,  or  e is  of  the 
form  evl  or  eui,  1 5  i  5  m. Suppose first  that  e appears in  CGE  also. Since CGE is proper,  we have that,  in  CGE, 

e 4  e, *  en-l  *  . . .  *  el  *  eo,  (El) 
for  some ej, 0 5j  5  n such that  e. involves  a terminal  boundary.  If  these boundary equations  e,,  . . . , eo, also appear in  GE, then  we are done. Otherwise,  one of them 

72  JOXAN  JAFFAR 

must be evi,  1 5  i I  m. Clearly,  we can replace this  equation  in  the above sequence (E 1) by evl +  eui. This  argument  can be repeated until  (E 1) contains  only  equations 

in  CGE. The  remainder  of  the  proof  pertains  to  the  case where  e itself  is  ev/  or  eui,  for 
some 1 I  i  5  m. Again,  since CGE  is proper,  we have that,  in  CGE, 

eVi~e,~e,-l~...~el~eo  03) 
for  some ej, 0 (j  5  y1 such that  e. involves  a terminal  boundary.  Replace the  first equation  in  (E2) by  ev,! +  eY.  The  argument  above for  (El)  now  tells  us that  we 

can  perform  replacement  of  equations  in  (E2)  until  all  equations  therein  are from  GE. 

Case 3b.  The  proof  in  this  case is so similar  to  that  above in  Case 3a that  we omit  it. 
Case 4a.  Our  proof  here assumes that  bs, is different  from  bsa,. The  proof  for the alternative  case is slightly  easier and  hence is omitted. 
We first  note that  GE has one less left boundary  than  CGE  because LEFT'(bs,) =  LEFT'(bs,)  in  GE while  LEFT(bs,)  <  LEFT(bs,)  in  CGE.  We now  verify  that 
GE  satisfies Pl  by  showing  that  GE  has at  most  one  more  superfluous  boundary than  CGE. 

The  number  of new superfluous  boundaries  in  GE (that  is, those which  were not superfluous  in  CGE)  is  at  most  k  =  1 JI  +  p.  They  must  fall  into  one  of  the 
following  classes: 
(a)  bd,,,  i  E J; @I  bd,t-t+l, h&z,  . . . , bdM+p--l, and 

(c)  LEFT(bsa,),  that  is, the  left  boundary  of  bsA, in  CGE. 

Consider  the  boundaries  in  class (a).  Because CGE  is proper,  and  in  particular CGE  satisfies P2, it  must  be that  each boundary  bd,,, in  class (a) in  CGE  is either  a 

right  boundary,  or  else it  is  involved  in  some  boundary  equation  in  CGE.  In particular,  this  boundary  equation  involves  a base different  from  bs,,  and  so this 
boundary  equation  remains  in  GE.  In  either  case, the  boundary  bd,,, is  not superfluous  in  GE. 

Consider  the  boundaries  in  class (b).  Now  these could  very  well  be superfluous in  GE. However,  GE does not  contain  the k boundaries  bd, , bdz, . . . , bdk of which 
at least p  -  1 are superfluous  in  CGE.  Thus  while  GE  may  contain  up  to  p  -  1 new  superfluous  boundaries,  GE  does not  contain  at  least p  -  1 boundaries  that 
are superfluous  in  CGE. Finally,  we note that  in  class (c), the boundary  LEFT(bsA,)  corresponding  to  the 

old left  boundary  of bsA,, could  be superfluous.  If  so, GE would  contain  one more superfluous  boundary  than  CGE. 

Thus,  the total  number  of left  and  superfluous  boundaries  in  GE is at most that in  CGE,  and we have PI  for  GE. 
We  complete  the  proof  now  by  showing  that  GE  satisfies  P2.  Suppose the contrary,  and  let  e denote  the  offending  equation  in  GE.  Since  CGE  is  proper, 
contains  e (there are no  new boundary  equations  in  GE),  and  e does not  involve  a terminal  boundary,  we have that  the  following  is in  CGE: 

for  some e. that  involves  a terminal  boundary. 

Minimal  and  Complete  Word  Unification  73 

We  may  as well  assume that  n  is  the  smallest  number  for  which  there  exists such  a  sequence (E3).  Assume  that  (E3)  does not  hold  in  GE  because some ej, 

0 5 j  I  n, does not  appear in  GE.  Thus,  ej is of the  form  etli =  (bd;, bs,,  bd,,),  for some 1 5  i  5  m. We now  verify  that  no equation  e2 different  from  eui in  CGE  can 

be such that 

(a)  e2 does not  involve  a terminal  boundary,  and (b)  e2 +  en;. 

This  will  give us the desired contradiction.  Now  suppose 

e2 =  (bd,  bs, bdi)  +  eui  =  (bdi,  bs,,  bd,,). 
We first  dismiss the  case bs =  bs,;  otherwise,  q  must  be identical  with  (bd;,  bs,, bd,,)  and  n  would  not  be  minimal.  Now  e2, from  the  definition  of  boundary 

equation,  implies  that  bd, lies  between  the  left  and  right  boundaries  of  (the  dual of)  the  nonempty  base bs in  CGE.  But  this  is impossible  by  the fact that  bs, is the 

leftmost  base in  CGE  apart  from  bs,. Suppose, on  the other  hand, 

e2 =  (bd,  bs, bd,,,) *  eui  =  (bd,,,, bsa,,, bdf). 
If  eui is the  last equation  in  the  sequence (E3), then  since e2 involves  no  terminal boundary,  it  must  be that  bdi is a terminal  boundary.  The  only  possibility  for  this 

when  bs, is empty  and  bd, =  LEFT(bs,)  =  RIGHT(bs,),  that  is,  i  =  k.  Checking the  definition  of  RIGHT'  in  Case 4.3  of  procedure  REDUCE,  we  verify  that 
RZGHT'(bs,)  is  in  fact  bd,,.  This  contradicts  the  assumption  that  e2 does not involve  a terminal  boundary. 

If,  however,  euj is not  the  last equation  in  the  sequence (E3),  then  eui +  euj-l for  some  euiel  which  involves  either  bd,  or  bd,,.  The  former  case is  impossible 
because bd,,  1 5  i  5  m,  can be involved  with  only  the  base bs,.  This  means that elii-  =  e2. The  latter  case means  that  e2 -  eu,-l.  Both  cases contradict  the 

assumption  that  (E3) is of minimal  length. The  remaining  proof  is for  the  case where  ej, 0  I  j  5  n,  all  appear in  GE  but 

(E3) does not  hold.  This  can only  mean that  el +  e. does not  hold  in  GE, that  is, e. is of the  form  (bdl , bs,,, bd,).  It  is then  easy to  verify  that  bd2 must  have been a 
terminal  boundary,  contradicting  the assumption  that  (E3) is of minimal  length. 

Case 4b.  The  proof  here can easily be adapted from  that  above for  Case 4a. 
PROPOSITION 7.  If  CGE(N,  M)  is  nonfalse,  proper,  and  contains  more  than N3  *  (cN)~(~N)~"  boundary  equations,  then  c  of  these  boundary  equations  are 

such that 

eo&el&e2&  . . .  &ec. 
PROOF.  Given  any  boundary  equation  e,, the following  construction: 
-SO  =  (e:e  E  [e?l)); -S;  =  (e: e 4  e. where e. E  So), 

Sl  =  S;  U  (e:e  E  I[ell  where e;  E  S;]; --S;  =  {e:e&  el where el E  S,), 
S2 =  Si  U  (e:e  E  I[e;]  where e;  E  Si); 

-Si  =  (e:e&  ekeI where ek-i  E  ,!LIJ, Sk 

=  S,( U  (e:e  E  I[eLj  where e;  E  SL 

74  JOXAN  JAFFAR 

gives the  set 

E(r)  =  (e: e 4  er) =  u  5-i i=o 
for  suffkiently  large k.  We note  that  any  boundary  equation  e; E  S,,  1 5  i  5  k,  is such that 

We first  show that  1 Si 1 I  N  *  (2N)"  for  0  5  i  5  k.  The  special case SO is  easy: 1 So 1 5  N  by  Proposition  6(a).  Now  since  every  equation  ei'  E  Sl  is  such  that 
e;  =A e. for  some e. E So, it  follows  from  Proposition  6(b) that  I Sl  I 5  2N  *  I So I. From  Proposition  6(a) and  the  fact  that  I So I  5  N,  we have  I S1 I  5  2N2  *  I So I. 
Similarly.  since every  equation  es E  Si  is such that  el  4  el  for  some e, E  S,,  it follows  from  Proposition  6(b) that  I S$ I 5  2N  *  I S1 I. By Proposition  6(a), we have 
that  I S, I  5  2N2  *  I S1 I.  Generalizing  this  argument,  we have that  I Si I  % 2N2  * I Sl  1, that  is,  I S, I 5  N  * (2N)*`.  Thus 

E(r)  =  (e:e  4  e,) =  6  Si 

i=O 

contains  at most k  * N(2N)2k  boundary  equations. Similarly,  we can construct,  given  any  boundary  equation  e,, the  set 

F(r)  =  (e:e,  9  e] 
so that  if  F(r)  contains  more  than  cN(2N)*'  equations,  it  contains  eo, el,  . . .  e, where 

+ e. 2  el  4  e2 A  . + .  *  e,, 
Now,  CGE is proper,  and  so every boundary  equation  e in  CGE is such that 

e, 4  e.  and  e4  e. 
for  some  boundary  equations  e.  and  e,,  the  latter  of  which  involves  a  right boundary.  Suppose, by  way  of  contradiction,  that  neither  of  these two  relations 

involve  more than  c applications  of the =& relation.  Since CGE contains  at most N3 of  the  equations  e,,  our  construction  of  F(r)  above  implies  that  there  is  at  most 
N3  *  (cN(~N)~`)  choices for  e o. By  our  construction  of E(r)  above, this,  in  turn, implies  that  there  is at most N3  * (cN(2N)*")  * (cN(~N)~`)  choices for  e. Thus,  we 
have our  contradiction.  0 

Define 

e(N,  c) ef  N3  *  (cN)`(~N)"~  and b(N,  M)  zf  e(N,  4N3(N  +  1) *  (g(M,  N)  +  2)) 

and recall  that  g(M,  N),  defined  above, is the upper  bound  on the exponent  of any solution  of  a  complete  generalized  equation  CGE(N,  M).  Thus,  for  example, 

Proposition  7  above  states that  if  CGE(N,  M')  contains  more  than  b(N,  M) boundary  equations,  then  we  can  construct  a  sequence of  boundary  equations 
in  CGE: 

eo&e14e2&  . . .  &ec 
such that  c 2  4N3(N  +  1) * (g(M,  N)  +  2). We use this  in  the  following  lemma: 

Minimal  and Complete Word Unification  75 

MAIN  LEMMA.  If  GE(N',  M')  is proper,  satisfiable and  contains more than b(N, M)  boundary equations where N'  5  N, then the exponent of periodicity  of all 

of its solutions exceeds g(N, M). 

PROOF.  In  view  of  the  Completion  Theorem,  we  may  assume that  GE  is complete.  Now  recall  the  definition  of +.  We first  note that  if 

el  =  WI,  h,  b&)  and  e2 =  (bd2, bS2, W 
appear in  GE and  are such that  el  +  e2, then  there  are words  Br , C, , B2, C2, S, , R, , and  T, such that 

bs, ==  B,C,, bs2 ==  B2C2, 
S,B,  ==  B2, C,R,  ==  C,T,, 

where B, , Cl,  B2, and  Cz are nonempty.  If,  in  particular,  e, 4  e2, then  S,  is also nonempty;  if,  however,  el  &  e,,  then  S,  is  empty.  Extending  this  to  the  case 

e, 4  ek, say ei =  (bdi, bsi, bdi+l), 1 5  i <  k and 

e, +  e2 +  ---  +  ek, 
we have that  the  bsi can be written  in  the  form 

bsi ==  BiCi, bsi+l ==  Bi+l Ci+lT 

S,Bi ==  Bi+l) CiRi  ==  Ci+l Ti, 

for  1 I  i <  k. Once again,  in  the  particular  case that  e, &  ek, (e, 6  ek), we have that  Si, for  some (resp., all)  1 I  i <  k, is nonempty  (resp., empty). 

Now  recall  that  GE contains  more  than  b(N, M)  boundary  equations,  and  that we  assume GE  is  complete.  By  Proposition  7,  there  exists  in  GE a  sequence of 
c boundary  equations 

eoae14e24  .*a  Ace, 
where  c  2  4N3(N  +  1)  :  (g(M,  N)  +  2).  We  may  rewrite  this  sequence more explicitly  in  terms of +  and 4  thus: 

ek, *  - - - +  ek, 4 
ek,+, +  ' ' '  +  ek, & 
ek,+l  4  "  -  +  ek,  4 

.  .  . 

eke,+l  *  "'  *  ekc7 

where &  =  1 and  &,,+I  &  ek,, 1 I  j  5  c 5  k,. Let  ei be of the  form  (bdi, bsi, bdi+l), 1 5  i <  k,.  Thus,  the  bsi can be written  in 

the  form 

bsi ==  BiCi, bSi+l ==  Bi+lCi+l, 

SiBi ==  Bi+l) CiRi  ==  Ci+l Ti, 

76  JOXAN JAFFAR 

for  1 I  i  <  k,.  Since kj  -  kj-1 5  N  (cf.  Proposition  6(a)), we have that  (b  -  a)  > 2 *  N2 implies  that  the word  S&+,  . . .  Sb is nonempty. 

We are now  in  a position  to  apply  Lemma  1.4 in  [6],  which  states that  BiCi,  for some 1 I  i  5  k,,  (i.e., one of the N bases in  GE) must  be of the  form  P"Q where P 
is  nonempty  and  k,  5  4N3(N  +  l)(s  +  2).  That  is,  s  is  a  lower  bound  on  the exponent  of  any  solution  of  GE.  Since, by  hypothesis,  k,  exceeds 4N3(N  +  1) * 
(g(N,  M)  +  2), it  follows  that  s >  g(M,  N).  Cl 

We can  now  prove  the  correctness of  our  decision  procedure  by  means of  the following  theorem.  As  remaked  above,  we  need  only  consider  the  satistiability 

problem  for  the  complete  generalized  equations  CGE(N,  M)  in  the  collection COMPLETE(GENERALZZE(E)).  It  is immediate  that  all  the  equations  therein 
are in  fact proper,  for there are no superfluous  boundaries  nor  boundary  equations to  start with. 

Fix  a complete  generalized  equation  CGE(N,  M),  and  let  N2 5  N  denote  the number  of  variable  bases in  CGE.  Let  M2  denote  a sufficiently  large  number  so 
that  g(N2,  M2)  >  g(N,  M).  Now  define  that  h(CGE)  is  the  number  of  distinct complete generalized equations  (ignoring  multiple  copies of equal equations)  whose 

size(N',M')suchthatN'<NandM'(N+b(N,M2). 

DECISION PROCEDURE THEOREM.  A  nonfalse proper  complete generalized  equa- tion  CGE(N,  M)  is  satisfiable  iff  its  reduction  tree  contains  a  node  at  level  5 

h(CGE)  labeled with  a true  equation. 

PROOF.  Let  T be the  reduction  tree for  CGE.  By Lemmas  3.1 and  3.2, we have that  all  nodes in  Tare  labeled with  proper complete generalized equations.  Suppose 

now  that  CGE  is not  satisfiable.  By the  Completion  and  Reduction  Theorems,  we have that  T contains  no  (leaf)  nodes labeled with  a true  equation. 

Now  suppose that  CGE(N,  M)  is  satisfiable  and  let  S be one  of  its  solutions. First,  we note that  there will  indeed  be a leaf node in  T labeled with  a trivially  true 
equation.  This  is because, by  the  Completion  and  Reduction  Theorems,  there is a sequence of  equations  labeling  a  path  in  T  such  that  every  equation  therein  is 
satisfiable  and  has a solution  that  is a suffrx  of  S. That  this  sequence cannot  be infinite  follows  from  the  fact that  the Cases 1 or 4 cannot  be forever avoided  in  the 
procedure  REDUCE  associating  an  equation  with  its  successor equation  in  the sequence. When  Case 1 or  4  is  applied,  the  resulting  equation  has a solution  S', 
which  is a strict  sufftx  of S. We now  complete  the  proof  by  showing  that  a leaf node labeled with  a trivially 
true  equation  will  appear at a level  not  exceeding h(CGE)  in  T. By the  Periodicity Theorem  CGE(N,  M)  has a solution  with  an exponent  of periodicity  not  exceeding 
g(N,  M).  Since every  equation  in  T  is  a  s&ix  of  CGE,  it  suffices show  that  all solutions  of all  equations  CGE'  labeling  nodes at a level greater than  h(CGE)  have 

exponents greater than  g(N,  M).  Now,  all  these equations  CGE'(N',  M')  are such that  N'  I  N  and  M'  >  N  +  b(N,  M2).  Because CGE'  is proper,  it  follows  that 

CGE'  contains  more  than  b(N,  M2)  2  b(N',  M2)  boundary  equations.  By  the Main  Lemma,  all  solutions  to  such equations  CGE'  have exponents  greater than 
g(N',  M2).  Since  CGE'  contains  all  the  variable  bases in  CGE,  N'  1  NZ and therefore  g(N',  M2)  1  g(N2,  M2).  Since  g(N2,  M2)  >  g(N,  M),  all  solutions  of 

CGE'  have exponents  greater than  g(N,  M).  0 
4.  Generation  of Solutions 
We now  consider  the  problem  of explicitly  presenting  all  the  solutions  (if  any)  of a given  generalized  equation.  First,  we define  that  a  unifier  for  a word  equation  E 

Minimal  and  Complete  Word  Unification 

maps each variable  in  E  into  a possibly  empty  sequence 

u,u,  *`-  urn, 

77 

where for  each 1 I  i 5  m,  Vi is either  a letter  or a parametric  variable  (over words), but  not  one  of  the  variables  in  E.  Similarly,  a partial  base substitution  (Y for  a 

generalized  equation  GE  maps  each  variable  base in  GE  into  a  possibly  empty sequence 

where for  each  1 5  i  5  m,  Wi is either 

(a)  a letter,  or (b)  a parametric  variable  (over words),  but  not  one of the bases in  GE, or 

(c)  a boundary  interval  of the  form  (bd, bd')  where bd <  bd'  appears in  GE. 

A  base substitution  for  GE is a partial  base substitution  for  GE that  maps all  the bases in  GE into  letters (a) and parametric  variables  (b) only. 

An  instance  of  a unifier  or  base substitution  CY is obtained  in  the  obvious  way, that  is,  by  instantiating  distinct  parametric  variables  in  (Y with  words.  Thus,  an 
instance  of  a  unifier  or  a  base substitution  Q: may  be  obtained  by  specifying  a function  that  maps each parametric  variable  into  a word.  We denote by  a[bs,]  the 
sequence associated with  the  variable  bs, (the  restriction  of  (Y to  bs,) in  the  partial base substitution  01. 

An  augmented  generalized  equation  is  of  the  form  (GE,  a)  where  GE  is  a generalized  equation  and  CY a  partial  base substitution.  A  solution  S  of  GE  is 
extended  to  become  an  augmented  solution  of  (GE,  CY) by  extending  S  with  a mapping,  call  it f;  from  the  parametric  variables  in  (II into  words.  The  augmented 

base valuation  of S, where S is an augmented  solution,  is the  mapping  from  bases bs, into  sequences of the  form 

St WJS( Wd  . . .  S( WmYWwu), 
where  W, W,  . . .  W,  denotes the  partial  base substitution  a[bsJ  for  bs,,  and  for each 1 5  i  I  m: 

(a)  if  W, is a letter,  then  S( Wi) is that  letter; (b)  if  Wi is a parametric  variable,  then  S( Wi) is the  nonempty  word  given  by  the 

mappingffrom  parametric  variables  into  words associated with  S; (c)  if  Wi is a boundary  interval  (bd, bd'),  then  S( W;) is the  word 

S(GE)[S(bd)  . .  S(bd')]. 
Thus,  augmented  base values for  (GE,  ol) are obtained  from  both  a solution  of GE and  an  instancefof  LY. Like  before, we say that  two  augmented  solutions  are 

equivalent  if  every augmented  base valuation  of one solution  is also an augmented base valuation  of the other.  Finally,  we say that  (GE,  CY) is true  (false, trivially  true, 
trivially  false) if  GE is true  (false, trivially  true,  trivially  false). We now  extend  the  procedure  REDUCE  to  accommodate  augmented  general- 
ized  equations.  We  have  REDUCE(CGE,  a)  =  (GE,  p),  where  GE  is  obtained from  the  procedure  REDUCE(CGE)  as  described  in  Section  3.  Thus,  where 

CGE  =  (BS,  BD,  FF,  BR),  we have  GE  =  REDUCE(CGE)  =  (BS',  BD',  FF', BR' ),  where the two  functions  LEFT'  and RIGHT'  comprise  FF'. 

For  notational  convenience,  let  a[bs],  over  all  variable  bases bs in  BS,  be of the form  W, W,  . . .  W, for  some n 2  0. Once again, we go through  the four  cases, and 
in  each case, we produce  the desired p. 

78  JOXAN  JAFFAR 

Case 1.  Recall  that  there  are k  >  0  boundaries  that  are less than  or  equal  to LEFT(bs,)  in  CGE.  Call  them  bdo, bd,,  . . . , bdk, and  so we have that  0  =  bd,, c 

bd,  <  . . .  <  bdk =  LEFT(bs,)  appears in  CGE.  Consider  the  sequence 

v,v*  ***  v-k, 
where for  each  1 5  i  I  k, 
-K  is  a  new  parametric  variable  if  bd,-,  and  bdi  are  not  the  left  and  right boundaries,  respectively,  of a constant  base; 

-otherwise,  Vi  is  the  letter  corresponding  to  the  constant  base. (Note  that  this assignment  is  properly  defined  because CGE  is  nontrivial  and  thus  all  such 

constant  bases represent the  same letter.) 
We now  define  that  for all  bases bs E BS',  ,f3[bs] is exactly  the same as (~[bs] but with  the  following  exception:  Each boundary  interval  Wi =  (bd,,  bdb), 1 5  i  5  ~1, 

a 5  k, in  a[bs]  is replaced as follows: 
-if  a =  k, the  replacement  is (0, bd& -if  a <  k and  b 5  k, the replacement  is  V,,,  Vaac2 . . .  V,; 

-if  a <  k and  b >  k, the  replacement  is  V,,,  VO+* . . .  Vk(O, bd&. 

Case 2.  We consider the case LEFT(bs,)  <  RIGHT(bs,)  in  CGE, the alternative case requires just  a minor  modification  of the proof  below. 

We  first  note  that  LEFT(bs,)  =  bdkt  for  some  k'  5  k.  Let  RIGHT(bs,)  = RZGHT(bs,,)  be called  bd.  Let  x1,  x2,  . . . , &`,  be new parametric  variables.  We 
now  define  LY `[bs]  to  be the  same as a! [bs] but  with  the  following  exception:  Each boundary  interval  I%`, =  (bd,,  bdb), 1 I  i  5  ~1, a 5  k',  in  cr[bs] is replaced as follows: 

-if  a =  k',  the  replacement  is (0, bdb); -if  a <  k'  and  b I  k',  the  replacement  is x~+~ x~+~ . . . x& 

-if  a <  k'  and  b >  k',  the  replacement  is xa+r x,+~  . . . &`(O,  bdb). 
For  bases bs different  from  bs,, and  bsA,,, we define  ,fl[bs] to  be cw'[bs]. Finally,  we define  that  both  /3[bs,]  and  P[bs,,]  are 

c~`[bs,,]x~ x2  . . .  xk(0,  bd). 
Cases 3a and  3b.  p is defined  to  be the  same as LY. 
Cases 4a and 4b.  In  what  follows,  we recall  our  notational  convention  that  the boundary  bdk denotes  LEFT(bs,)  in  Case 4a,  and  bdk denotes  RIGHT(bs,,)  in 

Case 4b.  Also  recall  that  we assume J  is of  the  form  ( 1, 2,  . . . ,  I J I ), where  0  I ] JI  5  k.  That  is, of the  boundaries  0,  bd,,  . . . , bdk, which  are less than  or  equal 
to  LEFT(bs,),  only  bd,,  . . . , bd,.,  are involved  in  integer  equalities.  Let  bd,, =  0, and let  LEFT(bs,,)  be called  bd,,,. 

For  all  bases bs E  BS(=  BY),  we define  @[bs] to  be the  same as ol[bs] but  with the  following  exception:  Each boundary  interval  wi  =  (bd,,  bdb), 1 I  i  I  n, a I  k, 
in  a[bs]  is replaced as follows: 
-if  a =  k, the  replacement  is (0, bdb); -if  a <  ] J I and  b I  I J 1, the  replacement  is (bdny, bd,,); 

-if  a 5  I JI  and  ] JI  <  b I  k, the  replacement  is (bdna, bdM+b-l.,l); -if  a 5  ] J I and  b >  k, the replacement  is (bdna, LEFT  `(bs&)(O,  bdb). 

Thus,  we now  have our  procedure  REDUCE,  which  maps an augmented complete generalized equation  (CGE,  LY) into  an augmented  generalized equation  (GE,  p ) . 

Minimal  and Complete Word Unification  79 

The  corresponding  process COMPLETE  for  augmented  generalized  equations  is much  simpler  to  describe: 

COMPLETE(GE,  (Y) gf  { (CGE,,  &),  (CGE,,  Cu), . . . ,  (CGE,,  a!) ), 
where  (CGE,,  . . . ,  CGE,}  is  the  result  of  the  process COMPLETE  on  GE  as described in  Section 3, and (II is (Y except that  certain  boundaries,  which  are distinct 

in  GE, may be renamed to become the same boundary  in  CGE. We note that  each (CGEi,  G),  1 5  i  5  n, is  indeed  an  augmented  generalized  equation  because (a) 

each base in  CGE is a base in  GE and  (b) each boundary  interval  (bd,,  bdb) in  (Y is such that  bd, <  bdb appears in  CGE. 

We henceforth  write  REDUCE  or  COMPLETE  with  one  argument  to  denote the  process described in  Section  3; using  two  arguments  shall  mean the  extended 
processes just  described. It  is easy to  see that  the  corresponding  extended  versions of the  Completion  and  Reduction  Theorems,  that  is, where the  generalized  equa- 
tions  there  are replaced by  corresponding  augmented  generalized  equations,  con- tinue  to  hold.  Formally, 

COMPLETION  THEOREM.  Let L  =  COMPLETE(GE,  a).  Then 
(a) for  all  (CGE,  (r)  E L,  SIZE(CGE)  5  SIZE(GE). (b)  (GE,  a)  has an augmented solution S implies that some (CGE,  6)  in L  has 

an augmented solution equivalent to S. (c) for  all  (CGE,  Cy) E L,  (CGE  6)  has an augmented solution S implies that GE 
has an augmented solution equivalent to S. 
REDUCTION  THEOREM.  Let  (GE, 0)  =  REDUCE(CGE,  a).  Then 
(a)  the number of bases in GE is at most that in CGE. (b)  (CGE, a)  has an augmented solution S implies that (GE, p)  has an augmented 

solution equivalent to S. (c)  (GE, ,B) has an augmented solution S implies that (CGE, cu) has an augmented 
solution equivalent to S. 
PROOF 
(a)  Straightforward  from  the  proof  of the  Reduction  Theorem  in  the  previous section. 

(b) (c)  In  the proof  of the Reduction  Theorem  in  the previous  section, we have constructed,  given  a (nonaugmented)  solution  S for  CGE, a solution  S'  for  GE 
such that  S'  is  a suffix  of  S. Consider  now  the  part  of  the  procedure  REDUCE defined  above,  which  deals with  the  construction  of  p  given  (Y. Fix  a mapping  f 
from  the parametric  variables  in  a! and  /3 into  words.  It  is a straightforward  matter to  verify,  step by  step, that  indeed  the  augmented  solutions  S and  S',  using  this 

mapping f;  are such that 

S(cu[bs])S(bs) ==  S'(P[bs])S'(bs) 
over all  variable  bases bs in  GE. We shall  hence omit  the details.  q 

A generalized equation  GE is solved by a base substitution  or a (finite  or infinite) collection  of base substitutions  if  the  set of  all  the  instances of  these substitutions 

is contained  in  the  set of base valuations  of  all  solutions  of  GE. GE is completely solved by a base substitution  or a (finite  or infinite)  collection  of base substitutions 
if  the  set of all  the instances of these substitutions  equals the  set of base valuations of  all  solutions  of  GE. We  alternatively  say that  the  substitution  or  collection  of 

80  JOXAN  JAFFAR 

substitutions  is complete for  GE. A  base substitution  CY is more general  than  a base substitution  0 if  every instance  of p is an instance  of 01, but  not  vice  versa. Finally, 

a collection  C of base substitutions  is minimal  for  GE if  C does not  contain  a pair of  substitutions  in  which  one  is more  general than  the  other.  In  what  follows,  we 
shall  be  concerned  with  a  minimal  and  complete  set of  base substitutions  for  a generalized equation. 

It  now  remains  to  extend  the  reduction  tree generation  process above so that 
(i)  augmented  generalized  equations  are  used  instead  of  generalized  equations, and 

(ii)  a  minimal  and  complete  collection  of  base substitutions  for  GE  is  obtained from  the tree. 

Part  (i)  is  easy:  The  reduction  tree  for  an  augmented  complete  generalized equation  (CGE,  a)  is  a  finitely  branching  unordered  tree  whose  root  node  is 
labeled  with  (CGE,  a),  and  all  nodes  n  labeled  with  (CGE',  0)  in  the  tree  are such that  CGE'  is a nonfalse  complete  generalized equation,  and 

-if  CGE'  is trivially  true  or  if  CGE'  is equal  to  CGE"  where  (CGE",  S)  is the label  of an ancestor node (for  any  base substitution  6), then  n is a leaf; 

-otherwise,  the descendants of n are precisely the nodes that  are each labeled with a distinct  nonfalse  (CGE",  S) in  COMPLETE(REDUCE(CGE',  0)). 

A  reduction  tree for  an augmented  (not  necessarily complete)  generalized  equa- tion  (GE,  CE) is a finitely  branching  unordered  tree whose root  node is labeled with 
(GE,  (r)  and  whose  immediate  subtrees  are  the  reduction  trees  of  the  com- plete  generalized  equations  (CGE,  a)  where  CGE  is  a  nonfalse  equation  in 
COMPLETE(GE). Part  (ii)  is  done  by  obtaining  a  certain  base substitution  from  each leaf  node 
labeled with  a trivially  true  augmented equation.  Where X denotes the trivial  partial base substitution  mapping  everything  into  the  empty  sequence, let  C  denote  the 
collection  of  all  such  base  substitutions  obtained  from  the  leaf  nodes  of  the reduction  tree  for  (GE,  X ).  We  prove  below  that  C  is  in  fact  a  minimal  and 
complete  collection  of base substitutions  solving  GE. Again  our  reduction-tree-generation  procedure  for  a generalized equation  GE is 
no  more  than  a search, for  leaf nodes, in  the  reduction  tree for  (GE,  h).  Consider leaf nodes labeled with  a trivially  true  (CGE,  a).  The  desired base substitution  a0 
associated with  this  label  (CGE,  (Y) is  obtained  by  replacing  every  boundary interval  (bd, bd')  in  LY by the  sequence 

where 

--y1 is the number  of boundaries  greater than  bd and less than  or equal to  bd',  say, bd=bdo<bd,<bdz<  . . . <bd,,=bd'; 

-if  bd,-,  and  bdi,  0 <  i  5  n,  are the  left  and  right  boundaries  of  a constant  base "a",  when  Wj is the letter  "a"; 
-otherwise,  Wi is a new parametric  variable. 

We then  say that  a0 is a goal  base substitution  of the tree. In  addition  to finding  such goal substitutions,  there is the problem  of termination 

when  all  nodes  labeled  with  trivially  true  equations  have  been  encountered.  Of 

Minimal  and  Complete  Word  Unification  81 

course, there  should  be  no  termination  if  GE  cannot  be completely  solved  by  a finite  collection  of base substitutions.  If,  however,  GE can be completely  solved by 

a finite  collection  of  base substitutions,  then  we ensure that  we never  genereate a subtree of  a node  n labeled  with  CGE(N,  M)  with  a depth  greater than  h(N,  M) 
(cf. Decision  Procedure Theorem).  We now  proceed with  formalizing  all  this. We first  need a few definitions  and lemmas: A  subword substitution  (Y for  GE is 
like  a base substitution  for  GE,  except  that  (Y maps boundaries  (or  subwords)  of GE (as opposed to bases of GE) into  a sequence of letters and parametric  variables. 

Thus,  like  in  the  case of base substitutions,  a generalized equation  GE is solved by a finite  or infinite  collection  C of subword substitutions  if the set of all the instances 
of these substitutions  is contained  in  the  set of subword  valuations  (as opposed to base valuations)  of all  solutions  of GE. Similarly,  the same is true  for the definitions 
of minimal  and  complete collections  of subword  substitutions. In  what  follows,  let  GE,  =  GENERALIZE(E),  where  E  is  a  word  equation. 
Where  GE  and  CGE  denote  a generalized  equation  and  a complete  generalized equation,  respectively,  let  REDUCE(CGE,  a)  be  denoted  by  (GE,  j3)  and  let 

COMPLETE(GE,  (Y) be denoted  by  (( CGE,,  6),  (CGE,,  Cu), . . . ,  (CGE,,  5)). Where C and D  are any two  sets, let  C 5  D denote that  C is isomorphic  to  a subset 
of D,  and let  C =  D denote that  C is isomorphic  to  D. 

LEMMA  4.1.  A goal  base substitution  of a reduction  tree for  (GE,  X)  solves GE. 
PROOF.  Let  (CGE,  CX) be the  label  of  the  leaf  node  in  question  and  let  cyo be the  goal base substitution  corresponding  to  this  node.  Since CGE  is trivially  true 

(all  variable  bases are empty),  the  set of  all  instances  of  a0 equals the  set of  base valuations  of  all  augmented  solutions  of  (CGE,  a).  In  other  words,  the  base 
substitution  a0  completely  defines  all  the  augmented  solutions  of  (CGE,  a). By  the  Completion  and  Reduction  Theorems,  for  each  augmented  solution  of 

(CGE,  cy) there  is  an  equivalent  augmented  solution  of  (GE,  X).  Thus,  every instance  of a0 is a base valuation  of some augmented  solution  of  (GE,  X).  Since X 
is the  trivial  partial  base substitution,  every instance  of  01~ is also a base valuation of some (nonaugmented)  solution  of GE. That  is, a0 solves GE.  0 

LEMMA  4.2.  C  is  a  minimal  and  complete set of base substitutions  for  GE,  ifl there is a set D  such that  D  =  C and D  is a minimal  and  complete set of subword 
substitutions  for  GEo. 

PROOF.  Suppose that  C  =  (LY,, CY~, . . .)  and  consider  an  LY[ E  D.  For  every boundary  bd E  GE,,  there  exists a collection  of  bases of  GE,,  say, (bs,,  bs2, . . . , 

bsk), such that  LEFT(bsJ  =  0, RZGHT(bs,)  =  LEFT(bs,+l)  for  all  1 5  i  <  k,  and RZGHT(bsJ  =  bd.  This  is  easy to  verify  from  the  definition  of  the  procedure 
GENERALIZE.  Define  now  the subword  substitution  &  by  defining  that 

P;[bd]  d'fai[bsl]ai[bs2]  * . .  ai[bsk]. 
Clearly,  the  collection  D  =  (PI,  p2,  . . .)  obtained  by  collecting  all  such  pi completely  solves GE. Thus,  D  5  C. 

We now  show that  if  aj  #  (Yk for  some aj and  O!k in  C, then  the  corresponding @, and  Pk are also different.  Combining  this  and  the  fact that  D  5  C, we have that 
D  =  C. Suppose now  that  aj #  ffk for  some Lyi and  Lyk in  C. Thus,  there must  exist a base 

bs and  an  instance f  of  aj and  ffk (recall  that  such f  is a mapping  from  the  set of 

82  JOXAN  JAFFAR 

parametric  variables into  words)  such t'hat the two  words 

f (aj[bsl)  and  f(wAbsI) 
are different.  Consider  now  the two  subword  substitutions  /3j and Pk in  D  that  were constructed  from  aj and  OIk, respectively.  Where  bdL and  bdR denote  the  left  and 

right  boundaries  of  bs in  GE,,  respectively,  let  Uj and  ok  denote  the  sequences /3j[bdt]  and Pk[bdL], respectively.  The  sequences @j[bdR] and &[bdR]  are therefore, 
respectively,  of the  form 

OjVj  and  &lkl;;c, 
where 

V; =  aj[bs]  and  &  =  ak[bs]. 
sincef(aj[bs])  and f(O(k[bs])  are different,  so too  are the  pairf(6)  andf(vk). That  is, @j #  ok.  q 

LEMMA  4.3.  D  is a set of subword  substitutions  completely  solving  GE  implies that 
(a)  CGEi,  1 5  i  I  n, is completely  solved by a set Di  of subword substitutions  such that  Di  5  D,  and 
(b)  the  nonempty  Di  define  a partition  of D,  that  is,  the  D;  are  mutually  disjoint and  their  union  is isomorphic  to D. 

PROOF.  We prove  that  if  a! E  D,  then  for  each 1 5  i  I  n, 6 either 
(i)  solves CGE,,  or  else (ii)  no  instance  of  Cu is a base valuation  of  any  solution  of  CGEi.  Intuitively,  this 

means that  for a pair  of unrelated  boundaries  bd and bd'  in  GE, (Y is compatible with  at most one of bd <  bd',  bd'  <  bd, and  bd =  bd'.) 

Since every  solution  of  CGE,,  1 I  i  5  n,  is also a  solution  of  GE,  the  desired subset Di  for  part  (a) will  be those substitutions  di in  class (i).  Part  (b)  will  follow 
automatically  from  the  mutual  exclusivity  of(i)  and  (ii)  (implying  that  the  Di  are disjoint)  and  the  Completion  Theorem  (implying  that  the  union  of  the  Di 
cover D). Let  (Y E D and  let (0, bd)  and (0, bd `) be two  boundary  intervals  in  GE. Fix  any 
instance  of  cy, and  let  w  and  w'  be  the  two  words  given  by  a[bd]  and  a[bd'], respectively,  in  this  instance.  Now  since  w and  w'  are both  prefixes  of  S(GE)  for 
some solution  S of  GE, exactly  one of the  following  is true:  (a) w ==  w',  or  (b)  w is a strict  prefix  of  w'  or  (c)  w'  is a strict  prefix  of  w. It  follows  then  that  exactly 
one  of  the  following  is  true:  (a)  ol[bd]  =  or[bd'],  or  (b)  cy[bd]  is  a  strict  initial subsequence of  ~~[bd'], or  (c)  c~[bd']  is a strict  initial  subsequence of  ~[bd].  (For 
otherwise,  a[bd]  is  of  the  form  IV, IV,  - . .  WJ  - - -  and  a[bd']  is  of  the  form w,w,  *-*  W,Y...)  where X  and  Y are not  the  same parametric  variable  nor  the 
same letter.  It  is then  easy to  see that  we can always find  an instance,  for  example, map X  and  Y into  "a"  and  "b",  respectively,  such that  w is not  a prefix  of  w'  nor 
vice  versa.) In  other  words,  either  w ==  w'  for  every instance  of (Y, or  w is a strict prefix  of  w'  for  every instance  of a!, or  w'  is a strict  prefix  of  w'  for  every instance 
of a. Now  each CGEi  satisfies exactly  one  of  the  following:  (a')  it  identifies  the  two 
boundaries  bd and  bd',  or  (b')  it  contains  bd <  bd',  or  (c')  it  contains  bd'  <  bd. Thus  if  a! falls into  case (a) above, then  no instance  of  Cu can satisfy (b')  or  (c').  If, 

Minimal  and  Complete  Word  Unification  83 

on the other  hand,  (Y falls into  case (b) above, then  no instance  of Cu can satisfy (a') or  (c').  Finally,  if  (Y falls  into  case (c)  above,  then  no  instance  of  ol can  satisfy 

(a')  or  (b').  Thus,  each  (Y E  D  is  compatible  with  at  most  one  CGEi  E COMPLETE(GE).  0 

Again  let  GE =  REDUCE(CGE).  Then 

LEMMA  4.4.  C is a set of subword substitutions  completely solving  CGE  implies there  exists  a  collection  D  of  base substitutions  completely  solving  GE  such  that 

D  5  C. 

PROOF.  In  each of the cases below, we construct,  for every a! E  C, a correspond- ing  subword  substitution  /I  E  D,  which  solves GE.  The  rest of  the  proof,  that  is, 

the collection  of these p completely  solves GE, will  follow  because (a) the Reduction Theorem  states that  for  every solution  S of  GE there  exists a solution  S'  of  CGE, 

and  (b)  where  a! is the  subword  substitution  in  C whose instance  gives rise to  S', the  corresponding  subword  substitution  p  in  D  has  an  instance  corresponding 
to  s. If  GE is obtained  from  CGE  via  Case 1, let  W =  LY [LEFT(bs,)];  if,  however,  GE 

is obtained  from  CGE  via Case 2, let  W=  a[LEFT(bs,)].  In  either  case, a[bd],  for all  bd E  GE (i.e., all  bd E  CGE  greater than  or equal to  LEFT(bs,)),  is of the form 

I-%%. ,t3[bd] is then  defined  to  be 2.  Clearly,  p solves GE. Suppose GE is obtained  from  CGE  via  Case 3a. Then  P[bdM+i],  1 5  i  5  k  +  1, 
is defined  to  be the  same as cr[LEFT(bsAU)]a![bdi].  The  rest of  0  is defined  to  be the same as 01. Clearly,  @ solves GE. 

Case 3.3b is treated  similarly. Finally,  suppose that  GE  is  obtained  from  CGE  via  Case 4a or  4b.  Again  we 
assume here  for  notational  convenience  that  bdk denotes LEFT(bs,)  in  Case 4a, and  bdk denotes RZGHT(bs,,)  in  Case 4b.  We also assume that  J  is  of  the  form 

il,Z...,  lJl),wherejJl  +m=k. Let  cz[LEFT(bs,)]  =  @.  Firstly,  we  define  /3[LEFT(bsa,)]  =  2  where 
CX[LEFT(~~~,)] is of the  form  l8'2.  Next,  p[bd],  for  all  bd E  CGE  greater than  or equal  to  LEFT(bs,),  is defined  to  be  Y where  a[bd]  is  of  the  form  l%`?  Finally, 
/3[bdM+i], 1 I  i  5  m, (and  recall that  these are the boundaries  in  GE not  appearing in  CGE)  is defined  to be %~[bd,~,+~] where CX[LEFT(~.Y,,)] is of the form  I%??. It  is 

straightforward  to  verify  that  indeed  p solves GE.  0 

Once  again,  let  GE0 =  GENERALIZE(E)  for  any  word  equation  E,  and  let  X denote  the  trivial  the  base  substitution  that  maps  every  base  into  the  empty 

sequence. 

MAIN  THEOREM.  The  set  of  goal  base substitutions  of  the  reduction  tree  of (GE,,,  A)  is a minimal  and  complete set of base substitutions  for  GE,. 

PROOF.  Let D denote a minimal  and complete set of base substitutions  for  GE,. Let  T be the  reduction  tree for  (CEO, X),  and  let  L  denote the  set of trivially  true 
equations labeling  (leaf)  nodes in  T. Let DL denote the set of goal base substitutions associated with  L. 

We first  show that  D  5  DL. By  Lemma  4.1,  each base substitution  in  DL solves GE,.  Using  the Completion  and  Reduction  Theorems,  we have that  the collection 
of all  augmented  solutions  of GE0 equals the  collection  of all  augmented  solutions of equations  in  L.  Since each base substitution  in  D,  completely  solves an equation 
in  L,  DL completely  solves GE,,. Since D  is assumed to  be minimal,  it  follows  that D  5  DL. 

84  JOXAN  JAFFAR 

We  now  show  that  DL  5  D.  Since  D  is  a  minimal  and  complete  sete of  base substitutions  for  G&,  we  have,  by  Lemma  4.2,  that  there  is  a  minimal  and 

complete  set 0,  of  subword  substitutions  for  GE0 such that  D,  =  D.  By  Lemmas 4.3  and  4.4,  we  have  the  general  property  that  if  Do  is  a  collection  of  subword 
substitutions  completely  solving  an equation  GE  in  a reduction  tree, then  there are collections  D,  , D2,  . . . , Dk  of  subword  substitutions  each of  which  solves a child 
equation  of GE  such that  D,  U  D2 U  - - . U  Dk  5  Do.  Applying  this general property to  the particular  case where GE  is GE,,  Do is D,  and D, 

U  D2 U  . . -  U  Dk in  DL,  is follows  that  DL  5  D. 

Thus,  D  =  DL  and  the theorem  follows.  Cl 
5.  Conclusion 
We started with  an  arbitrary  word  equation  E  and  then  constructed  an equivalent generalized equation  G&,.  The  problem  of generating  a minimal  and complete  set 

D  of  unifiers  for  E  is thus  reduced  to  the  problem  of  generating  a minimal  and complete  set of base substitutions  for  GEO. 

We then  defined  that  reduction  tree T corresponding  to any generalized equation GE  has a root  label of GE,  and whose children  are the reduction  trees corresponding 
to the equations  obtained  from  GE  by  using the two  procedures COMPLETE  and REDUCE.  We  then  proved  that  GE  is  satisfiable  iff  there  exists  a  trivially  true 
equation  in  T  labeling  a node at depth  5  h(GE'), where h is a recursive  function  on the  size of  GE.  This  provided  a decision  procedure  for  the  satisfiability  problem 
for  any generalized  equation. We then  addressed the  main  problem  of  generating,  in  a minimal  way,  all  the 
solutions  of GE,, . Toward  this end, we first augmented the procedures COMPLETE and  REDUCE,  thereby  augmenting  the  notion  of  a reduction  tree,  so that  each 
generalized  equation  GE  in  the  reduction  tree for  GE0  contained  a partial  specifi- cation  of  some of  the  solutions  of  GE,.  If,  in  particular,  GE  labels a leaf node  of 

T,  then  GE  contains  a full  specification  of  some of the  solutions  of  GEO. By  then considering  all the leaf nodes of  T,  we have a full  specification  of all  of the solutions 
of GE,. Thus,  our  algorithm  proceeds by  constructing,  in  a  breadth-first  manner,  the 
reduction  tree for  GEO. It  pauses whenever  it  encounters  a leaf node  labeled  with a trivally  true equation  to collect the base substitution  associated with  this equation. 
Because (a)  this  base substitution  corresponds  to  a unifier  in  D,  (b)  no  two  such base substitutions  correspond  to  the  same unifier,  and  (c) the algorithm  can detect 
if any subtree of T does not  contain  a leaf equation  labeling  a trivially  true  equation, the  base substitution  corresponding  to  each unifier  in  D  is  eventually  generated. 
Furthermore,  the algorithm  terminates  if  D  is finite. 
ACKNOWLEDGMENTS.  The  author  is grateful  to Jean-Louis  Lassez for  his help  and encouragement  during  this  research. The  very  detailed  comments  from  both  the 
referees, pointing  out  many  inaccuracies  in  an  earlier  version  of  this  paper,  have been extremely  valuable.  Nevin  Heintze  and Michael  Maher  gave useful comments 
on  the  manuscript. 
REFJZRENCES 

1. ABDULRAB,  H.  Resolution  D'Equations  sur  les  mots:  Etude  et  Implementation  Lisp  de L'Algorithme  de Makanin.  These doctorat  es sciences, UniversitC  de Rouen,  Rouen,  France, Mar. 

1987. 

Minimal  and Complete Word Unification  85 

2.  BENNETT, J.  H.  CRT-aided  semi-automated  mathematics.  AFCRL  67-0167.  Applied  Logic Corporation,  Princeton,  N.J.,  1967. 

3.  BULITKO, V.  K.  Equations  and inequalities  in  a free group  and a free semigroup.  Tul.  Gos. Ped. Inst.  Ucen. Zap. Mat.  Kafedr  Vyp 2, Geometr. i Algebra  (1970), 242-252  (in  Russian). 
4.  COOPER, D.  C.  Theorem-proving  in  arithmetic  without  multiplication.  Much.  Int.  7  (1972), 91-99. 
5.  HMELEVSKII, Ju.  I.  Equations  in  free semigroups.  Trudy  Mat.  Inst.  Steklov  107 (1971) (English translation;  Proc. Steklov Inst. 

of  Mathematics  107 ( 197 1, 1977)), 269 pages. 6.  MAKANIN, G. S.  The problem  of solvability  of equations in a free semigroup. Math.  USSR Sbornik 

32, 2 (1977), 129-198 (In  AMS,  (1979)). 7.  NEVINS, A. J.  A  human  oriented  logic  for theorem  proving.  J. ACM  21, 4 (Oct.  1974), 606-621. 
8.  PECIJCHET, J.-P.  Equations avec Constantes et Algorithme  de Makanin.  These 3e Cycle, Universiti de Rouen, Rouen,  France, Dec.  198 1. 
9.  PLOTKIN, G.  D.  Building  in  equational  theories. Mach.  Int.  7 (1972), 73-90. 10.  SIEKMANN, J.  String unification.  Memo  CSM-7, Essex Univ.,  Essex, England,  1975. 
11.  SIEKMANN, J., AND  SZABO,  P.  Universal  unification  and a classification  of equational  theories. In Proceedings of the 6th Conference on Automated  Deduction (New York).  Lecture Notes in Computer 

Science, Springer-Verlag,  New York,  1982, vol.  13, pp.  369-389. 

RECEIVED  APRIL  1985; REVISED  MAY  1987 AND  MARCH  1989; ACCEPTED  APRIL  1989 

Journal  of  the  Association  for  Computing  Machinery.  Vol.  37.  No.  I,  January  1990. 