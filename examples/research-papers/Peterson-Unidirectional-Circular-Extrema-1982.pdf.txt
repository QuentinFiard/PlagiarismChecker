

An  O(n  log  n)  Unidirectional  Algorithm for  the  Circular  Extrema  Problem 
GARY L.  PETERSON 
University of  Rochester 

Hirschberg  and Sinclair recently published a  solution to the  circular extrema-finding (or election) problem which requires O (n log n) message passes in two directions around the ring. They conjecture 

that  12(n 2) message passes  are  required in the  unidirectional case. This conjecture is shown  to  be false. The  algorithms  presented here  are  unidirectional, simpler than the  Hirschberg  and Sinclair 
solution, use fewer  (in fact,  optimal)  distinct messages, have many fewer total message  passes, and 
require less time. 

Categories  and  Subject Descriptors:  C.2.4 [Computer-Communication Networks]:  Distributed Systems--distributed applications; D.4.1 [Operating Systems]: Process Management--synchroni- 

zation; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 
General Terms: Algorithms, Performance 
Additional Key Words and Phrases:  Distributed algorithms,  extrema finding, message passing 

1.  INTRODUCTION 
G i ve n   n  processes  in  a  ring  c o m m u n i c a t i n g   only   w i t h   me ssage   pa ssin g  to  its 
neighbors,  t he   circular  extrema-finding  (or  election)  problem  is  to  select  a maximum 

(or  minimum)  process.  E a c h   process  ha s  a  u n i q u e  va l ue   in  a  set  w i t h 
a  total  order.  T h e s e   values m a y   be  t r a n s m i t t e d   a n d   c o mp a re d .  All processes  are 
identic al  (except  for  t he ir  value)  a n d   n,  th e  n u m b e r   of processes,  is  n o t   initially 

kn own. 

S olu tio ns  m a y   be  c o m p a r e d   usin g  several  m e asu res.  T h e   p r i m a r y   on e  is  t he  
total  n u m b e r   of me ssages  t r a n s m i t t e d   b y   the   processes.  Also,  o ne  c a n   c o u n t   t he  

n u m b e r   of  distinc t  message s  u se d  a n d   th e  to ta l  me ssa ge   delay  t i m e   ( a ssu m in g  

t h a t   each  message  ta kes  a  m a x i m u m   of  one  u n i t   of  t i m e   to  be  t r a n s m i t t e d ) .   I n  
addition, one c an  consider l im it ing  t he   n u m b e r   of dire c tio ns t h a t   m essage s  c a n  be 
t r a n s m i tt e d ;  in this  case,  a  messa ge  c a n  be  t r a n s m i t t e d   e it he r u n i d i r e c t i o n a l l y  or 
bidirectionally. Obviously, the   simplicity of a  so l u t io n  is i m p o r t a n t .  

This research  was supported in part by the Office of Naval Research  under grant N00014-80-C-0917 and in part by DARPA under grant N00014-78-C-0164. 
Author's address: Department of Computer Science, University of Rochester,  Mathematical Sciences 
Building, Rochester,  NY 14627. Permission to copy without fee all or part of this material is granted provided  that the copies are not 

made or distributed for direct commercial advantage,  the ACM copyright  notice and the title of the publication and its date appear,  and notice is given that copying is by permission of the Association 
for  Computing  Machinery.  To  copy  otherwise,  or  to  republish,  requires  a  fee  and/or  specific 

permission. (C) 1982 ACM 0164-0925/82/1000-0758 $00.75 

ACM Transactions on Programming Languages and Systems, Vol. 4, No. 4, October 1982, Pages 758-762. 

Unidirectional  Algorithm  for  the  Circular  Extrema  Problem  759 
The original solution to the problem was due to LeLann [5] and required O (n 2) 
message  passes.  The  algorithm  proposed  by  Chang  and  Roberts  [2]  requires 
O(n  log n)  in the  average case,  but still O(n 2) in the  worst case.  Both solutions were unidirectional. The algorithm by Hirschberg and Sinclair [4] has O (n log n) 

message  passes  in  the  worst  case,  but  requires  bidirectional  communication. Burns  [1]  has  a  slightly better  bidirectional 

O(n  log n)  algorithm.  In  addition, 
Burns formally defines the model and the problem and gives an 12 (n log n)  lower 
bound  for  the  bidirectional  case.  Hirschberg  and  Sinclair  conjecture  that  any 
unidirectional solution must  be  ~2(n2). The  unidirectional algorithms presented 
here  disprove their  conjecture by requiring at  most  O (n log n)  message  passes. 

Furthermore, these algorithms are better in all respects than the algorithms given in [1, 4]. 

2.  THE  BASIC ALGORITHM 
In this case, consider finding the maximum process and assume all messages are 
passed to the right. All processes are divided into two categories: active and relay. 
All processes are initially active. (The standard assumptions are made about how 
the  election gets started and how it terminates after the  maximum is found; see 

[2].)  Active  processes  operate  in  phases.  Relay  processes  just  pass  on  any 
messages they receive. The primary goal is to have the number of active processes 
be  cut at least in haft during each phase.  Each process  starts with its own value 
as its temporary identifier (tid).  During a  phase, each active process receives the tid of its nearest active neighbor to the left and that neighbor's nearest left active 

neighbor's tid.  If the first process sees that its left active neighbor has the largest of  the  three 

tids,  then  it  sets  its  tid  to  that  value  and  starts  the  next  phase. Otherwise, it becomes a relay process.  (In retrospect, this algorithm is a unidirec- 

tional simulation of an obvious bidirectional algorithm, using a  "sliding" method 
similar to that given in [6]. Bidirectionally, a process obtains the tid of its left and 
right active neighbors and survives the phase only if it is the largest of the three.) The text of the election part of the algorithm follows. The procedure send(msg) 

sends msg  to the right, and receive  (var)  waits until a  message has arrived from 

the left and puts its value into var.  If the message received is the initial value of 
the process, then an exception occurs and that process will consider itself elected and will perform whatever action it is required to do. In order to handle the case 

of two active processes, an active process will never send a tid lower than its own. 

tid := initial value do forever 

begin /*  start phase  */ 

send(tid) receive(ntid) 

if ntid =  initial value then announce  elected if t/d > ntid then send(t/d) 

else send(ntid) receive(nntid) 
if nntid =  initial value then announce  elected if ntid >_ max(tid, nntid) t he n  tid :-- ntid 

else goto relay end 

ACM Transactions on Programming Languages and Systems, Vol. 4, No. 4, October 1982. 

760  Gary  L.  Peterson 

relay: do forever 

begin receive(rid) 

if tid =  initial value then announce elected send ( tid ) 
end 

3.  ANALYSIS  OF THE  BASIC  ALGORITHM 
It  is  very simple  to  see  tha t  at  most  2nllog  nJ  +  n  messages  are  sent.  First  one 
notes  that  there  can  be  at  most  [log nJ  phases  to  reach  one  active  process.  This 
follows from  the  fact  th at   any  active  process  survives  a  phase  only if the  active 

process to its left does not survive tha t  phase.  Hence of m  active processes during 

a  phase,  at m o s t / m / 2 J   will survive for m  >  1. During  a  phase  every process sends 

(and  receives)  two  messages,  and  on the  last  phase  the  lone  active process  sends 
one  message  which  is relayed  around  to  the  m a xi mu m  for  a  total  of 2n[log  nJ  + 
n.  Hirschberg  and  Sinclair's  solution  has  an  upper  bound  of 8nrlog  n]  +  8 n  and 

Burns's  is only slightly better th an   theirs.  Note t hat   if the  values of the  processes 

are  ordered  around  the  ring,  in  either  direction,  the n  only  one  process  is  active 
after  the  first  phase.  Since,  in  the  average  case,  only  m /4   processes  survive  a 
phase,  the  average  nu m b er   of messages  sent  is about  n  log n  for large  n. 

T h e  correctness of the algorithm follows from two facts: during any phase  there 
is exactly one process whose  tid is the  m ax im u m  value,  and  no process except the 
maximum  will  ever  see  its  own  initial  value.  T h e   first  fact  comes  by  noting  th at  

the  process  whose  rid is  the  m a xi mu m  value  is  by  definition larger  t h a n   its  two 

active  neighbors,  so  the  active  process  to  its  right  will  have  its  tid  equal  to  the maximum  on the  next phase.  T h e   second fact follows by first noting that,  for any 

process,  its  value  is  either the  tid value  of the  nearest  active  process  to  its right, 
or  its  value  no  longer  is  being  propagated.  It  therefore  follows  t hat   in  order  for 
some  n o nm ax im um   value  of a  process to  cycle around  the  ring,  the  largest  value 

must  already  have  passed  the  process  (lest  the  active  process  with  tid  equal  to 

the  max imum   prevents  passage  of the  lower value), bu t  t he n  the  smaller value  is 
no  longer being  propagated  since  the  tid value  to  the  right  of the  process  is now 
the  maximum. 

Note  th at  only  n  distinct  messages  are  used.  This  is  obviously  the  minimum, 
since  we  are  assuming  th at  the  processes  are  identical  (and  if one  process  never 

sends  its  value,  then  none  do)  and  values  cannot  be  broken  up  into  a  string  of 
successive  messages.  T h e   solution  in  [4]  requires  O (n 2 log  n)  distinct  messages, 
but  breaking  up  messages  improves  this,  at  a  cost  of more  total  messages  sent. 

Th e re   is a  simple  upper  bound  on the  message  delay time  of O (n  log n)  which 
follows from the  fact th at  there  are  about  log n  phases  of time  O(n)  in the  worst 

case.  Bu t there  is an upper  bound  of 2n  -  1 t h a t   is ha rde r to  derive.  Consider the 
maximum  valued  process,  call  it  P0,  and  look  backward  in  time  starting  at  the 

point  where  it  sees  its  own  value  for the  first  time.  If there  are  two  processes  at 
the  last  phase,  t he n  one  process  whose  tid  is  not  the  maximum,  call  it  P1,  will 
wait until the maximum arrives from some other process, call it P2, and retransmit 
it.  P2  cannot  send  the  max imum   until  it  receives  the  second  message  in  the 
previous  phase  from  another  process  (P3)  which  cannot  send  it  until  it  receives 

ACM Transactions on Programming Languages and Systems, Vol. 4, No. 4, October  1982. 

Unidirectional  Algorithm  for  the  Circular  Extrema  Problem  761 
the  first message  from a  process further back  (P4).  In  general,  there  is a  process 
P2j which  has  to  wait  until  some  P2j+I  gets  its first message  from some  P2j+2  and 
retransmits  it.  (If only one process survives at the last phase,  t he n there is no P1.) 

Clearly the  total  am ou nt   of message  delay time  for Po to  see  its  own value  is  the 
length of this backward  chain, where distance is the nu mb er  of processes between 

each  Pi+l  a n d  Pi,  counting  relay  processes.  T he   assertion  is  that  the  max imum  
length  of this  chain  is  2n  -  1.  This  comes  from  proving  that  the  chain  cannot cross Po twice. 

Suppose instead  that  there are j, k,  ( j  >  k),  where Po lies between P2j and P2j+2 
and  also  between P2k and  P2~+2. If P0 lies between P2j and  P2j+I, then P2j's tid  at 
that  time  is the  maximum,  applying the  observation used  above where  the  tid  of 
the  active  process  to  the  right  of  the  m axim um  must  be  the  maximum.  T hu s 
P2j-2 will see that Pej-~'s  tid  is actually s m a l l e r   tha n  P2j's rid  and  will not survive 
that  phase;  the  chain  is broken.  Similarly  for P0  between  Pej+I  and  Pej+~.  So  the 
chain  can  only be  broken  once  (near  the  end),  and  the  length  of the  chain  is  at most  2n  -  1. 

For n  at least six, the worst case is nearly reachable by having the largest value 
initially  two  positions  to  the  left  of the  second  largest,  which  is  two  left  of the 

third  largest.  T he   length  of  the  backward  chain  in  this  case  is  2n  -  3.  This 
compares  favorably  to  the  worst  case  upper  bound  of 6n  -  6  for  the  algorithm in  [4]. 

If  relay  processes  were  allowed  to  stop  intercepting  messages  to  retransmit th em  (except to note whether the message was their own value), then the nu mb er  
of messages  sent  would  be  at  most 4 n  and  the  time  would  be  at  worst  2  log n. 
4.  IMPROVEMENTS 
Th er e   is  a  very  simple  way  to  improve  the  basic  algorithm  so  that  even  fewer 
total  messages  are  sent  without  producing  any  increases  in  the  other  measures. 
Looking at  the  bidirectional version  of the  basic  algorithm,  it is easy to note  that 
instead  of an  active process  getting  the  tids  of its  neighbors  at  the  same  time,  it 
can  first  compare  itself  to  its  left  neighbor  (an  A-phase)  and  t hen   its  right 
neighbor  (a  D-phase).  This  means  that  there  are  two  phases  where  one  sufficed 
before, but a  process can determine  earlier that  it should become a  relay process. Converting back  to  unidirectional gives the  following algorithm: 

tid  :=  initial value do  fo reve r 
begin /*  Compare to left, an A-phase  */ 

send ( tid ) receive(nticl) 
if ntid  -- initial value then  announce elected if ntid  >  tid then  goto relay 
/*  Compare to right, a D-phase  */ send ( tid ) 
receive(ntid) if ntid  =  initial value th en announce elected 
if ntid  <  rid then  goto relay else tid  := ntid 
end 

ACM Transactions on Programming Languages and Systems, Vol. 4, No. 4, October 1982. 

762  Gary  L.  Peterson 
relay: do f orev er 

begin receive(ntid) 

if ntid  =  intial value then  announce  elected send(ntid) 
end 

All  the  m a j or   points  of  correctness  and  complexity  are  the  sa me   as  for  the 
basic  algorithm  except  for  the  total  n u m b e r   of messages  sent.  T h e   total  n u m b e r  
of  messages  is  roughly  pn,  where  p  is  the  m a x i m u m   n u m b e r   of phases,  since  n 
messages  are  sent  per  phase.  T h e   following  discussion  proves  t h a t  p  is  at  m os t   c 
log  n  +  O(1),  where  c  is  the  inverse  of  the  logarithm  (base  two)  of  the  golden 
ratio  cp =  (1  +  J-5)/2,  and  therefore  at m os t   1.440420...  n  log n  +  O (n)  messages 

are  sent.  N u m b e r   the  phases  in  reverse  order  so t h a t  p  is  the  first  phase  and  1 is 
the  last,  after  which  only  one  active  process  remains.  Let  mk denote  the  n u m b e r  
of active  processes  left at  the  end  of the  k t h   phase,  t h a t   is,  mp+i  =  n  and  ml  ffi 1. 

During  an  A-phase,  a  process  m a y   re m ai n  active  only  if  the  process  to  its  left 
b ec am e  a  relay  on  the  previous  phase.  Similarly  for  a  D-phase,  but  to  the  right. 

This  mea ns  t ha t  the  n u m b e r   of processes  remaini ng  active  at  the  end  of the  k t h  
phase  is  at  m o s t   the  n u m b e r   t h a t   b e ca m e   relays  during  the  (k  +  1)st  phase.  In 
other  words,  mk  -<  mk+2 -  ink+l,  or  ink+2 >-  mk+l  +  ink.  This  gives  a  Fibonacci 
progression,  so t ha t   m k -   Fk+l, where  Fk  is the  k t h   Fibonacci  num ber .  Since  Fp+l 

=  cpp+l/j-~  +  O (1), taking  logarithms  and  solving for p  gives the  desired  result.  It 
is  also  easy to  construct  examples  which  de m on s t ra t e   t h a t   this  boun d  is tight. 

T h e   question  of  lowering  the  constant  factor  of  1 . 4 4 . . .   has  received  some 
attention.  In  [3],  Dolev  et  al.  appl y  a  technique  which  originally  used  the  basic 
algorithm  to  the  i mpr oved  algorithm  and  de m on st r a t e  a  constant  factor  of 

1.356  . . . .   but   the  n u m b e r   of distinct  messages  used  (and  therefore  the  message 
size}  increases  considerably.  T h e y   point  out  t h a t   the  total  n u m b e r   of bits,  in  an 

appropriate  measure,  actually increases.  While  the  techniques  of [3]  can no  doubt 
be  further  applied  to  reduce  the  const ant  factor,  the  pr o b l e m  of doing  so without 
increasing  the  n u m b e r   of bits  sent  is  still  open.  No t e  t h a t   Bu rns   [1]  showed  t ha t  
1/4n  log  n  messages  m u s t   be  sent  when  n  is  a  power  of two,  even  if bidirectional 

com munication  is  allowed. 

REFERENCES 

1.  BURNS, J.E.  A formal model  for message passing systems.  Tech.  Rep.  91,  Computer Science Dep., Indiana  Univ., Bloomington, May 1980. 

2.  CHANG, E.,  AND  ROBERTS, R.  An  improved  algorithm  for  decentralized  extrema-fmding  in circular configurations of processes. Commun.  ACM 22, 5 (May 1979), 281-283. 
3. DOLEV, D., KLAWE,  M., AND RODEH, M.  An O(n log n) unidirectional distributed algorithm for 

extrema finding in a circle. IBM  Research Rep. RJ3185, IBM  Corp., San Jose, Calif., July 1981. 
4. HIRSCHBERG,  D.S., AND SINCLAIR, J.B.  Decentralized extrema-finding in circular configurations 

of processors. Commun.  ACM  23, 11 (Nov. 1980), 627-628. 
5. LELANN,  G.  Distributed  systems--Towards  a formal approach.  Information  Processing  77, 

Elsevier Science, New  York, 1977, pp. 155-160. 
6. SMITH, A.R., III.  Cellular automata complexity trade-offs. Inf. Control 18 (1971), 466-482. 

Received December  1980; revised February 1982; accepted February 1982 

ACM Transactions on Programming Languages and Systems, Vol. 4, No. 4, October 1982. 