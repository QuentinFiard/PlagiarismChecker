

J. Functional Programming 7 (6) 661-666, November 1997 cfl 1997 Cambridge University Press 661

F U N C T I O N A L P E A R L S
Three Algorithms on Braun Trees

CHRIS OKASAKI#
School of Computer Science, Carnegie Mellon University
5000 Forbes Avenue, Pittsburgh, Pennsylvania, USA 15213

(e-mail: cokasaki@cs.cmu.edu)

1 Introduction
Among the many flavors of balanced binary trees, Braun trees (Braun & Rem,
1983) are perhaps the most circumscribed. For any given node of a Braun tree,
the left subtree is either exactly the same size as the right subtree, or one element
larger. Braun trees always have minimum height, and the shape of each Braun
tree is completely determined by its size. In return for this rigor, algorithms that
manipulate Braun trees are often exceptionally simple and elegant, and need not
maintain any explicit balance information.

Braun trees have been used to implement both flexible arrays (Braun & Rem,
1983; Hoogerwoord, 1992; Paulson, 1996) and priority queues (Paulson, 1996; Bird,
1996). Most operations involving a single element (e.g. adding, removing, inspecting
or updating an element) take O(log n) time since the trees are balanced. We consider
three algorithmically interesting operations that manipulate entire trees. First, we
give an O(log2 n) algorithm for calculating the size of a tree. Second, we show how
to create a tree containing n copies of some element x in O(log n) time. Finally, we
describe an order-preserving algorithm for converting a list to a tree in O(n) time.
This last operation is not nearly as straightforward as it sounds!

Notation
A tree is either empty, written hi, or a triple hx; s; ti, where x is an element and s
and t are trees. The subtrees s and t must satisfy the balance condition

|t| + 1 >= |s| >= |t|
We abbreviate the leaf hx; hi; hii as hxi.

# This research was sponsored by the Advanced Research Projects Agency CSTO under

the title "The Fox Project: Advanced Languages for Systems Software", ARPA OrderNo. C533, issued by ESC/ENS under Contract No. F19628-95-C-0050.

662 Chris Okasaki

2 Calculating the size of a tree
It is trivial to calculate the size of a tree in O(n) time by counting every node
individually.

size hi = 0
size hx; s; ti = 1 + size s + size t

However, this fails to take advantage of the fact that, once we know the size of one
subtree, there are only two possibilities for the size of the other subtree. If |t| = m
then either |s| = m or |s| = m + 1. Let us define a function diff s m that returns 0
if |s| = m and 1 if |s| = m + 1. Then, size can be rewritten

size hi = 0
size hx; s; ti = let m = size t in 1 + 2 * m + diff s m

The base cases for diff are trivial.

diff hi 0 = 0
diff hxi 0 = 1

The remaining cases use the easily verified fact that, if |hx; s; ti| = m, then |s| =d

(m - 1)=2e and |t| = b(m - 1)=2c. Now, suppose that |hx; s; ti| is either m or
m + 1. If m is odd, then the size of the right subtree is fixed, since b(m - 1)=2c =
(m - 1)=2 = b(m + 1 - 1)=2c. On the other hand, the size of the left subtree might
be either d(m-1)=2e = (m-1)=2 or d(m+1-1)=2e = (m+1)=2. We can determine
which by recursing on the left subtree.

diff hx; s; ti (2 * k + 1) = diff s k
If m is even, the situation is reversed -- the size of the left subtree is fixed and we
recurse on the right subtree.

diff hx; s; ti (2 * k + 2) = diff t k
The complete algorithm is

size hi = 0
size hx; s; ti = let m = size t in 1 + 2 * m + diff s m

diff hi 0 = 0
diff hxi 0 = 1
diff hx; s; ti (2 * k + 1) = diff s k
diff hx; s; ti (2 * k + 2) = diff t k

The running time of size is dominated by the calls to diff, one for each left subtree
along the right spine. Each call to diff runs in O(log n) time, for a total of O(log2 n).

3 Creating a tree by copying
Suppose we want a function copy x n that creates a tree containing n copies of x.
Of course, we can easily do this in O(n) time with

copy x 0 = hi
copy x n = hx; copy x d(n - 1)=2e; copy x b(n - 1)=2ci

Functional pearls 663
However, this function will frequently call copy multiple times on the same arguments. In particular, whenever n is odd, the two recursive calls will be identical.
Our next version of copy takes advantage of this fact.

copy x 0 = hi
copy x (2 * m + 1) = let t = copy x m in hx; t; ti
copy x (2 * m + 2) = hx; copy x (m + 1); copy x mi

Exercise: Show that this version of copy runs in

O(fib (log2 n)) = O(OElog2 n) = O(nlog2 OE) = O(n0:69:::)
time, where OE is the golden mean, (1 + p5)=2. 2

We can do still better by realizing that copy x (m+ 1) and copy x m produce very
similar results. The former is the result of adding a single x to the latter. Writing
the cons function on trees x \Phi  t, we get

copy x 0 = hi
copy x (2 * m + 1) = hx; t; ti
copy x (2 * m + 2) = hx; x \Phi  t; ti

where t = copy x m

where

x \Phi  hi = hxi
x \Phi  hy; s; ti = hx; y \Phi  t; si

is the standard algorithm for adding an element to a Braun tree. Note that this
function swaps the subtrees s and t. This behavior is a distinguishing feature of
Braun trees. It is used to maintain the balance condition since

|t| + 1 >= |s| >= |t|) |

s| + 1 >= |t| + 1 >= |s|

This version of copy runs in O(log2 n) time. The analysis is identical to that of size.

For our final version of copy, we delve deeper into the structure of Braun trees.
Note that if |hx1; s1; t1i| = |hx2; s2; t2i| + 1, then either |s1| = |t1| = |s2| = |t2| + 1
or |s1| - 1 = |t1| = |s2| = |t2|. In either case, we can create trees of both size n and
size n + 1 given only trees of sizes b(n - 1)=2c and b(n - 1)=2c + 1. Applying this
idea recursively yields

copy x n = snd (copy2 x n)
copy2 x 0 = (hxi; hi)
copy2 x (2 * m + 1) = (hx; s; ti; hx; t; ti)
copy2 x (2 * m + 2) = (hx; s; si; hx; s; ti)

where (s; t) = copy2 x m

where copy2 x n returns a pair of trees of sizes n + 1 and n respectively. This runs
in only O(log n) time.

664 Chris Okasaki

0
\Gamma \Gamma 

\Gamma 

@@

@1

\Delta \Delta 
\Delta 

AA

A

2
\Delta \Delta 

\Delta 

AA

A3

\Lambda \Lambda 
\Lambda 

CC

C

5
\Lambda \Lambda 

\Lambda 

CC

C

4
\Lambda \Lambda 

\Lambda 

CC

C

6
\Lambda \Lambda 

\Lambda 

CC

C7 11 9 13 8 12 10 14

Fig. 1. A Braun tree of size 15, with each node labeled by its index.

4 Converting a list to a tree
The previous algorithms have applied to Braun trees representing either flexible
arrays or priority queues. This last algorithm applies only to flexible arrays. See
Bird (1996) for a similar treatment of priority queues.

Given a list, we want to create a flexible array containing the same elements in the
same order. Figure 1 illustrates the order of elements in a Braun tree representing
an array. This order is defined recursively. Element 0 of hx; s; ti is x. The left subtree
s contains the odd elements, while the right subtree t contains the (positive) even
elements. Thus, for example, the indexing function s ! i can be written

hx; s; ti ! 0 = xh

x; s; ti ! (2 * i + 1) = s ! ih
x; s; ti ! (2 * i + 2) = t ! i

Now, a simple but inefficient way to convert a list to an array is to insert the
elements one at a time into an initially empty array.

makeArray xs = foldr (\Phi ) hi xs
Unfortunately, this takes O(n log n) time.

A second approach exploits the fact that the left subtree contains the odd elements and the right subtree contains the even elements.

makeArray [ ] = hi
makeArray (x : xs) = hx; makeArray odds; makeArray evensi

where (odds; evens) = unravel xs

unravel [ ] = ([ ]; [ ])
unravel (x : xs) = (x : evens; odds)

where (odds; evens) = unravel xs

But this also takes O(n log n) time.

This last approach works top down. Let us instead try to work bottom up. First,
consider the relationship between adjacent rows. For example, here are the third
and fourth rows from Figure 1.

Functional pearls 665
3 5 4 6
\Lambda \Lambda 

\Lambda \Lambda 

\Lambda \Lambda 
\Lambda \Lambda 

\Lambda \Lambda 
\Lambda \Lambda 

\Lambda \Lambda 
\Lambda \Lambda 
CC

CC

CC

CC

CC

CC

CC

CC
7 9 8 1011 13 12 14

A pattern emerges as we rearrange the nodes from the third row in numerical order.
We draw the subtrees slightly askew to emphasize our point.

3 4 5 6
\Theta \Theta 
\Theta 

\Theta \Theta 
\Theta 

\Theta \Theta 
\Theta 

\Theta \Theta 
\Theta 
CC

CC

CC

CC

CC

CC

CC

CC7 8 9 10
11 12 13 14

From this picture, we see that the first half of each row become the left children of
the previous row, and the second half of each row become the right children of the
previous row. We begin to code this idea as an algorithm by partitioning the input
list into rows.

rows k [ ] = [ ]
rows k xs = (k; take k xs) : rows (2 * k) (drop k xs)

For example,

rows 1 [0::14] = [(1; [0]); (2; [1; 2]); (4; [3; 4; 5; 6]); (8; [7; 8; 9; 10; 11; 12; 13; 14])]
Note that we explicitly store the size of each row. This size may be inaccurate for
the last row if it is not full.

Next, we process the rows bottom up. At each step, we combine a row with a list
of its subtrees.

build (k; xs) ts = zipWith3 makeNode xs ts1 ts2

where (ts1; ts2) = split k (ts++repeat hi)

makeNode x s t = hx; s; ti

We first split the list of subtrees into left children and right children, and then zip
these lists with xs to make a list of trees. We use the infinite list repeat hi to fill inhi

for any missing children. Note that we are not committing to lazy evaluation by
using an infinite list -- we could easily replace it with a finite list of length 2k.

Finally, we fold build across the list of rows, and extract the head of the result.

makeArray = head ffi foldr build [hi] ffi rows 1
The singleton list [hi] guarantees that head will find a tree even if xs is empty. The

666 Chris Okasaki
complete algorithm is

rows k [ ] = [ ]
rows k xs = (k; take k xs) : rows (2 * k) (drop k xs)

build (k; xs) ts = zipWith3 makeNode xs ts1 ts2

where (ts1; ts2) = split k (ts++repeat hi)

makeNode x s t = hx; s; ti

makeArray = head ffi foldr build [hi] ffi rows 1
Each call to rows or build takes O(k) time, so the entire program runs in O(n) time.

Exercise: Invert this program to obtain a function that lists the elements of a
Braun tree in O(n) time. 2

References
Bird, R. S. (1996) Functional algorithm design. Science of Computer Programming 26(1-

3):15-31.

Braun, W. and Rem, M. (1983) A logarithmic implementation of flexible arrays. Memorandum MR83/4. Eindhoven University of Technology.

Hoogerwoord, R. R. (1992) A logarithmic implementation of flexible arrays. Conference

on Mathematics of Program Construction pp. 191-207.

Paulson, L. C. (1996) ML for the Working Programmer, 2nd edition. Cambridge University

Press.