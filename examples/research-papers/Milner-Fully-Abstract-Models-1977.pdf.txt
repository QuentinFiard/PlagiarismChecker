

Theoretical  Computer  Science  4  (1977)  l-22. @  North-Holland  Publishing  Company 

FULLY  ABSTRACT  M  A-CALCULI 

Robin  MILNER 

Computer Science  Department, Edinburgh  Uniwsity,  Edinburgh,  Scotland 

Communicated  by  Maurice  Nivat Received  October  1975 

Revised  June  1976 

Abstract.  A  semantic  interpretatio.1  .%I for  a  programming  language  t  is  ful whenever  &[%[M]lC  dl[%[N]l  for  two  program  phrases  A&N  and  for  aif  pqrLbm  conrexts 

%[  1, it follows  that  JI#[M~S &[!+I& A  model  &  for the  language  is fully abstract  ilf the  natural interpretation  So of  L  in  &  is  fully  abstract. 

We show  thal  under  certain conditions  there  exists,  for an extended  typed  A -caItuPus, a mique fully  abstract 

model. 

1.  Introduction 
We  are  concerned  with  the  problem  of  finding,  for  a  programming  language,  a 

denotational  semantic  definition  which  is not  over-generous  in a certain  sense.  We 
can  describe  quita  informally  what  we mean  by  `over-generosity'.  Suppose  that  L  is 

the  set  of  well-formed  phrases  of  the  language.  Often  it  is the  case  that  not  every 
such  phrase  is a  whole  program;  for  example,  a  procedure  declaration  may  not  be 

one,  though  of  course  may  be  part  of  one. 

Now  a deni,tational  semantic  definition  ui" L  consists  of  a semantic  domain  D  of 
meanings,  and  a semantic  interpretation  &  : L -3  D. We assume  that  we are  mainly 
interested  in  the  semantics  of  (whole)  programs.  Denote  by  %`[  ]  a  program 
context  -  that  is, a program  with  a hole  in it, to  be  filled  by  a phrase  of some  kind. 

One  desirable  property  of  Se is that  for  all  phrases  A+4 and  N  (of the  right  kind)  we 
have  J@[% [iM ]I== ~41% [/V]l whenever  &[A41 =  :S[.`!$  This  is not  hard  to  achieve, 

&  is given  as a  homomorphism.  But  it  is unfortunate  if for  some 
lat  &[A41 #  &[FJ]  it  nevertheless  holds  for  all  program  contexts  tht 
d[%`EM]II  =  d[%[N]n;  it means  that  ts& distinguishes  too  finely  among  nonprogram 
phrases. 

for  describing  this  situation  as  `over- 
-arises when  there  are  many  objects  in 

rase).  For  exa  ay  be functions  which  only  differ  aa an 
unrealizable  argument,  which  can  never  be  supplied  to  the  functions  in  a  program 
context. 

1 

2  R.  Miher 

So  we  wish  to  find  D  and  ti  such  that  7 

(we use  G  in place  of  =  since we  shall  always  have  a partial  order  over  D);  we call 

such  a  semantic  definition  fuf/y  abstruc~  In  [33 we  said  that  &  was  fully  abstract 
w.r,t  a  given  operational  semantics  if,  in  addition,  S@ agreed  with  the  latter  (on 
whole  programs)  but  here  we  ar e  concerned  with  full  abstraction  as  an  intrinsic 

prcperty  of  J$  and  Et  In  fact,  in  this  paper  we  are  concerned  with  extensional 

models  of  typed  A-calculi  (or  equivalently,  of  typed  combinations  built  from  the 
eombinators  S, K  and  a set  of constants)  and  we discuss  fully  abstract  madels  rather 

than  fully  abstract  interlpretations  -4, since  we shall  assume  that  the  interpretation  is 

the  natural  one  in  which  S  denotes  AL  hy  . AZ. xz (yz),  K  denotes  AX. hy.  x  and 
combination  means  function  application.  Thus  we have  replaced  the,constraint  that 

.s$ agrees  with  a given  operational  semantics  with  the  constraint  that  it  is a  natural 
interpretation. 

Plotkin  [4] considered  the  language  PCF  -  the  typed  A -cslculus  with  arithmetic, 
rruth-values  and  the  fixed-point  operator.  The  programs  are  closed  terms  of ground 
type.  We showed  that  the  obryrious choice  of  D  -  that  is., all crJntinuous  functions  at 
each  type  -yields  an  interpretation  whit\?  is not  fully  abstract.  Then:  are  functions 

in  D,  like  binary  disjunction,  which  can  only  be  realized  by  computing  more  than 
one  argument  simultaneously,  while  PCF  admits  of  a  purely  sequential  evaluation 

method.  However  as  soon  as  a  rew  function  constant,  a  "parallel"  conditional 
operator.,  is  added  to  the  language,  the  interpretation  becomes  fully  abstract. 

We  wish  not  to  extend  the  language,  bu!  to  Gminish  the  model.  One  would  like 
to  find  a concept  of  sequent&l  continuous  function,  and  to  show  that  the  model  of 
sequential  functions  exists  and  yields  a fully  abstract  interpretation.  But  attempts  to 
find such  a concept  for  functions  of higher  type  have  hitherto  failed  as far  as I know, 

though  `Vuillemin [ 101 and  I independently  found  (different!)  nctions  of sequential- 
ity  for  first-order  functions.  We  do  not  succeed  in this  here,  but  the  present  results 

are  in  another  direction  more  general.  In  Theorem  2  we  show  blow, given  ground 
domains  and  first-order  functions  satisfying  certain  conditions,  !s  ionstruct  an 
extensional  model  of  the  typed  A-calculus  with  the  property  that  all  its  "finite" 
elementis  are  definable.  This  is  the  property  which  ensures  full  abstraction. 

oreover,  Theorem  3  shows  that  with  a  few  more  (still  not  very  restrictive-) 
conditions  this  model  is  unique. 

It  must  be  emphasised  that  the  construction  is syntactic  in  nature.  In  outline,  it 
consists  in  establishing  the  appropriate  quasi-order  over  syntactic  combinations  of 

the  given  ground  objects  and  first-o:rder  functions  (or  more  precisely,  of  constants 
which  stand  for  them)  and  dividing  out  by  the  induced  equivalence  relation;  extra 

limit  points  are  aidded  to  the  model  to  ensure  that  the  resulting  partial  order  is 

its  of  directed  sets.  erhaps  because  of  the  generality  of  the 

ks  for  such  a  wi  variety  of  ground  domains  and  given 

Foully abstract models of  typed h-calculi  3 
functions  -  it  is  difficult  to  give  a  semantic  charaptc.;.  .&ion  of  the  models.  But  I 
hope  that  the  existence  proof  will encourage  the  SLL~ Q  Jr  such characterizations  in J 
particular  cases. 

The  approach  also  yields  models  of  the  type-free  h-calculus,  found  by  a 
construction  anaLgous  to  that  of  Scott  [7],  in which  the  domains  D  of the  models 
satisfy  D  C [D  --,  D],  rather  than  D  =  [D  +  D],  where  [D  -+  D]  is the  continuous 
function  domain.  However,  we consider  only  the  typed  calculus  in  this  paper.  It  is 

noi; immediately  clear  what  full  abstraction  should  mean  for  the  type-free  calculus, 
since  it  depends  on  designating  a  subset  of  the  language  as  programs,  and  in  the 

typed  calculus  one  naturally  chooses  the  term:,  of  ground  type  to  be  programs. 

2.  Models  of  the  typed  h-calculus 

In  this  section  we  introduce  some  terminology,  relying  on  some  familiarity  with 
typed  A -calculus  and  combinators. 

Assume  a  set  of  ground  types  and  the  normal  hierarchy  of  functional  tvpes.  K . 
ranges  over  ground  types  and  p, o, T  over  all1 types. 

A  model  of  the  typec!  `. calculus  consists  of: 

(i)  A  set  0,  fer  each  type  cr;  these  are  the  domairts. 
(ii)  For  each  a  and  T, a  two-place  application  operation  (.*)  such  that  for 
x  E  DC-J+t and  y  E  D,,  (xy)~  DT. 

(iii)  A  family  of elements  S  and  K  in  apipropriate  D,  such  that  for  all  x, y  and  z 
in  appropriate  domains,  Sxyz  =  xz(yz)  and  Kxy  =  x,  where  as  usual  parentheses 
are  omitted  and  applieation  is  taken  to  bc  left  associative. 

A  model  I/u is  exterosional if there  is a  partial  order  (po)L  on  each  domain  such 
that  (Vz.  xz  5  yz)  a  x E  y. (We  shall  omit  mention  of  types  when  whatever  we 
say  is  to  be  understood  at  all  appropriate  types.) 

&t  is  monotone  if  x  L  y  *  zx  E  zy. 

315c is continuous  if it  is monotone,  each  po E  is a  cpo  -  i.e.  each  directed  set  X 
has  a  lub  UX  -  and  moreover  for  each  such  XJ  (UX)  =  u{zx  1 x  cz X}. 

An  element  G Lr 3 cyo  is finite  if for  all directed  X, d E  UX  =+  3x  E  X.  d  g  x. 
A  cpo  is o-a&&&c  if it has  at  most  denurnerably  many  finite  elements,  and  for 
each  x  E  D  {d  1 d  finite  and  Ex}  is  direcited  and  has  lub  x. 

A  cpo  is consistently complete  if each  pair  x, y  having  an  upper  bound  has  a lub, 
which  we  write  x  U y. 

.k  is  w-algebraic  if  it  is  ccntinuous  and  each  domain  is  w-algebraic. 

&  is  consistent/y complete  ii  each  domain  is  consistently  complete. 
An  (ue-ary) firs: -oaderfwnctl;on ogler ground  domains  D,  is one  TNith type  of  the form  K(I)+  K(~)_+. 

,  . +  K(")+  ~("~~1 . 

iven ground  rsihS  K and  a set  F  of first-order  functions  over  the  II,,  Ju  is a 
ano$el for  F  if  for  each  f  E F  of  type  O, f E= Do. 

4  R.  Miner 

We  are  concerned  only  with  extensional  models.  It  is worth  rem~~rking  that  none 
of  the  other  prt;rycrties  of  models  (continuity  etc.)  defined  above  imply  extensionlal- 

ity.  However,  to  avoid  tedious  repetition  we  ask  the  reader  to  interpret  the  phraries 

"msdell",  "continuous  model"  etc.  as  meaning  "extensional  mod;el",  "continuous 
exknsilonal  model"  etc.;  we  shall  of  course  always  prove  extensionality  when  a 

modei  is  constructed. 

e  proceed  to  construct,  for  consistently  cc-rplete  o-algebraic  D,  and  a  given  set 
F  of  continuous  first-order  functions  over  the  D,,  an  o-algebraic  model  .H  for  F 
with  the  propert!/  that  un dcr  a  certain  condition  on  F  every  finite  element  in  ~22 is 

h-definable  in  terms  of  the  D,  and  PC 

It  is  an  immediate  ccrollary  that  At  I% Scully abstract.  Suprisingly  perhaps,  the 
model  i!l; not  always  consistently  complete,  though  we  shall  not  trouble  to  present 
the  rather  pathological  counter-example.  However,  further  simple  conditions  on  F 
ensure  consistent  completeness.  and  also  ensure  that  At  is  the  only  continuous  fully 
abstract  model  up  to  isomorphism. 

The  restriction  to  given  first-order  functions  deserves  comment.  Once  the  Q  are 
fixed,  a first-rrrder  function  may  be  specified  unambiguously.  But  as  long  as  we  nave 

not  settled  the  *membership  or  structure  of  the  higher-order  doinains,  a  higher- 
order  funct*.in  cannot  be  so  specified;  it  may  only  be  axiomatized  --  as  for  example 
we  axiomatize  the  fixed-point  operation  Y  -  and  it  is then  necessary  to  construct  a 

.model  in  which  a  function  exists  (pe rhaps  uniquely)  satisfying  the  axioms.  It  is  no 
a<:cident  that  the  primitive  procedures  of  a  programming  language  are,  almost 
without  exception,  first-order;  the  language  designer  understands  his  ground 
domains  but  does  not  usually  take  the  trouble  to  consider  exactly  which  functions 

are  in  his  universe  of  discourse. 

efore  embarking  on  the  construction,  it  may  help  the  realder  to  consider  the 

in  more  detail.  ere  the  ground  types  are  o  and  c ;  Do  (the 

e natural  numbers)  are  given,  with  their  structure,  in  Fig.  1. 

ere 
i-  1,  -  :&-+C-+C  an:  successor,  ecessor, 

Fully  abstract  models  of typed  A-calculi  5 
We  omit  the  (standard)  definitions  ot`  these  functions;  they  are  monotonic  and 

hence  continuous  since  DO,  ,  are  flat  domains. 

For  this  example,  F  satisfi  our  conditions  and  our  result  yields  as  a  corollary  a 
unique  fully  abstract  scmanti;s  for  PCF. 

In  outline.,  thd: construction  falls  into  two  parts.  We  first  build  a  `partial  model'  in 
which  for  each  a  we  build,  not  D,  itseif,  but  a  family  {  ,,} of  finite  domains,  where 

nges  over  a  set  of  `partial  types'  whrich `approximat  V. This  model  results  from 

re  general  construction  of  monotolne  models  (Theorem  1, Section  4). The  point 
o!  the  partial  model  is  that  the  elemelnts  of  each  (finite)  domain  are  all  definable, 

clnd are  to  be  the  finite  elements  t.>f the  full  model.  In  the  second  part  (section  5) we 
' elescope  the  {D,}  for  each  a  hnto  the  limit  domain  DU by  a  strakightforward  inverse 

limit  construction. 

The  ljartial  mo  el  is  gained  by  defining  an  appropriatfe  quasi-order  over 
combin  . ?;!ons and  then  taking  the  induced  equivalence  classes  of  terms  as  elements 
of  the  model.  That  is,  we  define  a  term  model;  see  for  example  Stenlund  [9]  or 

I-Iyland  [l]  for  discussions  of  term  models  of  the  (type-free)  A-calculus. 

It  is  unfortunatz  that  we  have  not  been  able  to  define  our  models  as  refr&ons  of 
the  model  consisting  of  all  continuous  functions,  rather  than  building  them  up  as we 
do  from  syntactic  material.  The  retractions  would  be  pleasant  and  probably  useful 

(they  wduld  piovide  arr  easy  way  of  discussing  the  smaller  models  Gthin  a  single 
framework),  but  they  do  not  exist  in  general  when  the  ground  domains  are 
consistently  comp!etc  o-algtbraic  cpo's  -  at  least  if  we  require  (rather  naturally) 

that  the:  element  defined  by  a  combination  M  in  the  smaller  model  is  the  image 

under  retraction  of  the  element  whi'ch  it  defines  in  the  larger.  Indeed,  PCF  itself 
provides  a counter-Txample  to  this  possibility,  though  we  shall  not  demonstrate  this 
here  in  detail.  It  is an  open  question  (whether  the  retractions  can  be  found  when  the 

round  domains  are  lattices  -  that  is,  when  we  restore  the  "overMined"  element 

. If  they  can  be  found,  then  we  shall  have  some  ground  foi  i etain%g  this  element. 

ncfions over  the elemercr is A-definable  in  te 

`. 6  R.  Miner 

We  define  a  reduction  relation  -+  over  Co  bhations  as  follows: 

where,  as  always,  we  tacitly  assume  that  typ,;:s are  r 

Denote  by --+* the  transitive  reflexive  clo~u~~e  of  -=+.  ad  to  shOw  that 
is  monogenic;  using  this  we  claim  that  every  M  of  ground  type  has  under  -+*  a 

unique  normal  form  W. Firtit,  it  is a  well  known  property  of  typed  reductions  that 

sequence  terminates;  so  we  need  only  show  th 

(and  of  ground  has  a  reduction.  But  since  th 
order,  the  ieftmost  occurrence  of  must  be  in  a subterm  of for 

N1 NZ, which  yields  a  reduction. 

.  Not  euery  combination  reduces  to  its  usual  normal  form;  cpnsicler 

his  is  because  we  do  not  include  a  rule 
(-+3')  If  N-,  N'  then  MN  +  MN'. 
The  omission  Df this  rule  is, as far  as I can  see,  a i-urely  technical  device.  It  ensures 

that  +  is  monogenic,  and  is also  essential  for  the  application  of  the  First  Context 

emma  which  follows. 

.  An  occurrence  of N  in M'  is a soy1 of an occurrence  of N  in M, w.r.t.  the 
reduction  M --, 

either  (i)  N's  occurrence  in  is  not  in  the  redex,  and  its  occurrence  in 
corresponds  textually, 

or  (ii)  N's  occurrence  in  is  in  Pi  in  the  redex  and  its 
occurrence  in  '  is  the  textually  corresponding  occurrence  in  a  in  the 
contractum  P&&P2 

d)  context  ?Z[  ] is a  (ground)  combin  n  with  zero  or  more 

a  combination  of  ap  riate  type. 

For  m  >O,  ta  e  least  i  S  m,  if  a 
either 

or  I 

.  .  .  1\ 8  Sf 

for  sonle  n  3  0. 

se  1. 
which  also  heads 

se 2 

8  R.  !Jiher 

Case 2.3 M'  starts  with  S  or  - Then  the  redex  in 
occurrence  of  M'  has  no  sons  in  Ce,,l[M'];  hence 

.  .  w:,  by  (<I),+  %[M']. 
%i[M']  3s initial,  SO  the  leading 

and  the  result  follows  by  applying  the  induction  hypothesis  to  Ui+f[  1. 

Case 3  (ES) obtains.  Then  also  (similar  argument  to  Case  1) 

%[M]+i  f!9ii-U])*  l l(9n[M]), 
and  of  course 

%[M']-+'  f(S&[M']).  l l (S$,[M']) 
and  we  treat  the  t'wo  cases  i = 0,  i > 0 as  we  did  in  Case  2.  Cl 

To  prepare  for  the  proof  of  Theorem  i,  we  nobw take  as  constants 

{ij={cIcE  u{.D,}),'  {f}={fJfEF} 
and  we  ahow  ourselves  to  write  w E  w'  whenever  this  is  true  in  the  natural 
interpretation  interpreting  combination  as  application.  (We  can  only  adopt  this 

intcrpretjtion  for  first-order  functions  at  present,  since  only  the  ground  domains  D, 
are  given).  Wt:  define  the  quasi-order  s  over  combinations,  with  induced 
equivalence  2  Y by  induction  on  types: 

(S  A)  For  M,  M'  of  type  K,  M  s  M'  iff  M+*  w, M'-,*  IW' and  w  5  w'. 

( =S B)  Flcr  A4, A& of  type  (r --3 7,  M  6  M'  iff  VN.  MN  s  M'lV. 
The  properties  of  s  which  we  shall  need  are  as  follows: 

( s  1) s  is  transitive  and  reflexive, 
(S2)  CSC'iff  eEc', 

Ali  except  the  Bast have  straightforward  verifications,  and  we  omit  the  details.  For 

( 6  7)  first  verify  t  satisfies  the  two  Context  Lemma. 
Then  assume  M  =G  by  (S  5)  we  obtai  PI  l l l Pm,  whence 

d  %[  1. %[M]= 

is  such  that  the  combinations  are  ground;  then  (G  6)  yields 

efine 

Fully  abstract  models  of typed  A -calculi 
(a)  D,  = {[M]  1 M  has type  a}, 

(d)  (xy)  =  [MN1  where  M  E x,  IV E y, 

(e)  [Ad] L  [IV]  iti  A4 G N, 
remarking  that  (d)  is  a  good  definition  by  (s  6)  and  (G  7). 

T-o  check  that  A  is  the  right  model,  first  observe  that  each  `new'  DK  is 
or&z-isomorphic  to  the  given  one  under  [c] WC.  Certainly  each  member  of  the  new 

as  f43rm [c]  since  every  M  of  ground  type  is  &  some  c,  and  (e)  together  with 
(  4  2)  ensures  the  isomorphism. 

1 %ext, each  fE  F  is  faithfully  represented  by  [f],  since  by  (s  3)  and  (d) 

[f]  [cl]  . l l [c,] = [c]  iff  fc,  l 0 . cn =  c. 
ASO  the 

[M]  of  the  model  is  defined  by  the 
combination  M.  El 

emark.  It  is  not  hard  to  show  that  the  conditions  of  Theorem  1  determinle  A 
completely  (up  tt  isomorphism),  but  we  shall  not  need  this  fact. 

5.  Algebraic  models 
There  is' no  guarantee  that  the  model  of  Theorem  1  is  continuous;  hence  in 
particular  the  least  fixed-point  operation  may  not  be  present.  It  is,  of  course,  fully 
abstract  (since  every  element  is definable).  It  remains  an  open  question  whether  it  is 

possible  in  general  o  extend  it  to  a  continuous  model  by  adding  limit  points,  while 

maintaining  full  abstraction;  we  would  start  with  cpos  D,  and  continuous  func- 
tions  F. 

However,  when  the  D,  are  all  finite  the  model  is  trivially  continuous,  since  all  its 
domains  will  be  fi  ite  by  extensionality.  We  shall  use  this  fact  in  Theorem  2;  as  a . 
corollar!,r  we  then  obtain  a  fully  abstract  continuous  model  for  F  provided  that 
certain  projection  functions  are  definable  from  F, even  when  the  D,  are  infinite. 

Let  each  D,  now  be  a)-algebraic  and  consistently  complete,  with  an  enumeration ,n 
uo, Cl, l l of  its  fin&z  elements.  Define  !P!"`:  D,  --i  D,  for  each  i  >  0  by 

The  lub  is  guaranteed  by  consistent  completeness;  a 

(Note  that  it  may  occur  for  some  i  and  some  x  ihat 

IO  R.  Milmt 
Theorem 2, Let  consistently complete  w-algebraic  ground  domains  D,,  and  a set F 

of continuous first -order functions over D,,  be given.  Then  there exists an llrp -algebraic 

model for F in which alt finite elements are A-definablti in terms of .F, { !.#lO} and the 
finite  elements  of  the  D,. 

PRO&. Define  the  set  of partial types  ins follows:  for  each  K  and  i  a  4) Ki  is  a partial 

(ground)  type,  and  if y,  S are  partial  types  so is y  -+  6. The  full types  art2 generated 
from  the  (full)  ground  types  K &S before. 

We  let  @, `y, 6  range  over  partial  types  and  p, a,  r  over  full types.  DIefine a partial 
order  s  over  all  types  as  folklows: 

0 i  Ki  ~;Ci+.~~K. (ii)  If  ++a  and  Ss6'~r  then  y-,Ci~y'-+S'~o-*r~ 

(iii)  Transitive  reffexive  closure. 
It  is easy  to check  that  {y  1 y  s  a}  is a lattice  for  each  a;  but  we shall  only  need  the 
pairwise  lub  operation  v. 

Let  I&  be  the  range  of  !I$`?  Define  injection-projection  pairs 
qb?,  $("j : LX,  I'  D,  and  +$),  $iKi'  :  Ep,,  e  DKj  (j  2  i )  by , 

where  we  have  (as  we  shall  when  no  confusion  arises)  dropped  superscript  M. 

Fig.  2. 
The  following  relations  are  evident  for  i G j  s  k  (writing  : CT for  E  D,  etc.): 

(2) 
$j.i  O 4i.j  =  AC : Kie  C,  &j'$j,i  &AC':  KjeC'.  (3) 
t  we  define  agproxim&nts  for  each  f y c I=. If  f  is  .+ary,  take  fi  over  the  partial 

d  domains  DK, to  be  givetl hy 

Fully  absaract models of  typed  A-calculi  ii 

f jXl*`*x"  =  $i(f(&l)  '  '  '  (4iXn))  (4) 
where  the  K  implicit  in  each  4i  and  *c/i may  differ. 

Now  equipped  with  the  (partial)  ground  types  Ki,  the  finite  domains  DKi and  the  fi, 
Theorem  1  givles  us  a  monotone  model  for  the  set  F'  of  monotonic  functions 

F'  =  {fi}  U  {@i,i+l}  u  {@i+l.i}* 
We  call  this  the  partial  model;  it  has  a  domain  for  each  partial  type. 

In  the  partial  model  Cal.1  be  found  the  injection-projection 

Y-V'S $  '  Bt,  e  II,. Y'-+Y l (y  G  f)  given  by: 

4  Z  4 (K) ii*Kj  i,j  9  4  (y-+S)-+(y'--6') =hd:  y+6.(&j,s,odorl,y+J, 
rcI  = (cl  +  K 
and  relations  (2) 

+  (K) i.j  9  il/  (y'-*li')+(y--,S)  =  Ad':  y`+  lY.($,+,od'o+,,,~), 
and  (3)  easily  generalise;  for  y  s  y's  y" 

zc, 'y'-Y 04y+y'=  Ad:  y.d,  ~Y~Y~~JIy~--ry,Chd':  y'ad'. 

pairs 

(5) 
(6) 
We  can  now  begin  to  build  the  required  full  model.  For  Q,  take  as  members  all  sets 

x  =  {JC, 1 y  s  a} 
such  that  y  s  V' +  x,  =  +,  +yxv8; the  second  equation  of  (5) ensures  that  this  is a 
good  definitioul.  Note  that  the  indexing  set  {y  s  U}  is  s  -directed. 

The  ordering  in  D,  is  defined  pointwise: 

KY  iff  Vy  S  ~.x,  5:  y,. 
We  can  readily  check  that  we  have  recovered  the  given  (full)  ground  domains  D, 

under  the  isomorphism  x  e  {Jl!"`x  1 i  2  0). 

Our  construction  proceeds  analogously  to  Scott's  [7] for  a  model  of  the  type-free 
A calculus,  but  we  are  going  "in  parallel"  vertically,  while  he  goes  horizontally,  with 
respect  to  the  following  picture,  whose  nodes  may  be  thought  of  as  domains  or  as 
types: 

Full  typed  model  + 

lr  . 

Part  ial 

typed 
model 

K+K  .  .  .  (K-K)-(K-+K)  -.. 

.  .  . .  -  . 

. .  '  .  l
. .  l .  . . 

Ko'  KI  K,-+Kg  .  .  . 

I--,  K,)--*(K,-  K,)  Type-free 

modck 

.  .  * 

Ku+  Ko)-+  (Ku--,  Kc,) 
Fig.  3. 

12  R. Milner 

In  factthe  analogy  is  close  enough  for  us  to  omit  some  details  and  proofs.  The 
resider  may  also  consult  Wadswoi  t h  ;`I 11  for  a  clear  summary  of  Scot t's  construc- 

tion. 

We  now  give  the  injection-projection  pairs  &-.,+  k4,  between  partial  and  ful 
types  +a: 

and  relations  C?)  and  (3)  again  gen  4ize;  for  y  6  y's  CT 

Now  each  D,  is directly  complete  (from  the  pomtwk  ordering  and  the  finiteness  of 
each  D,))  and  each  &..,+  $,4y  is continuous;  we  rusy  Aerzf~re  define  applicatkn 

for  G-x  full  model  by 

(xy)  =  Ll{~,.+T(x,+,y*,)j  y  6  CT, 6  s  7) 
where  z  :c-+T,  y  XT. 

With  application  defined,  we  next  verify  that  the  fol!owing  are  satisfied,  for 
d:y+8  and  X:CT+T: 

It  is  possible  now  to  consider  D,  C  I&-, by  informally  identifying  d  E  D,  with 
&-,d  in  I&.  With  this  identification,  we  first  see  that 

To  justify  the  identifkation,  it  is important  that  application  of  partial  elements  may 
be  done  is? either  the  partI  or  the  full  domains  -  that  is,  for  d  : 3" -+  8.. t? : y, 
assuming  no  ,identifications: 

whicim indeed  follows  from  (9)  and  (8).  So  with  the  identifications  we  can  state 
succinctly  (omitting  roof)  the  properties  of  application  that  we  need. 

y::CT 

is  ite  or  s 
Let  us  now  check  that  f 

i 
=  Xiyi 

the  Sa,,,; are  known  to  exist  ix4 the  partial  model.  "That (IS,,,)  is directed  follows  from 

the  fact  that  ira the  partiarl  ,.&~Z,  when1 @yS c  @`r's',  ' 

Spy6=  *  p'y'a'+  pys s f3'y'S'  (17) 
which  we' verify  as follows,  repeatedly  using  the  inductive  definitions  of the  Ifp's and 

9's  of  the  partial  model  (and  omitting  types): 

W!OXY~ = w(cb.MPY  NPO = wP~)(abz)((4Y  N#m 

=  *(f#(xz(yz)))=  x2:(yz)=  sxyz. 

Now  to  check  that  the  S  of  (16)  Is the  right  function,  we  compute 

sxyz =  14 (S,,sxyz)  =  u 

lw  PYS 

=  u 

PY& 

&hid ,  S-T-+~YS--dP  (using  (15)  and  (14)), 
(K~,.,~z~(~~~~z~))  (from  partial  model) 
=  xz(yz)  by  distributing  U  and  using  (11). 
All  that  now remains  is the  definability  of the  finite  elements  in terms  of the  finite 
elements  of  D,,  ,P and  the  -Pi"!  3ut  they  are  all  definable  in  the  g&al  model,  in 

terms  of the  .C&, fi,  4 i, i+l and  &  -1.i (and  of course  S  and  M).  To  d~f;,ne a  finite 
element  in  the  fulf  model,  we need  only  take  a  term  which  defines  it  in  the  partiai 

model  and  replace  each  atomic  component  by  a  term  defining  it  in  the  full  model 
(since  application  can  be  done  in  either).  With  the  aid  of  one  last  definition,  we 
show  that  all  these  terms  need  involve  only  S,  K,  F,  WY  and  the  finite  members 

of  D,. 

Let  !Py':  CP+ CT =  &,,.__o&+~,  for  each  c  and  y  =G (7. At  ground  type  !P!$  so 
defined  is just  !P I"). Alsa  it  is easily  found  that  ?PyZ8? =  hx  : CT +  7.  !Pg)o  x  0 ?P$`), 
so  that  all  the  fli  are  definable  by  S,  K  and  the  Pi`?  Moremover 

(i)  Each  element  of  D,,  is  a  finite  element  of  D,. 
(ii)  Each  j  :  (r  is  !Py'f  ffor some  y. 
(iii)  &`%  is  ~~Yi~`cr+,~~(K~Y~(~Ki-rKi+,) in  D,,,,  =  !P!"' using  (7),  (8)  and  (9). 

(iv)  $i::,i  is also  !Pf"j in  D,_,,  by  a  similar  argument. 

(v)  From  (17),  SBys is  !I$~%  in  D,,  and  similarliq  for  K. 
his  concludes  the  proof  of  Theorem  2.  I0 

Ily ah&act  models 

follows  we  shah  us2 overbars  (-)  to  represent  the  natural  interpretation  of = 

' P ,i!=can  = ( 

el is  under  &r;cussion  we  sometimes  omit  the  overbar  and  write 

Fully  abstuact models of  typed A-calculi  15 
M  L  (=  &`M' to  mean  a  E  ( =  )I&,  but  otherwise  we  retain  distinct  overbars,  e.g. 
<)  and  0. 

Definition.  A  monotone  model  .&  is  fully  abstract  if  M  E  M'  whenever  V ground 

V[  1.  %[M]L  X[M']. 

or&u-y  1.  The  model  ojf Theorem  2  is  fully  abstract  provided  the  Vi%) are 

finabIe  (from  S,  K,  (f}  and  {c}). 

Proof.  Let  M, M'  have  type  tag +  l l l*  a,  -+  K,  and  assume  W  ground 

4[  ].  %`[M]  5  %[M'].  Then  for  all  xi  E  L&, 

tiX**O*X,  =  u(n;i(xl),,  l *  l (&)-y,  1  `yi  s  ai} 

C  u{ia'(Xl)y,  '  '  l (&)y,  1 `yi  G  ai) 
by  assumption,  since  the  (xi)yi  are  finite  and  SO  definable, 

=  Ii&  l l l &. 
Hence  M  E  M'  by  extensionality.  cl 

The  next  lerlma  shows  that  two  fully  abstract  monotone  models  are  essentially 
the  same  when  restricted  to  their  definable  elements. 

Full  Abstraction  Lemma.  Let A,  .A'  be fully_abstcact monotone models fa_r given D, 

and  (monotone)  E  Pken  A& g  A&  iff  a  C  A&,  where  (-)  a&  (-)  are  thk interpretations of  combinations  in  &  a&  At `. 

Roof.  Assume  #,  E  .I&  and  let  %[  ]  be  any  ground  context.  Then -_  _- ce[MIlC 

+q~21  monotonicity.  Let  %[Mi]+*  Wi,  i  =  1,2  Then  G, !I  I&, since  + --- 
preserves  interpretation.  But  Gi =  Gi E  D,,  SO  $1  E  G2,  hetize  `m  C m,  and 
since  %[  ]  was  arbitrary  6,  E  fi2  follows  by  the  full  abstraction  of  .k'.  *l 

We  conclude  this  section  with  two  lemmas  which  will  be  needed  for  the 
uniqueness  proof  in  the  next  section  ;  the  lemmas  are  not  directly  concerned  with 
full  abstraction. 

~tpa. In  any  monotone  model  fov  (monotone)  F" the following 
are  equivalent,  f3r  corn binations  M'  of  type (T1+"`+O-~I  K: 

(i)  WPi Of ty!R? O;,  i S 
(ii)  V  ground  %`[  ]  . 

.  It  is  immediate  that  the  relation  e  over  combinat.ions  (which  is  a  quasi- 

16  R.  Milner 
order)  satisfies  the  conditions  of  the  First  Context  Lemma,  nsing  the  s;lonoton  icity 

of  the  functions  F.  n 

Now  in  any  model  containing  the  projections  YTj(i*' thle  projectics:s  ipy)  at  a11 
types  exist,  where  ?Pr-?x  =I %?OX  * q  y ,@). Of  cd~rse  the!!  are  definable  if  the  !PiK) 

are  so. 

raieity  5a. Given  D,  and  F  as in  Theorem  2,  in crny continuous model .dt 
for  F  which  contains  the  Y, (K), the  finite  elements  in  D,  are  ~xczctty { Fy)rr'  1 x  E  Q,, 

y  s  CT},  atzd Al  is  also  w-algebraic. 

Write  x,  for  ?Pyk,  and  (et  D,,  be  the  range  of  !Py'.  Now  each  D,  is  finite; 
for  ground  types  we  know  this  to  be  true,  and  at  higher  types  it  follows  easily  by 
induction  using  XI V_,sy =  (xy&.  To  show  each  x,  finite,  let  x,  E  u  2. 
Then 

x,  L  U~Z,  i z  E  ~1, 

=z  y  for  some  2  E  Z  simx  D,  is  Ei;;ie, 
E  2. 

Con?fzrse:y,  Iet  x  E  DU  be  finite.  $ir~e  x  =  L&x,  1 y  G  (T}  is  easily  proved,  x  =  x, 
for  some  y  S  g. 

Finally,  ~44 is  o-algebraic  because  x  =  i-&x.,  1 `y  s  a},  and  because  U{D,, 1 y s ~7) 

is  denumerabfe.  [z1 

Hs there  more  than  one  fully  abstntca  continuous  modiA  for  D,  and  F  (as  in 
Theorem  2)?  The  answer  is  yes  in  gelrertif,  but  certain  natural  conditions  on  F  do 
ensure  uniqueness. 

Note  first  that  over  ~-algebraic  zcnsistentiy  c~~~rnplefe ground  domains  the 

eration  n  is  continuous;  vtre kave  the  proof  to  the  reader. 

the  D,  if  the  Mowing  first  order  functions  are  definab 
ements  of  thti:  D,, : 

K -  K -+  K, 

B: --+ K "", for  ex 
and  `or  scme  arbitrary  fixed  finite  ekment  6tf  _I_ i  is some  fixt d 

ground  t>f 
KC(J,: 

Fully  abstract  models  of  typed  A-calculi 

tt  if  x  2  c, 
[zc]x  = 

1  otherwise. 

We  also  say  that  F  is  articulate  (for  the  II,). 

e 
we  use  a 

c3c',  c 

heorem 
then  there 

The  functions  (2  c]  are  just  the  functions  c  3  tt  in  Ho&in's  notation  [4]; 

different  notation  since  we  are  nest  concerned  with  all  of  the  function!: 

and  c'  finite. 

3.  (Uniqueness)  Under  the conditions of Theorem  2,  f  F  articulates the D, 

is only ant, fully abstract continuous model for F  (alp  t17 order isomorphism ) and  it is w-algebraic  and  consistently complete. 

roof.  By  the  Algs  raicity  Lemma,  all  fully  abstract  continucus  models  for  F  are 
cr) -algebraic  since  the]l  contain  the  projections,  and  by  the  Full  Abstraction  Lemma 
they  are  all  order-isomorphic  when  restricted  to  their  definabl:  elements.  We  shall 
show  that  in  every  such  model  the  finite  elements  are  ah  defijlable;  it  fohows  that 

they  are  all  isomorphic,  since  an  algebraic  cpo  is determined  by  its  finite  elements. 

Suppose,  to  the  gontrary,  that  Jzll' is  such  a  model  containmg  a  non-definable 
finite  element.  Let  be  the  inter-retajion  of  combinations  in  M.  We  shall  define /P 
combinations  H,,  ti,  such  that  fi,  #  &,  but  %[H,]  =  ce[H21  for  ai!  ground  %[  1, 
contradicting  full  abstraction.  Let  .AX' have  domains  0  :, (D:  =  OK). Let  ~=a~-+.*  -+ a,,, --+ K 

be  a  minimal  type  such  that  D,:  has  a  non-definable 
finite  element  d * E  DC;  that  is,  as&time  that  the  finite  elements  in  each  DL,  are 
definable  (U  cannot  be  a  ground  type). 

Let  d,,  . . . p d,  be  the  definable  elements  2  d *  in  Db,  and  el,  . . . , eP  the  other 
definable  elelments  of  DC. Case  1.  n#  0.  IT,<" dj = 

x  is definable,  hence  is  d  =  x,;  in  fact,  d  =  d, 
j. That  is,  d  is  the  glb  of  definable  elements  in  Sirace  d *  is  not 

d  3  d*. 

ence  there  is  an  HI-vector  p  of  necessarily  efinable  finite  elements,  h  E d *, 

there  are  wt - 

Now  for  all  de  2x =  tt,  or  x,  =  (lik  an 

6*x  =  &n:  =  I,  Hence  by  the  Second  Context 
ground  %?[  1. 

On  the  other  hand,  I?!d"  =  tt  and  &d*  =  I. 

-. --. 

P Lemma,  %[H1] =  %[H21  for  all 

' Case  2.  y1 = 0.  Then  no  definable  d  in  D,  ,J  d *.  S'o the  folloJving  combinations 

achieve  a  similar  result: 

In  either  case,  we  have  a  contradiction,  since  A'  was  assumed  fully  abstract. 

For  consistent  completeness,  it  is  enough  to  demonstrate  that  aa~y pair  d, e  of 
finite  elements  with  an  upper  bound  possesses  a  lub.  For  then  if X, y  is any  pair  in 

Q,  with  an  upper  bound,  each  pair  x,,  y,  (y  s  (T) is upper  bounded  a'nd so  has  lub 
2,  ;  mori:over  (2,  1 y  s  a}  is  easily  seen  to  be  directed,  and  its  lub  is the  lub  6f  x 
and  y. 

Now  le;l; L& e  be  finite  (in  D,  say)  and  upper  bounded.  Then  {x, 1 x  7  d, e}  is 
non-empt!,!, and  finite  (since  D,  is finite),  and  its  glb if it  exists  is a  lub  for  d  and  e. 
But  since  fl  is  definable  at  ground  type  it  is  defirlable  at  aTi types,  hence 

Tt(x,  1 x  51 d, e}  exists  in  the  model  4.  CJ 

8.  Fixed  points ad  applka!tions 

We  have  cio far  avoided  the  fixed point  combinator  `v at  al1 types  (a-,  a)-,  CT and 
its  interpretation;  our  combinations  have  contained  t.Jnly S,  JK, {f} and  {c}. 

Now  Y =  u,  Ym where  Y,  == AZ. t  " _I_,  so  11'  exicts  in  all  continuous  models. 
Moreover  Yy =  LJ,  (Y&,  =  (Y&  for some  n  since ti,  is always  finite.  So each  Y7 
is  definable  if  iiie  !Py)  are  so,  al;d  Y == `J  y Y?_ 

We  must  make  sure  that  adding  I!,  with  -  =  Y, does  not  affect  full  abstraction. 
(In  fact  the  argument  is  not  specific  to  I/;  it  applies  whenever  we  wish  to  add  a 
combinator  -  or  constant  -  denoting  u(ti  1 ME  9')  where  9'  is  a  set  of 
combinations  whose  interpretations  form  a directed  set  in every  continuous  model.) 

iX  0  A  cmtinuous  model  Ai. for  F  is  fully  abstract for 
combinations iff it kc so for  al2 csmbinutions, if the ,pruje(ctiom PiK) are definable ; i.e. 

&e  fdowing  are eqcdiualestd : 

(i)  (if  ground 
may  contain 

(ii)  7% e  same 

%[  ]  l %`[M'] c  %`[M'])  )  A4 E  M',  where  Ad' and  the  5%' 

544th  exchded. 

shaw  t>iat  every  4:08! 

-free  coin  at ion. 

Fully  abstracit models  of  typed  /  -calculi  19 
occurrences  of  t  at  types  cl,  m2 - l l say.  Ip"]  w*`*]JYi  CUR}, 

]  for  some  yi  since  is  finite;  in  the  latter  we  merely  replace  each 

ssuming  the  antecedent  of  (i),  and  choosi  %[  ]  to  bc 
9[([  I),,],  rememibering  that  (  ),, =  @ris  definable,  we  have  9  ]&  9[MJ  for 
all  9  and  all  y.  But  s&e  My  and  MI  have  free  equivalents,  from  (ii)  we  obtain 

Since  y  was  arbitrary,  we  concl 
(ii).  For  this  part  we  do  not  need  the  projections.  et%[  jbea 

perhaps  containing  ,  and  assume  that  '  do  not  contain 

]C  9[M'].  It  will  be  enough  to  show  that 

equent  of  (ii)  will  follow  using  (i). 
l l l ]  to  distinguish  the  occurrences  of 

%[M]=  LI{ce[M,  Ir',,, Y.+`+rj  30) 

c  u  {Ce[M', Y?l,, YQ l l - ] I yti 30) by  antecedent  of  (ii) 
since  %[[  ],  Yn,, Yn2, . . I ]  is 

=  %fM'],  as  r-ecuired.  0 

`J;e  are  now  at  last  in  a  position  to  look  at  some  examples.  We  restrict  ourselves 
to  TWO; they  should  :,erve  as  evidence  that  the  conditions  that  F  be  articulate  is 

likely  to  be  satisfied  in  practice.  Indeed,  F  will  normally  be  richer  still;  it  appears 
that  the  indispensable  conditional  operation  will  not  be  definable  from  the 

arr~culating  functions  alone. 

ry  3.  KF  has  a  wique  fully  abstract  continuous  model. 
.  Recall  that  P 
Set  tion  3. It  h;s  con 
the  fix&-point  corn 

are  definable  E 

, . . . for  the  integers  and  for  the  truth  values,  and 

(We  can  assume  constants  l.,,  I,  if we  like,  but  they 

coretinuous  ovel 

20  R.  Miher 

With  the  addition  of  the  parallel  conditional  :  1,  which  diRers  from  3  in  that 
_L, :  I)  x,  x  =  x,  the  result  also  holds;  F  still  articulates  D,  and  D,.  0 

Plotkin  shcwed  that  the  model  of  all  continuous  functions  is  fully  abstract  for 
PCF  with  l 3.  Since` he  also  showed  that  all  finite  elements  in  this  modei  are 
definable,  he  had  already  demonstrated  uniqueness  of  the  continuous  model  in this 

case,  provided  the  ground  domains  are  kept  fixed. 

PCF  without  : z>  is  !different.  Plotkin  showed  that  the  model  of  all  continuous 
`functions is not  fully  abstract,  but  we now  have  a unique  fully  abstract  mo&!.  What 

continuous;  functions  are  missLag? 

We can at least  partly  answer  this question.  For  every  definable  element  z  of type 
pi +  l 0 l+  cr,, --,  K  may  be  shown  to  have  the  property  that  either  z  is  a  constant 
function,  i.e.  2x1 l l l x,  is  independent  of the  Xi, or z  is strict  in some  argument,  i.e. 

for  some  i Xi =  1.  *  2x1 l l l X,  =  1.  Hence  in  our  model  a11 finite  elements  have 

this  property,  and  so  etlery  element  has  the  property  also,  since  the  property  is 
preserved  by  directed  u.  Many  continuous  functions,  in  particular  :  3  ,  do  not 
possess  the  property  and  so  are  missing  from  the  model. 

other  example.  Consider  a  single  ground  domain  D,  =  2  * U 2"  where  C  is  a 
finite  alphabet,  (i.e.  the  domain  of finite  and  infinite  strings),  under  the  order  s  5  s' 

iff s'=  SS" for some  s". For  the  alphabet  (0,  1) D,  is anI infinite  binary  tree,  with  limit 
points  (Zw)  added.  Ihe  finite  elements  are  just  C*  of  course. 

. . 

Fig.  4. 
A  natural  set  of  primitive  functiona  F  over  D,,  when  C  =  (0, l},  is {So, S,,  T, D  ) 
where 

and 

os =  OS, S,s  =  Is,  T(ls)  =  T(Os;  =  s,  =  E, 

has type  c -+  c =+ L +  c, and  we write  x  D  y,  z  for  D  xyz  j. 

Fully  abstract  models  of typed  h-calculi  21 
It  is  easy  to  show  that  F  is  articulate  (with  the  help  of  Y, which  is  justified  by  the 
lemma  of  Section  8).  In  particular, 

[-&]=Ax.O,  [ZJOs]=Ax.x  D  [_~~](Tx),E, 
:' 

[  2  Is]=  Ax.x  D  E,,[Js](Tx) 

an6  m  is  recursively  defined  by 

xfly  =x  D  (y  D  So(TxflTy),~),(y  D  ~,S,(TxnTy))o 
Tf? f- projections  VI')  may  be  defined  without  recursion,  taking  for  example  the 

e3Lpmeration  E, 0, l,OO, 01,  10, 11, . . .  of  C *. 

Hence  there  is  again  a  unique  fully  abstract  iontinuous  model.  And  again  many 
antinuous  functions  are  missing  -  for  example 

Vote  that  f  is  finitz.  I  am  grateful  to  Gordon  Plotkin  for  showing  me,  using  the 

wechnique  of  logical  relations,  that  f  is  not  definable  (see  [S]). 

9,  Conclusion 

The  interest  in  finding  models  smaller  than  that  of  all  continuous  functions  is  at 

least  two-fold.  First,  thcl: smaller  the  model,  the  stronger  one  expects  the  proof  rules 
to  be.  Full  abstraction  may  provide  useful  proof  rules;  an  obvious  example  is the  so 
called  w-rule,  which  infers  M  =  N  from  the  hypothesis  that  MZ  =  NZ  for  all 

(closed)  combinati  ns  2.  Another  rule  -  valid  in  our  model  of  PCF  -  would  say 
that  every  functioP4  is  either  constant  or  else  strict  in  some  argument. 

Second,  many  programming  languages  -  almost  all  real  ones,  in  fact,  and  in 
addition  PCF  an  he  string  language  of  the  previous  section  -  admit  a  `sequential' 
evaluatiovr  meth  - By  looking  harder  at  these  models  we  may  hope  to  characterize 
sequentiality  property. 

Apart  from  this,  the  notion  of  full  abstraction  is  intuitively  a  compelling  one,  as 
we  attempted  to  show  in  the  introduction. 

We  would  not  Sike  to  give  the  i  pression  that  It  e  step  from  fully  abstract 
semantics  for  ty  rl A -calculi  to  fully  abstract  semantics  for  programming  languages 

is  a  small  one. 

ains  [8]  whit 

Second,  for  many  sf  the  abstract  o 
exar;lples  we  may  consider  environments,  stores,  continuations,  processes  -  the 

programming  rlen  uage  can  typically  express  only  a  small  repertoire  of  o 

22  R.  .IW{ner 
over  them.  It  remains  to  be  seen  therefore  whether  equivalence  of  programs  and 
program  phrases  may  be  expressed  as  identity  ot  meaning  in  suitable  semantic 

domains,  or  whether  it  will  continue  to  be  necessary  lto  express  it  by  some 

equivalence  relation  over  the  domains.  The  latter  may  be  done  using  inclusive 

predicates  (Milne  [2])  or  equivalently  directed-i.:olrn, -Eete  relations  (Reynolds  [6]). 
The  present  work  therefore  indicates  only  that  there  is  still  a  chance  for  the  first 

alternative  Ih 

I  am  indebted  to  Gordon  Plotkin  for  helpful  discussions  during  this  work.  His 
study  of full  abstraction  In [4], in a special  case,  added  to  my  motivation  to  study  it 
under  more  general  conditions,  and  he  encouraged  me  to  look  for conditions  under 
which  the  fully  abstract  model  is  unique. 

eferences 

J.  M.  E.  Hylaud,  A  surve.y  of  some  useful  partial  order  relations  on  terms  of  the  lambda  calculus, 

Pme.  $ymp.  on  h-calculus  Comput.  Sci.  Theory,  Rome  (March  1975). 

R.  Milne,  The  formal  semantics  of  computer  languages  and  their  implementations,  Oxford 
University  Computing  Laboratory,  Programming  Research  Group,  Technical  Monograph  PRG-13 
(1975). 

R.  Milner,  Processes;  a  mathematical  model  for  computing  agents  in:  Rose  and  Shepherdson 
(Eds  ),  Logic  Colloquium  `73, Studies  in Logic  and  the Foundations  of Mathematics,  Vol.  SO (North 

Holland/American  Elsevier  ,  1975). 
G.  Plotkin,  LCF  as  a  progralmming  language,  Proc.  Conf.  Program  Proving  and  improving, 
Arc-et-Senans  (1975;  X&or-et.  Comput.  Sci.  (to  appear)).  ' 
G.  PIotkin,  Lambda  definability  and  logical  relations,  Memo  SAI-RM-4,  School  of  Artificial 
Intelligence,  Edinburgh  (1973). 
J.  C.  Reynolds,  On  the  relation  between  direct  and  continuation  semantics,  in:  Loeckx  (Ed.), 
Automata,  Languages  and  Programming,  2nd  Colloquium,  University  of  Saarbrucken,  Lecture 
Notes  in  Computer  Science  Vol.  14 (Springer-Verlag,  1974). 
D.  Scott,  Lattice  theoretic  models  for  various  type-free  calculi,  Proc. 4th  Internl.  Congress for Logic, 
Methodology  and  Philosophy  of  Science,  Bucharest  (1972). 
D.  Scott  and  C.  Strachey,  Towards  a Mathematical  semantics  for  computer  languages,  Proc. Symp. 
on  Comput.  Automata,  Microwave  Resc:arch  Institute  Symposia  Series,  Vol.  21,  Polytechnic 
Institute  of  Brooklyn  (1972). 
S.  Stenlund,  Combinators,  h-terms  and  Proof  Theory  (Reidel  Co.,  Holland,  1972). 
J.  Vuillemin,  Proof  techniques  for  recursive  programs,  Research  Report,  IRIA,  78150 Le  Chesnay, 
h3riX  (1973). 
C. Wadsworth,  Relatitin  between  computational  and  denotationiz!  properties  for  Scott's  D"  models 
of  the  A-calculus,  SZAM  .?. Comput.  5  (3)  (1976). 