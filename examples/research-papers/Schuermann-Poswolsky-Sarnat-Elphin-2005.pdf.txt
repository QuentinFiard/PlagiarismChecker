

The r-Calculus.
Functional Programming with Higher-order

Encodings.

Carsten Sch"urmann, Adam Poswolsky, Jeffrey Sarnat

Yale University
New Haven, CT, 06511

USA

Abstract. Higher-order encodings use functions provided by one language to represent variable binders of another. They lead to concise and
elegant representations, which historically have been difficult to analyze
and manipulate.
In this paper we present the r-calculus, a calculus for defining general
recursive functions over higher-order encodings. To avoid problems commonly associated with using the same function space for representations
and computations, we separate one from the other. The simply-typed
*-calculus plays the role of the representation-level. The computationlevel contains not only the usual computational primitives but also an
embedding of the representation-level. It distinguishes itself from similar
systems by allowing recursion under representation-level *-binders while
permitting a natural style of programming which we believe scales to
other logical frameworks. Sample programs include bracket abstraction,
parallel reduction, and an evaluator for a simple language with first-class
continuations.

1 Introduction
Higher-order abstract syntax refers to the technique of using a meta-language,or logical framework, to encode an object language in such a way that variables
of the object language are represented by the variables of the logical framework.This deceptively simple idea has far reaching consequences for the design of
languages that aim to manipulate these encodings. On one hand, higher-orderencodings are often very concise and elegant since they take advantage of common concepts and operations automatically provided by the logical framework,including variable renaming, capture avoiding substitutions, and hypothetical
judgments. On the other hand, higher-order encodings are not inductive in theusual sense, which means that they are difficult to analyze and manipulate.

Many attempts have been made to integrate advanced encoding techniquesinto functional programming languages. FreshML [GP99] supports implicit variable renaming for first-order encodings. The modal *-calculus supports primitiverecursion over higher-order encodings via an iterator. However, function definition via iteration is naturally limited [SDP01].

In this paper, we present the r-calculus, a step towards integrating logicalframeworks into functional programming. It supports general recursive functions
over higher-order encodings without burdening the representational expressive-ness of the logical framework. The r-calculus distinguishes itself from similar
systems by allowing recursion under representation-level *-binders while per-mitting a natural style of programming, which we believe scales to other logical
frameworks.

To avoid problems commonly associated with using the same function spacefor representations and computations, we separate one from the other. The

simply-typed *-calculus plays the role of the representation-level and provides afunction space enabling higher-order encodings. A second simply-typed language
plays the role of the computation-level. It provides embeddings of the higher-order encodings, function definition by cases, and insurances for safe returns
from computation under representation-level *-binders.

The resulting system allows us, for example, to write computation-level func-tions that recurse over the usual higher-order encoding of the untyped

*-calculus(see Example 3). It is general enough to permit case analysis over any representationlevel object of any representation-level type. In the accompanying TechnicalReport [SPS04] the reader may find a wide collection of examples, such as translation to de Bruijn indices, parallel reduction, and an evaluator for a simple lan-guage with first-class continuations. A prototype implementation [PS04] of the
r-calculus, including a type-checker, an interactive runtime-system, and a collec-tion of examples is available from the website

http://www.cs.yale.edu/~delphin.
This paper is organized as follows. We explain the use of the simply-typed
*-calculus as a logical framework in Section 2. We introduce the r-calculusin Section 3. It is divided into several subsections describing the conventional

features of the r-calculus and those constructs that facilitate programming withhigher-order encodings. The static and operational semantics of the r-calculus
are given in Section 4, while the meta-theoretic properties of the calculus arediscussed and analyzed in Section 5. We assess results and discuss related and
future work in Section 6.

2 The Simply-Typed Logical Framework
We choose the simply-typed *-calculus as our logical framework. It is not as ex-pressive as dependently-typed frameworks, such as LF [HHP93], but is expressive
enough to permit interesting higher-order encodings.

Types: A, B ::= a | A ! BObjects:

M, N ::= x | c | *x : A. M | M N

Signatures: \Sigma  ::= * | \Sigma , a : type | \Sigma , c : AContexts:

\Gamma  ::= * | \Gamma , x : A

We use a for type constants, c for object constants, and x for variables. Weassume that constants and variables are declared at most once in a signature

2

and context, respectively. To maintain this invariant, we tacitly rename boundvariables and use capture-avoiding substitutions. The typing judgments for objects and signatures are standard. Type-level and term-level constants must bedeclared in the signature.

Definition 1 (Typing judgment). \Gamma  ` M : A is defined by the followingrules:

\Gamma  (x) = A ofvar

\Gamma  ` x : A

\Sigma (c) = A ofconst

\Gamma  ` c : A
\Gamma , x : A ` M : B oflam
\Gamma  ` *x : A. M : A ! B

\Gamma  ` M : A ! B \Gamma  ` N : A ofapp

\Gamma  ` M N : B

Our notion of definitional equality is obtained by taking the reflexive, transi-tive, and symmetric closure of

fi- and j-conversion [Coq91]. We write \Gamma  ` M j
N : A if and only if M is fij-equivalent to N and both have type A. For everywell-typed object

M of type A, there exists a unique fi-normal, j-long term M 0such that
\Gamma  ` M j M0 : A [Pfe92]. We refer to M 0 as being canonical, whichwe denote as

\Gamma  ` M 0 * A.Throughout this paper, our examples will use encodings of natural numbers,

first-order logic, and the untyped *-calculus. An encoding consists of a signatureand a representation function, which maps elements from our domain of discourse into canonical forms in our logical framework. We say that an encodingis adequate if the representation function is an isomorphism.

In all of the examples below, the signatures for our encoding are listed initalics and our translation functions p-q are defined by the given sets of equations.
Example 1 (Natural numbers).

nat : typep0q = z z : nat

pn + 1q = s pnq s : nat ! nat

\Lambda 
Example 1 is a first-order encoding because none of the constants take argu-ments of functional types.

Example 2 (First order logic with equality). Terms t ::= x and first order formu-las

F ::= 8x. F | F1 oe F2 | ~F | t1 = t2 are represented as objects of type i andtype

o, respectively, in a signature that also includes the following declarations:

p8x. F q = forall (*x : i. pF q) forall : (i ! o) ! op~

F q = neg pF q neg : o ! op
F1 oe F2q = impl pF1q pF2q impl : o ! o ! op

t1 = t2q = eq pt1q pt2q eq : i ! i ! op

xq = x

3

Example 3 (Untyped *-expressions). Untyped *-expressions e ::= x | lam x. e |
e1 e2 are encoded as follows:

exp : typep
lam x. eq = lam (*x : exp. peq) lam : (exp ! exp) ! expp

e1 e2q = app pe1q pe2q app : exp ! exp ! expp

xq = x

The encodings of first-order formulas and *-calculus expressions illustratethe use of higher-order abstract syntax since object-language variable-binders

use logical-framework functions. Because little meaningful analysis can be doneon variables in our logical framework, the only interesting operation that can be
performed on a variable is substitution. Thus, it is most helpful to think of aterm of type A ! B not as representing a computation, but as representing a
term of type B that has a hole of type A.We demonstrate the formulation of an adequacy theorem. Each case can be
proven by a straightforward induction.
Theorem 1 (Adequacy of exp). Adequacy holds for our representation ofuntyped

*-expressions.

1. If e is an expression with free variables among x1, . . . , xn,then

x1 : exp, . . . , xn : exp ` peq * exp.2. If
x1 : exp, . . . , xn : exp ` M * expthen

M = peq for some expression e with free variables among x1, . . . , xn.3. p-q is a bijection between expressions and canonical forms where

p[e0/x]eq = [pe0q/x]peq. \Lambda 

3 The r-Calculus
The logical-framework type exp is not inductive because the constructor lam :(exp ! exp) ! exp has a negative occurrence [PM93] of exp. This is not just a
formal observation, since this property has deep consequences for the design ofthe r-calculus, which needs to provide a notion of computation general enough to
handle higher-order datatypes of this kind. We offer the ability to recurse under
*-binders and consider cases over functions of type exp ! exp while continuingto guarantee the adequacy of the encoding. Allowing for this, as well as general

recursive computation, can be seen as the main contribution of this work.In the r-calculus, expressions permit function definition by cases and alternations instead of providing explicit *-binders on the computation-level. Computation-level expressions and types are summarized in Figure 1 and explained in the
remainder of this section.

3.1 Function Definition by Cases and Recursion
In the r-calculus, we draw a separating line between the levels of represen-tation and computation. Representation-level types, such as nat and exp are

4

Types: o/, oe ::= hAi | o/ ) oe | \Lambda o/
Expressions: e, f ::= u | hMi | e1 7!o/ e2 | fflx : A. e | fflu 2 o/. e|

e1 * e2 | (e1 | e2) | rec u 2 o/. e|
*x : A. e | pop e | rx : A. e

Fig. 1. Syntactic categories of the r-calculus.

injected into computation-level types hnati and hexpi. Likewise, representation-level constants, such as (s z) and lam (

*x : exp. x), are injected into computation-level terms hs zi and hlam (
*x : exp. x)i. There are no user defined datatypes onthe computation-level; all type and constant declarations must be done at the

representation-level.
Example 4 (Addition). We informally define the function plus over the represen-tation of natural numbers from Example 1 in the following manner:

plus z y = yplus (s

x) y = s (plus x y)

We represent this formally in the r-calculus as follows:

rec plus 2 hnati ) hnati ) hnati.

ffly : nat. hzi 7! hyi 7! hyi|

fflx : nat. hs xi 7! ffly : nat. hyi 7! hsi ffi (plus * hxi * hyi)

\Lambda 
The recursion operator is conventional. In later examples we will omit it forthe sake of readability. Alternation, "|", separates cases that may be chosen for
evaluation non-deterministically. It binds more tightly than the recursion oper-ator rec

u 2 o/ . e, but not as tight as any of the other operators. Individual casesare of the form

e1 7!o/ e2, where e1 can be thought of as a guard. Only whensuch a case is applied to an object equivalent to

e1 (as defined in Section 4.2)is
e2 evaluated. In particular, if e1 is a value of type hAi, then our notion ofequality is given by our logical framework's notion of definitional equality. We

refer to e1 as the pattern and e2 as the body of the case. The index o/ statesthe type of the pattern, but is usually omitted when the type of the pattern
can be easily inferred. In conventional programming languages, variables thatoccur in patterns are implicitly declared, whereas in the r-calculus they must
be declared explicitly by fflx : A. e for reasons explained in Section 3.2. A similardeclaration for the computation-level

fflu 2 o/ . e permits higher-order functionsand is discussed in detail in the accompanying Technical Report [SPS04]. Application in the r-calculus is written as e1 * e2 in order to avoid confusion with

5

representation-level application, which is expressed via juxtaposition. The no-tation

e1 ffi e2 is syntactic sugar that lifts representation-level application to thecomputation-level.

e1 ffiA,B e2 = fflx : A ! B. hxi 7!hA!Bi ffly : A. hyi 7!hAi hx yi
We refer to ffi without type annotations because they are easily inferable.

3.2 Traversal of *-Binders
Next, we explain the operators * and pop from Figure 1. Recall the encoding offirst-order logic from Example 2.

As a running example, we consider Kolmogorov's double-negation interpre-tation, which transforms formulas from classical logic into intuitionistic logic in
the following way:

dneg (eq t1 t2) = neg (neg (eq t1 t2))dneg (impl

F1 F2) = neg (neg (impl (dneg F1) (dneg F2)))dneg (neg
F ) = neg (neg (neg (dneg F )))dneg (forall

F ) = neg (neg (forall F 0))where

F 0 x = dneg (F x)for some new parameter

x : i

In the last case dneg must recurse on the body F of the forall term, which is arepresentation-level function of type i ! o. Since

F is definitionally equivalentto a canonical term that starts with a
*-binder, we strip away the *-binderby applying
F to some new parameter x before invoking dneg. The result ofthe computation depends on

x and is hence written as F 0 x, where F 0 is arepresentation-level function of type i ! o.

The first three cases of dneg can be implemented in the r-calculus with con-structs we have already introduced. As for the forall case, we need to add new
constructs to our language. We feel that there are several interesting possibilitiesworth considering. One possibility would be to introduce a computation-level operator ^*, which lifts representation-level abstraction to the computation-level inmuch the same way that the syntactic-sugar ffi lifts representation-level application. In this case, we could write the forall case as

fflF : i ! o. hforall F i 7! hnegi ffi (hnegi ffi (hforalli ffi (^*x : i. dneg * hF xi)))
where the subterm (^*x : i. dneg * hF xi) has type hi ! oi. In principle this is a
possible solution. Adequacy is preserved because although the body of ^* maydiverge or get stuck, any value it computes must be of the form h

M i. However,^
* is too limited for our purposes because it always returns a representation-level function, even if the expected result is of a base type (see Example 5).

Meta-ML [TS00] employs a construct similar to ^*.

6

Another possibility is to add an explicit parameter introduction operator _*

fflF : i ! o. hforall F i 7! _*x : i.case

dneg * hF xiof

fflF 0 : i ! o. hF 0 xi 7! hneg (neg (forall F 0))i

where we write "case e1 of e2" as syntactic sugar for "e2 * e1". In contrast to ^*,the type of the subterm starting with _

* is hoi. Since the recursive call resultsin a value of type hoi, and forall requires a value of type i ! o, we need a

way to turn the result into a value of type hi ! oi. Furthermore, because thisvalue escapes

x's declaration, it should not contain any free occurrences of x.Ideally, higher-order pattern matching would yield

F 0, which is the result ofabstracting all occurrences of
x from the result of the recursive call. But thereis no guarantee that this will succeed, because

F 0 is declared within the scopeof
x. For example, if dneg * hF xi returns heq x xi, then F 0 = (*y : i. eq x x) and
F 0 = (*y : i. eq y y) are among the possible solutions to this matching problem.To remedy this,

F 0 can be declared outside of the scope of x, and thus could notpossibly be instantiated with a term containing

x:

fflF : i ! o. hforall F i 7! fflF 0 : i ! o._

*x : i.case dneg * hF xi of hF 0 xi 7! hneg (neg (forall F 0))i

In this case, the only solution to the matching problem is F 0 = (*y : i. eq y y),which illustrates the necessity of explicit

ffl-declarations. However, we do notinclude _
* in the r-calculus since, as we have seen, it allows us to write functionsthat let parameters escape their scope.

Instead, we do include two operators and one new type constructor thatcan be found in Figure 1. The operator

* is similar to _* in that it introducesnew parameters, but different because it statically requires that these parameters

cannot extrude their scope. The operator "pop" provides such guarantees. Theseguarantees are communicated through the type \Lambda 

o/ , which pop introduces and
* eliminates. The complete function dneg is given below.

dneg : hoi ) hoi=

fflt1 : i. fflt2 : i. heq t1 t2i 7! hneg (neg (eq t1 t2))i|

fflF1 : o. fflF2 : o.himp

F1 F2i 7! hnegi ffi (hnegi ffi (himpi ffi (dneg * hF1i) ffi (dneg * hF2i)))|
fflF : o. hneg F i 7! hnegi ffi (hnegi ffi (hnegi ffi (dneg * hF i)))|
fflF : i ! o. hforall F i 7! fflF 0 : i ! o.

*x : i. case dneg * hF xi of hF 0 xi 7! pop hneg (neg (forall F 0))i

The body of the * is of type \Lambda hoi; the \Lambda  ensures that whatever value thisexpression evaluates to does not contain

x. The body of pop has type hoi onlybecause it neither contains
x nor any ffl-quantified variable the may depend on x.Thus, the subexpression "pop hforall

F 0i" introduces type \Lambda hoi. A precise typetheoretic definition and analysis of the \Lambda  type will be given in Section 4.

7

3.3 Pattern-matching Parameters
Finally, we turn to the last unexplained operator from Figure 1, the r-operator,which is used to match parameters introduced by

*.

Example 5 (Counting variable occurrences). Consider a function that counts thenumber of occurrences of bound variables in an untyped

*-expression from Ex-ample 3.

cntvar (x) = (s z) where x : exp is a parametercntvar (app

e1 e2) = plus (cntvar e1) (cntvar e2)cntvar (lam

e) = cntvar (e x) for some new parameter x : exp

The first of the three cases corresponds to the parameter case that matchesany parameter of type exp regardless of where and when it was introduced.

Formally, we use the r-operator to implement this case.

cntvar : hexpi ) hnati= r

x : exp. hxi 7! hs zi|
ffle1 : exp. ffle2 : exp.happ

e1 e2i 7! plus * (cntvar * he1i) * (cntvar * he2i)|
ffle : exp ! exp.hlam

ei 7! ffln : nat.
*x : exp.(h

ni 7! pop hni) * (cntvar * he xi)

\Lambda 
Notice that, in the above example, if we were to replace the r with ffl, itwould still be possible for cntvar to return correct answers, since

fflx : exp canmatch any expression of type exp including parameters; however, it would also

be possible for cntvar to always return hs zi for the same reason.
Example 6 (Combinators). The combinators c ::= S | K | MP c1 c2 are repre-sented as objects of type comb as follows:

pKq = K K : combpSq = S S : comb
pMP c1 c2q = MP pc1q pc2q MP : comb ! comb ! comb
Any simply-typed *-expression from Example 3 can be converted into a combi-nator in a two-step algorithm. The first step is called bracket abstraction, or ba,

which converts a parametric combinator (a representation-level function of typecomb ! comb) into a combinator with one less parameter (of type comb). If M
has type comb ! comb and N has type comb then hMPi ffi (ba * hMi) ffi hN i resultsin a term that is equivalent to h

MN i in combinator logic.

ba (*x : comb. x) = MP (MP S K) Kba (

*x : comb. z) = MP K z where z : comb is a parameterba (
*x : comb. K) = MP K Kba (
*x : comb. S) = MP K Sba (
*x : comb. MP (c1 x) (c2 x)) = MP (MP S (ba c1)) (ba c2)

8

ba : hcomb ! combi ) hcombi= h

*x : comb. xi 7! hMP (MP S K) Ki| r

z : comb. h*x : comb. zi 7! hMP K zi| h
*x : comb. Ki 7! hMP K Ki| h
*x : comb. Si 7! hMP K Si|
fflc1 : comb ! comb. fflc2 : comb ! comb.h

*x : comb. MP (c1 x) (c2 x)i 7!hMPi ffi (hMPi ffi hSi ffi (

ba * hc1i)) ffi (ba * hc2i)

The first two cases of ba illustrate how to distinguish x, which is to be abstracted,from parameters that are introduced in the function convert, which we discuss
next. The function convert traverses *-expressions and uses ba to convert theminto combinators.

convert (y z) = z where y : comb ! exp and z : comb are parametersconvert (app

e1 e2) = MP (convert e1) (convert e2)convert (lam

e) = ba c where c z = convert (e (y z))and

y : comb ! expand
z : comb are parameters

The last case illustrates how a parameter of functional type may introduceinformation to be used when the parameter is matched. Rather than introduce
a parameter x of type exp, we introduce a parameter of type comb ! exp thatcarries a combinator as "payload." In our example, the payload is another parameter z : comb, the image of x under convert. This technique is applicableto a wide range of examples (see the Technical Report [SPS04] for details). We
formalize convert below:

convert : hexpi ) hcombi= r

y : comb ! exp. rz : comb. hy zi 7! hzi|
ffle1 : exp. ffle2 : exp.happ

e1 e2i 7! hMPi ffi (convert * he1i) ffi (convert * he2i)|
ffle : exp ! exp. hlam ei 7! fflc : comb ! comb.

*y : comb ! exp. *z : comb.case

convert * he (y z)i of hc zi 7! pop (pop (ba * hci))

\Lambda 
We summarize a few of the most important properties of the r-operator.First, it is intuitively appealing to have one base case (the r-case) for each
class of parameters, because what happens in these cases is uniquely defined inone place. Second, payload carrying parameters permit sophisticated base cases,
which simplify the reading of a program because all information shared betweenthe introduction and matching of parameters must be made explicit.

9

\Phi (u) = o/ tpvar
\Omega , (\Gamma  ; \Phi ) ` u 2 o/

\Gamma  ` M : A tpinj
\Omega , (\Gamma  ; \Phi ) ` hMi 2 hAi

\Omega  ` e1 2 o/ \Omega  ` e2 2 oe tpfun

\Omega  ` e1 7!o/ e2 2 o/ ! oe

\Omega , (\Gamma  ; \Phi , u 2 o/) ` e 2 o/ tpfix
\Omega , (\Gamma  ; \Phi ) ` fix u 2 o/. e 2 o/
\Omega , (\Gamma , x : A; \Phi ) ` e 2 o/ tptheobj
\Omega , (\Gamma  ; \Phi ) ` fflx : A. e 2 o/

\Omega , (\Gamma  ; \Phi , u 2 o/) ` e 2 o/ tpthemeta
\Omega , (\Gamma  ; \Phi ) ` fflu 2 o/. e 2 o/
\Omega  ` e1 2 oe ! o/ \Omega  ` e2 2 oe tpapp

\Omega  ` e1 * e2 2 o/

\Omega  ` e1 2 o/ \Omega  ` e2 2 o/ tpalt

\Omega  ` (e1 | e2) 2 o/

\Omega  ` e 2 o/ tpbox
\Omega , (\Gamma  ; \Phi ) ` pop e 2 \Lambda o/

\Omega , (\Gamma  ; \Phi ), (\Gamma , x : A; \Phi ) ` e 2 \Lambda o/ tpnew

\Omega , (\Gamma  ; \Phi ) ` *x : A. e 2 o/
\Omega , (\Gamma , x : A; \Phi ) ` e 2 o/ tpnabla
\Omega , (\Gamma  ; \Phi ) ` rx : A. e 2 o/

Fig. 2. The static semantics of the r-calculus

4 Semantics
The operators * and pop have guided the design of the static and operationalsemantics of the r-calculus. To reiterate, once a parameter is introduced by a
*, all other declarations that take place within its scope may depend on the newparameter. As we will see, pop statically ensures that an expression is valid outside *'s scope by discarding all declarations since the last parameter introductionin a manner reminiscent of popping elements off a stack. The ambient environment is therefore formally captured in form of scope stacks. A scope consists oftwo parts: The context

\Gamma  (defined in Section 2), which summarizes all object-level declarations
x : A, and the context \Phi , which summarizes all meta-leveldeclarations
u 2 o/ .

Meta Contexts: \Phi  ::= * | \Phi , u 2 o/
Scope Stacks: \Omega  ::= * | \Omega , (\Gamma  ; \Phi )

We refer to the top and second-from-top elements of \Omega  as the current andprevious scopes, respectively. The scope stack

\Omega  grows monotonically, whichmeans that the current scope always extends the previous scope.

4.1 Static semantics
We define the typing judgment \Omega  ` e 2 o/ by the rules depicted in Figure 2.Many of the rules are self-explanatory. All rules except for

tpnew and tppop touch

10

only the current scope. For example, tpvar relates variables and types, whereas
tpinj enforces that only representation-level objects valid in the current scopecan be lifted to the computation-level. For functions, the pattern must be of the

argument type, whereas the body be of the result type. Variables that may occurin patterns must be declared by a preceding

fflx : A or fflu 2 o/ declaration, whichwill be recorded in the current scope by
tptheobj and tpthemeta, respectively.The rules
tpapp, tpalt, and tpfix are standard. The tpbox rule is the introductionrule for \Lambda 

o/ . The expression pop e is valid if e is valid in the previous scope.The corresponding elimination rule is

tpnew. The expression *x : A. e has type
o/ when e is of type \Lambda o/ in the properly extended scope stack.

4.2 Operational Semantics
Computation level function application in the r-calculus is more demandingthan the usual substitution of an argument for a free variable. It relies on the

proper instantiation of all ffl- and r-bound variables that occur in the function'spattern. Perhaps not surprisingly, the behavior of our calculus depends on when
these instantiations are committed. For example,

(fflf 2 hnati ! hnati. f 7! plus * (f * hzi) * (f * hs zi)) * (ffln : nat. hni 7! hni)
may either return s z under a call-by-name semantics, or no solution at all undera call-by-value semantics because

n : nat may be instantiated either by z ors z but not both. Consequently, our calculus adopts a call-by-name evaluation

strategy. We can define computational-level *-abstraction "lambda u 2 o/. e" assyntactic sugar for (

fflu 2 o/. u 7! e) and "let u 2 o/ = e1 in e2 end" as syntacticsugar for ((
fflu 2 o/ . u 7! e2) e1).

Definition 2 (Values). The set of values of the r-calculus is defined as follows.

Values: v ::= hMi | pop e | e1 7!o/ e2
The operational semantics of the r-calculus combines a system of reductionrules of the form

\Omega  ` e ! e0 with an equivalence relation on meta-level expres-sions
\Omega  ` e j e0 2 o/. We give the reduction rules in Figure 3 and the equalityrules in Figure 4. During runtime, all

ffl-quantified variables are instantiated withconcrete objects, so evaluation always takes place in a scope stack of the form

\Omega  ::= * | \Omega , (\Gamma  ; *), where \Gamma  contains only *-quantified parameter declarations.The rules in Figure 3 are organized into three parts. The top part shows the
essential reduction rules redbeta and rednupop. The rule rednupop states that itis unnecessary to traverse into a new scope to return an expression that is valid
in the previous scope.Among the second block of rules,

redalt1 and redalt2 express a non-deterministicchoice in the control flow. Similarly,

redsome and redsomeM express a non-deterministic choice of instantiations. The abbreviations

f/u and M/x stand forsingle-point substitutions that can easily be expanded into simultaneous substitutions given in Definition 3. During evaluation, the current scope only contains

11

\Omega  ` e1 j e01 2 o/ redbeta
\Omega  ` (e1 7!o/ e2) * e01 ! e2 rednupop\Omega  ` *x : A. pop e ! e
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

redalt1\Omega  ` (e
1 | e2) ! e1

redalt2\Omega  ` (e
1 | e2) ! e2

\Gamma  ` M : A redsome
\Omega , (\Gamma  ; *) ` fflx : A. e ! [M/x]e

\Omega  ` f 2 o/ redsomeM
\Omega  ` fflu 2 o/. e ! [f/u]e
\Gamma  (y) = A

rednabla\Omega , (\Gamma  ; *) ` rx : A. e ! [y/x]e redfix\Omega  ` fix u 2 o/. e ! [fix u 2 o/. e/u]e

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

\Omega  ` e1 ! e01 redfun

\Omega  ` e1 * e2 ! e01 * e2

\Omega , (\Gamma  ; *), (\Gamma , x : A; *) ` e ! e0

rednew\Omega , (\Gamma  ; *) ` *x : A. e ! *x : A. e0

Fig. 3. Small-step semantics (Reductions)
\Gamma  ` M j N : A eqinjV
\Omega , (\Gamma  ; *) ` hMi j hNi 2 hAi

\Omega  ` e1 !* e01 \Omega  ` e2 !* e02 \Omega  ` e01 j e02 2 hAi eqinjR

\Omega  ` e1 j e2 2 hAi

\Omega  ` e1 j e2 2 o/ eqpopV
\Omega , (\Gamma  ; *) ` pop e1 j pop e2 2 \Lambda o/

\Omega  ` e1 !* e01 \Omega  ` e2 !* e02 \Omega  ` e01 j e02 2 \Lambda o/ eqpopR

\Omega  ` e1 j e2 2 \Lambda o/
eqfun\Omega  ` e j e 2 o/
1 ) o/2

Fig. 4. Small-step semantics (Equality)

parameters introduced by *, and thus rednabla expresses a non-deterministicchoice of parameters. Finally,

redfix implements the unrolling of the recursionoperator.

The bottom two rules are necessary to give us a congruence closure for re-ductions on r-expressions. Because the r-calculus is call-by-name, we do not
evaluate e2 in the rule redfun. Finally, rednew reduces under the * after appro-priately copying and extending the current scope.

Thus, equivalence on functions is decided only by syntactic equality, as shownby rule

eqfun in Figure 4. For all other types, we give two rules: the rule endingin
V refers to the case where the left and right hand side are already values,while the rule ending in

R is used when further reduction steps are required oneither side.

12

tpEObjS\Gamma  ` * : * \Gamma  ` M : A \Gamma  ` fl : \Gamma 

0

tpIObS
\Gamma  ` (fl, M/x) : (\Gamma  0, x : A)

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

tpEMetaS\Omega  ` * : * \Omega  ` f 2 o/ \Omega  ` ' : \Phi  tpIMetaS\Omega  ` (', f/u) : (\Phi , u 2 o/)

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

tpEStackS\Omega  ` * : *

\Gamma  ` fl : \Gamma  0 \Omega , (\Gamma  ; \Phi ) ` ' : \Phi 0 \Omega  ` ! : \Omega 0 tpIStackS

\Omega , (\Gamma  ; \Phi ) ` !, (fl; ') : \Omega 0, (\Gamma  0, \Phi 0)

Fig. 5. The static semantics of substitutions

5 Meta Theory
We study the meta-theory of the r-calculus culminating in the type-preservationtheorem, which entails that parameters cannot escape their scope.

Substituting for ffl and r-bound variables is essential for defining the oper-ational meaning of our expressions. In this section we elaborate on object-level
and meta-level substitutions, as well as substitution stacks, which are definedon scope stacks. As is standard, we make our substitutions capture avoiding by
tacitly renaming variable names.
Definition 3 (Substitutions).

Object-Level Substitutions: fl ::= * | fl, M/xMeta-Level Substitutions:

' ::= * | ', f/uSubstitution Stacks:
! ::= * | !, (fl; ')

We define the meaning of the three typing judgments for substitutions \Gamma  ` fl : \Gamma  0,
\Omega  ` OE : \Phi , and \Omega  ` ! 2 \Omega 0 in Figure 5. The domains of the substitutions are \Gamma  0,
\Phi , and \Omega 0, respectively, and the codomains of the substitutions are \Gamma  , \Omega , and
\Omega , respectively. The definition of substitution application is given in Figure 6.We write

\Gamma  < \Gamma  0 if \Gamma  0 strictly extends \Gamma  , and \Phi  <= \Phi 0, if \Phi  = \Phi 0 or \Phi  < \Phi 0.

Definition 4 (Well-Formed Context Stacks). We say that a context stack
\Omega  is well-formed if the proposition ` \Omega  ok can be proved using the followingjudgments:

okempty` * ok okinit` *, (\Gamma  ; \Phi ) ok ` \Omega , (\Gamma  ; \Phi ) ok \Gamma  < \Gamma 

0 \Phi  <= \Phi 0

oknew` \Omega , (\Gamma  ; \Phi ), (\Gamma  0; \Phi 0) ok

The following substitution lemma is the key lemma for proving type preservation.
Lemma 1 (Substitution). If \Omega  ` e 2 o/ , \Omega  ok, \Omega 0 ok and \Omega 0 ` ! 2 \Omega  then
\Omega 0 ` [!]e 2 o/ .

13

[fl, M/x]x = M

[fl, M/x]y = [fl]y

[fl]c = c
[fl](N1 N2) = ([fl]N1) ([fl]N2)
[fl](*x : A. N) = *x : A. [fl, x/x]N

[', e/u]u = e

[', e/u]v = [']v

[!, (fl; ')]u = [']u
[!, (fl; ')]hNi = h[fl]Ni
[!, (fl; ')](pop e) = pop [!]e

[!](e1 7!o/ e2) = ([!]e1) 7!o/ ([!]e2)

[!](e1 * e2) = ([!]e1) * ([!]e2)
[!](e1 | e2) = ([!]e1 | [!]e2)
[!, (fl; ')](fix u 2 o/. e) = fix u 2 o/. [!, (fl; ', u/u)]e

[!, (fl; ')](fflx : A. e) = fflx : A. [!, (fl, x/x; ')]e
[!, (fl; ')](fflu 2 o/. e) = fflu 2 o/. [!, (fl; ', u/u)]e
[!, (fl; ')](rx : A. e) = rx : A. [!, (fl, x/x; ')]e

[!, (fl; ')](*x : A. e) = *x : A. [!, (fl; '), (fl, x/x; ')]e

Fig. 6. Substitution Application
Proof. By induction on the structure of \Omega  ` e 2 o/ . See the Technical Re-port [SPS04] for details.
We are now ready to prove the type preservation theorem.
Theorem 2 (Type Preservation). If ` \Omega  ok and \Omega  ` e 2 o/ and \Omega  ` e ! e0then

\Omega  ` e0 2 o/ .

Proof. By induction on the structure of \Omega  ` e ! e0. See the Technical Re-port [SPS04] for details.

As a corollary we obtain the property that parameters cannot escape their scope.
Corollary 1 (Scope Preservation). If ` \Omega , (\Gamma  ; *) ok and \Omega , (\Gamma  ; *) ` e 2 \Lambda o/and

\Omega , (\Gamma  ; *) ` e !* v and v is a value then v = pop e0 and \Omega  ` e0 2 o/ .

In future work, we will investigate further meta-theoretical properties of ther-calculus, such as progress and termination. Neither of these two properties is

satisfied without additional side conditions on the typing rules.

6 Conclusion
In this paper we have presented the r-calculus. We allow for evaluation under
*-binders, pattern matching against parameters, and programming with higher-order encodings. The r-calculus has been implemented as a stand-alone programming language, called Elphin [PS04]. The r-calculus solves many prob-lems associated with programming with higher-order abstract syntax. We allow
for, and can usefully manipulate, datatype declarations whose constructor typesmake reference to themselves in negative positions while maintaining a closed
description of the functions. Many examples, such as parallel reduction and anevaluator for a simple language with first-class continuations can be found in the
Technical Report [SPS04].

14

The r-calculus is the result of many years of design, originally inspired byan extension to ML proposed by Dale Miller [Mil90]. Other influencing works
include pattern-matching calculi as employed in ALF [CNSvS94] or proposedby Jouannaud and Okada [JO91], the type theory T

+! [Sch01], and Hofmann's

work on higher-order abstract syntax [Hof99]. A direct predecessor to the r-calculus is the modal

*-calculus with iterators [SDP01]. We conjecture that anyfunction written in the modal

*-calculus with iterators can also be expressed inthe r-calculus.

Closely related to our work are programming languages with freshness [PG00,GP99],which provide a built-in

ff-equivalence relation for first-order encodings but pro-vide neither
fij nor any support for higher-order encodings. Also closely relatedto the r-calculus are meta-programming languages, such as MetaML [TS00,Nan02],

which provide hierarchies of computation levels, but do not single out a particularlevel for representation. Many other attempts have been made to combine higherorder encodings and functional programming, in particular Honsell, Miculan,and Scagnetto's embedding of the

ss-calculus in Coq[HMS01], and Momgliano,Amber, and Crole's Hybrid system [MAC03].

In future work, we plan to extend the r-calculus to a dependently-typedlogical framework, add polymorphism to the computation-level, and study termination and progression.
Acknowledgments. We would like to thank Henrik Nilsson, Simon Peyton-Jones,and Valery Trifonov for comments on earlier drafts of this paper.

References
[CNSvS94] Thierry Coquand, Bengt Nordstr"om, Jan M. Smith, and Bj"orn von Sydow.

Type theory and programming. Bulletin of the European Association for
Theoretical Computer Science, 52:203-228, February 1994.
[Coq91] Thierry Coquand. An algorithm for testing conversion in type theory. In

G'erard Huet and Gordon Plotkin, editors, Logical Frameworks, pages 255-
279. Cambridge University Press, 1991.
[DPS97] Jo"elle Despeyroux, Frank Pfenning, and Carsten Sch"urmann. Primitive recursion for higher-order abstract syntax. In R. Hindley, editor, Proceedings
of the Third International Conference on Typed Lambda Calculus and Applications (TLCA'97), pages 147-163, Nancy, France, April 1997. SpringerVerlag LNCS. An extended version is available as Technical Report CMUCS-96-172, Carnegie Mellon University.
[GP99] Murdoch Gabbay and Andrew Pitts. A new approach to abstract syntax

involving binders. In G. Longo, editor, Proceedings of the 14th Annual Symposium on Logic in Computer Science (LICS'99), pages 214-224, Trento,
Italy, July 1999. IEEE Computer Society Press.
[HHP93] Robert Harper, Furio Honsell, and Gordon Plotkin. A framework for defining logics. Journal of the Association for Computing Machinery, 40(1):143-
184, January 1993.
[HMS01] Furio Honsell, Marino Miculan, and Ivan Scagnetto. pi-calculus in

(Co)inductive-type theory. Theoretical Computer Science, 253(2):239-285,
2001.

15

[Hof99] Martin Hofmann. Semantical analysis for higher-order abstract syntax. In

G. Longo, editor, Proceedings of the 14th Annual Symposium on Logic in
Computer Science (LICS'99), pages 204-213, Trento, Italy, July 1999. IEEE
Computer Society Press.
[JO91] Jean-Pierre Jouannaud and Mitsuhiro Okada. A computation model for

executable higher-order algebraic specification languages. In Gilles Kahn,
editor, Proceedings of the 6th Annual Symposium on Logic in Computer
Science, pages 350-361, Amsterdam, The Netherlands, July 1991. IEEE
Computer Society Press.
[MAC03] Alberto Momgliano, Simon Ambler, and Roy Crole. A definitional approach to primitive recursion over higher order abstract syntax. In Alberto
Momgliano and Marino Miculan, editors, Proceedings of the Merlin Workshop, Uppsala, Sweden, June 2003. ACM Press.
[Mil90] Dale Miller. An extension to ML to handle bound variables in data structures: Preliminary report. In Proceedings of the Logical Frameworks BRA
Workshop, Nice, France, May 1990.
[Nan02] Aleksander Nanevski. Meta-programming with names and necessity. In

Cindy Norris and Jr. James B. Fenwick, editors, Proceedings of the Seventh ACM SIGPLAN International Conference on Functional Programming
(ICFP-02), Pittsburgh, PA, October 2002. ACM Press.
[Pfe92] Frank Pfenning. Computation and deduction. Unpublished lecture notes,

277 pp. Revised May 1994, April 1996, May 1992.
[PG00] A. M. Pitts and M. J. Gabbay. A metalanguage for programming with

bound names modulo renaming. In R. Backhouse and J. N. Oliveira, editors, Mathematics of Program Construction, MPC2000, Proceedings, Ponte
de Lima, Portugal, July 2000, volume 1837 of Lecture Notes in Computer
Science, pages 230-255. Springer-Verlag, Heidelberg, 2000.
[PM93] Christine Paulin-Mohring. Inductive definitions in the system Coq: Rules

and properties. In M. Bezem and J.F. Groote, editors, Proceedings of the
International Conference on Typed Lambda Calculi and Applications, pages
328-345, Utrecht, The Netherlands, March 1993. Springer-Verlag LNCS
664.
[PS04] Adam Poswolsky and Carsten Sch"urmann. Elphin: Functional programming

with higher-order encodings. Technical report, Yale University, 2004. to
appear.
[Sch01] Carsten Sch"urmann. Recursion for higher-order encodings. In Laurent

Fribourg, editor, Proceedings of the Conference on Computer Science Logic
(CSL 2001), pages 585-599, Paris, France, August 2001. Springer Verlag
LNCS 2142.
[SDP01] Carsten Sch"urmann, Jo"elle Despeyroux, and Frank Pfenning. Primitive

recursion for higher-order abstract syntax. Theoretical Computer Science,
(266):1-57, 2001. Journal version of [DPS97].
[SPS04] Carsten Sch"urmann, Adam Poswolsky, and Jeffrey Sarnat. The rcalculus. functional programming with logical frameworks. Technical Report YALEU/DCS/TR-1272, Yale University, October 2004.
[TS00] Walid Taha and Tim Sheard. MetaML: Multi-stage programming with

explicit annotations. Theoretical Computer Science, 248(1-2), 2000.

16