

Practical Programming with
Higher-Order Encodings and Dependent Types?

Adam Poswolsky1 and Carsten Sch"urmann2

1 Yale University poswolsky@cs.yale.edu
2 IT University of Copenhagen carsten@itu.dk

Abstract. Higher-order abstract syntax (HOAS) refers to the technique of representing variables of an object-language using variables of a
meta-language. The standard first-order alternatives force the programmer to deal with superficial concerns such as substitutions, whose implementation is often routine, tedious, and error-prone. In this paper,
we describe the underlying calculus of Delphin. Delphin is a fully implemented functional-programming language supporting reasoning over
higher-order encodings and dependent types, while maintaining the benefits of HOAS. More specifically, just as representations utilizing HOAS
free the programmer from concerns of handling explicit contexts and substitutions, our system permits programming over such encodings without making these constructs explicit, leading to concise and elegant programs. To this end our system distinguishes bindings of variables intended for instantiation from those that will remain uninstantiated, utilizing a variation of Miller and Tiu's r-quantifier [1].

1 Introduction
Logical frameworks are meta-languages used to represent information. Any sys-tem supporting the declaration of custom datatypes is providing a framework for
representing information. Church's simply typed *-calculus is arguably the firstlogical framework that supports higher-order encodings, which means that binding constructs of the object language (the information modeled) are expressedin terms of the binding constructs of the

*-calculus. This deceptively simple ideaallows for encodings of complex data structures without having to worry about

the representation of variables, renamings, or substitutions that are prevalent inlogic derivations, typing derivations, operational semantics, and more.

The logical framework LF [2] is essentially an extention of Church's *-calculuswith dependent types and signatures. A signature contains a collection of constants used to construct objects of different types, also known as datatype con-structors. Dependent types and type families (type level constants that need to
be indexed by objects) can capture invariants about representations that areimpossible with just simple types. A list can be indexed by its length. An expression can be indexed by its type. An evaluation relation can be representedas a type indexed by two expressions, its input and output. The list goes on.

? This research has been funded by NSF grants CCR-0325808 and CCR-0133502.

Neither the simply typed *-calculus nor LF are suitable for programming.Neither framework permits the definition of recursive functions by cases. They
are logical frameworks, whose sole purpose is the representation of syntax mod-ulo variable renaming and substitution. Furthermore, we must be careful when
adding anything to LF. For example, the addition of case analysis would in-evitably lead to exotic terms, i.e. typeable terms that do not correspond to any
concrete term in the object-language being encoded. The existence of such exoticterms would eliminate the main benefits of higher-order encodings.

Thus, the first challenge of designing a calculus of recursive functions sup-porting higher-order encodings is to cleanly separate the two function spaces
for representation and computation. Our Delphin calculus defines a computa-tion level supporting function definition by case analysis and recursion without
extending the representation level LF. Therefore, all of LF's representationalfeatures and properties are preserved.

The second challenge of designing our calculus is supporting recursion underrepresentation level (LF) functions. We solve this problem by distinguishing between two methods of variable binding. The function type constructor 8 (or oewhen non-dependent) binds variables that are intended for instantiation, which
means that computation is delayed until application. Additionally, we providea newness type constructor r to bind variables that will always remain uninstantiated and hence computation will not be delayed. The introduction formof r is the

* (pronounced new ) construct, *x. e, where x can occur free in e.Evaluation of

e occurs while the binding x remains uninstantiated. Therefore,for the scope of

e, the variable x behaves as a constant in the signature, whichwe will henceforth call a parameter. One may view

* as a method of dynamicallyextending the signature.

The Delphin calculus distinguishes between parameters (extensions of thesignature) and objects (built from constants and parameters). The type

A#refers to a parameter of type
A. Intuitively, the type A# is best viewed as asubtype of
A. Although all parameters of type A do have type A, the conversedoes not necessarily hold.

The presence of parameters introduce concerns with respect to case analysis.When performing case analysis over a type, we cannot only consider the constants declared in the signature, but we must also consider parameters. To thisend, Delphin permits a versatile definition of cases. Pattern variables of type

A#will be used to capture these additional cases.

Our r-type constructor is related to Miller and Tiu's r-quantifier [1], wherethey distinguish between eigenvariables intended for instantiation from those
representing scoped constants. In their logic, the formula (8x. 8y. o/ (x, y)) oe8

z. o/ (z, z) is provable, whereas (rx. ry. o/(x, y)) oe rz. o/ (z, z) is not.Similarly, the Delphin type (8

x. 8y. o/ (x, y)) oe 8z. o/(z, z) is inhabited by
*f. *z. f z z. However, the type (rx. ry. o/ (x, y)) oe rz. o/ (z, z) is in generalnot inhabited because nothing might be known about

o/(z, z).

In this paper we describe our calculus of recursive functions and its implemen-tation in the Delphin programming language. Delphin is available for download

Types A, B ::= a | A M | \Pi x:A. B
Objects M, N ::= x | c | M N | *x:A. N
Kinds K ::= type | \Pi x:A. K

Signature \Sigma  ::= * | \Sigma , a:K | \Sigma , c:A
Context \Gamma  ::= * | \Gamma , x:A

Fig. 1. The logical framework LF
at http://www.cs.yale.edu/,delphin. We begin this paper with an overviewof the logical framework LF in Section 2. We motivate the Delphin language in
Section 3, and provide examples in Section 4. We discuss its static semantics inSection 5 followed by the operational semantics in Section 6. Next, we present
some meta-theoretical results in Section 7. An advanced example with combina-tor transformations is given in Section 8. We briefly discuss some implementation
details in Section 9. Finally, we describe related work in Section 10 before weconclude and assess results in Section 11.

2 Logical Framework LF
The Edinburgh logical framework [2], or LF, is a meta-language for representingdeductive systems defined by judgments and inference rules. Its most prevalent
features include dependent types and the support for the higher-order encodingsof syntax and hypothetical judgments.

We present the syntactic categories of LF in Figure 1. Function types assignnames to their arguments in

\Pi x:A. B. We write A ! B as syntactic sugar when
x does not occur in B. Types may be indexed by objects and we provide theconstruct

A M to represent such types. We write x for variables while a and
c are type and object constants (or constructors), respectively. We often referto

a as a type family. These constants are provided in a fixed collection calledthe signature. The functional programmer may interpret the signature as the

collection of datatype declarations.In the presence of dependencies, not all types are valid. The kind system of LF
acts as a type system for types. We write \Gamma  `lf M : A for valid objects and \Gamma  `lf A :
K for valid types, in a context \Gamma  that assigns types to variables. The typingand kinding rules of LF are standard [2] and are omitted here in the interest of

brevity. All LF judgments enjoy the usual weakening and substitution propertieson their respective contexts, but exchange is only permitted in limited form due
to dependencies. We take jfffij as the underlying notion of definitional equalitybetween LF-terms. Terms in

fi-normal j-long form are also called canonicalforms.

Theorem 1 (Canonical forms). Every well-typed object \Gamma  `lf M : A possessesa unique canonical form (modulo

ff-renaming) \Gamma  `lf N : A, such that M jfffij N .

Encodings consist of a signature and a representation function, which mapselements from our domain of discourse into canonical forms in our logical framework. We say that an encoding is adequate if the representation function (p-q)

is a compositional bijection (one that commutes with substitution). We nextpresent examples of a few adequate encodings. We write the signature to the
right of the representation function.
Example 1 (Natural numbers). nat : type

p0q = z z : natp
n + 1q = s pnq s : nat ! nat

Example 2 (Expressions). As another example, we choose the standard languageof untyped

*-terms t ::= x | lam x. t | t1@t2. The encoding ptq is as follows:

pxq = x exp : typep

lam x. tq = lam (*x:exp. ptq) lam : (exp ! exp) ! expp
t1@t2q = app pt1q pt2q app : exp ! exp ! exp

In this example, we represent object-level variables x by LF variables x oftype exp, which is recorded in the type of lam. As a result, we get substitution

for free: p[t1/x]t2q = [pt1q/x]pt2q.
Example 3 (Natural deduction calculus). Let A, B ::= A ) B | p be the lan-guage of formulas. We will use ) as an infix operator below. We write E ::`

A ifE is a derivation in the natural deduction calculus. Natural deduction derivations

E ::` A are encoded in LF as pEq : nd pAq, whose signature is given below.

u` A

...
` B impi
` A ) B `

A ` A ) B impe`

B

o : type): o ! o ! o
nd : o ! typeimpi : (nd

A ! nd B) ! nd (A ) B)impe : nd (

A ) B) ! nd A ! nd B.

We omit the leading \Pi s from the types when they are inferable. This is,for example, common practice in Twelf. The logical framework LF draws its

representational strength from the existence of canonical forms, providing aninduction principle that allows us to prove adequacy.

3 Delphin Calculus
The Delphin calculus is specifically designed for programming with (higher-order) LF encodings. It distinguishes between two levels: computational and
representational. Its most prominent feature is its newness type constructor r,which binds uninstantiable parameters introduced by our

* construct. Figure 2summarizes all syntactic categories of the Delphin calculus.

We use ffi to distinguish between representational types A, parameters A#,and computational types

o/ .3 Representational types A are the LF types defined

3 In the corresponding technical report [3] we also allow for computation-level parameters o/#, which we omit here for the sake of simplicity.

Types ffi ::= o/ | A | A#
Computational Types o/, oe ::= ? | 8ff2ffi. o/ | 9ff2ffi. o/ | rx2A#. o/
Variables ff ::= x | u
Expressions e, f ::= ff | M | unit | e f | (e, f) | *x2A#. e | e\x|

uu2o/. e | fn (c1 | . . . | cn)
Cases c ::= fflff2ffi. c | *x2A#. c | c\x | e 7! f

Fig. 2. Syntactic Definitions of Delphin

in Section 2. We write A# to denote parameters of type A. Through this dis-tinction we strengthen pattern matching as well as permit functions that range
over parameters. It is best to view A# as a subtype of A. We also distinguishrepresentation-level and computation-level variables by

x and u, respectively.Computational types are constructed from four type constructors: the unit type

constructor ?, the function type constructor 8, the product type constructor 9,and the newness type constructor r.

Computational types o/ disallow computing anything of LF type A. This isnecessary as LF types may depend on objects of type

A, and we chose to disallowdependencies on computation-level expressions. This separation ensures that the

only objects of type A are LF terms M. Although computation cannot result inan object of type

A, it may result in an object of type 9x2A. ?. We abbreviatethis type as h
Ai and summarize all abbreviations in Figure 3.

Since 8 and 9 range over ffi, they each provide three respective functionand pairing constructs- over

A, o/ , and A#. For example, a function of type8
x2o. hnd xi computes natural deduction derivations for any formula. In con-trast, a function of type 8

x2o#. hnd xi only works on parameters.

As already stated, functions may range over any type ffi. We write ffi oe o/ for8
ff2ffi. o/ when ff does not occur in o/ , which will always be the case when ffi isa

o/ . We define values of Delphin functions as a list of cases fn (c1 | . . . | cn),which means that we do not introduce an explicit computation-level

*-term.This technique allows us to avoid aliasing of bound variables, which significantly

simplifies the presentation of our calculus in the presence of dependent types.

We write a single case as e 7! f where e is the pattern and f is the body.Patterns may contain pattern variables, which are explicitly declared. We use

fflto declare pattern variables of any type representing objects or parameters. For

example, fn fflu2o/ . u 7! u encodes the identity function on type o/ . Multiple casesare captured via alternation,

c1 | c2, and * stands for an empty list of cases. ADelphin level
*-binder *ff2ffi. e may thus be expressed as fn fflff2ffi. ff 7! e.

Function application is call-by-value and is written as e f. During compu-tation,

e is expected to yield a set of cases c, of which one that matches theargument is selected and executed. During the matching process,

ffl-bound pat-tern variables are appropriately instantiated.

The Delphin type for dependent pairs is denoted by 9ff2ffi. o/ , and its valuesare pairs of the form (

e, f), where both e and f are values. We write ffi ? o/ when

ffi oe o/ = 8ff2ffi. o/

ffi ? o/ = 9ff2ffi. o/h

Ai = 9x2A. ?h
Mi = (M, unit)
*ff2ffi. e = fn fflff2ffi. ff 7! e
case e of cs = (fn cs) e

let (ff2ffi, u2o/) = e in f

= case e of fflff2ffi. fflu2o/. (ff, u) 7! f
let hxi = e in f

= case e of fflx2A. hxi 7! f
let ff = e in f

= (*ff2ffi. f) e

Fig. 3. Abbreviations
ff does not occur in o/ , which will always be the case when ffi is a o/. Pairs areeliminated via case analysis.

Delphin's newness type constructor is written as rx2A#. o/ and the corre-sponding values are

*x2A#. e, where e is a value. In Section 6 we will see that aterm
*x2A#. e will always evaluate to a term *x2A#. e0. In other words, evalu-ation in an extended signature results in values in the same extended signature.

Just as * dynamically extends the signature, the r-type is eliminated via e\x,which dynamically shrinks the signature to its form before

x was introduced.One may perform case analysis over a r-type. This gives us a way to translate

between values of the r-type and LF's \Pi -type. For example, we can utilize caseanalysis to convert between the value h

*x. M xi and *x. hM xi. A Delphin func-tion that would convert the former into the latter would have type h

\Pi x : A. Bi oer
x2A#. hBi and be written as fn ffly2(\Pi x : A. B). hyi 7! *x2A#. hy xi.Conversely, a function of type r

x2A#. hBi oe h\Pi x : A. Bi can be writtenas fn
ffly2(\Pi x : A. B). (*x2A#. hy xi) 7! hyi. Notice that the pattern is hy xi,illustrating an example of higher-order matching. Just as we introduced the rtype to reason over higher-order encodings, we can employ higher-order matchingto get rid of it again.

We also remark that we have *ff. c and c\ff over cases, which have a similarmeaning to their counterparts over expressions. By allowing these constructs to
range over cases, we add further flexibility in what we can express with pat-tern (

ffl-bound) variables. For example, this is useful in implementing exchangeproperties as well as the properties that will be proved in Lemma 1.

Finally, we turn to the usual recursion operator uu2o/ . e. Note that u canonly recurse on Delphin computational types

o/ and not on LF types A.

4 Examples
We illustrate Delphin with a few examples building on the encodings of naturalnumbers and expressions given in Section 2.

Example 4 (Addition). The function plus adds two natural numbers.
uplus2hnati oe hnati oe hnati.fn hzi 7! fn

fflM 2nat.hMi 7! hMi|
fflN 2nat.hs N i 7! fn fflM 2nat.hMi 7! let hxi = (plus hN i hMi) in hs xi

Example 5 (Interpreter).
ueval 2hexpi oe hexpi.fn

fflE12exp. fflE22exp. happ E1 E2i7! case (

eval hE1i, eval hE2i) of
fflF 2exp ! exp. fflV 2exp. (hlam F i, hV i) 7! eval hF V i|
fflE2exp ! exp. hlam Ei 7! hlam Ei

Example 6 (Beta Reduction). We can reduce redices under *-binders.
uevalBeta 2hexpi oe hexpi.fn

fflE12exp. fflE22exp. happ E1 E2i7! case (

evalBeta hE1i, evalBeta hE2i) of
fflF 2exp ! exp. fflV 2exp. (hlam F i, hV i) 7! evalBeta hF V i|
fflx2exp#. fflV 2exp. (hxi, hV i) 7! happ x V i|
fflE2exp ! exp. hlam Ei7! case (

*x2exp#. evalBeta hE xi) of
fflE02exp ! exp.(*x2exp#. hE0 xi) 7! hlam E0i|
fflx2exp#. hxi 7! hxi

The hlam Ei case illustrates how we handle higher-order terms. Since E isof functional type, we create a parameter

x to continue computation with (E x)under
*. The term *x2exp#. evalBeta hE xi has type rx2exp#. hexpi. Althoughthe introduction of parameters is easy, eliminating them is more difficult. We do

this by case analysis, by first stipulating the existence of an E0 of functionaltype and then match against h

E0 xi. This illustrates an example of higher-ordermatching. The parameter
x cannot escape its scope because E0 was declaredoutside of the scope of
x. This lack of dependency is reflected by the lexicalscoping in the Delphin code above: the pattern variable

fflE0 is declared to theleft of
*x.Finally, the base case is required for completeness. New parameters are introduced in the lam case and we specify here that they reduce to themselves.
Example 7 (Variable Counting). For the final example in this section, we writea function that counts the number of variable occurrences in untyped

*-terms.For example, the number of variables in plam
x. x@(lam y. x@y)q is p3q.

ucntvar2hexpi oe hnati.fn

fflE12exp.fflE22exp.happ E1 E2i 7! plus (cntvar hE1i) (cntvar hE2i)|

fflE2(exp ! exp).hlam Ei 7! case (*x2exp#. cntvar hE xi) of

fflN 2nat.(*x2exp#. hN i) 7! hN i|
fflx2exp#. hxi 7! hs zi

We explain the hlam Ei case. Since E is of functional type, we create aparameter

x:exp# and recurse on hE xi. From the very definition of naturalnumbers in Example 1, we deduce that it is impossible for the result to depend

on x and express this by matching against hN i instead of hN 0 xi. Note that if itwas possible for

x to occur in the result then this case would only match, during

runtime, in situations where the x did not occur free in the result. Therefore,if the programmer leaves out essential cases then it is possible to get stuck,
corresponding to a match non-exhaustive error, just as in ML.

5 Static Semantics
Before presenting the typing rules, the role of context deserves special attention.

Contexts \Omega  ::= * | \Omega , ff2ffi | \Omega , x

r2A#

A Delphin context, \Omega , serves two purposes. Besides assigning types to vari-ables, it also distinguishes between variables intended for instantiation from
uninstantiable parameters. We write ff2ffi to express variables ff that will be
instantiated, such as pattern variables. Alternatively, we write x

r2A# to store

information about uninstantiable parameters, introduced by *. The distinction
between x2A# and x

r2A# is highlighted by comparing *x2A#. e and *x2A#. e.

The first binds a parameter that is intended for instantiation while the latter willremain uninstantiated. We do not allow reorderings of

\Omega  because of dependen-cies. Additionally, we assume all declarations in
\Omega  to be uniquely named, andwe achieve this goal by tacitly renaming variables. During the actual execution

of Delphin programs, \Omega  only contains declarations of the latter form, which onemay interpret as an extension to the signature. In comparison, computation in
ML always occurs with a fixed signature.
Definition 1 (Casting). In order to employ LF typing, we define ||\Omega || as cast-ing of a context

\Omega , which throws out all declarations u2o/ and converts x2A,

x2A#, and x

r2A# all into x:A, yielding an LF context \Gamma  .

5.1 Type System
In the presence of dependencies, not all types are valid. We write \Omega  ` ffi wff forvalid types and

\Omega  ctx for valid contexts, but omit both judgments here due tospace considerations. We write

\Omega  ` e 2 ffi for the central derivability judgment,which we present in Figure 4. Note that the rules have implicit premises using

the validity judgments to ensure that the context and all types are well-formed.We make these explicit in the corresponding Technical Report [3].

The variable rules o/var and var# allow one to use assumptions in the contextof types

o/ and A#, respectively. The only term of type A# is a variable x.The rule

isLF is the only rule for type A and stipulates that in order for anexpression
M to be an LF term, we must be able to type it using the LF typingjudgment under ||

\Omega || (Definition 1).
The rest of the rules deal with computational types o/ . Function types areintroduced via cases

c. The introduction rule impI expresses that all branchesmust have the same type. Note that we allow for an empty list of cases which

may be used to write a function over an empty type. Functions are eliminated

(u2o/) in \Omega  o/var

\Omega  ` u 2 o/

((x2A#) or (x

r2A#)) in \Omega 

var#\Omega  ` x 2 A# ||\Omega || `

lf M : A

isLF\Omega  ` M 2 A

i >= 0, For all i, \Omega  ` ci 2 o/ impI

\Omega  ` fn (c1 | . . . | cn) 2 o/

\Omega  ` e 2 8ff2ffi. o/ \Omega  ` f 2 ffi impE

\Omega  ` e f 2 o/[f/ff]

\Omega , x

r2A# ` e 2 o/

new
\Omega  ` *x2A#. e 2 rx2A#. o/

\Omega  ` e 2 rx02A#. o/ pop
\Omega , x

r2A#, \Omega 

2 ` e\x 2 o/[x/x0]

\Omega  ` e 2 ffi \Omega  ` f 2 o/[e/ff] pairI

\Omega  ` (e, f) 2 9ff2ffi. o/

\Omega , u2o/ ` e 2 o/ fix
\Omega  ` uu2o/. e 2 o/

top
\Omega  ` unit 2 ?

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

\Omega , ff2ffi ` c 2 o/ cEps
\Omega  ` fflff2ffi. c 2 o/

\Omega  ` e 2 ffi \Omega  ` f 2 o/[e/ff]

cMatch\Omega  ` e 7! f 2 8ff2ffi. o/

\Omega , x

r2A# ` c 2 o/

cNew
\Omega  ` *x2A#. c 2 rx2A#. o/

\Omega  ` c 2 rx02A#. o/ cPop
\Omega , x

r2A#, \Omega 

2 ` c\x 2 o/[x/x0]

Fig. 4. Delphin Typing Rules

through application with impE. The elimination refines o/ under a substitution[

f /ff] replacing all occurrences of ff by f . Formally, we use simultaneous substi-tutions but refer the interested reader to the corresponding technical report [3]

for details. If ffi is a computational-type oe, then ff cannot occur free in o/ and thissubstitution will be vacuous.

Cases contain explicit pattern variables, which are simply added to the con-text in

cEps. The actual function type is introduced in cMatch illustrating thatfunctions are defined via case analysis. In the branch

e 7! f, e is the pattern and
f is the body. The type of f is refined by its pattern via a substitution o/ [e/ff].This expresses how different bodies may have different types, all depending on

their corresponding pattern. As we define functions by cases, we do not needto refine the context

\Omega . Additionally, our distinction between computation-leveland representation-level types ensures that this substitution is always defined.

Finally, we also have a * and c\x construct over cases, via cNew and cPop. Thesehave similar semantics to their counterparts on expressions, discussed next.

The introduction form of r is called new. As discussed in Section 3, the typer
x2A#. o/ declares x

r2A# as a new parameter. The expression *x2A#. e evaluates e where the parameter x can occur free. Previously, our examples haveshown how to utilize higher-order matching via case-analysis to eliminate these

types. However, the elimination rule pop eliminates a r-type via an application-like construction,

e\x, which shifts computation of e to occur without the uninstantiable parameter x. If \Omega  ` e 2 rx02A#. o/ , then x0 is a fresh uninstantiableparameter with respect to the context

\Omega . Therefore, in an extended context

\Omega , x

r2A#, \Omega 

2, we can substitute x for x0 and yield a term of type o/ [x/x0]. Thefollowing lemma illustrates examples where this is useful.

Lemma 1. The following types are inhabited.

1. rx2A#. (o/ oe oe) oe (rx2A#. o/ oe rx2A#. oe)2. (r

x2A#. o/ oe rx2A#. oe) oe rx2A#. (o/ oe oe)
3. rx2A#. (o/ ? oe) oe (rx2A#. o/ ? rx2A#. oe)
4. (rx2A#. o/ ? rx2A#. oe) oe rx2A#. (o/ ? oe)

Proof. We only show 1 and 2, the other 2 cases are straightforward.

1. *u12rx2A#. (o/ oe oe). *u22(rx2A#. o/ ). *x2A#. (u1\x) (u2\x)
2. *u12(rx2A#. o/ oe rx2A#. oe).fn

fflE2(rx2A#. o/). *x2A#. ((E\x) 7! (u1 E)\x)

Finally, pairs are introduced via pairI and eliminated using case analysis. Thetyping rules for recursion (

fix) and unit (top) are standard.

6 Operational Semantics
Definition 2 (Values). The set of values of are:

Values: v ::= unit | fn (c1 | . . . | cn) | *x2A#. v | (v1, v2) | M
As usual for a call-by-value language, functions are considered values. Anewness term

*x2A#. v is a value only if its body is a value, which is achievedvia evaluation under the

*-construct. LF terms M are the only values (andexpressions) of type
A, and pairs are considered values only if their componentsare values. Therefore, h

M i is the only value of type hAi (Figure 3).
We present the small-step operational semantics, \Omega  ` e ! f, in Figure 5.The first rule illustrates that the evaluation of

*x2A#. e simply evaluates e

under the context extended with x. The declaration is marked as x

r2A# as this

represents an extension to the signature. Evaluation under * drives our abilityto reason under LF

*-binders. Additionally, we evaluate e0\x by first evaluating
e0 down to *x02A#. e and then substitute x for x0. Therefore, we see that e0\xbehaves much like an application.

The small-step operational semantics for cases, \Omega  ` c ! c0, is also shown inFigure 5. The first rule non-deterministically instantiates the pattern variables.
In our implementation we delay this choice and instantiate them by unificationduring pattern matching, which is discussed briefly in Section 9. The next three
rules allow us to work with * over cases, which is the same for the * overexpressions. We provide a rule to reduce the pattern of a case branch, which can
be any arbitrary expression. In Section 4 we discussed how a program could get

\Omega , x

r2A# ` e ! f

\Omega  ` *x2A#. e ! *x2A#. f

\Omega  ` e ! e0
\Omega  ` (e, f) ! (e0, f)

\Omega  ` f ! f0
\Omega  ` (e, f) ! (e, f0)

\Omega  ` e ! e0
\Omega  ` e f ! e0 f

\Omega  ` f ! f0
\Omega  ` e f ! e f0

\Omega  ` e ! f
\Omega , x

r2A#, \Omega 

2 ` e\x ! f\x \Omega , x

r2A#, \Omega 

2 ` (*x02A#. e)\x ! e[x/x0]

\Omega  ` (fn (c1 | . . . | cn))\x ! fn ((c1\x) | . . . | (cn\x))

\Omega  ` ci ! c0i
\Omega  ` (fn (. . . | ci | . . .)) v ! (fn (. . . | c0i | . . .)) v
*\Omega  ` (fn (. . . | v 7! e | . . .)) v ! e \Omega  ` uu2o/. e ! e[uu2o/. e/u]

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

\Omega  ` v 2 ffi
\Omega  ` fflff2ffi. c ! c[v/ff]

\Omega , x

r2A# ` c ! c0

\Omega  ` *x2A#. c ! *x2A#. c0

\Omega  ` c ! c0
\Omega , x

r2A#, \Omega 

2 ` c\x ! c0\x

\Omega , x

r2A#, \Omega 

2 ` (*x02A#. c)\x ! c[x/x0]

\Omega  ` e ! e0
\Omega  ` (e 7! f) ! (e0 7! f)

Fig. 5. Small-Step Operational Semantics

stuck, which corresponds to a match non-exhaustive error. However, we say thata program "coverage checks" if the list of patterns is exhaustive.

Recall that all LF terms possess a unique canonical form. Given any Delphinterm, we implicitly reduce all LF terms to canonical form allowing us to express
matching via syntactic equality in the rule marked with *.

7 Meta-Theoretic Results
We show here that Delphin is type-safe when all cases are exhaustive.
Lemma 2 (Substitution).If

\Omega  ` e 2 ffi and \Omega , ff2ffi ` f 2 o/ , then \Omega  ` f[e/ff] 2 o/ [e/ff].

Proof. We actually prove this for a more general notion of simultaneous substi-tutions. See Technical Report [3] for details.

Theorem 2 (Type Preservation).If

\Omega  ` e 2 o/ and \Omega  ` e ! f then \Omega  ` f 2 o/ .

Proof. By induction on the structure of E :: \Omega  ` e ! f and F :: \Omega  ` c ! c0. SeeTechnical Report [3] for details.

Corollary 1 (Soundness). Parameters cannot escape their scope. If \Omega  ` e 2 o/and

\Omega  ` e ! e0 then all parameters in e and e0 are declared in \Omega .

Theorem 3 (Progress).Under the condition that all cases in

e are exhaustive, if \Omega  ` e 2 o/ and \Omega  only

contains declarations of the form x

r2A#, then \Omega  ` e ! f or e is a value.

Proof. By induction over E :: \Omega  ` e 2 o/. In matching (rule *) we assume thatcases are exhaustive and defer to an orthogonal "coverage check." The Delphin
implementation contains a prototype coverage algorithm extending ideas from[4], but a formal description is left for future work. Although the problem of
checking an arbitrary list of cases is undecidable, it is always possible to generatean exhaustive list of cases for any type

ffi.

8 Combinator Example
Recall the definition of the natural deduction calculus from Example 3. We willgive an algorithmic procedure that converts natural deduction derivations into
the Hilbert calculus, i.e. simply typed *-terms into combinators. We omit thedeclaration of inferable pattern variables (as is also allowed in the implementation).

K` A oe B oe A ` A oe B ` A MP` B

S` (A oe B oe C) oe (A oe B) oe (A oe C)

comb : o ! type,
K : comb (A ) B ) A)MP : comb(

A ) B) ! comb A! comb

BS : comb ((
A ) B ) C) )(
A ) B) ) A ) C)

Our translation follows a two-step algorithm. The first step is bracket abstrac-tion, or

ba, which internalizes abstraction. If M has type (comb A ! comb B)and
N has type (comb A) then we can use ba to get a combinator, d, of type(comb

A ) B). Subsequently, we can do (MP d N ) to get a term that is equiv-alent to (

M N ) in combinator logic. Formally, ba is written as.

uba 2 8A2o. 8B2o. hcomb A ! comb Bi oe hcomb (A ) B)i.fn

A 7!(fn

A 7! fn F 7! hMP (MP S K) Ki|
B 7! fn h*x. MP (D1 x) ((D2:comb A ! comb C) x)i7! let h

D01i = (ba A (C ) B) hD1i) inlet h

D02i = (ba A C hD2i) in hMP (MP S D01) D02i| h
*x. U i 7! hMP K U i)

Next we write the function convert which traverses a natural deductionderivation and uses

ba to convert them into Hilbert style combinators. In thisfunction, we will need to introduce new parameters of (nd

A) and (comb A)together. In order to hold onto the relationship between these parameters, we

pass around a function of type 8A2o. 8D2(nd A)#. hcomb Ai. We will employtype aliasing and abbreviate this type as

convParamFun.

uconvert 2 convParamFun oe 8A2o. 8D2hnd Ai. hcomb Ai.

*f2 convParamFun.fn (

B ) C) 7! fn himpi D0i 7!

(case (*d2(nd B)#. *du2(comb B)#.

let f 0 = fn B 7! fn d 7! hdui| (

fflB0. ffld0. *d. *du. (B0 7! fn d0 7!(let

R = f B0 d0 in *d. *du. R)\d\du))\d\duin
convert f0 C hD0 di)

of *d2(nd B)#. *du2(comb B)#. hD00 dui 7! ba B C hD00i)|
A 7! fn himpe D1 (D2:nd B)i 7!let h

U1i = (convert f (B ) A) hD1i) inlet h
U2i = (convert f B hD2i) in hMP U1 U2i|

A 7! fn fflx2(nd A)#. hxi 7! f A x

The first argument to convert is a computation-level function f of type
convParamFun that handles the parameters.The first case, himpi

Di, requires recursion under a representation-level *.We create two new parameters (or equivalently extend the signature with)

dand
du in order to continue our computation by recursing on hD0 di. As we arein an extended signature, if

f was a total function on input, it is no longer total.We therefore extend the function

f into f0 mapping d to du before recursing. Wethen use the same techniques from Examples 6 and 7 to abstract the result into

an LF function D00 exploiting that d cannot occur free in the result. Finally, weemploy

ba to yield our desired combinator.The second case does not create any parameters and hence all recursive calls

are called with f. Finally, the last case handles the parameters by simply callingthe input function

f which has been built up to handle all parameters.The above definition of

f 0 illustrates how one can build up parameter func-tions. The second branch of

f 0 utilizes e\x and c\x (Section 5.1) to ensure thatthe input function
f is not executed in scope of d and du. The Delphin implemen-tation offers a shorthand to extend a function

f by writing "f with d 7! du".

Example 8 (Sample Execution).
*A. convert (fn *) (A ) A) himpi *x. xi
. . . ! *A. case (*d. *du. convert (fn A 7! fn d 7! hdui | . . .) A hdi)of

*d. *du. hD00 dui 7! ba A A hD00i
. . . ! *A. case (*d. *du. (fn A 7! fn d 7! hdui | . . .) A d)of

*d. *du. hD00 dui 7! ba A A hD00i
. . . ! *A. case (*d. *du. hdui) of *d. *du. hD00 dui 7! ba A A hD00i
. . . ! *A. ba A A h*x. xi
. . . ! *A. hMP (MP S K) Ki

9 Implementation
An implementation is available at http://www.cs.yale.edu/,delphin. Del-phin is implemented in approximately 12K lines of code in SML/NJ offering a

powerful type reconstruction algorithm, typechecker, and evaluator.The non-deterministic instantiation of pattern variables from Section 6 is
implemented by using logic variables to delay the choice until matching. Addi-tionally, when writing a curried function with multiple arguments we look at all

the arguments together before committing to a branch. We implement this fea-ture by partially evaluating functions. For example,

convert (A ) A) will resultin a function with three cases rather than committing to the first branch. This

is an enhancement to allow the programmer to write more concise code.We employ a unification/matching algorithm based on the one designed by
Dowek et al. [5], but extended to handle parameters. Therefore, we only allow LFpatterns that fall into the decidable pattern fragment of higher-order unification.
Formally, this means that we only allow LF patterns of the form E x1 . . . xnwhere

xi is a fresh parameter (with respect to E) and all xi's are distinct. It isimportant to note that this restriction is only an implementation limitation as

it is also possible to use different unification algorithms.The Delphin code for all examples in this paper and many more can be
found on our website. We have implemented a function translating HOL proofsinto Nuprl proofs (approximately 400 lines of code) and a Hindley-Milner style
type-inference algorithm for Mini-ML (approximately 300 lines of code).

10 Related Work
Twelf: LF is well suited for representation but does not directly afford the abilityto reason over representations. Twelf utilizes a logic programming methodology
to conduct such reasoning by providing meta-level constructs to interpret a typefamily as a function. Delphin affords the user the ability to write the functions
themselves, and we envision this will replace the underlying meta-logic of Twelf.
Higher-order encodings: The predecessor of our work was on the r-calculus [6],which provided a stack based system only supporting a simply-typed logical

framework. The r also referred to something different than what it does here.Our work is related to Miller and Tiu's [1]. In their setting, they use r
as a logic quantifier designed to reason about scoped constants. However, theirreasoning occurs over formulas with an explicit local context. In our setting there
is only a global context, which renders it more useful for functional programming.Pientka[7] also proposes a system for programming with HOAS, however
only for a simply-typed logical framework. Programming over HOAS resorts tothe explicit handling of substitutions and contexts. In contrast, we believe the
purpose of HOAS is to provide an implicit notion of substitution. Therefore, weprovide a computation-level in the same spirit, keeping these constructs hidden.

Dependent types: DML provides indexed datatypes whose domains were recentlygeneralized to LF objects to form the ATS/LF system. In contrast, the Cayenne
language supports full dependent types and even computation with types, ren-dering it more expressive but at the expense of an undecidable type checker.
Agda and Epigram are two more languages inspired by dependent type theories.All but the ATS/LF system lack support for higher-order encodings. Although
ATS/LF supports HOAS they resort to encoding the context explicitly, or asthey say representing terms as terms-in-contexts. By making this information
explicit they can reason about parameters in the context, but they must alsodefine substitutions. We suspect that they can also add a r-type similar to ours.

Freshness: Also related to our work are programming languages with freshness[8], such as FreshML, which utilizes Fraenkel-Mostowski (FM) set theory to
provide a built-in ff-equivalence relation for first-order encodings. This allowsfor limited support of HOAS as substitution lemmas must still be explicit, albeit
easier to write. Lately, Pottier has developed a logic for reasoning about valuesand the names they contain in FreshML [9]. As the creation of names is a global
effect in FreshML, his work is used to prove that names cannot escape theirscope, which is an inherent property of Delphin's type system.

11 Conclusion
In this paper we have presented the underlying calculus and semantics of theDelphin programming language. This is the only functional system tackling programming over a logical framework with both higher-order encodings and de-pendent types. The novelty of this work is in providing a way to reason under
LF *-binders, such that the notions of context and substitutions remain implicitin computations as well as representations.

Acknowledgments. We would like to thank Jeffrey Sarnat and Lucas Dixon formany helpful discussions on this and many earlier designs of the system.

References
1. Miller, D., Tiu, A.: A proof theory for generic judgments. ACM Trans. on Computational Logic 6(4) (October 2005) 749-783
2. Harper, R., Honsell, F., Plotkin, G.: A framework for defining logics. Journal of the

Association for Computing Machinery 40(1) (January 1993) 143-184
3. Poswolsky, A., Sch"urmann, C.: Extended report on Delphin: A functional programming language with higher-order encodings and dependent types. Technical Report
YALEU/DCS/TR-1375, Yale University (2007)
4. Sch"urmann, C., Pfenning, F.: A coverage checking algorithm for LF. In Basin,

D., Wolff, B., eds.: Proccedings of Theorem Proving in Higher Order Logics
(TPHOLs'03). Volume LNCS-2758., Rome, Italy, Springer Verlag (2003)
5. Dowek, G., Hardin, T., Kirchner, C., Pfenning, F.: Unification via explicit substitutions: The case of higher-order patterns. Rapport de Recherche 3591, INRIA
(December 1998) Preliminary version appeared at JICSLP'96.
6. Sch"urmann, C., Poswolsky, A., Sarnat, J.: The r-calculus. Functional programming

with higher-order encodings. In: Typed Lambda Calculus and Applications, TLCA.
(2005)
7. Pientka, B.: A type-theoretic foundation for programming with higher-order abstract syntax and first-class substitutions. In: Principles of Programming Languages,
POPL. (2008)
8. Gabbay, M., Pitts, A.M.: A new approach to abstract syntax with variable binding.

Formal Aspects Computing 13(3-5) (2002) 341-363
9. Pottier, F.: Static name control for FreshML. In: Twenty-Second Annual IEEE

Symposium on Logic In Computer Science (LICS'07), Wroclaw, Poland (July 2007)