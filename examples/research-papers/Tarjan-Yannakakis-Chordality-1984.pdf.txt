

SIAM J. COMPUT.
Vol. 13, No. 3, August 1984 (C)

1984 Society for Industrial and Applied Mathematics

OO7

SIMPLE LINEAR-TIME ALGORITHMS TO TEST CHORDALITY OFGRAPHS, TEST ACYCLICITY OF HYPERGRAPHS, AND SELECTIVELY

REDUCE ACYCLIC HYPERGRAPHS*
ROBERT E. TARJAN? AND MIHALIS YANNAKAKIS"

Abstract. Chordal graphs arise naturally in the study of Gaussian elimination on sparse symmetric
matrices; acyclic hypergraphs arise in the study of relational data bases. Rose, Tarjan and Lueker [SIAMJ. Comput.,

5 (1976), pp. 266-283] have given a linear-time algorithm to test whether a graph is chordal,
which Yannakakis has modified to test whether a hypergraph is acyclic. Here we develop a simplified
linear-time test for graph chordality and hypergraph acyclicity. The test uses a new kind of graph (andhypergraph)

search, which we call maximum cardinality search. A variant of the method gives a way to
selectively reduce acyclic hypergraphs, which is needed for evaluating queries in acyclic relational data bases.

Key words, graph algorithm, acyclic data base scheme, sparse Gaussian elimination, graph search,
hypergraph

1. Introduction. We shall use more-or-less standard terminology from the theory
of graphs and hypergraphs [3], some of which we review here. A hypergraph H V, E)
consists of a set of vertices V and a set of edges E; each edge is a subset of V. A graph

is a hypergraph all of whose edges have size two. The graph G(H) of a hypergraphH

is the graph whose vertices are those of H and whose edges are the vertex pairs{v, w}

such that v and w are in a common edge of H. Two vertices of a graph G are
adjacent if they are contained in an edge. A path in G is a sequence of distinct vertices

V0, /')1,""", Vk such that vi and vi+ are adjacent for 0 =< < k. A cycle is a path v0,
Vl,"" ", Vk such that k => 2 and v0 and Vk are adjacent. Vertices vi and 1A(i+l)mod(k+lfor

0_-< =< k are consecutive on the cycle. A clique of G is a set of pairwise adjacent

vertices. A hypergraph H is conformal if every clique of G(H) is contained in an edge
of H. A graph G is chordal if every cycle of length at least four has a chord, i.e., an

edge joining two nonconsecutive vertices on the cycle. A hypergraph H is acyclic ifH

is conformal and G(H) is chordal.

Chordal graphs arise in the study of Gaussian elmination on sparse symmetric
matrices [12]. Acyclic hypergraphs arise in the study of relational data base schemes[1], [7], [21]; they

are powerful enough to capture most real-world situations but
simple enough to have many desirable properties [1], [2], [9], [18]. Rose, Tarjan andLueker [15] have

given an O(n+m)-time algorithm (henceforth called the RTLalgorithm)
to test whether a graph is chordal. Yannakakis [19] has extended the
algorithm to the problem of testing whether a hypergraph is acyclic. In this paper wepropose

a simplified version of the RTL algorithm that can be used for testing both

chordality of graphs and acyclicity of hypergraphs. In 2 we develop the algorithm as
it applies to graph chordality testing. In 3 we modify the algorithm for hypergraph
acyclicity testing. Besides leading to a method simpler than the RTL test, our analysisprovides

additional insight into the structure of chordal graphs and acyclic hypergraphs.In
4 we use this insight to develop a simple linear-time algorithm for selectively
reducing acyclic hypergraphs, a problem that arises in evaluating queries in acyclic
relational data bases.

* Received by the editors October 7, 1982, and in revised form May 23, 1983."

Bell Laboratories, Murray Hill, New Jersey 07974.1We

shall use n to denote the number of vertices and m to denote the total size of the edges in a
hypergraph.

566

SIMPLE LINEAR-TIME GRAPH ALGORITHMS 567
2. Testing chordality of graphs. In this section we shall freely use results of [14],[15]. A

discussion of chordal graphs and their importance in Gaussian elimination can
be found in [14]. Let G =(V, E) be a graph. Let a: V->{1, 2,..., n} be a numbering

defining a total ordering of the vertices of G. We shall use the notation v < w to
mean a(v)< a(w). The fill-in produced by this ordering is the set

F(a) {{v, w}]{v, w} E and there is a path from v to w containing only v, w,

and vertices ordered before both v and w}.

7(8)

6(7)

8(9)

/ 5(6)

1(3)4(5)

4(5)[

5(6)

7(8)8(9)[

9(10)

2(3 o)

1(2)
FIG. 2. A chordal graph numbered by maximum cardinality search. Ordering is zero fill-in. Followersof
vertices are in parentheses.

The elimination graph of G with ordering a is G(a)=(V, EUF(a)). (See Fig. 1.)Note

that G(a) is a subgraph of the transitive closure of G. If F(a) =, a is a zerofill-in

ordering of G. (See Fig. 2.)LEMMA

1 [15]. A pair {v, w} is in EU F(a) if and only if either {v, w} E orthere
is a vertex u such that {u, v}, {u, w} E U F(a) and u is ordered before both v
and w.LEMMA

2 [15]. An ordering is zero fill-in if and only if for all distinct {u) v},{u, w}
in E such that u is ordered before both v and w, { v, w} E.LEMMA 3 [15]. Any ordering

is a zero fill-in ordering of the corresponding graphG().

568 ROBERT E. TARJAN AND MIHALIS YANNAKAKIS

THEOREM 1 [14]. A graph G is chordal if and only if it has a zero fill-in ordering.

Remark. Lemmas 1 and 2 and Theorem 1 are implicit in the work of Dirac [6]
and Fulkerson and Gross [8] on chordal graphs, although they did not consider the
notion of fill-in.

The RTL chordality-testing algorithm consists of two steps:

Step 1. Compute an ordering a of G that is zero fill-in if and only if G is chordal.Step

2. Compute the fill-in produced by a. G is chordal if and only if F(a)= .

The algorithm we shall describe consists of simplified methods for carrying out
steps one and two. Step 1 of the RTL method consists of numbering the vertices from

n to 1 in decreasing order using lexicographic search, defined as follows: For each
unnumbered vertex v, maintain a list of the numbers of the numbered vertices adjacent
to v, with the numbers in each list arranged in decreasing order. As the next vertex
to number, select the vertex whose list is lexicographically greatest, breaking ties
arbitrarily. Although somewhat complicated, lexicographic search can be implemented

to run in O(n / m)-time.We

shall derive a sufficient condition for an ordering of a chordal graph to be
zero fill-in. This condition holds not only for lexicographic search but also for a simpler
kind of search that we call maximum cardinality search: Number the vertices from n
to 1 in decreasing order. As the next vertex to number, select the vertex adjacent to
the largest number of previously numbered vertices, breaking ties arbitrarily. (See
Figs. 1 and 2.)LEMMA 4. Let G V, E) be

a chordal graph and lethas the
following property, then a is zero fill-in:(P) If

u < v < w, u, w} E, and { v, w} E, then there is a vertex x such that
v <x, {v,x}E, and {u,x}eE.Proof. Suppose

a has property P. Let Vo, Vl,'", Vk be an unchorded path for
which a(vg) is maximum, such that k-> 2 and(Q) For

some in the interval2 [1, k-1], the following inequalities hold:

I)0 /-)k a /)1 a /)2 a /)i and vi <a /)i+1
(A path is unchorded if any two nonconsecutive vertices are nonadjacent.) We shall
derive a contradiction, thus showing that no unchorded path has property Q.

Since v0 and Vl are adjacent but not Vo and Vk, there is by property P a vertex x
such that Vk < X and uk but not /)1 is adjacent to x. Let j> 1 be minimum such thatv

is adjacent to x. Since (3 is chordal, x is not adjacent to v0, for otherwise Vo, Vl, , v,
x would be an unchorded cycle. Thus if v0 > x, the path Vo, Vl," v., x has propertyQ;

if x > Vo, the path x, v, v_,. , v0 has property O. Either case contradicts the
choice of Vo, v,. , Vk as the path with c (Vk) maximum having property Q. Therefore
no path has property Q.Now

suppose {u, v} and {u, w} are distinct edges such that u is ordered beforeboth v and

w by a. If v and w were not adjacent, either v, u, w or w, u, v would
have property O. Thus v and w must be adjacent. Since this holds for any such {u, v}

and {u, w}, it follows from Lemma 2 that a is zero fill-in.THEOREM

2. Any ordering a generated by maximum cardinality search has PropertyP
and thus is zero fill-in if G is chordal.Proof. Let

a be an ordering generated by maximum cardinality search. Suppose
u <, v < w and w is adjacent to u but not to v. When v is numbered, v must be

Throughout this paper we shall use the notation [il, i2] to denote the set of integers {ilil -<- _-< i2}.

SIMPLE LINEAR-TIME GRAPH ALGORITHMS 569
adjacent to at least as many numbered vertices as u. Thus, since u but not v is adjacent
to w, v is adjacent to some other numbered vertex x not adjacent to u. Since this
holds for all such u, v, w, ordering c has Property P.Remark. It

is easy to show that any ordering generated by lexicographic search
also has Property P.We

can implement maximum cardinality search as follows. We maintain an array
of sets set (i) for 0-< _-< m- 1. We store in set (i) all unnumbered vertices adjacent toexactly numbered

vertices. Initially set (0) contains all the vertices. We maintain thelargest
index j such that set (j) is nonempty. To carry out a step of the search, we
remove a vertex v from set (j) and number it. For each unnumbered vertex w adjacent
to v, we move w from the set containing it, say set (i), to set (i+ 1). Then we add one
to j and while set () is empty repeatedly decrement ]. If we represent each set by a
doubly linked list of vertices (to facilitate deletion) and maintain for each vertex the
index of the set containing it, the search requires O(n + m) time. (Since j is incremented

n times and is never less than -1, the total time to manipulate j is O(n).)The

following program written in a variant of Dijkstra's guarded commandlanguage [5], implements

maximum cardinality search. For any unnumbered vertex v,
size (v) is the number of numbered vertices adjacent to v. If v is a numbered vertex,
we define size (v) to be-1.

MAXIMUM CARDINALITY SEARCH.

local L v;
for e [0, n- 1 ]-> set (i):= rof;
for v vertices -> size v) := 0; add v to set (0) rof;

i:= n; j:=0;
do i_> 1->

v := delete any from set (j);a(v) ::

i; c-(i) :: v; size (v) := -1;
for { v, w} such that size (w) >= 0

delete w from set (size (w));

size (w) := size (w) + 1;add

w to set (size (w))
rof;

i:=i-1;
j:=j+l;

do j -> 0 and set (j) --> j := j- 1 od
od;

Let us turn to Step 2 of the chordality test. We shall describe an algorithm that
computes the fill-in produced by an arbitrary numbering c of an arbitrary graph G

in O(n+m') time, where m' is the number of edges in G(a). The algorithm, a

simplification of the RTL metho4, was discovered by Greg Whitten [17], who presented
it at the SIAM Symposium on Sparse Matrix Computations, held in Knoxville, Tennessee in 1978, but never published it, even in the conference proceedings.Let G

be a graph, let c be an ordering of G, and let G(c)- (V, E U F(c)) bethe
elimination graph of G with ordering a. For any vertex v, let f(v), the follower
of v, be the vertex of smallest number that is both adjacent to v in G(a) and has
number larger than that of v. (See Figs. 1 and 2.) Note that a vertex need not have
a follower. We define fi(v) for i=>0 by f(v)= v, fi+l(v)--f(fi(v)).LEMMA

5. If {v, w}6EUF(c) with v <4 w, then fi(v)=w for some i>=l.

570 ROBERT E. TARJAN AND MIHALIS YANNAKAKIS

Proof. We use induction on a(v) from n to 1. If f(v) w, then v <4f(v) <4 wby the definition of f. By Lemma 1, {f(v), w} E U F(a). By the induction hypothesis
fi(f(v)) w for some i_> 1, i.e., fi+l(v)= w.THEOREM 3. A pair {v, w} with v < w

is in E U F(a) if and only if there is a
vertex x such that {x, w} E and fi(x)= v for some i>-O.Proof Let {v, w}

be a pair with v < w. Suppose there is a vertex x such that{x, w} E
and fi(x) v for some -> 0. Then x --<4 v by the definition of f. Since a is
a zero-fill-in ordering for G(a) by Lemma 3, {v, w} EtA F(a) by the definition of
fill-in.Conversely,

suppose {v, w} E F(a). We prove by induction on a(v) that there
is a vertex x such that {x, w} E and fi(x) v for some i=>0. If {v, w} E, x v and

i=0 satisfy the theorem. Otherwise, by Lemma 1 there is a vertex u such that {u, v},{u, w} E t,J F(a)

and u <4 v. By the induction hypothesis there is a vertex x such
that {x, w}E and fi(x)=u for some i_->0. By Lemma 4, fJ(u)=v for some j>_-0.
Thus x and i+j satisfy the theorem. [:]

Theorem 3 leads to a fast algorithm for computing fill-in. We process the vertices
in order from the vertex numbered 1 to the vertex numbered n. When processing
vertex w, we compute the set A(w) of all vertices v such that {v, w} E U F(a) and

v <4 w; we also find all vertices v such that f(v) should be w, and define f(v)= w.To

compute A(w) we initialize it to contain all vertices v such that {v, w} E and
v < w. Then we repeat the following step until it no longer applies" Select a vertex
v A(w) such that f(v) has been computed (i.e., f(v) < w) and f(v) A(w), and
add f(v) to A(w). After constructing A(w), define f(v) to be w for all vertices v A(w)
such that f(v) has not yet been defined.We

shall implement a variant of this algorithm to run in O(n + m') time. We use
two arrays, f and index. When a vertex v with a(v)= is processed, we initialize f(v)
to be v and index (v) to be i. The first time we process a higher numbered vertex wadjacent

to v, we define f(v) to be w. Every time we process a higher numbered vertex
w adjacent to v, we define index (v)= a(w). Thus index (v) is always the maximum
number in the set v} U w[{ v, w} E and w has been processed}. This idea of an index

array is due to Gustavson [11]. To process a vertex w, we repeat the following step
for each vertex v such that {v, w} E and v < w"

General step. Initialize x to v. While index (x)< a(w), set index (x)= a(w), add{x, w}

to E U F(a), replace x by f(x), and repeat. When index (x) a(w), if f(x) x
set f(x)= w.The following program

implements this method"

FILL-IN COMPUTATION.

local v, w, x;

for [1, n]-w:=a-l(i); f(w) := w;

index (w):=
for v, w} E such that a(v) < -x:--

do index x <

index (x) := i;

add {x, w} to E U F(a);x:-f(x)

od;
if f(x) x - f(x) :-- w fi
rof
rof;

SIMPLE LINEAR-TIME GRAPH ALGORITHMS 571
This fill-in algorithm can be used not only in Step 2 of the chordality test, but
also in the symbolic factorization step of Gaussian elimination on sparse symmetric
matrices [16]. If we only want to test for zero fill-in, as is the case in Step 2 of the
chordality test, we can restate the algorithm as follows. Compute f(v) for every vertexv. For every {v, w} E such that

v <4 w, verify that either {f(v), w} E or f(v) w.
The following program performs this test:

TEST FOR ZERO FILL-IN.for [1, n]-

w:= a-l(i); f(w) := w; index (w):= i;
for v such that v, w} E and a(v) < -

index (v) := i; if f(v) v -> f(v) := w fi
rof;
for v such that { v, w} E and a (v) <

if index f v < - reject fi
rof;rof;

accept;
Since the zero-fill-in test terminates as soon as it detects a fill-in edge, it runs inO(n + m)

time, rather than in the O(n + m') time needed to actually compute the fill-in.
This completes our implementation of Steps 1 and 2 and gives us a simpleO(n + m)

-time chordality test.Remark. In

both the fill-in computation and the zero-fill-in test we can replace
the array index by a bit array, say test, such that test (v)=true when vertex w is

processed if and only if index (v)= a(w). This saves space but requires an extra pass
after each vertex is processed, to reset test (v) to false for each v such that {v, w}E UF(a)

and v <4 w.

3. Testing acyclicity of hypergraphs. Let H (V, E) be a hypergraph. We shall
assume without loss of generality that every edge is nonempty and every vertex is
contained in at least one edge. H is acyclic if and only if either of the following

equivalent conditions holds [1]:(1) All the vertices of H

can be deleted by repeatedly applying the following two

operations:(i) delete

a vertex that occurs in only one edge;(if)
delete an edge that is contained in another edge.(2)
There is a forest F (called the join forest) with the edges of H as vertices,such that for every

vertex v of H, the subgraph of F induced by those vertices(edges
of H) that contain v is connected.
Condition (1) leads directly to an algorithm for testing the acyclicity of a hypergraph [10], [20]. Another algorithm based on condition (2) appears in [4]. Both of

these algorithms run in time quadratic in the size of the hypergraph. Yannakakis [19]
has given a linear-time algorithm based on the definition of acyclicity, using techniques
from the RTL algorithm. We shall use the techniques of 2 to obtain a simplified
linear-time test.Our

algorithm for testing hypergraph acyclicity consists of two steps, analogous
to those of the graph chordality test:

Step 1. Compute an ordering a of G(H) that is guaranteed to be zero fill-in ifH

is acyclic.Step

2. Check that a is zero-fill-in and that H is conformal.

572 ROBERT E. TARJAN AND MIHALIS YANNAKAKIS

Since G(H) is chordal if H is acyclic, we could carry out Step 1 by applying
maximum cardinality search to G(H). However, G(H) may have size quadratic inthe size of H;

consider for example the case of a hypergraph with only a single edge,
containing all the vertices. Therefore we shall use the following variant of maximumcardinality search,

which operates directly on H: Number the vertices from n to 1 in
decreasing order. As the next vertex to number, select any unnumbered vertex in anedge of H containing

as many numbered vertices as possible, breaking ties arbitrarily.We
call this method maximum cardinality search on hypergraphs.THEOREM

4. Suppose H is acyclic. Then any numbering a generated by a maximum
cardinality search ofH can also be generated by a maximum cardinality search of G(H),and

is thus zero-fill-in on G(H).Proof.

Consider applying maximum cardinality search in parallel to H and G(H).We
must show that each time we choose a vertex v to number in H, we can choose
the same vertex to number in G(H). Suppose vertices have been numbered identically
in H and G(H), for some i_-> 0. For any vertex v, let B(v) be the set of numbered

vertices adjacent to v.We

first prove that if w is any vertex that can be numbered next in G(H), then
there is some edge R of H such that B(w) is exactly the set of numbered vertices inR. Let

w be such a vertex, i.e., suppose IB(w)l is maximum among unnumbered
vertices. Since G(H) is chordal and maximum cardinality search generates zero-fill-in
numberings on chordal graphs, every pair of vertices in B(w) must be adjacent inG(H). Thus w} B(w)

is a clique in G(H). Since H is conformal there is some edgeR
of H such that {w}t_J B(w)_ R. Furthermore R cannot contain any numbered
vertices not in B(w), since all vertices in R are adjacent to w in G(H). This means

that B(w) is exactly the set of numbered vertices in R.Now

let w and R be as above and suppose v can be numbered next in H; that
is, v is an unnumbered vertex in an edge S of H containing as many numbered verticesas possible. Then S

contains at least as many numbered vertices as R, and since every
numbered vertex in S is adjacent to v in G(H), the choice of w means that [B(v)[IB(w) I.

Thus v can be numbered next in G(H). [3
During a maximum cardinality search of a hypergraph, we call an edge exhausted
if all vertices contained in it are numbered and nonexhausted otherwise. If R is a
nonexhausted edge containing as many numbered vertices as possible and we number

a vertex in R, then if R is still nonexhausted it still contains as many numbered vertices
as possible. Thus after selecting a nonexhausted edge having as many numbered vertices
as possible, we can number all its unnumbered vertices consecutively before selecting
another edge. This restricted form of maximum cardinality search facilitates testingG(H)

for chordality and H for conformity. The following program implements this
method. (See Figs. 3 and 4.) In addition to numbering the vertices, the program
performs the following computations: It numbers the selected edges from 1 to k in
order of their selection; if S is the ith edge selected, then S=R(i) and fl(S)= i. It
extends this numbering to the vertices by defining/3(v) =min {fl(R)IR is selected and

v R}. Note that v < w implies v >= w. Finally, for each edge S it computes y(S),
defined to be max {/3(v)lv S} if S is not among the selected edges and max {/3(v.)]v S

and fl(v)<fl(S)} if S is among the selected edges. (If fl(v)=fl(S) for all vS, y(S)
is undefined.) As an aid to the computation, the program maintains size (S) for eachedge S,

which is the count of numbered vertices in S if S is nonexhausted and minus
one if S is exhausted. For 6 [0, n 1], set (i) is the set of nonexhausted edges containing

numbered vertices. Index ] is the maximum such that set (i) is nonempty; index k
counts the number of numbered edges.

SIMPLE LINEAR-TIME GRAPH ALGORITHMS 573

X(, 2) / k

3) Z(,-)

Y(2,)
FIG. 3. Restricted maximum cardinality search of a hypergraph. Numbers on vertices are a-numbers;
numbers in parentheses are The first number associated with an edge is its if any; the
second number is its y-number. Edge Yfails the acyclicity test, since y(X) =/3(Y) but X CI v[/3(v) </3( Y)}{3} Y.

RESTRICTED MAXIMUM CARDINALITY SEARCH ON HYPERGRAPHS.

local i, j, k, S;
for [0, n 1 - set (i) := rof;
for S E -> size (S) := O; y(S) := undefined; add S to set (0) rof;

i:=n+l; j:=k:=O;
do j=>O-S :=

delete any from set (]);/(S) := k := k +

1; R(k):= S; size (S):= -1;for v S such that v

is unnumbered-c(v) :-
i:- i+ 1; /3(v) :- k
for S E such that v S and size (S) >- 0 ->y(S) := k;

delete S trom set (size (S));

size S) := size S) + 1;
if size (S)< [SI-* add S to set (size (S))

[3 size (S) Isl-* size (s) := -1

roI
rof;
j:-j+l;

do j _-> 0 and set (j) - j := j 1 od
od;

Remark. The assignment "c(v) := := i- 1" in this program is a sequential assignment that computes i-1 and assigns its value to and then to c(v).As

it happens, we can test the acyclicity of H using only/ and y; c is unnecessary
and its computation can be dropped from the program. The following theorem gives

our acyclicity test (see Figs. 3 and 4):THEOREM

5. H is acyclic if and only if for each e [1, k] and each edge S suchthat y( S)
i, S 71{ vlfl( v) < i} c_ R i). (Since fl( v) implies v R i), this condition is
equivalent to S 71{ v[fl( v) <- i} c_ R i).)Proof. Suppose H

is acyclic. Then c is a zero fill-in ordering of G(H). Considerany
e [1, k]. Suppose y(S) i. Then there is a vertex u e $ such that (u) i. Vertex

574 ROBERT E. TARJAN AND MIHALIS YANNAKAKIS

FIG. 4. Restricted maximum cardinality search of an acyclic hypergraph. Notation is as in Fig. 3. Alledges pass the

acyclicity test. Note that edge Y is never selected.

u and its adjacent larger numbered vertices (with respect to a) form a clique in G(H),
which since H is conformal must be contained in an edge of E, say T. Since u S fq R (i),S

fq {rift(v) < i} _ S f3 {via(v)>- a(u)}_ T and R(i) fq {via(v) >- a(u)} T. When u is

numbered R(i) contains at least as many numbered vertices as T, which meansR(i)fq{v]a(v)>-a(u)} Tfq{vla(v)>=a(u)},

and Sc{v[(v)<i}R(i).To
prove the converse, we use acyclicity condition (1). Suppose that for each[1, k] and

each edge S such that y(S) i, S fq vl/3(v) < i} _ R (i). We delete verticesand edges from H by

processing the sets R(i) from i= k to i= 1. To process R(i),
we delete every set S such that y(S)= and every vertex v such that/3(v) i. This

deletion method maintains the following invariants: Just before a set R (i) is processed,

every remaining vertex v has/3(v)-< i. Every remaining set S such that y(S)= thus
satisfies S=Sf-l{vl(v)<=i}c__R(i), and by rule (ii) S can be deleted when R(i) isprocessed. Once

all such sets are deleted, a vertex v with/3(v) is contained only
in R(i) and can be deleted by rule (i). (A set S R(i) containing v has y(S)=> i; ify(S) >

i, S was deleted previously.) Thus we can delete all the vertices of H, and His acyclic. [3

We obtain a linear-time algorithm from Theorem 5 by performing together all
the set inclusion tests involving a given R(i).

ACYCLICITY TEST.

for [1, k]-

for S E such that y(S) -

if S f3 { vlfl( v) < i} ct R i) -> reject firof

rof;

accept;

SIMPLE LINEAR-TIME GRAPH ALGORITHMS 5"75
The following program fills in the details of this method. During testing of a setR (i),

index (v) if v R (i); index (v) < if v R (i).

for v V --> index v) := 0 rof;

for e [1, k]->for v R -.

index v := rof;
for S / such that 7(S) ->

for v S -> if/3 (v) < and index (v) < --> reject fi rof
rof
rof;

accept;

This gives an O(n + m)-time acyclicity test.Remark. As

in the fill-in computation, we can replace the array index by a bitarray
if we are willing to reset it after processing each R (i).
If the hypergraph is acyclic we can construct a join forest for it (acyclicity condition(2))

from the parameters y. Beeri et al. [2] show that if a hypergraph H passes the
acyclicity test (1) then a join forest F for H can be constructed as follows: The verticesof F

are the edges of H; if an edge R was deleted by operation (ii) of the acyclicity
test (1) because it was contained in some other edge S, then F has an edge {R, S}. (If
there were several edges containing R when R was deleted, then we arbitrarily pickone such edge S.) From

the proof of Theorem 5 is follows that the forest F with theedges of H
as vertices and with edges {S, R(y(S))} for all S with y(S) defined is ajoin
forest for the acyclic hypergraph H.

4. Selectively reducing an acyclic hypergraph. We conclude this paper by
considering the following problem. Suppose we are given a hypergraph H and a setof marked

vertices. We wish to selectively reduce H by repeating the following two
operations until neither is applicable"(i) delete

an unmarked vertex that occurs in only one edge;(ii)
delete an edge that is contained in another edge.
Selective reduction is necessary in computing queries in acyclic relational data
bases. A relational data base is a collection of relations; each relation is a table oversome

set of attributes. A relational data base can be modeled by a hypergraph whose
vertices are the attributes and whose edges are the relations (see [1], [21] for moreinformation). Suppose

now that we want to compute the relationship among the
attributes in a given set X. If the hypergraph is acyclic this is done as follows: First,
we mark the vertices of X and selectively reduce the hypergraph H. After the reduction
we are left with a collection of partial edges (i.e. subsets of some of the original edges)Y1, , Yk. (It

is easy to see that the selective reduction process has the Church-Rosser
property; that is, the final collection of partial edges is the same, regardless of theorder in which the operations (i), (ii)

are applied.) For each Yi we find all the edgesof H that
contain Yi. We project the relations corresponding to such edges onto the
attributes Yi and take the union of the resulting relations, giving a single relation for

each Yi. Then we take the join of the relations obtained for Y1," Yk (see [13], [18]).As

an example of selective reduction, consider a hypothetical data base for storing
information about research papers. Figure 5 illustrates the relations, which correspond

to the schemes RI={AU, AF}, R2={PT, AU}, R3={PT, Y, JN, VN}, R4--"{PT, Y, CN}, R.s { CN, CL, Y}, R6 {PT, S},

where the abbreviations are as indicated

576 ROBERT E. TARJAN AND MIHALIS YANNAKAKIS

AU =AUTHORAF =AFFILIATION

CN=CONFERENCE NAMEJN=JOURNAL NAME
CL CONFERENCE LOCATIONVN=JOURNAL VOLUME, PAGE NUMBERS

Y=PUBLICATION YEARPT= PAPER TITLE
S SUBJECTS

(b)

AU
FRE[

SUE

AF
IBM
BELL

NICE RESULTS 1982

JN
SICOMP

VN
I0, 820-830,

PT
NICER RESULTS

y
1983

CN
STOC CN'STOC EYgSTON 1983 ICE RESULTS

NICER RESULTS

SORTINGSORTING

FIG. 5. A relational data base for research papers. (a) Abbreviations of attributes. (b) Relations. Only
the entries for two papers are shown.

RI(-)

R6(2) R4( 3 )Y..._.v.R 5 (4)
FIG. 6. Hypergraph corresponding to relational schemes in Fig. 5. Relations are indexed in E-order of a
restricted maximum cardinality search. Numbers in parentheses are y-numbers. Applying the selective reduction
algorithm, we delete VN, JN and CL (which are unmarked and in only one edge), then R (now contained

in R4), then CN, then R3, leaving R1, R2, R6 and {PT, Y}.

in Fig. 5. Figure 6 shows the hypergraph corresponding to this relation scheme. Suppose
we wish to know whether any Bell Laboratories authors published any papers on graph

theory in 1983. To answer this query, we must compute the relationship among the

attributes in X {AF, S, Y}, select those tuples with AF "Bell Laboratories," S"graph theory,"

and Y "1983," and check whether the result is empty.
After carrying out the appropriate selective reduction, the edges remaining areRI={AU, AF}, R2={PT, AU}, R6={PT, S},

and {PT, Y}, the last of which is contained in two original edges, R3 and R4. Thus we join R1, R2, and R6 with the unionof projections of R3 and R4

on {PT, Y}.Kuper
describes a nonlinear algorithm for the selective reduction of an acyclichypergraph [12]. We

shall present a simple linear-time algorithm. In order to
solve this problem, we first consider a related but simpler problem: given an acyclic

SIMPLE LINEAR-TIME GRAPH ALGORITHMS 577
hypergraph, determine which of its edges are maximal (in the set-theoretic sense). Theedges that

are not maximal can always be deleted from H in any selective reduction
of H, by operation (ii). It is easy to see that if H is acyclic, all its maximal edges are
selected during a maximum cardinality search. (Thus any nonselected edge can be
deleted during the selective reduction process.) However, not all selected edges
need be maximal. We can ensure that only maximal edges are selected by breaking tiesaccording

to cardinality (largest edge preferred). However, there seems to be noeasy
way to incorporate this into the algorithm while preserving the O(n+ m) timebound. The following theorem

gives an alternative characterization of maximal edges.If R is
a selected edge, let R' be the set {vRl(v)<(R)}. (Note that,(R)
max {(v)lvR'}.)
THEOREM 6. Suppose we carry out a restricted maximum cardinality search on anacyclic hypergraph H, selecting edges R (1), R (2),. , R k). Then the maximal edges

of H are exactly the selected edges R i) such that k orProof Suppose S is a nonselected edge. Let 3,(S) i. Then S= S(-l{v[(v) <- i}c__
R (i) by Theorem 5, and S is not maximal.Suppose R (i)

for some < k is maximal. If T(R (i + 1)) i, then R'(i + 1) ___ R (i)
by Theorem 5, which means IR'(i / 1)1 < IR(i)], since R'(i + 1) R(i) would contradictthe maximality of R(i). If y(R(i+l)) i, then }R'(i+l)l-JR(i+

[R'(i)[ < IR(i)[ by the definition of maximum cardinality search.Conversely, suppose R(i) is

not maximal. Then there is some maximal edge

containing R (i), which must be R (j) for some j > i. Consider R (i + 1). Just beforeR (i)

is selected, R (i + 1) contains at most JR'(i)I numbered vertices; just after R (i)
is selected, R (i+ 1) contains at least as many numbered vertices as R (j), and hence

at least IR (i)}. Since exactly JR(i)- R'(i)J new vertices are numbered when R (i) isselected, R (i + 1)

contains every vertex in R (i) R'(i), and IR'(i +. 1We
can compute the maximal edges of an acyclic hypergraph in O(n + m) time
by carrying out a restricted maximum cardinality search and applying the test inTheorem 6

to each selected edge. Suppose we have done this. Let R(1),R(2),..., R(k)

be the list of selected edges according to the restricted maximum
cardinality search on the acyclic hypergraph H, and suppose that R (i) is not maximal.By the proof of Theorem 6, just before R (i) is selected, both R (i) and R (i + 1) contain

the same number of numbered vertices, and R (i + 1) contains all unnumbered vertices
in .R (i). Thus we could have selected R (i + 1) in place of R (i) during the search. After

selecting R(i+ 1), R(i) would be exhausted and not eligible for later selection, andthe

rest of the edges R (i+ 2),..., R (k) could be chosen in the same order as before.
Thus R (1),. , R (i 1), R (i + 1),. , R (k) is also a valid selection order (according

to maximum cardinality search) for the hypergraph. This means that if we delete from

the list of selected edges all nonmaximal edges we are left with a list that corresponds
to a valid selection order. The selective reduction process can always begin by deleting

all edges not in this list, since each is contained in some edge in the list.

Redefine R(1),..., R(k) to be the remaining (selected) edges, all incomparable,
and suppose that some vertex v occurs in only one edge R (i). Consider what happens
if we delete v. The remaining hypergraph H' is also acyclic [2]. If the new R (i) (withoutv)

contains only vertices that appear in earlier sets R(j) (i.e. with j<i), then R(i) is
exhausted when its turn comes, and therefore cannot be selected. However, since v
occurs only in R(i) no other edge is affected and therefore R (1),. , R(i- 1),R (i + 1),. , R (k)

is a valid selection order for H'. Since R (i) is not selected andH'
is acyclic we know from the previous section that the new R(i) (without v) is
contained in some other edge R(j).

578 ROBERT E. TARJAN AND MIHALIS YANNAKAKIS

If the new R(i) contains some vertex that does not appear in any earlier R(]),then

the same order R (1),. , R (i),. , R (k) continues being a valid selection order
for H'. From Theorem 6 we know that all these edges are incomparable, unlessIR (i)l IR'(i + 1)[,

in which case R (i) c__ R (i + 1) and R (i) can be dropped from the
list of selected edges without violating the validity of the selection order.Our

discussion suggests the following algorithm for the selective reduction of an
acyclic hypergraph. (See Fig. 6.)

Step 1. Carry out a restricted maximum cardinality search of the hypergraph.Apply

Theorem 6 to discard the selected edges that are not maximal. LetR(1),..., R(k)

be the list of remaining edges, and let ]R'(i)] be as defined before
Theorem 6. For each unmarked vertex v, compute the number of remaining (selected)edges

in which v appears.Step 2. Repeat the

following operation until it does not apply"Delete any unmarked

vertex v that occurs in exactly one edge R(i); decrement]R (i) I.
If IR (i)] [R'(i) or ]R (i)[ ]R'(i + 1)1 then do the following: Delete R (i). For
each vertex v R(i), decrement the count of edges in which v appears. DecreaseIR'(i+ l) by IR(i)l-IR'(i) I. For

j=> i, replace R(j) by R(j+ 1).

The selected edges that remain after the execution of these steps are exactly those
that cannot be deleted by the selective reduction process. If we maintain a list of theunmarked

vertices occurring in exactly one edge and maintain the set of remainingedges R(1), R(2)..

as a doubly linked list, we can carry out this computation inO(n + m)
time. We leave the implementation of this algorithm as an exercise. The
correctness of the method follows from our previous discussion.Note

that in the data base application, Step 1 will be executed only once (whenthe data base

is set up), and only Step 2 will be executed to answer a query. LetY1," , Yk
be the remaining sets of vertices when the algorithm terminates. We have
to find now for each Yi the edges of the original hypergraph H that contain Yi. LetW

be the set of remaining vertices, i.e. the union of the Yi's. Let/ be the h,evpergraph
with set of vertices W and an edge S (-I W for each edge S of H. Then H is acyclic[2]. (Strictly speaking,/

is a multihypergraph; i.e., it might have edges that consist
of exactly the same vertices. However, everything we have said about hypergraphs
also holds for multihypergraphs.) A valid selection order for/_it according to maximumcardinality search

is YI," ", Yk. For a vertex v in W, let/(v) =min {i[v Yi}, and
for an edge S of H let 4/(S)=max {/(v)lv }. From the last section we know thatS

f') W Y4s) for each edge S of H. If S contains some Y then this can be onlyY/s)

(since all the Y's are incomparable), and this is true if and only if IS f3 W[IY  s)l, Therefore, all

we have to do is compute/(v) for each v W, compute 3(S)
for each edge S of H, and compare IS f'l W[ to g(sl.

REFERENCES
[1] C. BEERI, R. FAGIN, D. MAIER, A. MENDELZON, J. D. ULLMAN AND M. YANNAKAKIS,,Propertiesof

acyclic database schemes, in Proc. 13th Annual ACM Symposium on the Theory of Computing,
Association for Computing Machinery, New York, 1981, pp. 355-362.[2] C. BEERI, R.

FAGIN, D. MAIER AND M. YANNAKAKIS, Oil the desirability of acyclic databaseschemes, J. Assoc. Comput.,

30 (1983), pp 479-513.[3] C. BERGE, Graphs
and Hypergraphs, North-Holland, Amsterdam, 1973.[4] P. A.
BERNSTEIN AND N. GOODMAN, The power of natural sem@ins, this Journal, 10 (1981),
pp. 751-771.[5] E. W. DIJKsTRA, A Discipline of

Programming, Prentice-Hall, Englewood Cliffs, NJ, 1976.

SIMPLE LINEAR-TIME GRAPH ALGORITHMS 579
[6] G. A. DIRAC, On rigid circuit graphs, Abh. Math. Sem. Univ. Hamburg, 25 (1961), pp 71-76.[7] R. FAGIN, A. O. MENDELZON

AND J. D. ULLMAN, A simplified universal relation assumption and
its properties, ACM Trans. Database Systems, 7 (1982), 343-360.[8] D.
R. FULKERSON AND O. A. GROSS, Incidence matrices and interval graphs, Pacific J. Math., 15(1965),

pp. 835-855.[9] M. GOODMAN

AND O. SHMUELI, Syntactic characterizations of tree database schemes, J. Assoc.Comput.,
Mach., 30 (1983), 767-786.[10] M. H. GRAHAM, On

the universal relation, Technical Report, Univ. of Toronto, Toronto, Ontario,
Canada, 1979.[11] F. G. GUSTAVSON, Some

basic techniques for solving sparse systems of linear equations, in Sparse
Matrices and Their Applications, D. S. Rose and R. A. Willoughby, eds., Plenum Press, New York,

1972, pp. 41-52.[12] G. KUPER, An

algorithm for reducing acyclic hypergraphs, unpublished manuscript, Stanford Univ.,
Stanford, CA, 1982.[13] D. MAIER

AND J. D. ULLMAN, Connections in acyclic hypergraphs, in Proc. ACM Symposium on
Principles of Database Systems, Association for Computing Machinery, New York, 1982, pp. 34-39.[14] D. J. ROSE,

Triangulated graphs and the elimination process, J. Math. Anal. Appl., 32 (1970),pp. 597-609.

[15] D. J. ROSE, R. E. TARJAN AND G. S. LUEKER, Algorithmic aspects of vertex elimination on graphs,

this Journal, 5 (1976), pp. 266-283.[16] R. E. TARJAN,

Graph theory and Gaussian elimination, in Sparse Matrix Computations, J. R. Bunch
and D. J. Rose, eds., Academic Press, New York, 1976, pp. 3-22.[17] G. WHITTEN,

private communication, 1978.[18] M. YANNAKAKIS,

Algorithms ]:or acyclic database schemes, Proc. International Conference on VeryLarge Data Bases,

1981, pp. 82-94.[19] M. YANNAKAKIS, A
linear-time algorithm for recognizing acyclic hypergraphs, unpublished manuscript,1982.

[20] C. T. Yu AND M. Z. OZSOYOGLU, An algorithm ]'or tree-query membership of a distributed query, inProc.

1979 IEEE COMPSAC, Institute of Electrical and Electronic Engineers, New York, 1979,
pp. 306-312.[21] C. ZANIOLO,

Analysis and design of relational schemata for database systems, Ph.D. thesis, Univ. of
California at Los Angeles, Los Angeles, CA, 1976.