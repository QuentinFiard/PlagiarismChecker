

Java Bytecode Verification

Using Model Checking

?

Joachim Posegga and Harald Vogt

Deutsche Telekom AG

Technologiezentrum

IT Security
D-64307 Darmstadt
Tel. +49 6151 83-7881, Fax -4090
fposeggajvogthg@tzd.telekom.de

Abstract. We provide an abstract interpretation for Java bytecode programs to build finite state models of these programs. We describe the
bytecode constraints as CTL formulas which can be checked against the
finite models by a (standard) model checker. We see a practical way to
perform bytecode verification on a formal basis in that it could help to
achieve higher security and open the door for further extensions to prove
additional properties of Java bytecode.

1 Introduction
Java bytecode verification aims at proving that a given bytecode program (e.g.,
a compiled Java method) conforms to certain security requirements intended to
protect the executing platform from malicious code. For reasons of efficiency,
the necessary checks are performed once before the program is executed rather
than during runtime. Current implementations of this process use techniques
from data flow analysis to assure the required properties. Although there exists
at least one formalization of the process of bytecode verification ([Gol97]) and
one thorough implementation of the bytecode verifier ([SGB98]), there seems to
be no implementation which actually is built upon a rigid formal description.

The goal of this work is to show how Java bytecode verification can be implemented as solving a model checking problem1. We are aiming at using a standard
model checker tool like SMV [McM93], so that we are able to describe bytecode
verification at a very high level in terms of CTL formulas. This gives us both a
distinct description of the problem and an efficient implementation. The ideas
presented in this paper were introduced in [PV98] in the context of Java smart
cards where the demand for security is very high.

In this paper, we will not treat all bytecode instructions in every detail but
rather concentrate on the jsr/ret instructions which are used for implementing

? The opinions expressed in this paper are solely those of the authors and do not

necessarily reflect the views of Deutsche Telekom AG.
1 The idea of implementing a data flow analysis as a model checking problem seems

to have been first published in [Ste91].

2 Joachim Posegga and Harald Vogt
subroutines within bytecode programs. This is because they are rarely treated
in the literature and they raise special problems for bytecode verification. The
paper [SA98] deals with these instructions by tracking subroutine calls in a stacklike structure. We take up this idea and introduce a structure for recording the
active subroutines at each program point.

Bytecode subroutines impose certain difficulties on bytecode verification.
First, the variables used by the subroutine must have appropriate types for the
subroutine; this limits the use of these variables in the code before the subroutine
call. (In our approach, this is easily solved: for each instruction, the type of the
used variables is checked the same way, regardless of the path the instruction
was reached.) Second, the ret instruction must be used in a well-structured way
such that the variable used by ret contains a (valid) return address. Additionally, subroutines may not be called recursively, and several subroutines can be
completed by returning from an inner subroutine call. By using a list-like structure to record the active subroutines at each program point, we are able to decide
if an execution of jsr/ret instructions is possibly violating these constraints.

We start by introducing an abstract interpretation for bytecode instructions
and programs in Section 2. This interpretation is finite, allowing us to build
a finite state system from a bytecode program which is amenable to model
checking. In Section 3, we show how to actually build such a system for the SMV
model checker from our description. The properties which have to be checked on
the finite state system are constructed in Section 4.

2 An Abstract Interpretation for Bytecode
2.1 Bytecode Programs
The operational semantics of bytecode instructions are given in terms of transition rules on a state system. We are employing the formalism of Abstract
State Machines [Gur95] to describe bytecode programs. Given one rule for every
instruction of a bytecode program, we compose a rule for the whole program.

A bytecode program is a sequence of instructions I1; I2; : : : ; In. Given a rule
RI for every bytecode instruction I, the semantics of a bytecode program is
given as the (block) rule

if pc = 1 then RI1
if pc = 2 then RI2
: : :
if pc = n then RI

n .

The rules RI

i are instantiations of rule schemes for the respective instructions,where certain placeholders (e.g., denoting the goal of a

jsr instruction) are

substituted by concrete values.

2.2 Semantics of Instructions
We supply a generic ASM rule (a rule scheme) for every considered bytecode
instruction. A rule RI is the composition of rules SI and S0I . SI denotes the rule

Java Bytecode Verification Using Model Checking 3
which gives the "standard" semantics of the bytecode instruction I, whereas S0I
gives an extension to the standard semantics. We will use the latter to explain
how the instructions behave on additional state variables, namely the subroutine
call chain which records the active subroutines. It is required that rules do not
clash, i.e. the rules SI and S0I may not perform contradictory updates. As the
rules S0I make updates on additional state variables only, this is guaranteed.

The standard semantics of bytecode instructions is given by the following
rules:

Sjsr L j

opds := push(opds, pc+1)
pc := L

Sret x j

pc := loc(x)

Sastore x j

loc(x) := top(opds)
opds := pop(opds)
pc := pc+1

The extension to the standard semantics is given by the following rules:

S0jsr L j

sr := L \Delta  sr

S0ret x j

let ( ,sr0) = split(sr, loc(x))
in

sr := sr0

L serves as a placeholder for the goal of the jsr instruction. It is replaced by a
concrete address (of a program point) when the rule is instantiated to build the
ASM for a bytecode program. (The underscore in the let statement denotes an
anonymous variable the value of which is not used subsequently.)

The functions push, pop and top are used as the common operations on stacks.
The plus sign + denotes the addition on natural numbers. The subroutine call
chain is implemented as a sequence of labels with " denoting the empty sequence,
the \Delta  operator used as adding a label to a sequence. Later on, we will use the
predicate 2, a 2 u to be true iff the label a occurs in the sequence u. split is a
function which splits a sequence into two parts at a location pointed to by the
first occurrence of a given value (suppose a 62 u):

split(uav, a) = (ua,v).

All of these function are external or static w.r.t. the ASM. This means, they
are not updated by ASM rules and are not part of the dynamic aspects of the
ASM. To build a finite abstraction of the ASM, it is required to give finite
abstractions of these functions.

4 Joachim Posegga and Harald Vogt
2.3 Concrete Types and their Abstraction
By providing finite abstractions of the (external) functions used in the rules,
we define the corresponding abstract rules which can be translated into a finite
state system.

To create a finite state system from a bytecode program (represented as
the corresponding composite ASM rule) it is necessary to restrict the universes
used in the ASM rule to finite sets and to give finite interpretations of the used
functions.

First, we describe the used concrete types. For a given bytecode program,
the number of used variables is fixed. They are numbered onwards from 0, so
their index range Varnum is an interval of the natural numbers starting from
0. Nat denotes the natural numbers. The universe Word contains all values of
primitive types. The type identifiers are given in the left column, and the state
components (internal ASM functions) in the right one:

Pc == Nat pc : Pc
Loc == Varnum ! Word loc : Loc
Opd == Stack(Word) opd : Opd
Sr == Nat\Lambda  sr : Sr .

Now, we give finite abstractions of the types in the left column. Their structure is generic but their size depends on the given bytecode program. However,
they are fixed for and can be computed from a given bytecode program. Also, the
maximum height h of the operand stack is fixed for a given bytecode program
(and supplied in the header of the bytecode program). Suppose the bytecode
instructions are given in an array code with the length codelength.

Pc == f1,. . . ,codelengthg [ fundefg
PrimType == Pc
Loc == Varnum ! PrimType
Opd == Stackh(PrimType)
Lab == fL : ex. i with code(i) = jsr Lg
Sr == Lab\Lambda [ fundefg

Pc is explicitly restricted to the possible addresses of instructions in the code
array, extended by a special value undef denoting an invalid address. PrimType
substitues Word, and Lab substitutes the natural numbers Nat in Sr. These
universes are sufficient for our purpose, as we consider a very limited set of
instructions only. However, they can be extended if more instructions are needed.

In ASMs, the value undef is actually contained in any universe by default.
However, we include this value explicitly to make clear which values are used
and that they must be properly included later in the description of the finite
state system.

The structure of the instruction rules is not changed when building a finite
ASM. But the external functions are substituted with finite abstractions. We
give the definitions of the abstracted functions:

Java Bytecode Verification Using Model Checking 5
push(u,a) = ae

faug if juj ! h

fundefg otherwise

pop(u) = ae

fvg for u = av

fundefg if u 2 f"; undef g

top(u) = ae

fag for u = av

fundefg if u 2 f"; undef g

n + i = ae

fmg with m = n+i, if n+i ^ codelength

fundefg otherwise

a \Delta  u = ae

faug if a 62 u

fundefg otherwise

split(u,a) = ae

f(wa,v)g if u = wav

fundefg otherwise

By substituting these definitions in the ASM rule for a bytecode program, we
get a finite ASM since all universes are finite and no universe extensions occur.
This ASM can be seen as a description of a finite state system where the state
space is defined by the possible values of the (internal) functions.

Note that in the general case, the abstract functions are nondeterministic
(though there are no nondeterministic functions for the subset of bytecode instructions we consider here). Therefore, the right hand sides of the defining
equations are sets of possible values. During "execution" of the ASM rule, one
of the possible values is actually chosen to determine the successor state.

Note also that the abstracted functions have to be homomorphic w.r.t. to
the concrete functions, i.e. the condition

y = f (x) ) h(y) 2 fh(h(x))
must hold. This ensures that conditions that are proven to hold in the abstract
system carry over to the concrete system. In CTL, this applies only to formulas
that are quantified over all execution paths, therefore we will forbid the use of the
E quantifier (stating the existence of a path) in specifying bytecode properties.
See [CGL94] for further details.

3 Building a Finite State System
Our approach is based on unlabelled transitions, since a bytecode program takes
no input during execution. The choice of the successor state depends only on
the internal state of the program.

A bytecode program is executed deterministically by the VM. By abstracting
to finite types, conditional branches become nondeterministic choices since the
branching depends on concrete values that are not accessible anymore. Therefore,

6 Joachim Posegga and Harald Vogt
a successor state is nondeterministically chosen in the abstract system from the
set of possible successor states which is determined by the transition relation.
Thus, we define finite state systems as follows.

Definition 1. A finite state system is a tuple M = (S; R; I) where S is a finite
set of states; R ` S \Theta  S is the transition relation; I ` S is the set of initial
states.

3.1 Translation of ASM Rules
For model checking, we are interested in a representation of the state system
on which the necessary computations can be performed efficiently. The model
checker SMV, for example, takes a propositional formula as an input description
of the transition relation where two variable sets X and X0 occur. The variables
x 2 X denote the current values of the state variables and x0 2 X0 denote the
successor values. By internally representing a propositional formula as a BDD,
the transition relation can be concisely represented and the Boolean operations
can be computed efficiently.

The state space S consists of the ASM functions pc, loc, opd, sr. For SMV,
the following variables are used to represent the state variables:

pc pc
loc0,...,locN for the array loc
opd0,...,opdH1 for the stack positions on opds
opdsize holding the current size of opds
sr0,...,srH2 for the positions in the list sr
srsize holding the current size of sr .

(Note that this is just a suggestion how the state space can be represented in
SMV. There are many possibilities to translate a finite ASM into a SMV model.)

The initial state is determined as follows. pc is set to 1. The loci variables
are set to initial values according to the signature of the bytecode program. All
opdi and srj are initialized to undef and opdsize and srsize are set to 0.
This matches the initializations made by the JVM when starting to execute a
bytecode program.

To feed our transition relation (represented by an ASM rule) into a model
checker, we have to translate it into a propositional formula OE. The transition
relation ROE represented by this formula must fulfill the condition

ROE = f(s; t) : the rule fires at s and results in tg:
(An efficient algorithm to construct a representation of R from a given rule set
is currently being implemented.)

3.2 Atomic Propositions
State properties are described in terms of propositional formulas built from
atomic propositions. With SMV atomic propositions are essentially equations or

Java Bytecode Verification Using Model Checking 7
integer comparisons. All common propositional connectives may be used. However, we require that negations occur only at the level of state propositions (i.e.,
formulas without any CTL quantifiers) to be able to carry over properties of the
abstract system to the concrete one (see [CGL94]).

4 Security Properties
The constraints on bytecode programs are informally described in [LY96]. We
give a formalization in terms of CTL formulas and argue that they meet the informal description. We could also show (semi-)formally that they correspond/are
equivalent to other descriptions like [Gol97, Qia98, SA98].

We concentrate here on the jsr/ret instructions.

4.1 No Recursion
It must be assured that no subroutine is recursively called. As we are recording
the active subroutines in the sequence sr, this constraint can be expressed as the
following pre-condition of the jsr instruction:

L 62 sr
To be able to write this condition as a CTL formula in SMV syntax, we have
to expand the predicate 2 to a propositional formula. The predicate 2 can be
coded as follows:

L 2 sr j

(srsize = 0 -? false ) &
(srsize = 1 -? L = sr0) &
(srsize = 2 -? L = sr0 -- L = sr1) &
. . .

Therefore, for each program point n with code(n) = jsr L we have to check the
following formula:

AG pc = n -? !(L 2 sr )
The preceding quantifier AG says that the following formula must hold on every
state in every execution path. By the antecedent pc = n of the implication we
restrict the succedent to those states that represent the program point n (which
are those with a jsr instruction).

4.2 Returning from Subroutines
Another constraint is that whenever a ret x instruction is executed, x must
contain a return address value and the respective subroutine must be active.
This is expressed as a pre-condition to the ret instruction:W

(r;L)2Z (x = r ! L 2 sr)

8 Joachim Posegga and Harald Vogt
where Z = f(r; L) : code(r \Gamma  1) = jsr L, r ? 1g which is the set of valid return
addresses associated with the respective subroutine entry labels. This formula
expands to a SMV formula ' in a straightforward way.

The CTL formula we have to check for each program point n where a ret
instruction occurs then is:

AG pc = n -? '

5 Related and Future Work
Our approach is based on a formal semantics of Java bytecode. Our description
builds mainly upon the original description in [LY96] but we are aware of the
existing formalizations in [Ber97, ZG97, BS98, Qia98].

Some notations were used from [BS98] where Abstract State Machines are
used to describe the Java Virtual Machine with the goal of defining a platform
for correct compilation of Java code.

It remains to connect our approach to other formalizations of bytecode verification, e.g. the one in [Gol97]. This could lead to higher confidence in our
approach and reveal if there are flaws in any of the formalizations.

By providing a generic tool which takes an abstract interpretation of bytecode semantics and formulas describing system properties, we hope to extend
bytecode verification to check further properties of bytecode programs. One candidate, especially important in the field of Java smart cards, could be the resource
consumption of bytecode programs. One would have to take into cosideration
certain garbage collection strategies used with smart cards to check that a bytecode program leaves no objects on the heap and give an appropriate abstract
interpretation for the bytecode instructions and appropriate formulas.

References
[Ber97] Peter Bertelsen. Semantics of Java Byte Code. http://www.dina.kvl.dk/

,pmb, March 1997.
[BS98] Egon B"orger and Wolfram Schulte. Defining the Java Virtual Machine as

Platform for Provably Correct Java Compilation. In 23rd International Symposium on Mathematical Foundations of Computer Science, LNCS. SpringerVerlag, 1998.
[CGL94] E. Clarke, D. Grumberg, and D. Long. Model Checking and Abstraction.

ACM Trans. on Prog. Languages and Systems, 16(5):1512-1542, 1994.
[Gol97] Allen Goldberg. A Specification of Java Loading and Bytecode Verification.

http://www.kestrel.edu/HTML/people/goldberg/Bytecode.ps.gz, 1997.
[Gur95] Yuri Gurevich. Evolving algebras 1993: Lipari guide. In Egon B"orger, editor,

Specification and Validation Methods. Oxford University Press, 1995.
[LY96] T. Lindholm and F. Yellin. The Java Virtual Machine Specification.

Addison-Wesley, 1996.
[McM93] Kenneth L. McMillan. Symbolic Model Checking. Kluwer Academic Publishers, 1993.

Java Bytecode Verification Using Model Checking 9
[PV98] Joachim Posegga and Harald Vogt. Byte Code Verification for Java Smart

Cards Based on Model Checking. In 5th European Symposium on Research
in Computer Security, LNCS. Springer-Verlag, 1998.
[Qia98] Z. Qian. A Formal Specification of Java Virtual Machine Instructions for

Objects, Methods and Subroutines. In Jim Alves-Foss, editor, Formal Syntax
and Semantics of Java, LNCS. Springer-Verlag, 1998.
[SA98] Raymie Stata and Mart'in Abadi. A Type System for Java Bytecode Subroutines. In Proc. 25th ACM Symp. Principles of Programming Languages.
ACM Press, 1998.
[SGB98] Emin G"un Sirer, Arthur J. Gregory, and Brian N. Bershad. Kimera: A Java

System Architecture. http://kimera.cs.washington.edu/, 1998.
[Ste91] Bernhard Steffen. Data Flow Analysis as Model Checking. In T. Ito and

A. R. Meyer, editors, Theoretical Aspects of Computer Software, volume
526 of Lecture Notes in Computer Science, pages 346-364. Springer-Verlag,
September 1991.
[ZG97] Wolf Zimmermann and Thilo Gaul. An Abstract State Machine for Java

Byte Code, June 1997.