

An Extension of ML with First-Class Abstract Types

In Proceedings of the ACM SIGPLAN Workshop on ML and its Applications, San Francisco, June 1992

Konstantin La"ufer,* New York University, laufer@cs.nyu.edu

Martin Odersky,# Yale University, odersky@cs.yale.edu

1 Introduction
Many statically-typed programming languages provide an abstract data type construct, such as the packagein Ada, the cluster in CLU, and the module in Modula2. In these languages, an abstract data type consists

of two parts, interface and implementation. The implementation consists of one or more representation typesand some operations on these types; the interface specifies the names and types of the operations accessible
to the user of the abstract data type.ML [MTH90] provides two distinct constructs for describing abstract data types:

* The (obsolete) abstype mechanism is used to declare an abstract data type with a single implemen-tation. It has been superseded by the module system.

* The ML module system provides signatures, structures, and functors. Signatures act as interfaces ofabstract  data  types  and  structures  as  their  implementations;  functors  are  essentially  parametrized

structures. Several structures may share the same signature, and a single structure may satisfy severalsignatures. However, structures are not first-class values in ML for type-theoretic reasons discussed
in [Mac86] [MH88]. This leads to considerable difficulties in a number of practical programming sit-uations.

Mitchell and Plotkin show that abstract types can be given existential type [MP88]. By stating that a value v has the existential type , we mean that for some fixed, unknown type ,  has type . This
paper presents a semantic extension of ML, where the component types of a datatype may be existentiallyquantified. We show how datatypes over existential types add significant flexibility to the language without

even changing ML syntax; in particular, we give examples demonstrating how we express

* first-class abstract types,

* multiple implementations of a given abstract type,

* heterogeneous aggregates of different implementations of the same abstract type, and

* dynamic dispatching of operations with respect to the implementation type.
We have a deterministic Damas-Milner inference system [DM82] [CDDK86] for our language, whichleads to a syntactically sound and complete type reconstruction algorithm. Furthermore, the type system is

semantically sound with respect to a standard denotational semantics.Most previous work on existential types does not consider type reconstruction. Other work appears to be
semantically unsound or does not permit polymorphic instantiation of variables of existential type. By con-trast, in our system such variables are let-bound and may be instantiated polymorphically.

We have implemented a Standard ML prototype of an interpreter with type reconstruction for our corelanguage, Mini-ML [CDDK86] extended with recursive datatypes over existentially quantified component
types. All examples from this paper have been developed and tested using our interpreter.

* Supported by the Defence Advanced Research Project Agency/Information Systems Technology Office under the Office

of Naval Research contract N00014-91-5-1472#
Supported by the Defence Advanced Research Project Agency/Information Systems Technology Office under the Office
of Naval Research contract N00014-91-J-4043

a.$ t t^ v t t^ a/[ ]
2 ML Datatypes with Existential Component Types
In ML, datatype declarations are of the form

datatype [arg] T = K1 of t1 | ... | Kn of tn

where the K's are value constructors and the optional prefix argument arg is used for formal type parameters,which may appear free in the component types t

i. The value constructor functions are universally quantifiedover these type parameters, and no other type variables may appear free in the t

i's.An example for an ML datatype declaration is

datatype 'a Mytype = mycons of 'a * ('a -> int)
Without altering the syntax of the datatype declaration, we now give a meaning to type variables thatappear free in the component types, but not in the type parameter list. We interpret such type variables as

existentially quantified.For example,

datatype Key = key of 'a * ('a -> int)
describes a datatype with one value constructor whose arguments are pairs of a value of type 'a and a func-tion from type 'a to int. The question is what we can say about 'a. The answer is, nothing, except that

the value is of the same type 'a as the function domain. To illustrate this further, the type of the expression

key(3,fn x => 5)
is Key, as is the type of the expression

key([1,2,3],length)
where length is the built-in function on lists. Note that no argument types appear in the result type of theexpression. On the other hand,

key(3,length)
is not type-correct, since the type of 3 is different from the domain type of length.We recognize that Key is an abstract type comprised by a value of some type and an operation on that

type yielding an int. It is important to note that values of type Key are first-class; they may be createddynamically and passed around freely as function parameters. The two different values of type Key in the
previous examples may be viewed as two different implementations of the same abstract type.Besides constructing values of datatypes with existential component types, we can decompose them using the let construct. We impose the restriction that no type variable that is existentially quantified in alet expression appears in the result type of this expression or in the type of a global identifier. Analogous
restrictions hold for the corresponding open and abstype constructs described in [CW85] [MP88].For example, assuming x is of type Key, then

let val key(v,f) = x inf v
end
has a well-defined meaning, namely the int result of f applied to v. We know that this application is type-safe because the pattern matching succeeds, since x was constructed using constructor key, and at that time

it was enforced that f can safely be applied to v. On the other hand,

let val key(v,f) = x inv

end
is not type-correct, since we do not know the type of v statically and, consequently, cannot assign a type tothe whole expression.

Our extension to ML allows us to deal with existential types as described in [CW85] [MP88], with thefurther improvement that decomposed values of existential type are let-bound and may be instantiated
polymorphically. This is illustrated by the following example,

datatype 'a t = k of ('a -> 'b) * ('b -> int)let val k(f1,f2) = k(fn x => x,fn x => 3) in

(f2(f1 7),f2(f1 true))end

which results in (3,3). In most previous work, the value on the right-hand side of the binding would haveto be bound and decomposed twice.

3 Some Motivating Examples
Minimum over a heterogeneous list
Extending on the previous example, we first show how we construct heterogeneous lists over different im-plementations of the same abstract type and define functions that operate uniformly on such heterogeneous

lists. A heterogeneous list of values of type Key could be defined as follows:

val hetlist =[key(3,fn x => x), key([1,2,3,4],length), key(7,fn x => 0),

key(true,fn x => if x then 1 else 0), key(12,fn x => 3)]
The type of hetlist is Key list; it is a homogeneous list of elements each of which could be a differentimplementation of type Key. We define the function min, which finds the minimum of a list of Key's with

respect to the integer value obtained by applying the second component (the function) to the first component(the value).

fun min [x] = x| min ((key(v1,f1))::xs) =

let val key(v2,f2) = min xs inif f1 v1 <= f2 v2 then key(v1,f1) else key(v2,f2)
end
Then min hetlist returns key(7,fn x => 0), the third element of the list.

Stacks parametrized by element type
The previous examples involved datatypes with existential types but without polymorphic type parameters.As an example for a type involving both, we show an abstract stack parametrized by element type.

datatype 'a Stack = stack of {value : 'b,empty : 'b,

push : 'a * 'b -> 'bpop : 'b -> 'a * 'b
top : 'b -> 'a,isempty : 'b -> bool}

An implementation of an int Stack in terms of the built-in type list can be given as

stack{value = [1,2,3], empty = [], push = op ::,pop = fn xs => (hd xs,tl xs), top = hd, isempty = null}

An alternative implementation of Stack could be given, among others, based on arrays. Different imple-mentations could then be combined in a list of stacks. To facilitate dynamic dispatching, constructors of
stacks of different implementations can be provided together with stack operations that work uniformly

across implementations. These "outer" operations work by opening the stack, applying the intended "inner"operation, and encapsulating the stack again, for example

fun makeliststack xs = stack{value = xs, empty = [],push = op ::,pop = fn xs => (hd xs,tl xs), top = hd, isempty = null}
fun makearraystack xs = stack{...}fun push a (stack{value = v, push = pu, empty = e,

pop = po, top = t, isempty = i}) =stack{value = pu(a,v), push = pu, empty = e,
pop = po, top = t, isempty = i}map (push 8) [makeliststack [2,4,6], makearraystack [3,5,7]]

4 Type-Theoretical Aspects
A deterministic type inference system for our language is given in the appendix; it leads directly to a syn-tactically sound and complete type reconstruction algorithm to compute principal types. Our type system is

semantically sound with respect to a standard denotational semantics. Moreover, it is a conservative exten-sion of ML. That is, for a program in our language whose declarations introduce no existentially quantified
type variables, our type reconstruction algorithm and the ML type reconstruction algorithm compute thesame  type.  A  comprehensive  treatment  of  polymorphic  type  inference  with  existential  types  is  found
in [La"92].
5 Related Work
Hope+C
The only other work known to us that deals with Damas-Milner-style type inference for existential typesis [Per90]. However, the typing rules given there are not sufficient to guarantee the absence of runtime type

errors, even though the Hope+C compiler seems to impose sufficient restrictions. The following unsafe pro-gram, here given in ML syntax, is well-typed according to the typing rules, but rejected by the compiler:

datatype T = K of ''afun f x = let val K z = x in z end
f(K 1) = f(K true)
XML+
The possibility of making ML structures first-class by implicitly hiding their type components is discussedin [MMM91] without addressing the issue of type inference. By hiding the type components of a structure,

its type is implicitly coerced from a strong sum type to an existential type. Detailed discussions of sum typescan be found in [Mac86] [MH88].

Haskell with existential types
Existential types combine well with the systematic overloading polymorphism provided by Haskell typeclasses [WB89]; this point is further discussed in [LO91]. Briefly, we extend Haskell's data declaration in a

similar way as the ML datatype declaration above. In Haskell [HPW91], it is possible to specify what typeclass a (universally quantified) type variable belongs to. In our extension, we can do the same for existentially quantified type variables. This lets us construct heterogeneous aggregates over a given type class.
Dot notation
MacQueen [Mac86] observes that the use of existential types in connection with an elimination construct(open, abstype, or our let) is impractical in certain programming situations; often, the scope of the

elimination construct has to be made so large that some of the benefits of abstraction are lost. A formal treat-ment of the dot notation, an alternative used in actual programming languages, is found in [CL90]. An extension of ML with an analogous notation is described in [La"92].

Dynamics in ML
An extension of ML with objects that carry dynamic type information is described in [LM91]. A dynamicis a pair consisting of a value and the type of the value. Such an object is constructed from a value by applying the constructor dynamic. The object can then be dynamically coerced by pattern matching on boththe value and the runtime type. Existential types are used to match dynamic values against dynamic patterns
with incomplete type information. Dynamics are useful for typing functions such as eval. However, theydo not provide type abstraction, since they give access to the type of an object at runtime. It seems possible
to combine their system with ours, extending their existential patterns to existential types. We are currentlyinvestigating this point.

Acknowledgments
We would like to express our thanks to Ben Goldberg, Fritz Henglein, Ross Paterson, Nigel Perry, BenjaminPierce, and Phil Wadler, for helpful suggestions and stimulating discussions.

A Formal Discussion of the Extended Language
In this appendix, we describe the formal language and the type system underlying our extension of ML. Thetyping rules and auxiliary functions translate to the type reconstruction algorithm given below.

A.1 Syntax
Language syntax

Identifiers
Constructors
Expressions ::=  |  |  |  |  |

 |  |  |

In addition to the usual constructs (identifiers, applications, l-abstractions, and let expressions), we intro-duce desugared versions of the ML constructs that deal with datatypes. A data declaration defines a new
datatype; values of this type are created by applying a constructor , their tags can be inspected using anis expression, and they can be decomposed by a pattern-matching let expression. The following example
shows a desugared definition of ML's list type and the associated length function.

data  inlet length = fix length. xs.

if (is Nil xs)0

(let Cons ab = xs in + (length(snd ab)) 1)in
length(Cons(3,Cons(7,Nil())))
Type syntax

Type variables

Skolem functions
Types ::=  |  |  |  |  |  |

x
K
e x e1 e2,( ) e e' lx.e let x = e in e'

data a1...an." c in e K is K let K x = e in e'

K
a." ub.Nil unit Cons a b*+( )l l

a
k
t unit bool a t1 t2* t t'o"" k t1 ... tn, ,( ) c

Recursive types ::=  where  if
Existential types ::=  |
Type schemes ::=  |
Assumptions ::=  |

Our type syntax includes recursive types  and Skolem type constructors ; the latter are used to type identifiers bound by a pattern-matching let whose type is existentially quantified. Explicit existential typesarise only as domain types of value constructors. Assumption sets serve two purposes: they map identifiers

to type schemes and constructors to the recursive type schemes they belong to. Thus, when we write ,
we mean the  such that . Further, let  stand for sum type contexts

such as , where  and  for some .

A.2 Type Inference
Instantiation and generalization of type schemes

iff there are types  such that

iff there are types  such that

 where  are new Skolem type
constructors such that , and

The first three auxiliary functions are standard. The function  replaces each existentially quantifiedvariable in a type by a unique type constructor whose actual arguments are those free variables of the type
that are not free in the assumption set; this reflects the "maximal" knowledge we have about the type repre-sented by an existentially quantified type variable. In addition to , the set of free type variables in a type
scheme or assumption set, we use , the set of Skolem type constructors that occur in a type scheme orassumption set.

Inference rules for expressions
The first five typing rules are essentially the same as in [CDDK86].

(VAR)

(PAIR)
(APPL)

c ub.K1h1 ... Kmhm+ + Ki Kjz' i jz'
h a.h$ t
s a.s" t
a s x/ a1...an." c K/

c k

A K( )
s s a1...an." ... Kh ...+ += \Sigma  Kh[ ]

K1h1 ... Kmhm+ + Ki K= hi h= i

a1...an.t" t'>= t1 ...tn, t' t t1 a1/ ... tn an/, ,[ ]=
a1...an.t$ t'<= t1 ...tn, t' t t1 a1/ ... tn an/, ,[ ]=
gen A t,( ) FV t( ) \ FV A( )( ) .t"=

skolem A g1...gn.t$,( ) t ki a1 ...ak,( ) gi/[ ]= k1...kn

k1 ... kn, ,{ } FS A( )C, AE=
a1 ... ak, ,{ } FV g1...gn.t$( ) \ FV A( )=

skolem

FV
FS

A x( ) t>=
A |- x : t----------------------

A |- e1 : t1 A |- e2 : t2

A |- e1 e2,( ) : t1 t2*-----------------------------------------------------------------------

A |- e : t' o"" t A |- e' : t'

A |- e e' : t----------------------------------------------------------------------------

(ABS)
(LET)
The new rules DATA, CONS, TEST, and PAT are used to type datatype declarations, value constructors, isexpressions, and pattern-matching let expressions, respectively.

(DATA)
The DATA rule elaborates a declaration of a recursive datatype. It checks that the type scheme is closed andtypes the expression under the assumption set extended with assumptions about the constructors.

(CONS)
The CONS rule observes the fact that existential quantification in argument position means universal quan-tification over the whole function type; this is expressed by the second premise.

(TEST)
The TEST rule ensures that  is applied only to arguments whose type is the same as the result type of
constructor .

(PAT)
The last rule, PAT, governs the typing of pattern-matching let expressions. It requires that the expression be of the same type as the result type of the constructor . The body  is typed under the assumption set
extended with an assumption about the bound identifier . By definition of the function , the new
Skolem type constructors do not appear in ; this ensures that they do not appear in the type of any identifier
free in  other than . It is also guaranteed that the Skolem constructors do not appear in the result type .

Relation to the ML Type Inference System
Theorem 1 [Conservative extension] Let Mini-ML' be an extension of Mini-ML with recursive datatypes,but  not  with  existential  quantification.  Then,  for  any  Mini-ML'  expression ,   iff

.
Proof: By structural induction on .
Corollary 2 [Conservative extension] Our type system is a conservative extension of the Mini-ML type sys-tem  described  in  [CDDK86],  in  the  following  sense:  For  any  Mini-ML  expression ,   iff

A t' x/[ ] |- e : t
A |- lx.e : t' to""--------------------------------------------

A |- e : t A gen A t,( ) x/[ ] |- e' : t'

A |- let x = e in e' : t'------------------------------------------------------------------------------------------------------

s a1...an." ub.K1h1 ... Kmhm+ +=
FV s( ) AE= A s K1/ ... s Km/, ,[ ] |- e : t

A |- data s in e : t-----------------------------------------------------------------------------------------------------------------------

A K( ) ub.\Sigma  Kh[ ]>= h ub.\Sigma  Kh[ ] b/[ ] t<=

A |- K : t ub.\Sigma  Kh[ ]o""-----------------------------------------------------------------------------------------------------------------------

A K( ) ub.\Sigma  Kh[ ]>=
A |- is K : ub.\Sigma  Kh[ ]( ) boolo""---------------------------------------------------------------------------------------

is K
K

A |- e : ub.\Sigma  Kh[ ] FS t'( ) FS A( )I'
A gen A skolem A h ub.\Sigma  Kh[ ] b/[ ],( ),( ) x/[ ] |- e' : t'

A |- let K x = e in e' : t'------------------------------------------------------------------------------------------------------------------------------------------

e K e'

x skolem
A
e' x t'

e A |- e : t
A |-Mini-ML' e : t

e

e A |- e : t

.
Proof: Follows immediately from the previous theorem.
A.3 Type Reconstruction
The type reconstruction algorithm is a straightforward translation from the deterministic typing rules, usinga standard unification algorithm [Rob65] [MM82]. We conjecture that its complexity is the same as that of

algorithm .
Auxiliary functions
In our algorithm, we need to instantiate universally quantified types and generalize existentially quantifiedtypes. Both are handled in the same way.

 where  are fresh type variables

 where  are fresh type variables

The functions  and  are the same as in the inference rules, with the additional detail thatalways creates fresh Skolem type constructors.

Algorithm
Our type reconstruction function takes an assumption set and an expression, and it returns a substitution anda type expression. There is one case for each typing rule.

A |-Mini-ML e : t

W
inst" a1...an." t( ) t b1 a1/ ... bn an/, ,[ ]= b1 ... bn, ,
inst$ a1...an.$ t( ) t b1 a1/ ... bn an/, ,[ ]= b1 ... bn, ,

skolem gen skolem

TC A x,( ) Id inst" A x( )( ),( )=
TC A e1 e2,( ),( ) let S1 t1,( ) = TC A e, 1( )=

S2 t2,( ) = TC S1A e, 2e` o/ae o"
in S2S1 S2t1 t2*,( )

TC A ee',( ) let S t,( ) = TC A e,( )=

S' t',( ) = TC SA e',( )
b be a fresh type variable

U = mgu S't t' bo"",( )
in US'S Ub,( )

TC A lx.e,( ) let b be a fresh type variable=

S t,( ) = TC A b x/[ ] e,( )
in S Sb to"",( )

TC A let x = e in e',( ) let S t,( ) = TC A e,( )=

S' t',( ) = TC SA gen SA t,( ) x/[ ] e',( )
in S'S t',( )

Theorem 3 [Syntactic Soundness and Completeness] The type reconstruction algorithm  is sound and
complete with respect to the type inference relation .

Proof: We extend the proof given in [CDDK86] to deal with the new constructs.
A.4 Semantics
We give a standard denotational semantics. The evaluation function  maps an expression  to some
semantic value , in the context of an evaluation environment . An evaluation environment is a
partial mapping from identifiers to semantic values. Runtime type errors are represented by the special value

. Tagged values are used to capture the semantics of algebraic data types.
We distinguish between the three error situations, runtime type errors ( ), nontermination, and amismatch when an attempt is made to decompose a tagged value whose tag does not match the tag of the

destructor. Both nontermination and mismatch are expressed by .

Our type inference system is sound with respect to the evaluation function; a well-typed program never
evaluates to . The formal proof for semantic soundness is given below.It should be noted that we do not commit ourselves to a strict or non-strict evaluation function. Therefore, our treatment of existential types applies to languages with both strict and non-strict semantics. Foreither case, appropriate conditions would have to be added to the definition of the evaluation function.

TC A data s in e,( ) let a1...an." ub.K1h1 ... Kmhm+ + s= in=

if FV s( ) AE= then

TC A s K1/ ... s Km/, ,[ ] e,( )

TC A K,( ) let t= inst" A K( )( )=

ub.... Kh ...+ + t=
in Id inst$ h t b/[ ]( )( ) to"",( )

TC A is K,( ) let t= inst" A K( )( )=

in Id t boolo"",( )

TC A let K x = e in e',( ) let t^ = inst" A K( )( )=

ub.... Kh ...+ + t^=

S t,( ) = TC A e,( )
U = mgu t^ t,( )( ) S
tk skolem UA U h t^ b/[ ]( ),( )=

S' t',( ) = TC UA gen UA tk,( ) x/[ ] e',( )
in

if FS t'( ) FS S'UA( )I' U`

FS tk( ) \ FS U h t^ b/[ ]( )( )( ) FS S'UA( )C, AE=

then S'U t',( )

TC|-

E e ExpI^
v r EnvI^

wrong

wrong

^
wrong

Semantic domain

Unit value

Boolean values
Constructor tags
Semantic domain

In the latter definition of ,  stands for the coalesced sum, so that all types over  share the same .
Semantics of expressions
The semantic function for expressions,

,
is defined as follows:

Semantics of types
Following [MPS86], we identify types with weak ideals over the semantic domain . A type environment

 is a partial mapping from type variables to ideals and from Skolem type constructors to functions
between ideals. The semantic interpretation of types,

is defined as follows.

U unit{ } ^=

B false true,{ } ^=
C

V U B V Vo""( ) V V*( ) C V*( ) wrong{ } ^+ + ++ +@

V + V ^

E : Exp Env Vo"" o""

E [[x ]] r r x( )=
E [[ e1 e2,( ) ]] r E [[e 1]] r E [[e 2]] r,a' n~=

E [[e e']] r if E [[ e]] r V Vo""I^ then=

E [[e ]] r( ) E [[e' ]] r( )
else wrong

E [[l x.e ]] r lv VI^ .E [[e ]] r v x/[ ]( )=

E [[let x = e in e' ]] r E [[e' ]] r E [[e ]] r x/[ ]( )=
E [[data s in e ]] r E [[e ]] r=
E [[K ]] r lv VI^ . K v,a' n~=

E [[is K ]] r lv VI^ .if v K{ } V*I^ then true else false=

E [[let K x = e in e' ]] r E [[e' ]] (r[if E [[e ]] r K{ } V*I^ then=

snd E [[e ]] r( )
else ^ x/ ])

Vy
TEnvI^

T : TExp TEnv A' V( )o"" o""

The universal and existential quantifications range over the set  of all ideals that do not contain

. Note that the sum in the definition of recursive types is actually a union, since the constructor tagsare assumed to be distinct. It should also be noted that our interpretation does not handle ML's nonregular,

mutually recursive datatypes; it appears that the PER model described in [BM92] would provide an ade-quate interpretation.

Theorem 4 The semantic function for types is well-defined.
Proof: As in [MPS86]. We observe that  is always contractive,

since cartesian product and sum of ideals are contractive; therefore, the fixed point of such a functionexists.

Lemma 5 Let  be a type environment such that for every , . Then for every
type scheme , .

Proof: By structural induction on .
Lemma 6 [Substitution] .
Proof: Again, by structural induction on .
Definition 1 [Semantic type judgment] Let  be an assumption set,  an expression, and  a type scheme.
We define  as meaning that  and for every , ; further, we say  iff  implies ; and finally,  means that
for all  and  we have .

Theorem 7 [Semantic Soundness] If  then .
Proof: By induction on the size of the proof tree for . We need to consider each of the cases given

by the type inference rules. Applying the inductive assumption and the typing judgments from the preT [[unit ]] y U=
T [[bool ]] y B=
T [[a ]] y y a( )=
T [[t 1 t2* ]] y T [[t 1]] y T [[t 2]] y*=

T [[t t'o"" ]] y T [[t ]] y T [[t' ]] yo""=
T [[k t1 ... tn, ,( ) ]] y y k( )( ) T [[t 1]] y ... T [[t n]] y, ,( )=

T [[ub. Kihia* ]] y u lI A' V( )I^ . Ki{ } T [[h i]] y I b/[ ]( )*a*e` o/ae o"=

T [[ a .s" ]] y lI A' V( )I^ .T [[s ]] y I a/[ ]( )

I A^I^C,=

T [[ a.h$ ]] y e"u^I A^I^ lI A' V( )I^ .T [[h ]] y I a/[ ]( )=

A^ A' V( )I'
wrong

lI A' V( )I^ . Ki{ } T [[ hi]] y I a/[ ]( )*a*
y a DomyI^ wrong y a( )I"
s wrong T [[s ]] yI"

s
T [[s s' a/[ ] ]] y T [[s ]] y T [[s' ]] y a/[ ]( )=

s

A e s
|=r y, A DomA DomrI' x DomAI^ r x( ) T [[A x( ) ]] yI^

A |=r y, e : s |=r y, A E [[e ]] r T [[s ]] yI^ A |= e : s
r EnvI^ y TEnvI^ A |=r y, e : s

A |- e : t A |= e : t

A |- e : t

ceding steps in the type derivation, we use the semantics of the types of the partial results of the eval-uation. In each of the cases below, choose  and  arbitrarily, such that . We include only
the nonstandard cases. Lemma 6 will be used with frequency.

The premise in the type derivation is , where

. Since by definition, , we can
use the inductive assumption to obtain .

The last premise in the type derivation is , where . By definition of instantiation of existential types,  for some types .
First, choose an arbitrary  and a finite . Now,

.
Hence, , by closure of ideals under
limits. Consequently,

.
Hence .

Choose an arbitrary . Clearly, , whence

.

We follow the proof in [MPS86]. The first premise in the type derivation is , where

 and . Let . Then, for every

,  holds, since none of the 's are free in .

Let ; by the inductive assumption, . Consequently,

y r |=r y, A
A |- data a1...an." ub.K1h1 ... Kmhm+ + in e : t

A s K1/ ... s Km/, ,[ ] |- e : t
s a1...an." ub.K1h1 ... Kmhm+ += |=r y, A s K1/ ... s Km/, ,[ ]

E [[data a1...an." c in e ]] r E [[e ]] r= T [[t ]] yI^

A |- K : t ub.\Sigma  Kh[ ]o""

h ub.\Sigma  Kh[ ] b/[ ] t<= h g1...gn.$ t^=

t t^ tj gj/ ub.\Sigma  Kh[ ] b/,[ ]= t1 ... tn, ,
v T [[t ]] yI^ a v<=

a T [[t^ tj gj/ ub.\Sigma  Kh[ ] b/,[ ] ]] y( ) oI^

T [[t^ ub.\Sigma  Kh[ ] b/[ ] ]] y T [[t j]] y gj/[ ]( )( ) o=

T [[t^ ub.\Sigma  Kh[ ] b/[ ] ]] y Jj gj/[ ]( )( ) oJ
1 ... Jn, , A^I^E`I'

e"u^J
1 ... Jn, , A^I^ T [[t

^ ub.\Sigma  Kh[ ] b/[ ] ]] y Jj gj/[ ]( )e` o/ae o" o=

T [[h ub.\Sigma  Kh[ ] b/[ ] ]] y( ) o=
v e"u^ a a finite and a v<={ } T [[h ub.\Sigma  Kh[ ] b/[ ] ]] yI^=

K v,a' n~ K{ } T [[h ub.\Sigma  Kh[ ] b/[ ] ]] y*I^

... K{ } T [[h ub.\Sigma  Kh[ ] b/[ ] ]] y* ...+ +I'

... K{ } T [[h ]] y T [[ ub.\Sigma  Kh[ ] ]] y b/[ ]( )* ...+ +=
T [[ ub.\Sigma  Kh[ ] ]] y=
E [[K ]] r T [[t ub.\Sigma  Kh[ ]o"" ]] yI^
A |- is K : ub.\Sigma  Kh[ ]( ) boolo""

v T [[ ub.\Sigma  Kh[ ] ]] yI^ E [[is K ]] r( ) v BI^
E [[is K ]] r T [[ ub.\Sigma  Kh[ ]( ) boolo"" ]] yI^

A |- let K x = e in e' : t'

A |- e : t

t ub.\Sigma  Kh[ ]= h g1...gn.$ t^= a1 ... ak, ,{ } FV t( ) \ FV A( )=
I1 ... Ik A' V( )I^, , |=r y Ii ai/[ ], A ai A

v E [[e ]] r= v T [[t ]] y Ii ai/[ ]( )I^
v T [[t ]] y Ii ai/[ ]( )I

1 ... Ik, , A^I^C,I^

.
First, consider the case . Then, by definition, , and
we are done, since .
In the more interesting, second case, . Then

Let , , be those variables among  that are free in .
We now choose a finite  such that , thus

.

By definition of set union and intersection, there exist functions ,
such that

,
assuming that the 's are the ones generated by .
Since by definition of , none of the 's are free in ,  holds and we can extend

 and , obtaining .
We now apply the inductive assumption to the last premise,

,
and obtain

,

since . Finally,

,
by the continuity of . The latter expression is in  by the closure of ideals under limits.
n

Corollary 8 [Semantic Soundness] If , then .
Proof: We apply Lemma 5 to the previous theorem.

T [[ ub.\Sigma  Kh[ ] ]] y Ii ai/[ ]( )I
1 ... Ik, , A^I^C,=

... K{ } T [[h ]] y Ii ai/ T [[t ]] y Ii ai/[ ]( ) b/,[ ]( )I

1 ... Ik, , A^I^C,* ...+ +=

fst v( ) Kz' E [[let K x = e in e' ]] r ^=
^ T [[t' ]] yI^

fst v( ) = K

snd v( ) e"u^J

1 ... Jn, , A^I^ T [[t

^ ]] y Ii ai/ Jj gj/ T [[t ]] y Ii ai/[ ]( ) b/, ,[ ]( )I
1 ... Ik, , A^I^C,I^

a1 ... ah, , h k<= a1 ... ak, , t^ t b/[ ]

a a snd v( )<=

a T [[t^ t b/[ ] ]] y Ii ai/ Jj gj/,[ ]( )( ) oJ

1 ... Jn, , A^I^E`I1 ... Ih, , A^I^C,I^

f1 ... fn A' V( ) h A' V( )o""I^, ,

a T [[t^ t b/[ ] ]] y Ii ai/ fj I1 ... Ih, ,( ) gj/,[ ]( )( ) oI

1 ... Ih, , A^I^C,I^

T [[t^ t b/[ ] ]] y Ii ai/ fj I1 ... Ih, ,( ) gj/,[ ]( )I
1 ... Ih, , A^I^C,I'

T [[t^ kj a1 ... ah, ,( ) gj/ t b/,[ ] ]] y Ii ai/ fj kj/,[ ]( )I
1 ... Ih, , A^I^C,=

T [[ a 1...ah" .t^ kj a1 ... ah, ,( ) gj/ t b/,[ ] ]] y fj kj/[ ]( )=

T [[ gen A skolem A h t b/[ ],( ),( ) ]] y fj kj/[ ]( )=

kj skolem A h t b/[ ],( )

skolem kj A |=r y fj kj/[ ], A

A r |=r a x/[ ] y fj kj/[ ], A gen A skolem A h t b/[ ],( ),( ) x/[ ]

A gen A skolem A h t b/[ ],( ),( ) x/[ ] |- e' : t'

E [[e' ]] r a x/[ ]( ) T [[t' ]] y fj kj/[ ]( )I^ T [[t' ]] y=

FS t'( ) FS A( )I'
E [[let K x = e in e' ]] r E [[e' ]] r snd E [[e ]] r( ) x/[ ]( )=

e"u^ E [[e' ]] r a x/[ ]( ) a finite and a snd E [[e ]] r( )<={ }=

E T [[t' ]] y

A |- e : t E [[e ]] r wrongz'

References
[BM92] K. Bruce  and  J. Mitchell.  PER  models  of  subtyping,  recursive  types  and  higher-orderpolymorphism. In Proc. 18th ACM Symp. on Principles of Programming Languages, pages

316-327, January 1992.
[CDDK86] D. Clement,  J. Despeyroux,  T. Despeyroux,  and  G. Kahn.  A  simple  applicative  language:Mini-ML. In Proc. ACM Conf. Lisp and Functional Programming, pages 13-27, 1986.

[CL90] L. Cardelli  and  X. Leroy.  Abstract  types  and  the  dot  notation.  In Proc.  IFIP  WorkingConference on Programming Concepts and Methods, pages 466-491, Sea of Galilee, Israel,

April 1990.
[CW85] L. Cardelli  and  P. Wegner.  On  understanding  types,  data  abstraction  and  polymorphism.ACM Computing Surveys, 17(4):471-522, Dec. 1985.

[DM82] L. Damas  and  R. Milner.  Principal  type  schemes  for  functional  programs.  In Proc.  9thAnnual ACM Symp. on Principles of Programming Languages, pages 207-212, Jan. 1982.
[HPW91] P. Hudak, S. Peyton Jones, and P. Wadler. Report on the programming language Haskell: anon-strict, purely functional language, version 1.1. Technical Report YALEU/DCS/RR-777,

Dept. of Computer Science, Yale University, New Haven, Conn., August 1991.
[La"92] K. La"ufer. Polymorphic  Type  Inference  and  Abstract  Data  Types.  PhD  thesis,  New  YorkUniversity, Department of Computer Science, 1992. In preparation.

[LM91] X. Leroy and M. Mauny. Dynamics in ML. In Proc. Functional Programming Languagesand Computer Architecture, pages 406-426. ACM, 1991.
[LO91] K. La"ufer and M. Odersky. Type classes are signatures of abstract types. In Proc. PhoenixSeminar and Workshop on Declarative Programming, November 1991.
[Mac86] D. MacQueen.  Using  dependent  types  to  express  modular  structure.  In Proc.  13th  ACMSymp. on Principles of Programming Languages, pages 277-286. ACM, Jan. 1986.
[MH88] J. Mitchell and R. Harper. The essence of ML. In Proc. Symp. on Principles of ProgrammingLanguages. ACM, Jan. 1988.
[MM82] A. Martelli  and  U. Montanari.  An  efficient  unification  algorithm. ACM  Transactions  onProgramming Languages and Systems, 4(2):258-282, Apr. 1982.
[MMM91] J. Mitchell,  S. Meldal,  and  N. Madhav.  An  extension  of  Standard  ML  modules  withsubtyping and inheritance. In Proc. ACM Symp. on Principles of Programming Languages,

Jan. 1991.
[MP88] J. Mitchell  and  G. Plotkin.  Abstract  types  have  existential  types. ACM  Trans.  onProgramming Languages and Systems, 10(3):470-502, 1988.

[MPS86] D. MacQueen,  G. Plotkin, and  R. Sethi.  An  ideal  model for recursive  polymorphic  types.Information and Control, 71, 1986.
[MTH90] R. Milner, M. Tofte, and R. Harper. The Definition of Standard ML. MIT Press, 1990.
[Per90] N. Perry. The Implementation of Practical Functional Programming Languages. PhD thesis,Imperial College, 1990.

[Rob65] J. Robinson. A machine-oriented logic based on the resolution principle. J. Assoc. Comput.Mach., 12(1):23-41, 1965.
[WB89] P. Wadler and S. Blott. How to make ad-hoc polymorphism less ad hoc. In Proc. 16th AnnualACM Symp. on Principles of Programming Languages, pages 60-76. ACM, Jan. 1989.