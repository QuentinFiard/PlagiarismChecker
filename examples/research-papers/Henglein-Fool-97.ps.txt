

Breaking through the n3 barrier:

Faster object type inference

Fritz Henglein

\Lambda 

September 30th, 1996

Abstract
Abadi and Cardelli [AC96] have presented and investigated object
calculi that model most object-oriented features found in actual objectoriented programming languages. The calculi are innate object calculi
in that they are not based on *-calculus. They present a series of type
systems for their calculi, four of which are first-order. Palsberg [Pal95]
has shown how typability in each one of these systems can be decided in
time O(n3), where n is the size of an untyped object expression, using an
algorithm based on dynamic transitive closure. He also shows that each of
the type inference problems is hard for polynomial time under log-space
reductions.

In this paper we show how we can break through the (dynamic) transitive closure bottleneck and improve each one of the four type inference
problems from O(n

3) to the following time complexities:

no subtyping subtyping
w/o rec. types O(nff(n; n)) O(n2)
with rec. types O(n log2 n) O(n2)

The key ingredient that lets us "beat" the worst-case time complexity
induced by using general dynamic transitive closure or similar algorithmic
methods is that object subtyping is invariant: an object type is a subtype
of a "shorter" type with a subset of the field names if and only if the
common fields have equal types.

1 Introduction
This submission is self-contained in its technical contents. The algorithmic
methods are all pre-1975 and can be found in any textbook on algorithms; e.g.
[AHU74].

We shall rely on Abadi and Cardelli's book [AC96] and Palsberg [Pal95]
for a motivation of the relevance of the calculi, their typing systems and the

\Lambda Affiliation: DIKU, University of Copenhagen, Universitetsparken 1, DK-2100 Copenhagen
East, Denmark, Email: henglein@diku.dk

1

Rule Ob1 Ob1_ Ob1!: Ob1!:_
(VAL) p p p p
(OBJ) p p p p
(SEL) p p p p
(UPD) p p p p
(SUB) p p
(REFL) p p
(TRANS) p p
(OBSUB) p p
rec: type? p p

Table 1: Type system definitions
practical importance of efficient and easily implementable type inference. Even
though the presentation is for the pure calculi presented by Abadi and Cardelli
we hope that it emerges from our work that the techniques and results presented
here can be used in object type systems for real-scale programming languages,
though it remains to be seen whether the often complex semantic interactions
of object-oriented features with each other and other language features indeed
permit efficient scaling of our algorithmic techniques. In this regard we are
hopeful -- but no more than hopeful at this point -- that the techniques may
be useful for the emerging object design of ML2000.

The object calculi we shall investigate are Ob1[AC96, Section 7, p. 83],
Ob1_[AC96, Section 9, p. 114], Ob1!:[AC96, Section 8, p. 94], and Ob1!:_[AC96,
Section 9, p. 117].

Object types are described by the grammar

A; B ::= X j [li : Ai]i=1:::n j _XA0
where X ranges over an infinite set of type variables, the li in object types are
pairwise distinct, and recursive (object) types of the form _XA are only allowed
in the type systems that explicitly permit them.

The inference rules for these systems are given in Figure 1.1 Note that object
expressions are untyped; in particular, no type declarations are given for bound
expression variables. We also elide the explicit fold and unfold constructs [AC96,
Section 9] and treat recursive types as denotations for the (possibly) infinite trees
obtained from their complete unfolding. We write A = B if two types are equal
in this sense.

Type inference can be thought of as inserting explicit type declarations and
fold/unfold constructs in a given untyped object expression. Table 1 shows
which rules make up which inference system.

1For simplicity's sake we use somewhat informal notation in that we do not axiomatize
well-formedness of type environments.

2

(VAL) E; x : A; E0 ` x : A (x 62 domain E0)
(OBJ) E; xi : [li : Bi]i=1:::n ` bi : Bi (8i 2 1 : : : n)E ` [l

i = &(xi)bi]i=1:::n : [li : Bi]i=1:::n

(SEL) E ` a : [li : Bi]i=1:::nE ` a:l

j : Bj (j 2 1 : : : n)

(UPD) E ` a : [li : Bi]i=1:::n E; x : [li : Bi]i=1:::n ` b : BjE ` a:l

j ( &(x)b : [li : Bi]i=1:::n (j 2 1 : : : n)

(SUB) E ` a : A ` A ^ BE ` a : B

(REFL) ` A ^ A
(TRANS) ` A ^ A

0 ` A0 ^ A00`

A ^ A00

(OBSUB) ` [li : Bi]i21:::(n+m) ^ [li : Bi]i=1:::n

Figure 1: Object type inference rules

3

(VAL) E; x : A; E00 ` x : A0 (x 62 domain E00) A = A0
(OBJ) E; xi : A ` bi : B

0i (8i 2 1 : : : n)

E ` [li = &(xi)bi]i=1:::n : A0

8!
:

B0i ^ Bi; i 2 1 : : : n
A = [li : Bi]i=1:::n
A0 = A

9=
;

(SEL) E ` a : AE ` a:l

j : B (j 2 1 : : : n) A ^ [lj : B]

(UPD) E ` a : A E; x : A

0 ` b : B0

E ` a:lj ( &(x)b : A00 (j 2 1 : : : n)

8??!
??:

A = A0
A = A00
B0 ^ B
A ^ [lj : B]

9??=
??;

Figure 2: Normalized type inference rules
We say an object expression a is typable in type system O 2 fOb1; Ob1_; Ob1!:; Ob1!:_g
if there exists a derivation of typing judgement E ` a : A in system O for some
type environment E and type A. (Type environments are lists of pairs consisting
of an expression variable x and a type A.)

2 Type inference for Ob1!: and Ob1!:_
2.1 Normalized derivations
Every typing derivation can be normalized such that applications of (REFL)
and (TRANS) are completely eliminated, and applications of (SUB) occur only
as the last steps in object formation and method update. Let us write A ^ B if`

A ^ B is derivable using only Rule (OBSUB). We capture the completeness of
normalized derivations with respect to the general type systems by the following
proposition:

Proposition 2.1 Let Ob1!:n (without recursive types) and Ob1!:_n (with recursive types) be defined by the inference rules given in Figure Figure 2. Then:

1. E `Obonesub e : A if and only if there exists A0 such that E `Obonesubn e :

A0 and ` A0 ^ A.

2. E `Obonesubrec e : A if and only if there exists A0 such that E `Obonesubrecn

e : A0 and ` A0 ^ A.

4

Note that every inference rule in Figure 2 is linearized in the sense that every
metavariable A; A0; Bi; B0i; B0 occurs at most once in each rule. The required relation on types denoted by the metavariables is expressed by side conditions for
each rule. Since the inference rules are strongly syntax-directed (there is exactly
one applicable rule for each expression construct) every object expression determines a unique derivation skeleton, where every subexpression occurrence has
a unique type variable associated with it, plus associated constraints reflecting
the side conditions.2

Note that an object expression is typable in Ob1!:, respectively Ob1!:_, if
and only if the constraints its derivation skeleton generates are solvable; that
is, if and only if there is a substitution mapping type variables to types (without, respectively with recursive types) such that all equalities and subtyping
inequalities are satisfied. This is summarized in the following lemma:

Lemma 2.2 Given object expression a there is a set of equational and subtyping
constraints Ca such that Ca is solvable (without/with recursive types) if and only
if a is typable (in Ob1!:/Ob1!:_).

Furthermore, Ca can be computed from a in linear time.

For the time complexity in the lemma we may assume that a is given as a
syntax tree since parsing including identification of isomorphic subtrees can be
done in linear time [CP91].

2.2 Constraint closure
The basic strategy of constraint-based techniques is as follows:

1. Close the set of constraints under (some of) their logical implications.
2. If the implications include ? (inconsistency) then the constraints are unsolvable; otherwise extract a canonical solution from the closed set of
constraints.

Alternatively, the closure conditions can be thought of as rewritings on constraint systems which preserve the set of all solutions. The rewritings must be
strong enough to construct direct evidence for inconsistency (that is, "materialize" an inconsistency) whenever a set of constraints is unsolvable.

Figure 3 provides a formal system for deriving subtyping and type equality
statements for object types from a given set of constraints C. We assume the
inference rules completed with the rules for reflexivity, symmetry, transitivity
and compatibility of type equality. We use these for system Ob1!:_. For Ob1!:
we add another rule to those of Figure 3:

(CYCLE) C ` B0 ^ [li

1 : B1]; : : :; Bk1 ^ [lk : Bk]; Bk ^ [l0 : B0]

C ` ? :

2Uniqueness is up to renaming of type variables.

5

C [ fA ^ Bg ` A ^ B
C ` [li : Bi]i21:::n ^ [lj : B0j]

C ` Bj = B0j (j 2 1 : : : n)

C ` [li : Bi]i21:::n ^ [lj : B0j]

C ` ? (j 62 1 : : : n)

C ` A ^ [lj : Bj] C ` A ^ [lj : B0j]

C ` Bj = B0j

C ` [li : Bi]i=1:::n = [lj : B0j]j21:::n

C ` Bi = B0i (8i 2 1 : : : n)

C ` [li : Bi]i=1:::n = [lj : B0j]j2J

C ` ? (J 6= 1 : : : n)

Figure 3: Closure rules for type equality and inequality constraints (for Ob1!:_)

6

Lemma 2.3 1. Constraints C are unsolvable with recursive types if and only

if C ` ? (without rule (CYCLE)).

2. Constraints C are unsolvable without recursive types if and only if C ` ?

(with rule (CYCLE)).

proof It is easy to check that the inference rules are sound in the sense that,
if C ` P , then any solution of C is a solution of P , where ? has no solutions at
all. Thus, if C ` ? then C is unsolvable.

Conversely, assume that we cannot derive C ` ?. Then we can define a
solution of C as follows. For any unknown A we map A to f[l : B] : C ` A ^ [l :
B]g. The closure properties expressed in C guarantee that this is a well-defined
solution. (Note that rule (CYCLE)guarantees that the type variables can be
topologically ordered, resulting in a solution without recursive types.) 2

2.3 Closure algorithm
We now show how to compute the logical implications of a constraint set efficiently.

The algorithm operates on flow graphs. Flow graphs are term graphs together with flow edges. Nodes are labeled with either unknowns or with the
object constructor [:]. Type variables have no children whereas object constructor labeled nodes may have children that can be reached along tree edges that
are labeled by field names l1; : : :. We represent a constraint set C by a term
graph where every type occurrence in C corresponds to a unique node in the
graph. Furthermore, the subtype constraints in C are modeled by directed flow
edges connecting the corresponding nodes.3

We write src(A) for the set of object constructor labeled nodes that reach A
along flow edges; and snk (A) for the set of object constructor labeled nodes that
are reachable along flow edges from A The algorithm maintains the following
invariants:

1. For [li : Bi]i=1:::n 2 src(A) and [lj : B] 2 snk (A) we have that j 2 1 : : : n

and Bj = B.

2. For [l : B]; [l : B0] 2 snk (A) we have B = B0.

We initialize a workset of equational constraints with the equational constraints in C. (Recall that the subtyping constraints of C are already "in the
graph" in the form of flow edges.) Then we iterate the following step until the
workset is empty:

1. Extract an equational constraint A = B from the workset (delete the

constraint from the workset).

3Note that there are two kinds of edges in flow graphs: tree edges and flow edges.

7

2. If A and B denote the same node in the current graph finish this step.
3. If A and B denote distinct nodes in the current graph then compute

src(A); snk (A); src(B); snk (B).

4. For each [li : Bi]i=1:::n 2 src(A) and [lj : B0] 2 snk (B) check that j 2

1 : : : n; if not, abort with failure (the constraint system is unsolvable),
otherwise add Bj = B0 to the workset.

5. For each [li : Bi]i=1:::n 2 src(B) and [lj : B0] 2 snk (A) check that j 2

1 : : : n; if not, abort with failure (the constraint system is unsolvable),
otherwise add Bj = B0 to the workset.

6. For each [lj : B] 2 snk (A) and [lj : B0] 2 snk (B) add B = B0 to the

workset.

7. Contract A and B to a single node.

The algorithm computes all derivable logical implications of an initial constraint system. If the algorithm terminates with failure then the original constraint system has no solution; if it terminates without failure then it does have
a solution.

2.4 Algorithm analysis
Constructing the original flow graph given a set of constraints takes time linear
in the size of the constraints, measured as the number n of type occurrences in
it. Note that the number of flow edges is bounded by n. The critical part of
the computational analysis of the above-sketched algorithm is the iteration step.
Let us assume A = B is an equational constraint that is not already satisfied in
the current flow graph; that is, A and B do not denote the same node. Then
computation of src(A); snk (A); src(B); snk (B) can be done in time O(n) using
depth-first search. Also, each one of substeps 4, 5 and 6 can be performed in
time O(n) using a single array of size n. Finally, step 7 takes (almost-)constant
time using the union/find data structure with path compression and weighted
union. Every time we execute substeps 3-7 we eliminate one node from the
graph by contraction. Consequently the main loop is executed O(n) times, with
each iteration costing O(n). Since there at most O(n2) insertions of equational
constraints into the workset this gives us a total running time of O(n2).

What saves us from ending up with a worse running time is that we compute
"reach" sets and thus do transitive closure, but luckily only on sparse graphs
since we do not add a single flow edge during the algorithm. This is in contrast
to Palsberg who, instead of contracting nodes, inserts a pair of flow edges and
relies on general dynamic transitive closure as the backbone of his algorithm.

For system Ob1!: we also need to check whether the resulting graph, after
termination, has a cycle. This can be done using depth first search.

Theorem 2.4 Given object expression a of size n it can be decided in time
O(n2) whether a is typable in system Ob1!: or Ob1!:_.

8

3 Type inference for Ob1 and Ob1_ (Sketch)
The above development can be repeated for object inference without subtyping.
In this case we replace the subtyping constraints B0i ^ Bi; i 2 1 : : : n in Rule
(OBJ)by B0i = Bi and B0 ^ B in Rule (UPD)by B0 = B.

Now we can eliminate all equational constraints of the form A = B with
type variables on both sides by unioning them. This leaves us with a flow graph
where all flow paths are of length at most 1.

In the case of object inference without recursive types (that is, for system
Ob1) we maintain a set of nodes which are not children (along tree edges) of
unprocessed nodes; that is, we process nodes in topological order based on their
tree edge relation. Each such node and all its incident edges are processed once
and for all, using a single array (details omitted). Once a node is processed, all
its children are updated to reflect that they have lost a parent and thus may
themselves become candidates for processing. If at any point all nodes have
at least one unprocessed parent then we have a cycle and the type inference
problem is unsolvable without recursive types. Using union/find to maintain
equivalence classes and employing a simple amortization argument it can be
shown that this algorithm executes in time O(nff(n; n) where ff, arising from
Tarjan's analysis of the union/find data structure, is an extremely slowly growing function.

Type inference for Ob1_ seems to require different methods than Ob1 since
nodes cannot be processed in topological order. Our currently best algorithm
requires maintaining an ordered search tree for the children of each constructor
labeled node and repeated merging of the children of an object constructor
labeled node with those of another node.

Searching and merging each add a logarithmic factor per node processed,
yielding a total running time of O(n log2 n).

Theorem 3.1 Given object expression a of size n it can be decided in time
O(nff(n; n)) whether a is typable in system Ob1; and in time O(n log2 n) whether
a is typable in system Ob1_.

4 Related work
Palsberg [Pal95] has provided the first inference algorithms for the four calculi
covered in this paper. His algorithms do not exploit the invariance property of
object subtyping, however, which is critical if one wants to "break" through the
notorious n3 bottleneck of dynamic transitive closure [LP89, Yel93].

The four object inference systems are interesting in that they share the
invariance property with simple value flow analysis, which permits computation
in almost-linear time [Hen92]. Yet, there are two properties that make object
type inference more difficult than simple value flow:

1. the invariance property is not as strong as in simple value flow analysis;

in particular, from [li : Bi] ^ A; [li : B0i] ^ A we cannot conclude that

9

Bi = B0i.
2. the number of component types of an object type is not bounded by a

program-independent constant.

The bounds we have achieved testify to these problems. It remains to be seen,
however, whether it isn't possible to achieve subquadratic time for all four inference problems.

Object-oriented type inference with covariant record subtyping (or function types with contra/co-variant subtyping) is not immediately amenable to
our techniques since the best algorithmic techniques known at present require
full-blown dynamic transitive closure or similar techniques with \Theta (n3) time
complexity. (Note: A survey of literature on flow analysis/type inference, in
particular for object typing, will be added at this point.)

5 Conclusion and future work
We have shown how the invariance property of Abadi and Cardelli's object
type systems can be exploited to design quadratic or subquadratic-time type
inference algorithms. This improves the time bounds given by Palsberg for all
four calculi studied.

The normalized constraint systems can be used to give a principal typing
property for object expressions using a subtype qualified type schemes. (Not
presented here.)

Acknowledgments
This work was inspired by the lectures of Martin Abadi, Luca Cardelli and
Jens Palsberg at the ACM State of the Art Summer School on Functional and
Object-Oriented Programming in Sobotka, Poland, September 8-14, 1996.

Thanks to Luca Cardelli for helping uncover a terrible oversight in an optimistic early approach, and to Mads Tofte for his probing questions on some
aspects of the algorithms presented here.

References
[AC96] Martin Abadi and Luca Cardelli. A Theory of Objects. Monographs

in Computer Science. Springer-Verlag, 1996. ISBN 0-387-94775-2.

[AHU74] A. Aho, J. Hopcroft, and J. Ullman. The Design and Analysis of

Computer Algorithms. Addison-Wesley, 1974.

[CP91] J. Cai and R. Paige. Look ma, no hashing, and no arrays neither.

In January, editor, Proc. 18th Annual ACM Symp. on Principles of
Programming Languages (POPL), Orlando, Florida, pages 143-154,
1991.

10

[Hen92] Fritz Henglein. Simple closure analysis. DIKU Semantics Report D193, DIKU, University of Copenhagen, Universitetsparken 1, DK-2100
Copenhagen East, Denmark, March 1992.

[LP89] J. La Poutr'e. New techniques for the union-find problem. Technical

Report RUU-CS-89-19, Utrecht University, August 1989.

[Pal95] Jens Palsberg. Efficient inference of object types. Information and

Computation, 123(2):198-209, 1995.

[Yel93] Daniel Yellin. Speeding up dynamic transitive closure for bounded

degree graphs. Acta Informatica, 30:369-384, 1993. Also available as
IBM T.J. Watson Research Center Research Report.

11