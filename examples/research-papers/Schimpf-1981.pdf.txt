

Department of Computer & Information Science

Technical Reports (CIS)
University of Pennsylvania Year 1981

Construction Methods of LR Parsers

Karl Max SchimpfUniversity of Pennsylvania,

University of Pennsylvania Department of Computer and Information Science Technical Report No. MS-CIS-80-40.

This paper is posted at ScholarlyCommons@Penn.
http://repository.upenn.edu/cis reports/725

UNIVERSITY  OF PENNSYLVANIA THE MOORE  SCHOOL OF ELECTRICAL ENGINEERING 
SCHOOL  OF ENGINEERING AND  APPLIED  SCIENCE 

CONSTRUCTION METHODS  OF LR PARSERS 

Karl Max  Schimpf 

Philadelphia, Pennsylvania 

May  1981 

A thesis  presented to  the Faculty of Engineering  and  Applied Science of  the  University of  Pennsylvania  in partial 

fulfillment  of  the requirements for the degree of Master  of Science  in Engineering for graduate work  in Computer and 

Information Science. 

Aravind  ~ o s h i  - 

a b s t r a c t  
T h i s   p a p e r   p r e s e n t s   f i v e   d i f f e r e n t   LR  p a r s e r   g e n e r a t o r s  
a n d   a n   e r r o r   r e c o v e r y   m e t h o d   w h i c h   i s   d e r i v e d   d i r e c t l y   f r o m  

t h e   LR  p a r s e r .   T h e   p a r s e r s   p r e s e n t e d   i n c l u d e   t h e   o r i g i n a l  
L R ( 1 )   p a r s e r   d e f i n e d   b y   K n u t h ,   T h e   S L R ( 1 )   a n d   L ALR(1) 

p a r s e r s   d e f i n e d   b y   D e R e m e r ,   a n d   t h e   w e a k   a n d   s t r o n g  

c o m p a t i b l e   L R   p a r s e r s   p r e s e n t e d   b y   P a g e r .   A l l   f i v e   p a r s e r s  
h a v e   b e e n   i m p l e m e n t e d   b y   t h e   a u t h o r   u s i n g   t w o   p r o g r a m s .  

F u r t h e r m o r e ,   t h e   i m p l e m e n t a t i o n   o f   t h e   S L R ( 1 )   p a r s e r  

g e n e r a t o r   i n c l u d e s   a n   e r r o r   r e c o v e r y   m e t h o d   a n d   p r o d u c e s   a n  

S L R ( 1 )   p a r s e r   w i t h   e r r o r   r e c o v e r y   b u i l t   i n .  

Table of contents 
Chapter  : Introduction 
Chapter  : The  construction  of LR(1) parsing  tables 

11.1  LR(1)  grammars 

11.1.1  Derivations 
11.1.2  Languages generated  by  context free grammars 

11.2  Sentential forms and  their viable prefixes 
11.3  LR(1)  characteristic  automata 

11.4  Construction  of  LR(1)  parsers 
Chapter  : Methods  for reducing states in LR(1)  parsers 

11.1  SLR(1)  parsers 

11.2  LALR(1)  parsers 

11.3  Pager's  Weak  compatibility 
11.4  Pager's  Strong  compatibility 
Chapter  : An  error  recovery method  for LR  parsers 

Chapter 1 : Implementation 

V.l  Representation  of  the parsing  tables 
V.2  SLR(1)  implementation 

V.2.1  Input grammar 

V.2.2  Running  the SLR(1)  parser  constructor 
V.2.3  Interpretation of  the output file 

V.2.4  Conflict  resolution 
V.2.5  Size restrictions 

iii 

V . 3   LR(l),  LALR(l),  w e a k   a n d   s t r o n g   c o m p a t i b l e   9 2  p a r s e r   g e n e r a t o r s  

V-3.1  I n p u t   g r a m m a r   9 2  

V.3.2  R u n n i n g   t h e  p r o g r a m   96 

A p p e n d i x  A  : S a m p l e  P A S C A L  s k e l e t o n  f o r  u s e   of  t h e  S L R ( 1 )   p a r s i n g   t a b l e s   103 

A p p e n d i x  g  : S a m p l e  P A S C A L   s k e l e t o n  f o r  u s e  of  t h e  LR(l),  LALR(l),  W e a k   a n d   S t r o n g  

c o m p a t i b i l i t y   p a r s e r   g e n e r a t o r s  
R e f e r e n c e s  

C h a p t e r   I 
I n t r o d u c t i o n  

I t   i s   a   w e l l   known  f a c t   t h a t - o f   a l l   t h e   d e t e r m i n i s t i c  
s t r i n g   p a r s e r s ,   t h e   c l a s s   o f   LR  p a r s e r s   r e c o g n i z e   t h e  
l a r g e s t   c l a s s   o f   c o n t e x t   f r e e   l a n g u a g e s   EKnu651.  LR  p a r s e r s  
a r e   q u i t e   p o w e r f u l   a n d   a r e   a b l e   t o   r e c o g n i z e   v i r t u a l l y   a l l  
p r o g r a m m i n g   l a n g u a g e s   i n   e x i s t a n c e   t o d a y .   T h e s e   p a r s e r s  
w e r e   f i r s t   i n t r o d u c e d   b y   K n u t h   [ K n u 6 5 ]   w i t h   h i s   o r i g i n a l  
v e r s i o n   known  a s   a n   L R ( 1 )   p a r s e r .   U n f o r t u n a t e l y ,   h i s   m e t h o d  

r e q u i r e s   e x t e n s i v e   r e s o u r c e s   a n d   h e n c e   i s   i m p r a c t i c a l   t o   u s e  

f o r   p a r s i n g   a n y   p r o g r a m m i n g   l a n g u a g e .  

S e v e r a l   a l t e r n a t i v e   p a r s i n g   m e t h o d s   h a v e   s i n c e   b e e n  
p r e s e n t e d   w h i c h   r e d u c e   t h e   r e s o u r c e   r e q u i r e m e n t s   t h u s  
p r o d u c i n g   m o r e   p r a c t i c a l   L R   p a r s e r s .   Some  o f   t h e s e   p a r s e r s  

a c c o m p l i s h   t h i s   r e s u l t   b y   r e d u c i n g   t h e   c l a s s   o f   l a n g u a g e s  
a c c e p t e d   b y   t h e   p a r s e r s .   T h e   r e s u l t   i s   a   r e d u c t i o n   i n   t h e  

n u m b e r   o f   p a r s e   s t a t e s   b u i l t   a n d   h e n c e   a n   o v e r a l l   r e d u c t i o n  

i n   t h e   r e s o u r c e   r e q u i r e m e n t s .   T h e   m o s t   common  f o r m s   o f   t h i s  

t y p e   o f   LR  p a r s e r   a r e   t h e   S L R ( 1 )   a n d   LALR(1)  p a r s e r s  
p r e s e n t e d   b y   D e R e m e r   [ D e R 6 9 ] .  

A n o t h e r   f o r m   o f   r e s o u r c e   r e d u c t i o n   u s e d   b y   LR  p a r s e r s  
i s   a  m e t h o d   o f   p e r f o r m i n g   s t a t e   m i n i m i z a t i o n   o n   t h e   L R ( 1 )  
p a r s e r .   Two  o f   t h e s e   s t a t e   m i n i m i z a t i o n   m e t h o d s   h a v e   b e e n  

p r o p o s e d   b y   P a g e r   [ P a g 7 7 a ,   P a g 7 7 b l   c a l l e d   w e a k   a n d   s t r o n g  

c o m p a t i b l e   LR  p a r s e r s .   I n   t h e s e   p a r s e r s ,   h e   r e s t i c t s   t h e  
s t a t e   r e d u c t i o n s   t o   m a i n t a i n   t h e   p o w e r   o f   t h e   L R ( 1 )   p a r s e r  
a n d   h e n c e   t h e   r e s u l t a n t   p a r s e r   r e c o g n i z e s   t h e   same  c l a s s   o f  

l a n g u a g e s   a s   t h e   o r i g i n a l   L R ( 1 )   p a r s e r .  

T h i s   p a p e r   p r e s e n t s   f i v e   d i f f e r e n t   LR  p a r s e r   g e n e r a t o r s  
a n d   a n   e r r o r   r e c o v e r y   m e t h o d   w h i c h   i s   d e r i v e d   d i r e c t l y   f r o m  

t h e   LR  p a r s e r .   T h e   p a r s e r s   p r e s e n t e d   i n c l u d e   t h e   o r i g i n a l  
L R ( 1 )   p a r s e r   d e f i n e d   b y   K n u t h   [ K n u 6 5 ] ,   t h e   S L R ( 1 )   a n d  
LALR(1)  p a r s e r s   d e f i n e d   b y   DeRemer  [DeR69] , a n d   t h e   w e a k   a n d  

s t r o n g   c o m p a t i b l e   LR  p a r s e r s   p r e s e n t e d   b y   P a g e r   [ P a g 7 7 a ] .  
A l l   f i v e   p a r s e r s   h a v e   b e e n   i m p l e m e n t e d   b y   t h e   a u t h o r   u s i n g  

t w o   p r o g r a m s .   F u r t h e r m o r e ,   t h e   i m p l e m e n t a t i o n   o f   t h e   S L R ( 1 )  
p a r s e r   g e n e r a t o r   i n c l u d e s   t h e   i m p l e m e n t a t i o n   o f   a n   e r r o r  

r e c o v e r y   m e t h o d   a n d   p r o d u c e s   a n   S L R ( 1 )   p a r s e r   w i t h   e r r o r  

r e c o v e r y   b u i l t   i n .  

T h e   m e t h o d   o f   c o n s t r u c t i o n   o f   t h e   w e a k   a n d   s t r o n g  
c o m p a t i b l e   LR  p a r s e r s ,   p r e s e n t e d   b y   P a g e r   [ P a g 7 7 a ]  , 
u n f o r t u n a t e l y   o n l y   p r o v i d e s   a   p a r t i a l   e x p l a n a t i o n   o f   t h e  

a l g o r i t h m s   w h i c h   b u i l d   t h e s e   p a r s e r s .   T h e s e   a l g o r i t h m s   a l s o  

c o n t a i n   m i n o r   i n c o n s i s t a n c i e s   a n d   o m i s s i o n s   w h i c h   t e n d   t o  
o b s c u r e   t h e   b a s i c   n a t u r e   o f   t h e   a l g o r i t h m s .   T h i s   p a p e r  

p r e s e n t s   P a g e r ' s   a l g o r i t h m s   i n   a   m o d i f i e d   n o t a t i o n   w h i c h  
s i m p l i f i e s   t h e   c o m p r e h e n s i o n   o f   t h e   c o d e .   I t   a l s o   p r o v i d e s  
a   m o r e   c o m p l e t e   e x p l a n a t i o n   o f   t h e   a l g o r i t h m s ,   a n d   i n c l u d e s  
a   f e w   m i n o r   a l g o r i t h m s   o m i t t e d   b y   P a g e r .  

T h e   p r o b l e m   w i t h   LR  p a r s e r s ,   when  u s e d   i n   a   c o m p i l e r ,  
i s   t h a t   t h e y   a r e   d e s i g n e d   a s   a   s y n t a c t i c   m e t h o d   w h i c h   o n l y  

d e c i d e s   i f   t h e   g i v e n   i n p u t   s t r i n g   b e l o n g s   t o   a   l a n g u a g e   i n  

t h e   c l a s s   a c c e p t e d   b y   t h e   LR  p a r s e r .   H e n c e ,   o n c e   t h e   f i r s t  
i l l e g a l   i n p u t   s y m b o l   i s   f o u n d ,   t h e   p a r s e r   s t o p s   r e p o r t i n g  

f a i l u r e .   H o w e v e r ,   when  a   c o m p i l e r   p a r s e s   a   p r o g r a m ,   i t   i s  
a d v a n t a g e o u s   t o   h a v e   t h e   c o m p i l e r   r e p o r t   a s   many  a d d i t i o n a l  

e r r o r s   a s   p o s s i b l e .  

I n   o r d e r   t o   i m p r o v e   t h e   LR  p a r s e r ' s   c a p a b i l i t i e s   f o r  
u s e   i n   a   c o m p i l e r ,   t h i s   p a p e r   a l s o   p r e s e n t s   a   p u r e l y  

s y n t a c t i c   e r r o r   r e c o v e r y   s c h e m e   t o   r e c o g n i z e   a d d i t i o n a l  
e r r o r s .   F u r t h e r m o r e ,   t h e   m e t h o d   h a s   b e e n   d e s i g n e d   s o   t h a t  

i t   c a n   b e   d i r e c t l y   i n c o r p o r a t e d   i n t o   t h e   LR  p a r s e r .   H e n c e ,  
n o   a d d i t i o n a l   r o u t i n e s   a r e   n e c e s s a r y   i n   o r d e r   t o   p e r f o r m  

e r r o r   r e c o v e r y   a n d   p a r s e   t h e   r e s t   o f   t h e   i n p u t .  

T h e   m e t h o d   u s e d   i n   t h i s   p a p e r   t o   h a n d l e   e r r o r   r e c o v e r y  
i s   b a s e d   o n   t h e   m e t h o d   u s e d   b y   P e n n e l l o   a n d   D e R e m e r   [ P & D 7 9 ] ,  
w h i c h   h a s   a   s e p a r a t e   e r r o r   r e c o v e r y   r o u t i n e   t h a t   i n c l u d e s  

e r r o r   c o r r e c t i o n .   Th e   c o n t r o l   s t r a t e g y   u s e d   i s   t o   s e a r c h  

t h e   r e m a i n d e r   of  t h e   i n p u t ,   s t a r t i n g   f r o m   t h e   i l l e g a l  
s y m b o l ,   a n d   v e r i f y   t h a t   i t   o n l y   c o n s i s t s   o f   " v i a b l e  

f r a g m e n t s "   ( s u b s t r i n g s   d e r i v a b l e   f r o m   i t s   g r a m m a r ) .   T h e  
e r r o r   r e c o v e r y   m e t h o d   p r e s e n t e d   i n   t h i s   p a p e r   h a s   b e e n  

i m p l e m e n t e d   u s i n g   t h e   S L R ( 1 )   p a r s e r   a s   i t s   b a s i s .   H o w e v e r ,  

t h e   m e t h o d   i s   g e n e r a l   e n o u g h   t h a t   t h e   s a m e   m e t h o d   c o u l d  
e a s i l y   b e   a p p l i e d   t o   a n y   o f   t h e   o t h e r   LR  p a r s e r s   p r e s e n t e d  

i n   t h i s   p a p e r .  

C h a p t e r   two  s t a r t s   b y   s e t t i n g   up  p r e l i m i n a r y   n o t a t i o n  
f o r   c o n t e x t   f r e e   l a n g u a g e s   a n d   d e r i v a t i o n s .   T h i s   n o t a t i o n  
i s   u s e d   t o   d e s c r i b e   t h e   b a s i c   s t r a t e g y   u s e d   by  L R   p a r s e r s .  
T h e   l a s t   s e c t i o n s   o f   t h e   c h a p t e r   c o v e r   t h e   a c t u a l  

c o n s t r u c t i o n   m e t h o d s   w h i c h   w i l l   y i e l d   t h e   L R ( 1 )   p a r s e r   a s  

i t s   r e s u l t .  

C h a p t e r   t h r e e   d e s c r i b e s   how  e a c h   o f   t h e   o t h e r   f o u r  
i m p l e m e n t e d   p a r s e r   c o n s t r u c t o r s   a r e   b u i l t .   Th e   S L R ( 1 )   a n d  
LALR(1)  c o n s t r u c t i o n   m e t h o d s   a r e   p r e s e n t e d   u s i n g   t h e   L R ( 0 )  

c h a r a c t e r i s t i c   a u t o m a t o n   a s   t h e i r   b a s i s   f o r   c o n s t r u c t i o n .  
P a g e r ' s   n o t i o n   o f   c o m p a t i b i l i t y ,   t h e   d e f i n i t i o n s   o f   b o t h  
w e a k   a n d   s t r o n g   c o m p a t i b i l i t y ,   a n d   t h e   a l g o r i t h m s   u s e d   i n  

c o n j u n c t i o n   w i t h   t h e   c o n s t r u c t i o n   o f   t h e s e   two  p a r s e r s   a r e  

a l s o   d e s c r i b e d .  

C h a p t e r   f o u r   d i s c u s s e s   t h e   e r r o r   r e c o v e r y   m e t h o d   a n d   a n  
a l g o r i t h m   w h i c h   t a k e s   i n   a n   L R  p a r s e r   a n d   p r o d u c e s   a n   L R  
p a r s e r   w i t h   e r r o r   r e c o v e r y .   I t   a l s o   e x p l a i n s   how  a n   L R  

p a r s e r   i s   u s e d   t o   p a r s e   a n   i n p u t   s t r i n g   a n d   d e c i d e   i f   t h e  

s t r i n g   i s   d e r i v a b l e   f r o m   t h e   g r a m m a r   u s e d   t o   g e n e r a t e   t h e   L R  
p a r s e r .  

C h a p t e r   f i v e   c o n c l u d e s   t h e   p a p e r   b y   d i s c u s s i n g   b r i e f l y  
t h e   two  p r o g r a m s   u s e d   f o r   t h e   i m p l e m e n t a t i o n .   One  p r o g r a m  
c o n s t r u c t s   a n   SLR(1)  p a r s e r   w i t h   e r r o r   r e c o v e r y   b u i l t   i n .  
T h e   o t h e r   p r o g r a m ,   u s i n g   o u r   m o d i f i c a t i o n   o f   P a g e r ' s   c o n c e p t  

o f   c o m p a t i b i l i t y ,   c a n   b u i l d   e i t h e r   a n   LR(l),  LALR(l),  w e a k l y  
o r   s t r o n g l y   c o m p a t i b l e   L R  p a r s e r .  

Chapter 
The construction of the LR(1)  parsing tables - 

This chapter describes how  LR(1)  parsing  tables  are 
created.  In  order  to  do this, let me  start out by  setting 
up  some preliminary notation. 

11.1  LR(1)  Grammars - 

A  Context-Free  Grammar  (denoted CFG)  G  is a 
quadruple G =  (  N  , T  , P  , S  )  where 

T is a  finite alphabet  of  terminal symbols; 

N  is a finite alphabet of  nonterminal symbols; 

( N   U T)  is the finite set of grammar  symbols; 
S  is  a nonterminal symbol in N ,  called  the 

start symbol;  and 
P is a finite set of  pairs  ( A , g ) ,   called  productions, 

* such  that A 6 N and 2  6 (N  U T) 
A  production  (A,g)  will be denoted  in the form A ->  g.  Also 

there  is a special start production  S ->  S'  where  S'  6 N and 
S  does not  occur  in any  other production  in  P.  There  is 
also  a  special  symbol $  6 T ,  which  denotes the end  of  the 

string being  parsed, and  does not appear  in any production. 

For  notational convenience, upper  case letters will  be 
used  to  denote  nonterminal symbols, lower  case letters to 

denote  terminal symbols, underlined  upper  case  letters  to 
denote grammar  symbols, and  underlined  lower  case letters to * 

denote  strings of  grammar symbols  (  strings  in  (N  U T)  ) .  
The symbol = will be  reserved  to  denote  the empty  string. 

11.1.1  Derivations 

Given a CFG  G =  ( N  , T  , P  , S  ) ,   let  the  relation *  * 
=>  :  (N U  T)  x  (N  U T)  be defined by  the set of  pairs * 

{  (gBc,&)  I  B  6  N;   a,b,c (N U  T)  ; 

and  B ->  b in P )   * 
In other  words,  given  any  string  in  (N  U  T)  of  the  form 
pBc,  with  B  a  nonterminal  symbol  in  N  and  given  the 

production  B  ->  b in P, we say  that  the string  g B c   derives 

the  string & in a one step derivation  using  B  ->  b.  This * 
will  be  denoted  as p B c  =>  &.  Also,  let f >   and  =>  denote 

the  transitive  and  transitive  reflexive  closures  of  => 

r e s p e c t i v e l y .  

From  t h e   a b o v e   r e l a t i o n ,   w e   c a n   d e f i n e   a n o t h e r   r e l a t i o n  
w h i c h   i m p l i e s   a n   o r d e r i n g   of  t h e   r e w r i t e   s t e p s .   L e t   t h i s  *  * 

new  r e l a t i o n   = > R   :  (N  U  T)  x  (N  U  T)  b e   d e f i n e d   a s   t h e   s e t  * 

{aBc =>  a b c   I  aBc =>  & a n d   2 6  T   ) R -  
I n   o t h e r   w o r d s ,   =>  i s   t h e   o n e   s t e p   d e r i v a t i o n ,   when  t h e  R 
d e r i v a t i o n   i s   a p p l i e d   t o   t h e   r i g h t m o s t   n o n t e r m i n a l   o c c u r r i n g  * 

i n   t h e   s t r i n g  aBr.  L e t   f > R   a n d   =>  d e n o t e s   t h e   t r a n s i t i v e  R 
a n d   t r a n s i t i v e   r e f l e x i v e   c l o s u r e s   o f   = > R ,   r e s p e c t i v e l y .  

1 1 . 1 . 2   L a n g u a g e   g e n e r a t e d   by 2  c o n t e x t - f r e e   g r a m m a r  

G i v e n   a   CFG  G  =  (  N  , T   , P  , S  ) ,   t h e   l a n g u a g e   L ( G )  
g e n e r a t e d   b y   G  i s   t h e   s e t   o f  s t r i n g s  *  * 

L ( G )   = { a  1  S = > & , " 6 T   } 

N o t e :   T h e   o r d e r   i n   w h i c h   =>  i s   a p p l i e d   h a s   n o   e f f e c t   o n   t h e  - 

r e s u l t i n g   t e r m i n a l   s t r i n g   p r o d u c e d .   B e n c e   t h e   l a n g u a g e  
L ( G ) ,   g e n e r a t e d   by  G ,   c o u l d   b e   a l t e r n a t i v e l y   b e   d e f i n e d   a s  

t h e   s e t  

U s i n g   t h e   a b o v e   d e f i n i t i o n s ,   a n   L R ( 1 )   g r a m m a r   c a n   b e  
l o o s e l y   d e f i n e d   a s   f o l l o w s :  

An LR(1)  grammar  is a CFG  G, such  that  each  string 
a 6 L(G)  (derived  via  a rightmost derivation)  can be - 
parsed  deterministically  in a single scan from left  to 

right, having  the ability  to  look ahead  one symbol from 

the point  of  scanning. 

11.2  Sentential forms and their viable prefixes - 

An LR(1)  parser, when scanning  the input  (of  a  string 
to  be  parsed),  is  essentially  looking for a match with  one 
or more  strings  that  can be  derived  from  the  CFG's  start 
symbol.  More  formally,  the  LR(1)  parser  is  trying  to 

recognize a sentential form which  is an element  in  the set *  * 

{  a I  S  = > g  5 and 5 6 (N  U  T)  ) 

In recognizing a  sentential form, the LR(1)  parser  is 
really  interested  in knowing whether  it has scanned enough 
of  the input  string such that a reduction  can be  performed, 

that  is,  when  the  sentential  form is  the string 2 = *  * 
where a,b 6  (N  U  T)  ;  - c 6 T  ;  and  B  ->  - b  6 P.  Knowing 

this  information,  a reduction of b to B  can be made  to get 

the  rightmost  derivation string that 2 came from.  This  is 
known  as  finding the handle.  The handle  is defined  as  the * 
pair  ( l & j , B   ->  b) such that  S =>  abc.  The  denotes R  - 

the  length  of  the handle, which  states the position where 

the  string b can be  reduced to  B  using  B  ->  b.  The  string 

ab  is  called  the  viable  prefix or  characteristic string - 

[A&U77]. 

Using  the above  definitions,  it  is  fairly  easy  to 
characterize what  an LR(1)  parser  does.  It  scans the input, 

from left  to  right,  looking  for  a  viable  prefix.  Once 
finding  it,  the  string  is reduced  with  the corresponding 
production  of  the viable prefix.  Using  the  reduced  string 

derived  from  the  viable  prefix  concatenated  with  the 
unscanned  input,  the  parser  repeats  the  above  process 

looking  for  another  viable  prefix.  This continues until 
either  the  input has been reduced  to  the  start  symbol,  or 

failure occurs by  not  finding any  legal viable prefixes. 

11.3  LR(1)  Characteristic  Automaton - 

It  is fundemental result that viable  prefixes  derived 
from  CFG's  are  regular.  Therefore a deterministic finite 
automaton, called  the characteristic  automaton  for  a  CFG, 
can  be  built  to  recognize  the set of  legal viable prefixes. 
Furthermore, once  the  characteristic  automaton  has  been 
built,  the LR(1)  parser  can be directly derived  from it. 

Let a marked  production  be  of  the  form  A  ->  a . b 
where A  ->  ab is a production  in P, and  "." is assumed  to be 

a symbol not  in the set of  grammar  symbols  (N  U T).  These 

m a r k e d   p r o d u c t i o n s   w i l l   b e   u s e d   t o   d e n o t e   "how  much"  o f   t h e  

p r o d u c t i o n ' s   r i g h t   h a n d   s i d e   h a s   b e e n   r e c o g n i z e d   i n   t h e  

s t r i n g   b e i n g   s c a n n e d .   H e n c e   t h e   m a r k e d   p r o d u c t i o n  
A  ->  2  . b r e p r e s e n t s   t h e   f a c t   t h a t   t h e   LR(1)  p a r s e r   h a s  

s c a n n e d   t h e   s t r i n g   w h e r e   2 i s   s o m e   s t r i n g   t h a t   o c c u r r e d  
b e f o r e   t h e   s t r i n g  2 i n   t h e   i n p u t .  

E x p a n d i n g   t h i s   t o   i n c l u d e   a   s e t   o f   l o o k - a h e a d   s y m b o l s ,  
l e t   a n   i t e m   b e   d e f i n e d   a s   t h e   p a i r   [ A   ->  2 . b , L A ]  w h e r e  
A  ->  2  . b i s   a   m a r k e d   p r o d u c t i o n ,   a n d   L A   i s   a   s u b s e t   o f   T 

d e n o t i n g   t h e   s e t   o f   a l l   t e r m i n a l   s y m b o l s   w h i c h   c a n   f o l l o w  

t h e   p r o d u c t i o n   a n d   i s   c a l l e d   t h e   set of  l o o k a h e a d   s y m b o l s .  
I t e m s ,   e s s e n t i a l l y ,   d e s c r i b e   two   t h i n g s :  

i )  What  p o r t i o n   o f  a   p r o d u c t i o n ' s   r i g h t   h a n d   s i d e   c a n  

o c c u r   a t   t h e   e n d   o f   t h e   s e t   o f   v i a b l e   p r e f i x e s   b e i n g  
d e s c r i b e d  

i i )   What  p o s s i b l e   s y m b o l s   c a n   i m m e d i a t e l y   f o l l o w   t h e  
p r o d u c t i o n ' s   r i g h t   h a n d   s i d e   ( a n d   h e n c e   w h a t   s y m b o l s  

c a n   f o l l o w   t h e   v i a b l e   p r e f i x   w i t h   t h e   g i v e n  
p r o d u c t i o n ) .  

E a c h   s t a t e   o f  t h e   c h a r a c t e r i s t i c   a u t o m a t o n   i s   t h e   s e t  
o f   a l l   i t e m s   w i t h   t h e   s a m e   v i a b l e   p r e f i x .   When  b u i l d i n g   a 
s t a t e ,   t h e r e   m u s t   b e   a   way  t o   i n s u r e   t h a t   a l l   i t e m s ,   f o r   a  

g i v e n   s t a t e ,   a r e   i n c l u d e d .   F o r   e x a m p l e ,   i f   t h e r e   i s   a n   i t e m  

i n   t h e   s t a t e   w i t h   t h e   m a r k e d   p r o d u c t i o n   A  ->  5 . Bb  a n d  
B  ->  i s   i n   P ,   t h e n   t h e r e   m u s t   b e   a n   i t e m   w i t h   t h e   m a r k e d  

p r o d u c t i o n   B  ->  . - c   f o r   t h a t   s t a t e .   Th e   v i a b l e   p r e f i x ,  

f o r m e d   w i t h   t h e   new  m a r k e d   p r o d u c t i o n ,   w i l l   h a v e   t h e   s a m e  
p r e f i x   a s   t h e   o r i g i n a l   i t e m .   Th e   p r o c e s s   o f  i n c l u d i n g   a l l  

s u c h   i t e m s   i s   c a l l e d   c l o s i n g   t h e   s t a t e .   R o w e v e r ,   i n   o r d e r  

t o   c l o s e   a   s t a t e ,   i t   i s   a l s o   n e c e s s a r y   t o   d e s c r i b e   how  t o  
p r o p a g a t e   l o o k a h e a d s   t o   t h e   a d d e d   i t e m s .   To  d o   t h i s ,   d e f i n e  

t h e   f u n c t i o n   f i r s t ( & )   a s   f o l l o w s :  * 

f i r s t ( = )   =  (  a  1 5  =>  a s ,   a   6  T) 

U s i n g   t h e   a b o v e   d e f i n i t i o n ,   t h e   c l o s u r e   of  a   s e t   o f  
i t e m s   I  ( d e n o t e d   a s   c l o s u r e ( 1 ) )   c a n   b e   c o n s t r u c t e d   u s i n g   t h e  

r u l e s  : 

i )  E v e r y   i t e m   i n   I  i s   a l s o   i n   c l o s u r e ( 1 )  
i i )  I f   t h e   i t e m   [ A   ->  2  . Bb  , L A ]   i s   i n   c l o s u r e ( I ) ,  

a n d   B  ->  i n   P ,   a   6  LA 

t h e n   t h e   i t e m   [ B  ->  . c,  f i r s t ( b a ) ]   i s   i n  
c l o s u r e  ( I ) .  

e x a m p l e   2.1  L e t   t h e   C F G   G  h a v e   t h e   s e t   o f   p r o d u c t i o n s :  

w h e r e   S  ->  A  i s   t h e   s t a r t   p r o d u c t i o n .   T h e n   t h e   c l o s u r e  

o f   t h e   i t e m   s e t   { [ S   - >   . A  , { $ ) I )   i s   t h e   s e t  

The characterisitc  automaton G  is built  from the set of 
states  constructed above with  the transitions being  grammar 

symbols.  The path  to  a given state will  then spell a  legal 
prefix  for some sentential form. 

The algorithm  (shown  below)  starts  by  setting  the 
initial  state  to  the closure of  the start production,  then 

taking  each  state just  built,  determines  the  transitions 
from the  state as follows: 

i)  for each grammar symbol X in  (N  U  T)  set.  the  item 

[A ->  2  .  , LA ]  is  in the state, there is a unique 
transition,  labeled X ,  to  the state containing  the item 

[A ->  &  . b  , LA1  obtained by  shifting  the dot  across 
the grammar  symbol 5. 

ii)  if  [A ->  2 . , L A ]   is  in  the  state,  then  no 

transition  should be produced  for that  item. 

Algorithm for constructing the characteristic  automaton 

input:  a CFG  G =  (  N  , T  , P  , S  ) 
output:  a set C, of  states, and  the function 

GOT0  :  (set of  items) x  (N U T)  ->(set  of  items),  which 

defines the characteristic  automaton. 

Method:  The two  procedures  below,  initiated  by  calling 

ITEMS ( G )  ; 

procedure ITEMS(G1; 

begin 

C  :=  closure([S  ->  . S',($)I); 

{where  " $ "   is a unique symbol in T which  denotes 

the end  of  the string  to parse) 
repeat 

for each  set of  items I  in  C,  and  each  grammar - 
symbol  X  such that J  =  GOTO(1,X)  is not  empty  and 

do  add  J  to C; - 
until no more sets of  items can be added  to  C 

f u n c t i o n   GOTO(1,X); 

b e p i n  

l e t   J  b e   t h e   s e t   of  i t e m s  - 

[ A   ->  aX  . - b   5  LA]  s u c h   t h a t  
[ A  ->  2  . =,LA]  i s   i n   I; 
r e t u r n   c l o s u r e ( J )  ; 
e n d  -9 

L e t   t h e   c o r e   o f   a   s t a t e   b e   t h e   s e t   o f  i t e m s   i n   e i t h e r  
o f   t h e   t w o   f o l l o w i n g   f o r m s :  

i )   [ S   - >   S'  , { $ ) I  

i i )   [A  ->  b .  c  , LA]  w h e r e   b #  2 

I t   c a n   b e   s h o w n   t h a t   by  c l o s i n g   t h e   c o r e   o f   a   s t a t e ,  
t h e   o r i g o n a l   s t a t e   c a n   b e   r e t r i e v e d .   H e n c e ,   a ll  e x a m p l e s   i n  

t h i s   p a p e r   w i l l   only  s h o w   t h e   c o r e   of  e a c h   s t a t e .  

e x a m p l e  2.2  C o n s t r u c t i o n   of a c h a r a c t e r i s t i c   a u t o m a t o n  
L e t   t h e  C F G   G  b e   d e f i n e d   by  t h e  s a m e  set  of  p r o d u c t i o n s  

a s   i n   e x a m p l e   2.1.  T h e n ,   t h e  LR(1)  c h a r a c t e r i s t i c  

a u t o m a t o n  of  t h e  g r a m m a r   G  is  a s   follows: 

w h e r e   t he   t r a n s i t i o n   ar s  a r e   de fi ne d  by  G O T 0  

11.4  Construction of LR(1)  Parsers 

Using  the characteristic automaton,  the  LR(1)  parser 
can  be  directly generated.  Let an LR(1)  parser be defined 
as a quintuple M  =  (  K  , action  , goto  , G  , start  )  where 

K  is  a  finite  set  of  parser  states; 
action  : K x  T - >  {shift  j I  j 6  K) 

U  {reduce  p  1  p 6 P)  U  {error) 
defines the parsing  action table; 
soto  : K  x  N  ->  K U  {error)  defines  the 

parsinq goto table; 
G  is a CFG  such  that L(G)  is  the class of 

languages to  recognize; 
and  start  is  the initial state. 

The set of  parser  states K  contains  a  special  state 
accept  which  is  the  state  H,  such  that 

action(H,$)  =  reduce  S  - >   S'.  Also,  the  action  and  goto 
parsing  tables are enough  to define an LR(1)  parser. 

Using  this  definition,  an  LR(1)  parser  can  be 
constructed  using  the following algorithm  [A&U77,Gal791: 

Algorithm for constructing LR(1)  parsing tables 

input:  The characteristic  automaton CG =  (C,GOTO) 

for a CFG  G; 

output:  a  parsing  table  (possibly  with  conflicts  if  the 
grammar G  is not LR(1)) 

method:  Let  C =  {11,12,  ... ,I,)  be  a set of  sets of  items 

from  the  characteristic  automaton  CG.  The states of  the 
parser  will  be  labelled  2  n  where  state  i 

corresponds  to  the set of  items I i  State  1  is the  initial 

state.  The parsing  actions  are: 

i)  If  [ A - > & .   a b ,  LA]  61i  where  a 6 T 
GOTO(Ii,a)  =Ij;  then action(i,a)  -  shift j 

and 

ii) If  [A - >  2  . ,LA]  in Ii,  then for each a 6 LA,  set 
action(i,a)  =  reduce  A  -> 

iii) All  entries of  action not  defined  by  the  above 

rules are set to  error. 

The pot0 transition for state i is constructed  using  the two 

rules : 

i)  if GOTO(IiyA)  =  =j ' where A  is a  nonterminal,  then 
goto(i,A)  =  j 

ii) All  other  entries of goto, not defined by  the first 
rule, are set to  error 

example  Let  the LR(1)  characteristic  automaton  be 
defined  as in example 2.2.  Using  the above algorithm, 

the  two parsing  tables produced  are: 

a c t i o n  
a  b  $ +---------------+---------------+---------------  + 
1  I  s h i f t   3  I  er ror   I  reduce  A->=  I +---------------+---------------+---------------+ 
2  1  e rr or  I  er ror   I  reduce  S->A  I +---------------+---------------+---------------+ 

3  1  s h i f t   4  I  reduce  A->=  (  e r r o r   I 
4  1  s h i f t   4  er ror  
5  1  er ro r  1  s h i f t   7  1  er ror  +---------------+---------------+---------------  I + 

6  1  er ro r  1  s h i f t   8  I  e r r o r   I +---------------+---------------+---------------+ 

7  1  er ro r  1  er ro r  I  reduce  A->aAb  I +---------------+---------------+---------------  + 
8  1  e rr or  1  reduce  A->aAb  I  e r r o r   1 

S  A +---------------+---------------  + 
1  I  error  I  2 +---------------+---------------  I + 
2  1  error  I  error +---------------+---------------  I + 

3  1  error  I  5  1 +---------------+---------------+ 

4  1  error  1  6 +---------------+---------------  I + 
5  1  error  I  error +---------------+---------------  I + 

6  1  error  1  error  1 

7  1  error  I  error +---------------+---------------  I + 
8  1  error  I  error +---------------+---------------  1 + 

From the above algorithm, one can tell directly when  a 
CFG  G does not  produce an LR(1)  language.  This  occurs when 

action is not  a function but  only a relation,  or  in  other 
words,  whenever  there is more  than one possible action for 

some input  pair.  These  multiple  entries  are  known  as 

conflicts.  The  two  types of  conflicts  that  can exist are i) 
shift/reduce and  ii) redueelreduce  conflicts,  which  are 

respectively  denoted  as S/R  and R / R .  

C h a p t e r   III 
M e t h o d s   for  r e d u c i n g   s t a t e s   L R ( 1 )   p a r s e r s  

L R ( 1 )   p a r s e r s   h a v e   t h e   n i c e   p r o p e r t y   t h a t   t h e y   c a n   b e  
u s e d   f o r   p a r s i n g   m o s t -   p r o g r a m m i n g   l a n g u a g e s .   U n f o r t u n a t e l y ,  

t h e   p a r s e r s   p r o d u c e d   f o r   t h e s e   g r a m m a r s ,   u s i n g   t h e   m e t h o d  
d e s c r i b e d   i n   t h e   p r e v i o u s   c h a p t e r ,   a r e   t o o   l a r g e   t o   b e  

c o n s i d e r e d   u s e f u l .   H e n c e ,   s e v e r a l   m o d i f i c a t i o n s   h a v e   b e e n  
p r o p o s e d   w h i c h   w i l l   r e d u c e   t h e   s i z e   o f   t h e   p a r s e r   p r o d u c e d .  

T h i s   c h a p t e r   d i s c u s s e s   f o u r   o f   t h e s e   m e t h o d s .   Two  o f   t h e  
m e t h o d s   ( S L R ( 1 )   a n d   L A L R ( 1 ) )   r e d u c e   t h e   n u m b e r   o f   s t a t e s   b y  

r e d u c i n g   t h e   s i z e   o f   t h e   l a n g u a g e   a c c e p t e d .   T h e   o t h e r   two 
m e t h o d s   ( p r o p o s e d   by  P a g e r [ P a g 7 7 a l )   u s e   c o n d i t i o n s   f o r  
m e r g i n g   s t a t e s   o f   a   L R ( 1 )   p a r s e r   w h i l e   m a i n t a i n i n g   t h e   f u l l  

p o w e r   t o   r e c o g n i z e   LR(1)  l a n g u a g e s .  

111.1  S L R ( 1 )   p a r s e r s  

T h e   S L R ( 1 )   p a r s i n g   t a b l e   c o n s t r u c t i o n   i s   q u i t e   s i m i l a r  
t o   t h a t   o f   t h e   L R ( 1 ) .   T h e   m a i n   d i f f e r e n c e   i s   t h a t   t h e  
p a r s e r   p r o d u c e d   i s   b a s e d   o n   a  c h a r a c t e r i s t i c   a u t o m a t o n   w i t h  

n o   l o o k a h e a d   ( i . e .   a n   L R ( 0 )   a u t o m a t o n ) .   T h i s  

s i m p l i f i c a t i o n   r e d u c e s ,   i n   g e n e r a l ,   t h e   t o t a l   n u m b e r   o f  

s t a t e s   c r e a t e d .  

To  b u i l d   a n   S L R ( 1 )   p a r s e r ,   r e d e f i n e   a n   i t e m   b y   r e m o v i n g  
t h e   l o o k a h e a d   s e t   l e a v i n g   j u s t   t h e   m a r k e d   p r o d u c t i o n .   U n d e r  
t h i s   d e f i n i t i o n ,   t h e   r u l e s   t o   c l o s e   a  s e t   o f   SLR  i t e m s   I 
b e c o m e :  

i )   e v e r y   i t e m   i n   I  i s   a l s o   i n   c l o s u r e ( 1 )  ; 
i i )   I f   t h e   i t e m   A  ->  g  . Bc  i s   i n   c l o s u r e ( I ) ,  

a n d   B  ->  b 6  P 

t h e n   t h e   i t e m   B  ->  . b i s   a l s o   i n   c l o s u r e ( 1 ) ;  

T h e   p r o c e d u r e   t o   b u i l d   t h e   c h a r a c t e r i s t i c   a u t o m a t o n   a r e  
a l s o   s i m p l i f i e d .   T h e s e   p r o c e d u r e s   a r e   as  f o l l o w s :  

f u n c t i o n   GOTO(1,X); 

b e g i n  

l e t   J  b e   t h e   s e t   o f  i t e m s   A  ->  . b s u c h   t h a t  7 

A  ->  g  . Xb  i s   i n   I  a n d   X  i s   a   g r a m m a r   s y m b o l ;  
r e t u r n   c l o s u r e ( 1 ) ;  
e n d  -9 

p r o c e d u r e   ITEMS(G); 

b e g i n  

C  :=  c l o s u r e ( S   ->  . S ' ) ;  
r e p e a t  

f o r   e a c h   s e t   o f   i t e m s   I  i n   C ,  - 

a n d   e a c h   g ra m m a r  s y m b o l   X s u c h   t h a t  

J  =  GOTO(1,X)  i s   n o t   e m p t y   a n d   J  6 C 
d o   a d d   J  t o   C ;  - 
u n t i l   n o   m o r e   s e t s   o f   i t e m s   c a n   b e   a d d e d   t o   C 
e n d  -9 

example 3.1 Let a CFG  G  be  defined  by  the  set  of 
productions  in  example  2.1.  Then  an  LR(0) 

characteristic  automaton is: 

The SLR(1)  method  does  not  use  a  lookahead  set  to 
decide  what  reduction  to use  once a viable prefix  has been 

recognized.  Instead, it uses a method  to  approximate  the 

lookaheads,  which  in  fact  guarantees  that  the  set  of 

lookaheads will be  included.  This  is done by  the  function 
FOLLOW  : N  ->  2T which  computes all symbols which  can follow 
a given nonterminal symbol.  However, in  order  to  compute 

FOLLOW,  the  terminal symbol $  must  be  included.  Hence for 

the definition of  FOLLOW, it  is assumed  that  there  is  an 
additional  production  of  the form S"  ->  S$ where  S"  is  a 
nonterminal and  does not  appear  in  any  production  in  P. 

FOLLOW is defined as 

* FOLLOW(X)  =  {  a   I  Y  =>  ax&, f o r   a l l  Y  6  N 
w h e r e   a   =  f i r s t ( b ) )  

e x a m p l e   3.2 U s i n g   t h e   CFG  G  d e s c r i b e d   i n   e x a m p l e   2 . 1 ,  

t h e   FOLLOW  s e t s   a r e :  

U s i n g   t h e   c h a r a c t e r i s t i c   a u t o m a t o n   a n d   t h e   f u n c t i o n  
FOLLOW  t h e   S L R ( 1 )   p a r s i n g   t a b l e   c a n   b e   c r e a t e d   u s i n g   t h e  

f o l l o w i n g   a l g o r i t h m :  

S L R ( 1 )   p a r s i n g   t a b l e   c o n s t r u c t i o n   a l g o r i t h m  

i n p u t :   t h e   S L R ( 1 )   c h a r a c t e r i s t i c   a u t o m a t o n   CG  =  (C,GOTO) 

f o r   t h e   CFG  G. 

o u t p u t :   a   p a r s i n g   t a b l e   ( p o s s i b l y   w i t h   c o n f l i c t s   i f   n o t  

S L R ( 1 ) )  

m e t h o d :   L e t   C  =  { I 1 ,   ... , I n )  b e   t h e   s e t   o f   s e t s   o f   i t e m s  

f r o m   t h e   c h a r a c t e r i s t i c   a u t o m a t o n   CG.  T h e   s t a t e s   o f   t h e  
p a r s e r   w i l l   b e   l a b e l e d   1 , 2 ,   *..  ,n w h e r e   s t a t e   i  c o r r e s p o n d s  

t o   t h e   s e t   o f   i t e m s   = i  .  A s   w i t h   LR(1)  p a r s e r s ,   l e t   t h e  
i n i t i a l   s t a t e   b e   s t a t e   1. 

The parsing  actions are defined as follows: 

i)  If  A  ->a . b c  6 I  where b 6 T and i 

GOTO(Ii,b)  -  I  then action(i,a)=j j 

ii)  If  A  ->  .  is  in I i  then for  each  b  6 FOLLOW(A) 

set action(i,b)  =  reduce  A  ->  2 

iii)  all entries not defined by  i)  or  ii)  are  set  to 
error 

The goto transitions  are defined by  the following  two  rules: 

i)  If  GOTO(II,A)  =  I j 

then goto(i,A)  =  j where A  6 N 

ii)  all other  entries of goto, not defined by  i),  are 
set to  error 

example 3.3 Using  the LR(0)  characteristic automaton in 

example  3.1,  and  the FOLLOW sets in example 3.2,  the 

SLR(Z)  parser  is defined by  the following  tables: 

a c t i o n  
a  b  $ +---------------+---------------+---------------+ 
1  I  s h i f t   3  I  e r r o r   I  r e d u c e   A->=  I +---------------+---------------+---------------  + 
2  1  e r r o r   I  e r r o r   I  r e d u c e   S - > A   1 +---------------+---------------+---------------+ 

3  1  s h i f t   3  I  r e d u c e   A->=  1  r e d u c e   A->=  I +---------------+---------------+---------------  + 

4  1  e r r o r   1  s h i f t   5  I  e r r o r  +---------------+---------------+---------------  I + 
5  1  e r r o r   I  r e d u c e   A - > a A b   1  r e d u c e   A - > a A b   I +---------------+---------------+---------------  + 

S  A +---------------+---------------  + 
1  I  e r r o r   I  2  I 

e r r o r   I  e r r o r  
e r r o r  
4  I  e r r o r   I  e r r o r  +---------------+---------------  I + 
5  I  e r r o r   I  e r r o r  +---------------+---------------  I + 

111.2  LALR(1)  parsers 

A  second type of  simplification similar  to  the  SLR(1) 
is  the  LALR(1)  parser  invented by  DeRemmer  [DeR69].  Many 
algorithms for  computing LALR(1)  parsers  have  since  been 
presented  [LLH71,AEH72,A&U77,DeR72,Alp76,Pag77b].  The main 

difference from SLR(1)  is a concise and more  accurate method 

for  computing  the  set  of  lookaheads  than  the function 
FOLLOW.  The same LR(0)  characteristic automaton can be used 

to  construct  either an LALR(1)  of  an SLR(I)  parser. 

The  definition  of  the  LALR(1)  lookahead  function 
LA  : state x P ->  {t  C  T)  is defined as  follows: 

and  t  =  first(c)  and  the string ba is 

a prefix for the state k) 

example  Using  the  CFG  g ,   and  the  LR(0) 

characteristic  automaton,  from  example  3 . 3 ,   the 
function L A  is defined as follows: 

The construction of  the LALR(1)  parser  is exactly  the  same 

as  an  SLR(1)  except  that the action function is computed as 

follows : 

i)  If A ->  2  . a h  6 Ii where a 6  T and 

G O T 0  (Ii, a) = I  

then action(i,a)=j 

ii)  If A ->a  .  is in Ii then for each 

a 6 LA(i,  A->  A_)  set action(i,a)  =  reduce A ->  g 

iii)  all entries not defined  in i)  and  ii)  are set to 
error - 

example 3.5 Using  the LR(0)  characteristic  automaton in 

example  3.1,  and  the function LA as defined  in example 

3.4,  the LALR(1)  parsing  tables  are: 

a c t i o n  
1  I  s h i f t   3  I  e r r o r   (  r e d u c e   A->g  I +---------------+---------------+---------------  + 

e r r o r   I  e r r o r   I  r e d u c e   S->A  I 

3  1  s h i f t   3  I  r e d u c e   A->=  1  e r r o r  
4  1  e r r o r   I  s h i f t   5  I  e r r o r   1 +---------------+---------------+---------------+ 
5  1  e r r o r   1  r e d u c e   A->aAb  I  r e d u c e   A->aAb  I +---------------+---------------+---------------  + 

1  I  e r r o r   I  2  I 
2  1  e r r o r   I  e r r o r   I 

3  1  e r r o r   I  4  I 
4  1  e r r o r   1  e r r o r   1 

5  1  e r r o r   1  e r r o r   I 

T h e   s e t   of  l a n g u a g e s   d e f i n e d   b y   SLR(l),  LALR(l),  and 
LR(l),  a r e   known  t o   form  a  h i e r a r c h y   a s   f o l l o w s :  

C SLR(1)  2  LALR(1)  - LR(1) 

1 1 1 . 3   P a g e r ' s   w e a k   c o m p a t i b i l i t y  

I n   t h e   p r e v i o u s   two  s e c t i o n s ,   r e s t r i c t i o n s   o n   t h e   c l a s s  
o f   l a n g u a g e s   were  i m p o s e d   t o   r e d u c e   t h e   n u m b e r   o f  s t a t e s   i n  

t h e   L R ( 1 )   p a r s e r .   P a g e r   [ P a g 7 7 a l   s h o w s   t h a t   t h e   n u m b e r   o f  

s t a t e s   may  b e   r e d u c e d   w i t h o u t   a f f e c t i n g   t h e   c l a s s   o f  

l a n g u a g e s   a c c e p t e d .  

T h e   m o d i f i c a t i o n   i n t r o d u c e d   b y   weak  c o m p a t i b i l i t y   i s   i n  
t h e   c o n s t r u c t i o n   o f   t h e   L R ( 1 )   c h a r a c t e r i s t i c   a u t o m a t o n   ( s e e  
s e c t i o n   11.3).  I n   t h e   a l g o r i t h m   f o r   c o n s t r u c t i n g   t h e  
a u t o m a t o n   t h e r e   i s   t h e   s t a t e m e n t :  

f o r   e a c h   s e t   o f   i t e m s   I  i n   C ,   a n d   e a c h   g r a m m a r   s y m b o l   X - 
s u c h   t h a t   GOTO(1,S)  i s   n o t   e m p t y   a n d   J  6 C 

d o   a d d   J  t o   C ;  - 
I n   t h i s   s t a t e m e n t   i f   two  s t a t e s   a r e   s i m i l a r   i n   f o r m ,   t h e y  
c a n   b e   r e p r e s e n t e d   b y   a   s i n g l e   s t a t e ,   a n d   t h e r e f o r e   s i m i l a r  

c o p i e s   o f   a   s t a t e   c a n   b e   r e m o v e d .   T h e   c r i t e r i o n   f o r  
d e c i d i n g   w h e t h e r   two  s t a t e s   c a n   b e   c o m b i n e d   i s   c a l l e d  

c o m p a t i b i l i t y   c r i t e r i o n   a n d   t h e   a c t i o n   of  c o m b i n i n g   two  
s t a t e s   c a l l e d   a  m e r g e .   F o r   t h e   L R ( 1 )   c o n s t r u c t i o n ,   two 

s t a t e s   a r e   c o m p a t i b l e   i f   t h e y   a r e   s i m i l a r   i n   f o r m ,   t h a t   i s ,  

t h e y   c o n t a i n   t h e   s a m e   s e t   o f   i t e m s .   P a g e r   h a s   f o u n d   t w o  
o t h e r   f o r m s   o f   c o m p a t i b i l i t y   w h i c h   h e   c a l l s   w e a k   a n d   s t r o n g  

c o m p a t i b i l i t y .  

Unfortunately,  changing  the  compatibility  criterion 
from the LR(1)  case can cause problems.  In particular, when 

two  states satisfy Pager's  compatibility  criteria,  merging 
the  states  may  necessitate a propagation  of  lookaheads to 
states already  created, which  in turn will modify  the merged 
state which  caused  the original propagation.  However, these 
problems  can be  resolved using  the following  algorithm: 

Algorithm for constructinq an &&  compatible 

characteristic  automaton 

input:  a CGF G and  a compatibility  function compatible. 
output:  a set C, of  states, and  the function 
GOT0  :  (set of  items) x  (N U T)  ->  (set of  items),  which 

defines  the  characteristic automaton. 

method:  the  three procedures below, initiated by  calling 

ITEMS' ( G )  ; 

f u n c t i o n   GOTO(1,s)  ; 

b e n i n  

l e t   J  b e   t h e   s e t   of  i t e m s  - 

[ A   ->  aX  .  b , L A ]   s e t .  

[ A   ->  a .  - Xb  , L A ]   i s   i n   I ;  
r e t u r n   c l o s u r e ( J )  ; 
e n d  -3 

p r o c e d u r e   ITEMS'  ( G )   ; 

b e n i n  

C  : 3   c l o s u r e ( [ S   ->  .  S'  , < $ } I ) ;  
r e p e a t  

f o r   some  s e t   o f   i t e m s   I  i n   C ,  - 

a n d   e a c h   g ra m m a r  s y m b o l   X s u c h   t h a t  
J  =  GOTO(1,X)  i s   n o t   e m p t y  
d o  - 

i f   t h e r e   e x i s t s   a  s t a t e   K  i n   C - 

s u c h   t h a t   c o m p a t a b l e  (K, J )  
t h e n   i n s e r t ( J , K , C )  - 
e l s e   a d d   J  t o   C - 
f i  - 
o d  - 
u n t i l   n o   m o r e   s e t s   c a n   b e   a d d e d   t o   C ;  
e n d  -% 

procedure  insert(S1,S2,C); 

{merges  S1 into S2 and  updates C  accordingly) 
begin 

S  :=  merge(Sl,S2); 
if  S2 C  S - 

then 

replace the  items of  state S  in C 2 

by  the items of  S ; 
for each grammar symbol X - 

such that GOTO(S2,X)  already defined 
do insert(closure(GOTO(S,X)), - 

GOTO(S2,Z),C) 
od - 
f i - 
end -9 

Two  states can be merged  if  and  only  if  they have  the 
same  set  of  marked  productions  in  their  respective item 
part.  Under  this  condition, the compatibility  criterion  is 

that  merging  the states  (and  therefore  the  lookahead sets) 
will not  introduce any R/R  conflicts in the resulting  state 

unless  the  language  is  in  fact  not  LR(1).  For  weak 

compatibility,  the  test  is  solely based  on  the  two  states 
being  merged,  while strong compatibility also uses  the set 

of  productions  of  the CFG  associated with  the LR(1)  parsing 

table being  built. 

Let  the function merge be defined as follows: 
merge(S1,S2)  -  {[A  ->g . b ,  LA^  u   LA^]  I 

[A - >  A  . b  , LA1] 6  S 1  
[A ->  A  . b  , LA2]  6 S2 
and  for all items  [A  ->  a . b  , LA1] 6 S 1  

there exists an item  [A ->  3  . b , LA2]  6 S2 and 

for all items  [A ->  . b  , LA2]  6  S2 
there exists  an item  [A ->  2  . b  , LA1] 6 Sl) 
Then, according  to  Pager's  definition,  two states S  and 1  S2 

are weakly  compatible if 

i)  S 1  and  S2 only have common marked  productions  in 

their  item part.  That is, if  [A ->  3  . b , LA1] 6 S 1  
then  there exists an item  [A ->  3  . b  , LA2]  e S2 and 

if  item  [A - >   a  b , LA2]  6 S2 then  there exists  an 

item  [A ->  2  . 1 , LA1] 6 S 1  

ii)  for  each  pair  of  items  [A ->  2 . b , LA1] 6 S 1  and 

l a   ->  r  . a  , LA2]  6 S2, then at  least  one of  the 
following  is true: 

a)   LA,^  LA^  =  fi 
b)  L A l  f)  LA2 #  $  and  there exists  an item 

[ B  ->  2  .  , LA1']  6 S 1   such that 
 LA,^ LA1'  +  $ 

C )   LA1  r\ LA2  #  $  a n d   t h e r e   e x i s t s   a n   i t e m  

[A  ->  2 . b , LA2']  6  S 2   s u c h   t h a t   LA,^ 

LA,'  #  $ 

C o n d i t i o n   a )   s t a t e s   t h a t   i f   t h e r e   a r e   n o   i t e m s   b e t w e e n  
t h e   s t a t e s   w h i c h   h a v e   a   common  l o o k a h e a d   s y m b o l ,   t h e n   t h e  
m e r g e   c a n   n o t   p r o d u c e   a n y   c o n f l i c t s ,   a n d   i n   p a r t i c u l a r   c a n  
n o t   p r o d u c e   a  R / R   c o n f l i c t .   ( N o t e :   i t   i s   a l s o   i m p o s s i b l e  

t o   i n t r o d u c e   S/R  c o n f l i c t s   s i n c e   t h e   s t a t e s   w i l l   b e   m e r g e d  
o n l y   i f   t h e y   h a v e   common  m a r k e d   p r o d u c t i o n s .   T h e r e f o r e ,   t h e  

r e s u l t   of  m e r g i n g   w o u l d   o n l y   p r o d u c e   a  S/R  c o n f l i c t   i f   i t  
e x i s t e d   i n   o n e   o f   t h e   u n m e r g e d   s t a t e s   b e f o r e   m e r g i n g ) .   I n  

c o n d i t i o n   b )   a n d   c )   t h e   s e t   o f   c o n d i t i o n s   i s :  

[ A   ->  5  b  LA1],  [ B - >  5  , LA1']  6  S1 

[ A   ->  b  , L A 2 ] ,  [B  ->  2 , LA2']  6  S 2   LA^^ 

LA2  #  d  a n d   e i t h e r    LA^^  LA1'  #  o r  
LA2  n LA2'  #  $ 

S i n c e    LA^^  LA2  #  $,  t h e   o n l y   p o s s i b l e   c o n f l i c t   i s   a 
R / R   c o n f l i c t   a r i s i n g   f r o m   m e r g i n g   t h e   l o o k a h e a d s   o n   t h e  

p r o d u c t i o n s   A  ->  ab a n d   B  ->  &.  H o w e v e r ,   t h i s   c a n   o c c u r  

o n l y   i f   - b   +>g - w  a n d   d  f > R   g ,  p r o d u c i n g   a   common  s u b s t a t e  
w h e r e   b o t h   p r o d u c t i o n s   w i l l   b e   r e d u c i b l e .   By  c o n d i t i o n   b )  +  * 

w 6 T ,   LA^^   LA^'  #  (4,  i f   i n   a d d i t i o n   1 f > R   y a n d   = > R   y, - 
t h e n   t h e r e   m u s t   a l r e a d y   e x i s t   a   s t a t e   w i t h   a   R / R   c o n f l i c t   o n  
som e  s y m b o l   a  6  L A l   r\ L A l ' .   S i m i l a r l y   f o r   c o n d i t i o n   c ) .  
H e n c e ,   i f   t h e   l a n g u a g e   i s   i n d e e d   L R ( l ) ,   t h e n   i t   m u s t   b e   t h e  

+  +  * case  that b ->R y ;   d  =>  w';  ~ , y '  6 T  ;  and y #  y'  , and R  - 
therefore conditions a),b)  and  c)  are sufficient  to  inssure 
no  conflicts  will be produced  if  the language generated by 

the grammar  is  indeed LR(1). 

For example, let  a CFG  be  defined  with  the  set  of 
productions  in  figure  3.1.  The  LR(1)  characteristic 
automaton contains  38 states  (shown in part  in figure  3.2). 
Under  weak  compatibility, states 8 and  12 can not be merged 

since the  items  [X->a.AE,{d)l  6 12 and  [Y->a.B,{d)]  6 8 have 

the  common lookahead symbol d .   However, for example, states 
30 and  33 are in fact weakly  compatible. 

It can be  shown that  the  size  of  a  weak  cornpatable 
LR(1)  parsing  table will contain a number  of  states that  is 

somewhere between  that  of  LALR(1)  and LR(1)  parsing  tables. 

f i g u r e   3 . 2  

111.4  Strong  compatibility 

Pager's  strong  compatability adds one condition  to weak 
compatibility  which  guarantees the production of  a LALR(1) 
parser  if  the language generated  by  the grammar is  LALR(1). 
Otherwise  it  will  produce an LR(1)  parsing  table with  the 

number  of  states greater  than  the number  of  states  produced 
by  the  LALR(1)  method  but  less  than the number produced  by 

the LR(1)  method. 

Strong compatibility  requires that  no  two  states  be 
merged  if  they  have  a  common  descendant  in  the LR(1) 

characteristic  automaton wh.ich will introduce R/R  conflicts 
when  the two  states are merged. 

For  example,  the  grammar  presented  by  figure  3.1 
creates  (in  past)  the  LR(1)  characteristic  automaton in 

figure  3.2.  States  8  and  12  are  not  weakly  compatible 
because  the  items  [X->a.AE,{d)l  6 12 and  [Y->a.B,{d)J  6 8 

have a common  lookahead  symbol "d".  If  these  two  states are 
merged  (and  hence  causing merges  of  states  (20,28),  (18,26), 

(17,251,  (16,241, (29932)s  (31,3419  (30,33),  (19,27),(36,38) 
and  (35,37)  where  each  pair  are common descendants)  the 

resulting  states of  the automaton would  have  no  conflicts. 
Hence  these  two  states, according  to Pager's  definition, are 

in fact  strongly compatible. 

On  t h e   o t h e r   h a n d ,   l e t   t h e   g r a m m a r   b e   t h a t   o f   f i g u r e  
3 . 3   w h i c h   c r e a t e s   ( i n   p a r t )   t h e   LR(1)  c h a r a c t e r i s t i c  
a u t o m a t o n   i n   f i g u r e   3 . 4 .   M e r g i n g   s t a t e s   7  a n d   10  ( a n d   hence 

c a u s i n g   common  d e s c e n d a n t s   1 4   a n d   18  t o   b e   m e r g e d )   w o u l d  
r e s u l t   i n   t w o   R / R   c o n f l i c t s   o n   t h e   s y m b o l s   " a "   a n d   "b"  i n  

i t s   d e s c e n d a n t   s t a t e .   H e n c e   t h e s e   s t a t e s   w i l l   n o t   b e   m e r g e d  
u n d e r   s t r o n g   c o m p a t i b i l i t y .  

f i g u r e   3 . 3  
4 :  [ Y - > a b . ,   { a ) ]  I B - > b *   y{b)  I f 

f i g u r e   3 . 4  

T h e   way  i n   w h i c h   two  i t e m s   ( f r o m   d i f f e r e n t   s t a t e s )   c a n  
p r o d u c e   a  common  s t a t e   w i t h   a  R / R   c o n f l i c t   i s   i f   two  i t e m s  

c a n   d e r i v e   t h e   s a m e   s u b s t r i n g .   T h a t   i s ,   i f   t h e   two  s t a t e s  

S 1   a n d   S 2   a r e   t o   b e   m e r g e d   s u c h   t h a t   t h e r e   e x i s t s   two  i t e m s  

[ A   ->  2  . b  , L A 1 ]  6  S 1   a n d   [ B  ->  5 . 4  , L A 2 ]   6  S 2   w h e r e  
f   6   LA^^  L A l ;   - b  +>g - w  a n d   + > R   11,  .  t h e n   t h e   two   s t a t e s  
h a v e   common  d e s c e n d a n t s   s u c h   t h a t   a  m e r g e   w i l l   i n t r o d u c e   R / R  

c o n #  l i c t s .  

For  example,  the reason  that  states 7 and  10  (in  figure 
3.4)  could  not  be merged  is that  the items  IX->a.B,{d)l  6 7 
and  [Y->a.b,{d)]  6 10 have a common lookahead symbol d,  and 

the  strings B  and b both  rewrite to  the string b. 

The search for a common substring between  two  states, 
when necessary  to  try  all possible  combinations  of  rewrites, 

involves as much work as  building  all  descendant  states. 
However,  it  is  not  necessary  to  expand  all  possible 

combinations  of  rewrite rules.  This  fact  can  be  seen  by 
understanding  how expansion of  the nonterminals  is performed 

in building  the characteristic  automaton.  That  is, when  the 

item  [ A  ->  g  . X b  , L A ]   is  closed,  where X  ->  2  in P and 
d 6 LA,  it will create the item  [X ->  . c , first(hd)].  If * 
b  = > R  2 ,   it  is clear that the elements  in the lookahead  set - 
LA will be propagated  to  the new item.  On  the  other  hand, 

b  b B  2 ,  if  -  the definition of  the function first indicates 
that  any  element d 6 L A   is not  in first(2d).  Hence, in this 
case, the  lookaheads defined by  first(bd)  are  independent  of 
LA and  does not  effect  states derived  from  the  new  item. 

Stated  differently,  the  only  rewrites  that  should  be 
performed  are  those which  are applied  to  the  nonterminals 
which  occur  at  the  end  of  marked  productions.  This 

restriction  on  the number  of  possible  derivations  to  look 
at,  is  what  Pager  calls  a  stronq  rightmost derivation 

(denoted  =>SR) and  is defined as: 

a B c  =>  abc  iff -  SR - 

i ) ~ = g  
ii) aBy = > R  abc 

Pager has derived  a procedure(Pag77al  which  checks  if 
two  items, having  a common lookahead  symbol, will produce a 
shared  descendant containing  a  R/R  conflict.  The  author 

feels  that  the  algorithm presented  by  Pager  is opaque, as 
well  as  slightly  incorrect, and  that  the algorithm  in  this 

paper  (see  page  49)  has  been  corrected and modified  to 

clarify  its nature. 

The  algorithm  is  presented  using  two  co-recursive 
procedures  which  tries  all  possible  strong  rightmost 

derivations  to  see if  the two  given marked  productions yeild 
a  common  descendant  state where  two different  productions 
will be  reduced  (since this is the  only  way  that  an  R/R 

conflict  can  be  produced).  The procedure  C H E C K   looks for 

trivial cases  (i.e.  cases where no  rewrites  are  necessary 
to  determine  the  result) while  the procedure  nontrivialcheck 
checks  those  cases requiring rewrites  in order  to  determine 

the wanted  criteria. 

One possibility  that procedure C H E C K   handles  is  if  it 
is  impossible  for  two  items, with  or without  rewrites,  to 
produce  a common descendant.  That  is,  let  (1)  A  ->  2 . B  

and  (2) B  ->  2.-  be  two marked  productions where 

Assu me  t h a t   t h e s e   two  m a r k e d   p r o d u c t i o n s   c a n   d e r i v e   a   common 

s u b s t r i n g   w h i c h   w i l l   p r o d u c e   a   R / R   c o n f l i c t .   T h e n   i t   m u s t  *  * 
b e   t h e   c a s e   t h a t   Xf  =>  w  a n d   Yg  =>  w  .  S i n c e   b o t h   f a n d   g R  -  R  - 

d o   n o t   d e r i v e   2 ,   t h e   l o o k a h e a d s   c a n   n o t   p r o p a g a t e   t h r o u g h   f 
a n d   g.  B u t   t h e n ,   b y   t h e   way  LR(1)  p a r s e r s   a r e   g e n e r a t e d ,  

t h e   s t r i n g   d e r i v e d   f r o m   X  w i l l   b e   r e d u c e d   t o   X b e f o r e  
s c a n n i n g   t h e   s t r i n g   d e r i v e d   f r o m   f.  H e n c e   a n y   s t r i n g  
d e r i v e d   f r o m   Xf  m u s t   b e   o f   t h e   f o r m   S i m i l a r l y ,   a n y  

s t r i n g   d e r i v e d   f r o m   Yg  m u s t   b e   o f   t h e   f o r m   x. T h e r e f o r e ,  
s i n c e   X #  Y,  i t   i s   i m p o s s i b l e   f o r   a n y   i t e m s   o f   t h i s   f o r m   t o  
p r o d u c e   a   common  s u b s t r i n g   ( a n d   h e n c e   a   common  d e s c e n d a n t )  

w h i c h   w i l l   p r o d u c e   R / R   c o n f l i c t s .  

T h e   s e c o n d   t r i v i a l   c h e c k   i n   t h e   p r o c e d u r e   CHECK,  i s   i f  
t h e   two  m a r k e d   p r o d u c t i o n s   i m m e d i a t e l y   i n d i c a t e   a   common 
d e s c e n d a n t   w h i c h   w i l l   p r o d u c e   R / R   c o n f l i c t s   i f   m e r g e d .   T h a t  

i s ,   i f   t h e   two   i t e m s   a r e   o f   t h e   f o r m   ( 1 )   A  - >   g.=Wf  a n d   ( 2 )  
B  ->  a.EZg  w h e r e  

i i )   &  6  (N  U  T)  a n d   ? > R   g * 

i i i )   W , Z   6  N  a n d   W,Z  = > R  2 
I t   i s   c l e a r ,   u n d e r   t h e   a b o v e   c o n d i t i o n s ,   t h a t   t h e   c l o s u r e   o f  

t h e   i t e m s   ( 3 )   [ A   ->  &J  . Wf  , L A 1 ]   a n d   ( 4 )  

[B  ->  abX  . Zg  , LA2]  w i l l   p r o d u c e   t h e   i t e m s   ( 5 )  
[ W  ->  . 2 ,  Q 1   a n d   ( 6 )   [ Z   ->  . 2 ,  Ql  w h e r e   Q  =  L A 1 r \ ~ ~ 2 .  
H e n c e   t h i s   c a s e   w i l l   p r o d u c e   a   common  d e s c e n d a n t   w h e r e  

c o n f l i c t s   w i l l   b e   p r o d u c e d .  

I n   a l l   o t h e r   c a s e s ,   so me  r e w r i t i n g   i s   n e c e s s a r y   a n d  
p r o c e d u r e   n o n t r i v i a l c h e c k   i s   c a l l e d   t o   h a n d l e   t h e s e   c a s e s .  

One  p o s s i b i l i t y ,   t h a t   r e q u i r e s   r e w r i t i n g ,   i s   when  t h e  
t w o   m a r k e d   p r o d u c t i o n s   a r e   of  t h e   f o r m   ( 1 )   A->=.bXf  a n d   ( 2 )  
B->c.bYg w h e r e   * 

i )   X  6  N  a n d   X  = > R  e 

i i i )   Y  6  (N  U  T);  a  a n d 1  #  X 
I n   t h i s   c a s e ,   X  m u s t   r e w r i t e   t o   som e  s t r i n g   d e r i v a b l e   f r o m  
3 i n   o r d e r   t o   p r o d u c e   a   common  s t r i n g   ( a n d   h e n c e   a  common 

d e s c e n d a n t ) .   H o w e v e r ,   t h i s   t h e   s a m e   a s   t e s t i n g   i f   t h e r e  
e x i s t s   a   p r o d u c t i o n   X  ->  h  w h e r e   1 #  2  s u c h   t h a t   t h e   i t e m s  
X->.h - a n d   B - > & . a   w i l l   s h a r e   a   common  d e s c e n d a n t   w h i c h   c a n  
p r o d u c e   R / R   c o n f l i c t s .  

A  s e c o n d   p o s s i b i l i t y   h a n d l e d   i n   n o n t r i v i a l c h e c k   a r e  
i t e m s   o f   t h e   f o r m   ( 1 )   A - > a . b X f   a n d   ( 2 )   B->c.m w h e r e  

i ) X 6 N  

i i )   g 6  (N  U  T);  a  a n d   X  # Z  * 

i i i )  f = > R  5 

i v )   no  p r o d u c t i o n   X - > h ,   w h e r e   &#=,  e x i s t s   s u c h   t h a t  
X->.h  a n d   B - > & . a   w i l l   h a v e   a   common  d e s c e n d a n t  
I n   t h i s   c a s e ,   b e c a u s e   of  c o n d i t i o n   i v )   a n d   t h a t   X#Z,  a n y  
common  s t r i n g   d e r i v a b l e   f r o m   Xf  m u s t   b e   o f   t h e   f o r m   X g   w h i l e  
a n y   common  s t r i n g   d e r i v a b l e   f r o m   Zg  m u s t   b e   o f   t h e   f o r m   G. 
B u t   t h i s   i m p l i e s   t h a t   t h e y   c a n   n o t   d e r i v e   t h e   s a m e   s t r i n g  
a n d   h e n c e   c a n   n o t   h a v e   a   s h a r e d   d e s c e n d a n t .  

T h e   l a s t   p o s s i b i l i t y   c h e c k e d   c h e c k e d   b y   t h e   p r o c e d u r e  
a o n t r i v i a l c h e c k   i s   t h e   c a s e   when  t h e   m a r k e d   p r o d u c t i o n s   a r e  

o f   t h e   f o r m   ( 1 )   A->g.bX  a n d   ( 2 )   B - > g . b Y   w h e r e   X , Y   6  N  a n d  
X f Y .   T h e   o n l y   way  t h a t   t h e s e   two   m a r k e d   p r o d u c t i o n s   c a n  *  * 

d e r i v e   a  common  d e s c e n d a n t   i s   i f   X  =>  w  a n d   Y  =>  W. R  -  R  - 
H o w e v e r ,   t h i s   i s   t h e   s a m e   a s   t e s t i n g   i f   t h e r e   e x i s t s   two 

p r o d u c t i o n s   o f   t h e   f o r m   X->g a n d   Y - > t   s u c h   t h a t   e i t h e r   t h e  

m a r k e d   p r o d u c t i o n s   A->&.X  a n d   Y - > . t ,   o r   X - > . s   a n d   B->&.Y, 
w i l l   p r o d u c e   a   common  d e s c e n d a n t   w h i c h   c a n   c o n t a i n   a n   R / R  

c o n f l i c t   f r o m   m e r g i n g .  

F o r   e f f i c i e n c y ,   t h e   p r o c e d u r e   n o n t r i v i a l c h e c k   u s e s   a  
s p e c i a l   g l o b a l   f u n c t i o n  

t r i e d   : N  x  ( m a r k e d   p r o d u c t i o n s )   ->  b o o l e a n .  
B e f o r e   t h e   t o p   c a l l   t o   p r o c e d u r e   C H E C K   i s   m a d e ,   t h e   f u n c t i o n  

i s   s e t   t o   f a l s e   f o r   a l l   p o s s i b l e   i n p u t s ,   a n d   i t   w i l l   r e t u r n  

false the first time it is  called  with  any  given  input. 
After  that,  anytime  the function is again called with  the 

same set of  arguments, it will return  true.  Therefore, this 

function  will  prevent  the  procedure  nontrivialcheck  from 
checking  if  a  nonterminal  will  rewrite  to  match  some 
particular marked  item. 

Finally, it  is assumed  that  on  the top  level  call  of 
CHECK(A  ->  a  . 2'  , B  ->  b  . b')  the  following  two 

conditions hold: 

i)  A  ->  . a'  f  8  ->  b .  - b' 
ii) s' P 2  and B'  #  2 

Co-recursive procedures to check 

for 2 shared descendant - 

procedure check(A  ->  q . ala2...a  n ' 

B  ->  . b l b  2...b  )  : boolean; m  * 
{note:  a i y b i  6 (N  U  T);  A,B  6 N ;   a y p 6  (N  U  ) 
begin 

s:=  maximum  i s.t.  a a i i+l . . .a  ? > g  2 ;  n 

t:=  maximum  i set.  bibi+l ...b,  2 ;  
match:=  maximal  i  sat.  ai  bi; 

then check:=false - 
else if match>  max(s,t) - -  

then check: =true - 
else - 

if  s>t - 

then check:=nonrrivialcheck( 

B  ->  1 . b1b2...bm,t 

A  ->  g  . a l a  2...a  s'match) n ' 
else check:=nontrivialcheck( - 

A  ->  2 . a l a  *.. .a  s n ' 

B  ->  p . blb 2 . . .   bmyt,match) 
end - 9  

p r o c e d u r e   no nt ri vi al ch ec k( A  ->  g  ala2...an,s, 

B  ->  b . blb2. *.bm,t, 
m a t c h )   :  b o o l e a n ;  
{note:  s 5  t)  
b e g i n  

t er mi na te := fa ls e;  

re pe at  

i f   (m at ch  - ( s o l ) )   <  0) or  (s =t ) - 

t h e n  - 

n o n t r i v i a l c h e c k : = f a l s e ;   terminate:=true; 
e l s e   if  (a s 6 N)  or 7 -  

not  tried(as,B  -  b b l - - b  -  s-1  . b s . . - b   m ) 

t h e n  - 

f o r  ea ch   p r o d u c t i o n   C  ->  6 P - 

s o t o  a   PC,  5  #  e ,  an d s 

C - > . c #  

B  ->  b b l " . b   . b s . .   .b s-1  m 
d o  - 

if  check(C  ->  . c, - 

B  ->  bb l . . . b  . bs  . 'bn) s-1 
t h e n  - 

n on tr iv ia 1c he ck :p tru e;  

else if  (sat) and  (match-1~s) and bt 6 N - -  

and  check (B ->  bb  ... b -  bs. . .b s-1  n' 

A  ->  a a  .. .a  . a  ... a  ) s-1  s  n 
then - 

nontrivialcheck:=true;  terminate:=true 
f i *  -9 

until terminate; 
end -3 

Using the above,  two  states  S1  and  S2  are  strong 
compatible  if 

i)  If  the item  [A - >   2  . b,LAll  6 S1 then there  exists 
an  item  [A - > a .  - b9LA21 6 S2  and  if  the  item 

[A ->  . - b,LA21  6 S2  then  there  exists  an  item 
[A ->  a  b,LA1]  6 S1 

ii)  for each  quadruple  of  items 

[A ->  a . - b,LAll, [B  - >  &  &LA;]  6 S I ,  

[A ->  2  . P,LA21,[B  ->  &  . &,LA;]  6  S2 
either 

a)  weak compatibility between  the items hold  or 
b)  b and &  do  not share a descendant. 

C h a p t e r   JJ 
An  E r r o r   R e c o v e r y   M e t h o d   for  &&  P a r s e r s  - 

I n   t h e   p r e v i o u s   t w o   c h a p t e r s ,   f i v e   d i f f e r e n t  
c o n s t r u c t i o n s   were  d i s c u s s e d ,   a l l   o f   w h i c h   p r o d u c e   L R  
p a r s e r s .   T h e   d o w n f a l l   of  a l l  LR  p a r s e r s   i s   t h a t   t h e y   a r e  

d e s i g n e d   o n l y   t o   d e c i d e   i f   t h e   g i v e n   i n p u t   i s   l e g a l ,   t h a t  

i s ,   b e l o n g s   t o   t h e   l a n g u a g e   g e n e r a t e d   by  i t s   g r a m m a r .   T h i s  
c a u s e s   t h e   u n f o r t u n a t e   r e s u l t   t h a t   w h e n   s u c h   a   p a r s e r   i s  
u s e d   i n   a   c o m p i l e r ,   o n c e   t h e   f i r s t   i l l e g a l   t e r m i n a l   s y m b o l  

i s   f o u n d ,   t h e   p a r s e   s t o p s   w i t h   f a i l u r e .   H o w e v e r ,   i t   w o u l d  
b e   m o r e   d e s i r a b l e   t o   h a v e   t h e   p a r s e   r e p o r t   a s   many 

a d d i t i o n a l   e r r o r s   a s   p o s s i b l e .  

S e v e r a l   p e o p l e   h a v e   p r o p o s e d   v a r i o u s   e r r o r   r e c o v e r y  
s c h e m e s   f o r   LR  p a r s e r s  

[G&R75,D&R77,P&D79,O'H76,Pen77,P&D781.  T h i s   c h a p t e r   w i l l  
o n l y   d e a l   w i t h   o n e   s u c h   m e t h o d ,   w h i c h   i s   a   m o d i f i c a t i o n   o f  

t h e   o n e   p r e s e n t e d   by  DeRemmer  a n d   P e n n e l l o [ P & D 7 9 ] .   T h e  

a l g o r i t h m   p r e s e n t e d   h e r e   d i f f e r s   f r o m   t h i e r s   i n   t h a t   i t   i s  
i n c o r p o r a t e d   i n t o   t h e   LR  p a r s e r   a n d   d o e s   n o t   a t t e m p t   e r r o r  

c o r r e c t i o n .  

I n   o r d e r   t o   d e s c r i b e   e r r o r   r e c o v e r y ,   w e   f i r s t   d e s c r i b e  
how  a n   LR  p a r s e r   w o r k s .   L e t   a   p a t h   b e   a   s e q u e n c e   o f   s t a t e s  

q o q  l . . o q   s u c h   t h a t   f o r   e a c h   s t a t e   q   o n e   o f   t h e   f o l l o w i n g  n  i ' 

c o n d i t i o n s   h o l d :  

i )  $ o t o ( q i y X )   =  qi+l  f o r   som e  X  6  N 
i i )  a c t i o n ( q i , a )   -  q i + l   f o r   som e  a   6  T. 
A  p a t h   w i l l   b e   d e n o t e d   a s   [ q o : g ] .   T h a t   i s ,   i f   2  =  a l a  2 . . . a   n  
w h e r e   a i   6  (N  U  T )   t h e n   t h e   p a t h   [ q O : g ]   i s   t h e   s e q u e n c e   o f  

s t a t e s   s u c h   t h a t   e i t h e r   a ~ t i o n ( q ~ - ~ ~ a ~ )  P  qi  o r  
g o t ~ ( q ~ , ~ , a ~ )  =  q i .   A l s o ,   l e t   t h e   r e s u l t   o f   t h e   f u n c t i o n  

t o p   : p a t h   ->  s t a t e   b e   d e f i n e d   a s   t h e   s t a t e   q n   w h e r e   t h e  
p a t h   i s   q o q l o . . q   .  F i n a l l y ,   w h e n e v e r   t h e   p a t h   [ q : ~ ]  b e g i n s  n  

f r o m   t h e   s t a r t   s t a t e   ( o f   t h e   LR  p a r s e r )   i t   w i l l   s i m p l y   b e  
d e n o t e d   a s   [ a ] .  

T h e   b a s i c   c o n t r o l   of  a   LR  p a r s e r   c a n   b e   d e f i n e d   b y   t h e  
d e c i s i o n   f u n c t i o n   d f   : p a t h   x  T  ->  ( p a t h   U { r e i e c t , a c c e p t ) )  

as  f o l l o w s :  

i )  d f ( [ a l , b )   =  [abl i f   a c t i o n ( t o p ( [ = l ) , b )   =  s h i f t   j  f o r  
s ome  s t a t e   j  6  K. 

i i )   d f ( [ ~ l , b )  =  d f ( [ a A l , b )  

i f   a c t i o n ( t o p  ( [awl ) , b )   =  r e d u c e   A  ->  w,  a n d  

aw  #  S  when  b   =  $ - 

i i i )   d f  ([Sl , $ )   =  a c c e p t  

i f   a c t i o n ( t o p ( [ S I ) , $ )   =  r e d u c e   S   ->  S' 

i v )   d f   i s   d e f i n e d   a s   r e j e c t   f o r   a l l   p a i r s  

( [ a ]  , b )   n o t   d e f i n e d   by  r u l e s   i )   t h r o u g h   i i i )  

T h e   a l g o r i t h m   t o   i m p l e m e n t   t h e   a b o v e   d e c i s i o n   f u n c t i o n  
i s   s i m p l y   a s   f o l l o w s :  

p r o c e d u r e   p a r s e ( d f , i n p u t ) ;  

b e g i n  

p a t h : =  [ s t a r t  ,=I  ; 

r e p e a t  

t : = n e x t   t e r m i n a l   s y m b o l   f r o m   i n p u t ;  
p a t h : - d f   ( p a t h ,  t ) ;  
u n t i l   ( p a t h   =  a c c e p t )   o r   ( p a t h   =  r e j e c t ) ;  
p r i n t   p a t h ;  
e n d  - 9  

N o t e   t h a t   t h e   v a r i a b l e   p a t h   i s   i m p l i c i t l y   u s e d   a s   a   s t a c k  
w h i c h   h o l d s   t h e   p r e f i x   o f   s e n t e n t i a l   f o r m s   b e i n g   r e c o g n i z e d  

b y   t h e   p a r s e r .  

T h e   e r r o r   r e c o v e r y   s t r a t e g y   d e s c r i b e s   w h a t   t o   d o   i f   t h e  
p a r s e   o f   a n   i n p u t   r e s u l t s   i n   r e j e c t .   A s   c a n   b e   s e e n   f r o m  

t h e   p r e v i o u s   a l g o r i t h m ,   L R   p a r s e r s   h a v e   t h e   n i c e   p r o p e r t y  
t h a t   t h e y   s t o p   r e a d i n g   i n p u t   i m m e d i a t e l y   a f t e r   t h e   i n p u t  
s t r i n g   i s   f o u n d   t o   b e   i l l e g a l .   T h e   b e s t   r e c o v e r y   f r o m   s u c h  
a n   e r r o r   w o u l d   b e   i f   t h e   p a r s e   c o u l d   som ehow  b e   r e s t a r t e d  

s u c h   t h a t   a l l   o t h e r   e r r o r s   made  i n   t h e   i n p u t   c o u l d   b e   p i c k e d  
u p .   U n f o r t u n a t e l y ,   t h i s   s t r a t e g y   i s   r e a l l y   u n f e a s i b l e   s i n c e  

i t   c a r r i e s   t h e   i m p l i c i t   a s s u m p t i o n   o f   k n o w i n g   w h a t   t h e  
w r i t e r   m e a n t   when  h e   w r o t e   t h e   s t r i n g   t o   b e   p a r s e d .  

A  much  m o r e   c o n s e r v a t i v e   a p p r o a c h   i s   t o   o n l y   s t a t e   w h a t  
r e m a i n i n g   s u b s t r i n g s   o f   t h e   i n p u t   a r e   i m p o s s i b l e   a c c o r d i n g  

t o   t h e   g i v e n   g r a m m a r .   T h a t   i s ,   i f   t h e   r e m a i n i n g   i n p u t   a f t e r  * 

t h e   e r r o r   i s   a   s t r i n g   w  6  T  a n d   t h e r e   d o e s n ' t   e x i s t   a  * 
r i g h t m o s t   d e r i v a t i o n   s u c h   t h a t   S  =>  awc  f o r   s o m e  R -  *  * 
a   6  ( N   U  T )   a n d   2  6  T  ,  t h e n   t h e   s u b s t r i n g   w s h o u l d   b e  - 

r e p o r t e d   a s   a n   e r r o r .  

F o r   e x a m p l e ,   c o n s i d e r   t h e   two  p s e u d o   PASCAL  p r o d u c t i o n s  

< s t m t >   ->  FOR  < v a r >   : =   < e x p >   TO  < e x p >   DO  < s t m t >  

< s t m t >   ->  WHILE  < e x p >   D O   < s t m t >  
w i t h   t h e   e r r o n e o u s   i n p u t  

FOR  X : = l   5   D O   B E G I N   J : = = X ;   L:=X  END; 
w h e r e   t h e   t e r m i n a l   s y m b o l   "TO"  h a s   a c c i d e n t l y   b e e n   l e f t   o u t .  

U s i n g   a n   LR  p a r s e ,   p a r s i n g   w o u l d   s t o p   a f t e r   r e a d i n g   t h e  

s y m b o l   "5".  A s   o n e   L o o k s   f o r   s u b s e q u e n t   e r r o r s ,   i t   i s   c l e a r  

t h a t   "5"  i s   a   v a l i d   s u b s t r i n g   d e r i v a b l e   f r o m   S.  I t   i s   a l s o  
c l e a r   t h a t   5   c a n   o c c u r   a t   t h e   f o l l o w i n g   p o i n t s   i n   t h e   g i v e n  
p r o d u c t  i o n s  

< s t m t >   ->  FOR  < v a r >  : =   " < e x p > "   TO  < e x p >   DO   < s t m t >  

< s t m t >   ->  FOR  < v a r >   : =   < e x p >   TO  " < e x p > "   DO  < s t m t >  

< s t m t >   ->  WHILE  " < e x p > "   DO  < s t m t >  
By  e x p a n d i n g   t h e   s u b s t r i n g   t o   i n c l u d e   t h e   n e x t   i n p u t   s y m b o l ,  

t h e   n e x t   p o s s i b l e   s u b s t r i n g   t o   t e s t   w o u l d   b e   "5  DO1'.  H e r e ,  

t h e   n u m b e r   o f   p o s s i b l e   p o s i t i o n s   o f   t h i s   s t r i n g   h a s   b e e n  

r e d u c e d   t o  

< s t m t >   ->  FOR  < v a r >   :=  < e x p >   TO  " < e x p >   D O "   < s t m t >  

< s t m t >   ->  WHILE  " < e x p >   DO"  < s t m t >  
C o n t i n u i n g   t h i s   p r o c e s s ,   i t   i s   c l e a r   t h a t   t h e   s u b s t r i n g   " 5  
D O   BEGIN  J:=X;  L:=X  END"  c a n   c o r r e s p o n d   t o   t h e   f o l l o w i n g  

p o s i t i o n s   i n   t h e   p r o d u c t i o n s :  

< s t m t >   ->  FOR  < v a r >  :=  < e x p >   TO  " < e x p >   D O   < s t m t > "  
< s t m t >   ->  WHILE  l l < e x p >  D O   < s t m t > "  

A t   t h i s   p o i n t ,   t h e   s e m i c o l o n   a t   t h e   e n d   o f   t h e   p a r s e  
s t r i n g   i m p l i e s   t h a t   a   r e d u c t i o n   s h o u l d   b e   p e r f o r m e d   b y   o n e  

o f   t h e   a b o v e   p r o d u c t i o n s .   One  p o s s i b i l i t y   i s   t o   t a k e   t h e  
s t r i n g   r e c o g n i z e d   b e f o r e   t h e   r e j e c t   p o i n t ,   a n d   t o   e i t h e r   a d d  
o r   d e l e t e   s y m b o l s   t o   p r o d u c e   a   m a t c h   a n d   t h e r e f o r e   d e c i d e  
w h i c h   r e d u c t i o n   t o   c h o o s e .   T h i s   t y p e   o f   e r r o r   r e c o v e r y   i s  

i n   f a c t   t h e   e r r o r   c o r r e c t i o n   m e t h o d   u s e d   b y   [ P & D 7 9 ] .  
H o w e v e r ,   t h e   o n e   c h o s e n   b y   t h e   a u t h o r   a s s u m e s   t h a t   t h e  

s u b s t r i n g   "5  DO  B E G I N   J:=X;  L:=X  E ND "  i s   t h e   m a x i m a l  
d e t e r m i n i s t i c   s t r i n g   t h a t   c o u l d   b e   r e c o g n i z e d ,   a n d   h e n c e  

r e m o v e   i t   f r o m   f u r t h e r   c o n s i d e r a t i o n .   T h a t   i s ,   i t   w i l l  
r e s t a r t   t h e   p a r s e   s t a r t i n g   w i t h   t h e   s e m i c o l o n .  

T h e   a b o v e   e x a m p l e   i n   f a c t   c h a r a c t e r i z e s   t h e   e r r o r  
r e c o v e r y   m e t h o d   d e s c r i b e d   i n   t h i s   c h a p t e r .   To  s t a t e   t h e  
m e t h o d   m o r e   e x p l i c i t l y ,   l e t   me  s t a r t   b y   d e f i n i n g   a n   e r r o r  

s t a t e   a s   a  s e t   o f   L R  p a r s e r   s t a t e s ,   w h e r e   e a c h   e r r o r   s t a t e  
c o n t a i n s   t h e   s e t   o f  L R   p a r s e r   s t a t e s   t h a t   t h e   p a r s e   m i g h t   b e  

i n .   T h e   r e s t a r t   s t a t e   a s   a   s p e c i a l   e r r o r   s t a t e   c o n t a i n i n g  
a l l   t h e   L R   p a r s e r   s t a t e s .  

Th e   f i r s t   s h i f t ,   i n   e r r o r   r e c o v e r y ,   i s   a  f o r c e d   s h i f t  
t h r o u g h   t h e   i l l e g a l   t e r m i n a l   s y m b o l   t h a t   p r o d u c e d   t h e  
r e j e c t i o n .   T h i s   s h i f t   c a n   b e   v i e w e d   a s   a  p a r a l l e l   s h i f t ,   o n  

t h e   e r r o r   s y m b o l   a ,   f r o m   a l l   LR  p a r s e r   s t a t e s   I  i n   t h e  
r e s t a r t   s t a t e   t o   a l l   s t a t e s   J  s u c h   t h a t   a c t i o n ( 1 , a )   =  J.  I t  
w i l l   t h e n   t r y   t o   p a r s e   t h e   i n p u t   w h e r e   t h e   p a r s e   w i l l   s t a r t ,  

s i m u l t a n e o u s l y ,   f r o m   e a c h   o f   t h e   L R   p a r s e   s t a t e s   J  e x i s t i n g  
a f t e r   t h e   f o r c e d   s h i f t   t h r o u g h   t h e   i l l e g a l   s y m b o l .   I f   a l o n g  

t h e   w a y ,   a n y   o f   t h e s e   p a r s e s   p r o d u c e   a n   e r r o r ,   i t   w i l l   b e  
d r o p p e d   f r o m   f u r t h e r   c o n s i d e r a t i o n   f o r   s i m u l t a n e o u s   p a r s i n g .  

One  p o s s i b l e   r e s u l t   o f   t h e   a b o v e   p r o c e s s   i s   t h a t   a l l  
p a r s e s   w i l l   b e   d r o p p e d   f r o m   t h e   s e t   o f   s i m u l t a n e o u s   p a r s e s .  
U n d e r   t h i s   c o n d i t i o n ,   i t   i s   c l e a r   t h a t   t h e r e   i s   n o  * 

d e r i v a t i o n   s u c h   t h a t   S  =>  awc  f o r   t h e   p a r s e d   i n p u t   x. R -  
H e n c e ,   i t   i s   q u i t e   l e g a l   t o   a s s u m e   t h a t   t h e   n e x t   i n p u t  

s y m b o l   i n p u t   c a n   n o t   o c c u r ,   a n d   r e p o r t   i t   a s   a n   e r r o r .  

S i n c e   t h i s   i s   a n   e r r o r ,   t h e   a l g o r i t h m   w i l l   t h e n   r e s t a r t   t h e  
r e c o v e r y   m e t h o d   o n   t h e   n e x t   i n p u t   s y m b o l .   N o t e   t h a t   t h e  

f i r s t   a c t i o n   o n   a n y   e r r o r   i s   a   f o r c e d   s h i f t .   T h i s   i s   d o n e  

t o   g u a r a n t e e   t h a t   t h e   r e m a i n i n g   i n p u t   i s   p a r s e d .   A l s o ,  
e r r o r   r e c o v e r y   s h o u l d   n o t   c o n t i n u e   i f   t h e   i l l e g a l   t e r m i n a l  
s y m b o l   was  t h e   e n d   o f   s t r i n g   m a r k e r   $ .  

T h e   s e c o n d   p r o b l e m   i s   t h a t   i f   t h e   a b o v e   e r r o r   r e c o v e r y  
p r o c e s s   i s   t o   b e   m e r g e d   i n t o   t h e   LR  p a r s e r ,   t h e   p a r a l l e l  
p a r s e s   h a v e   t o   b e   made  d e t e r m i n i s t i c .   T h e r e   i s   n o   p r o b l e m  
w i t h   t h e   a c t i o n   f u n c t i o n   f o r   a  s e t   of  s t a t e s ,   i f   t h e   r e s u l t  

f o r   a l l   p o s s i b l e   i n p u t s   i s   a   s h i f t   e n t r y .   I n   t h i s   c a s e   i t  

i s   c l e a r   t h a t   t h e   a c t i o n   i s   d e t e r m i n i s t i c ,   s i n c e   r e s u l t i n g  
s t a t e s   c a n   b e   l u m p e d   i n t o   a   new  s e t   o f   s t a t e s   a n d   h e n c e  

c r e a t i n g   a  new  e r r o r   s t a t e .   T h e   same  i s   t r u e   f o r   t h e   g o t o  

f u n c t i o n .   T h e r e f o r e ,   n o n d e t e r m i n i s m   c a n   o n l y   o c c u r   i f   t h e  

action,  for  a  set  of  states to be simultaneously  parsed, 

contain either 

i)  shifts and  reductions for the same input symbol 
ii)  reductions for different productions  for  the  same 

input  symbol  (as shown in the previous  example) 
Unfortunately,  neither  of  these cases seem to be  resolvable 

deterministically.  If,  in  either  case,  the  parse  was 
allowed  to  continue and  the next  action was  performed,  the 

result  would  produce  two  different  paths.  That  is, the 
above two  conditions would  result  in  disjoint  sentential 
prefixes.  Such  conditions  will  be  called  overdefined. 
However, some decision still has to  be  made  so  that  the 

remaining  input  can  be  parsed.  Again,  the conservative 
approach was  taken.  Whenever  the input  string being  parsed 
becomes  overdefined,  the  parser  assumes  that  it  is  the 
maximal substring  it  can recognize, and  restarts  the  whole 

error  recovery process  on the next  input symbol. 

By  merging  the error-recovery  into the LR parser, a new 
LR  parser  with  error  recovery  c  n  be built.  If an LR 

parsing  table  is  the  tuple 
M  =  (  K  ,actian , pot0  , G  , start),  then  let  the  same 

parser  with  error  recovery  be  defined  as  the  tuple 
M'  =  (  K  ,  K'  ,  action  ,  poto  , G  , start  , init-error) 

where 

K,G,  and  start are defined  as in M, 

K'  is a  set of  new states called  error  recovery  states 

init-error  is a state in  K'  denoted  as  the  restart 
state of  the error  recovery  method 
goto  : (K U K')  x  N  ->  K U  K'  U {error) 

action  : (K  U  K')  x  T - >  

{shift  k  I  k 6 K )   U  {error,overdefined)  U 

{reduce  p  I  p  6 P) 
Furthermore, the init-error  state will be  so  defined  that 

for  each  b  6 T,  action(init-error,b)  =  shift j  for  some 
state j.  Each  recovery  state is a set of  parsing  states  in 
K,  such  that  it  is  the  set  of  states  that  can occur 

simultaneously  for  the  input  string being  parsed. 

Using  the  above  definition,  LR  parsers  with  error 
recovery  can be built by  the following algorithm: 

Construction of J&  parser with  error  recovery 
input:  LR parsing  table M  =  (K,action,poto,G,start) 
output:  LR parsing  table M'  =  (K  , K'  ,action  ,-  , G   , 

start  , init-error) 

method: 

begin 

{initialize  state init-error) 

set K'  to  the single state containing the set {s  6 K) - 
and  label it as init-error; 

for each  a 6 T - 

let  s be  the set - 

{j  6 K  (  action(i,a)  =  shift j 

for all i 6 init-error); 
if  s is a singleton - 

then set s'  to  the element of  s - 
else if  s 6 K' - -  

then set s'  to  that  state in K' - 
else add  s  to K'  and  label the new state as s'; - 
f i - 

set action(init-error,a)  =  s e  - 
od - 

for  each X 6 N - 

let s be  the set - 

{j  6 K  1  goto(t,X)  =  j 

for all t  6 init-error); 
if  s is empty - 

then set poto(init-error,X)  =  error - 
else - 

if  s  is a singleton - 

then set s'  to  that  element  of  s - 
else if  s 6 K' - -  

then set s'  to  the state in K'  containing - 
S 

else add  s  to  K',  and  set s'  to  its label - 
fi - 
set $oto(init-error,X)  =  s'; - 
f i - 
od - 

{build  each  general error state) 
repeat 

for each  state i 6 K'  such that  the parsing  table - 

for that  state is still undefined 

for each a 6 T - 

i f   t h e r e   e x i s t s   two   s t a t e s   S  -  1 s S 2   6  i  s e t .  

[ A   ->  2  .  , LA1]  6 S 1   w h e r e   a  6  L A l  

[ B ->  2  A  , LA2]  6 S 2  

w h e r e   f i r s t ( 4 )   =  a  
t h e n   s e t   a c t i o n ( i , a )   =  o v e r d e f i n e d  - -  
e l s e   i f   t h e r e   e x i s t s   two   s t a t e s  - -  

w h e r e   a  6  LA1  LA2  a n d   A - > a   #  B->b 
t h e n   s e t   a c t i o n ( i , a )   =  o v e r d e f i n e d  -- 
e l s e   i f   t h e r e   e x i s t s   a  s t a t e   s  6  i  s . t o  - -  

[ A   ->  2  . ,LA]  6  s  w h e r e   a  6  LA 
t h e n   s e t   a c t i o n ( i , a )   =  r e d u c e   A  ->  w -- 
e l s e  

l e t   s  b e   t h e   s e t  - 
{j  6  K  I  a c t i o n ( t , a )   =  s h i f t   j 

f o r   a l l   t  6  i); 

if  s is empty - 

then set action(i,a)  =  error - -  
else - 

if  s is a singleton - 

then set s'  to  the element  in s 
else if  s 6 K' - -  

then set  s '   to  the state in K' - -  
containing s 

else add s to R',  setting s'  as  the - 
label of  the added  state; 
f i  - 

set action(i,a)  =  shift s' - 
f i - 
f i - 
od - 

for  each X 6 N &  - 

let  s  be the set {j  6 K  I  goto(t,X)  =  j - 

for all  t  6 i); 
if  s is empty - 

then set goto(i,X)  =  error - 

else - 

if  s is a singleton - 

then set s'  to  the element  in s - 
else if  s 6 K' - -  

then set s'  to  the state in K' - 

containing s 
else add  s to K',  and  set s'  to  its - 

label 
f i g  - 9  
set goto(i,X)  =  s' - 
f i - 
od - 
od - 
until no more  states can be added  to K' 
end - 

Using  the resulting L R , p a r s e r  with  error  recovery,  the 
basic  control  can  be  handled  using  the decision function 

df'  : path  x  T ->  path  as follows: 

i)  df0([q:a1  ,b)  =  [q:=bl 

when action(top([q:gl),b)  =  shift j for some 

j 6 (K  U  K') 

ii)  df'([q:=l  ,b)  =  df'([q:aAJ  ,b) 

when action(top([q:aw])  ,b)  =  reduce A ->  w, and  if 

aw =  S  then b  #  $ - 

iii)  df'([init-error:w],b)  =  df'([init-error:A],b) 

when  action(top([init-error:wl),b) 

=  reduce A  ->  E ,  
where a #  e  and  b  #  $ 

iv)  df'(  [Sl , $ )   =  accept 
v)  df'(  [init-error:S] , $ )   =  Reject 

if  action(top(  [init-error:S] ) , $ )   =  accept  or 
I  overdef ined 

vi)  df8([q:&]  , $ )   =  reject 

when  action(top([q:=l),$)  =  error 

vii)  df' ( [init-error :a] ,b)  =  [init-error,b] 

where b  P  $,  and 

action(top([init-error,&]),b)  =  overdefined 7 

viii)  df'  ( [ q : ~ ]  ,b)  =  [init-error :bl 

where b  #  $  and  action(top([q:g])  , b )   =  error 

Note  t h a t   c a s e s   v i )   o r   v i i i )   r e p r e s e n t   t h a t   an  e r r o r   h a s  
b e e n   found  i n   t h e   s t r i n g   b e i n g   p a r s e d .   Hen ce ,  any  e r r o r  

m e s s a g e s   produced  a r e   pr od uc ed   a t   t h e s e   p o i n t s .  

F i n a l l y ,   an  LR  p a r s e r   w i t h   e r r o r   r e c o v e r y   c a n   be  
implemented  s i m p l y   by  c a l l i n g   t h e   p r o c e d u r e   p a r s e ,   u s i n g   d f '  
a s   t h e   d e c i s i o n   f u n c t i o n .  C h a p t e r   1 

I m p l e m e n t a t i o n  

T h i s   c h a p t e r   d i s c u s s e s   tw o   p r o g r a m s .   T h e   f i r s t   p r o g r a m  
c r e a t e s   a n   S L R ( 1 )   p a r s e r ,   w i t h   e r r o r   r e c o v e r y .   T h e   s e c o n d  
p r o g r a m   c r e a t e s   e i t h e r   a n   LR(l),  L A L R ( l ) ,   w e a k l y   c o m p a t i b l e  
o r   a   s t r o n g l y   c o m p a t i b l e   L R   p a r s e r .   T h e   f i r s t   s e c t i o n  

d i s c u s s e s   t h e   r e p r e s e n t a t i o n   o f   t h e   p a r s i n g   t a b l e s   b u i l t   b y  
b o t h   p r o g r a m s .   T h e   s e c o n d   s e c t i o n   d e s c r i b e s   t h e  

i m p l e m e n t a t i o n   o f   t h e   S L R ( 1 )   p a r s e r   c o n s t u c t o r   a n d   how  t h a t  
s y s t e m   i s   u s e d   w h i l e   t h e   t h i r d   s e c t i o n   d o e s   t h e   s a m e   f o r   t h e  

s e c o n d   p a r s e r   c o n s t r u c t o r .  

V.l  Representation of the parsing  tables - 

The  representation  of  the  parsing  tables  naturally 
suggest  using  arrays.  For  uniformity  of both  access and 
values  held  in the arrays, all terminal symbols, nonterminal 

symbols,  and  productions  are provided  with  an  internal code 
of  integers by  both  programs.  For  terminal  symbols,  the 

codes are defined by  the  set 

{i  I  Olicn where n  is the number  of  distinct  terminal 

symbols occurring  in the productions) 
where  0 is reserved  for  the  special  terminal  symbol  $. 

Nonterminal  symbols  are encoded  using  the set 

{i  I  -msil-1  where m is the number of  distinct 

nonterminals  occurring  in the productions) 
where  the  start symbol S will always be  given  the  code  -1. 

Productions are coded  using  the set 

{i  I  1si<p -  where p is the number of  productions 

in the grammar) 
where  the production S  ->  S'  is always given the  code  1. 

In representing  the action  and  t o  functions,  only 
non-error  values  are kept internally since the vast  majority 

of  the function values are in  fact  error.  The  remaining 
values  are  saved  in groups, one for for each  state, where 

states having  the  same  set  of  non-error  values  will  be 
represented  by  a single copy of  the groups. 

F o r   e x a m p l e ,   the grammar 
w o u l d   p r o d u c e   the  f o l l o w i n g   SLR(1)  p a r s i n g   t a b l e s :  

A c t i o n   t a b l e  

-  - I I 
1 5   I  S->E  I  S  9  1  I  I  I  S l O I  +-----+--------+--------+--------+--------+--------+--------  + 

1  16  I  0  I  0  I  S 8   I  I  I  S l O I  +-----+--------+--------+--------+--------+--------+--------  + 

1  17  1  0  I  0   I  0  I  I  1  I +-----+--------+--------+--------+--------+--------+--------+ 

w h e r e   s h i f t   j  i s   r e p r e s e n t e d   by  S  j, r e d u c e   p  is  r e p r e s e n t e d   b y   p ,  

o v e r d e f i n e d   i s   r e p r e s e n t e d   by  0 ,  a n d  e r r o r   is  omitted. 

g o t o   t a b l e  
1  1 4   1  I 1 5   I 1 6   1 1 7   j +-----+--------+--------+--------+--------  + 

I  15  I  1  I  I +-----+--------+--------+--------+--------  I + 
1  16  1  I  I  I  I +-----+--------+--------+--------+--------+ 

1  17  1  I  I  I +-----+--------+--------+--------+--------  I + 

where  g o t o ( i , X )   =  e r r o r   h a s   b e e n   o m i t t e d  

By  e l i m i n a t i o n   o f   t h e   e r r o r   v a l u e s ,   58.8%  o f   t h e   a b o ve  
t a b l e s   d o e s   n o t   n e e d   t o   b e  s a v e d .   A l s o ,   s t a t e s   1,2,8  and  9 
i n   t h e   p r e v i o u s   a c t i o n   t a b l e   a l l   h a v e   t h e   same  same  s e t   o f  

v a l u e s   a n d   t h e r e f o r e   w i l l   b e   r e p r e s e n t e d   b y   o n l y   o n e   g r o u p  

o f   v a l u e s .  

E a c h   n o n - e r r o r   v a l u e   o f   t h e   a c t i o n   t a b l e   w i l l   b e  
r e p r e s e n t e d   a s   f o l l o w s :  

i )   a c t i o n ( i , a )   =  s h i f t   j  w i l l   b e   r e p r e s e n t e d  

by  t h e   p a i r   ( x , j )   w h e r e   x  i s   t h e   c o d e   o f   t h e  

t e r m i n a l   s y m b o l   a .  

i i )   a c t i o n ( i , a )   =  r e d u c e   A  ->  w  w i l l   b e   r e p r e s e n t e d  

b y   t h e   p a i r   ( x , - p )   w h e r e   x   i s   t h e   c o d e   o f   t h e  

t e r m i n a l   s y m b o l   a  a n d   p   i s   t h e   c o d e   o f   t h e  
p r o d u c t i o n   A  ->  2. 

i i i )   a c t i o n ( i , a )   =  o v e r d e f i n e d   w i l l   b e   r e p r e s e n t e d  

b y   t h e   p a i r   ( x , O )   w h e r e   x   i s   t h e   o f   t h e   t e r m i n a l  

s y m b o l   a .  

T h e   n o n - e r r o r   v a l u e s   o f   t h e   g o t o   t a b l e ,   f o r   so me 
s t a t e   i ,   w i l l   b e   r e p r e s e n t e d   a s   t h e   p a i r   ( x , j )   w h e r e  
~ o t o ( i , A )  =  j  a n d   x   i s   t h e   c o d e   o f   t h e   n o n t e r m i n a l   A. 

F o r   e f f i c i e n c y   i n   r e t r i e v i n g   t h e   v a l u e s   f r o m   t h e   a c t i o n  
a n d   g o t o   t a b l e s   t h e   i n t e g e r   p a i r s   c o r r e s p o n i n g   t o   e a c h   s t a t e  

a r e   s o r t e d   u s i n g   t h e   r e l a t i o n   5'  w h e r e  

( a , b )   5'  ( c , d )   i f f   e i t h e r   a < c ,   o r   a 6 c   a n d   b < d .  
F o u r   i n t e g e r   a r r a y s   a r e   u s e d   t o   r e p r e s e n t   t h e   v a l u e s   o f  
t h e   t w o   p a r s i n g   t a b l e s .   T h e   a r r a y   p a r s e t a b l e   i s   a   n   x  2 
a r r a y ,   f o r   s ome  n ,   w h i c h   h o l d s   a11  o f  t h e   n o n - e r r o r   v a l u e s  

o f   t h e   two   p a r s i n g   t a b l e s .   T h e  a r r a y s   a c t i o n l i s t   a n d  
g o t o l i s t   a r e   s  x  2  a r r a y s ,   w h e r e   s  i s   t h e   n u m b e r   o f   p a r s e  

s t a t e s ,   a n d   a r e   u s e d   t o   d e f i n e   w h e r e   t h e   v a l u e s   o f   t h e  
a c t i o n   a n d   g o t o   f u n c t i o n s   a r e   s a v e d   i n   t h e   a r r a y   p a r s e t a b l e .  

E a c h   e l e m e n t   i n   t h e s e   two  a r r a y s   i s   t h e   p a i r   ( b , t )   w h e r e   b  

i s   t h e   s t a r t i n g   p o s i t i o n   o f   t h e   v a l u e s   s a v e d   f o r   t h a t   s t a t e  
w h i l e   t  i s   t h e   n u m b er   o f   n o n - e r r o r   v a l u e s   o f   t h e   f u n c t i o n  

f o r   t h a t   s t a t e .   T h e   l a s t   a r r a y   p r o d u c t i o n l i s t   i s   a   p   x  2 
a r r a y   w h e r e   p   i s   t h e   n u m b e r   o f   p r o d u c t i o n s   a n d ,   f o r   e a c h  
p r o d u c t i o n   A  ->  w i t   h o l d s   t h e   p a i r   ( x , l w l )   w h e r e   x   i s   t h e  

c o d e   o f   A  a n d   1x1  i s   t h e   l e n g t h   o f   t h e   s t r i n g  1. 

R e t u r n i n g   t o   t h e   p r e v i o u s   e x a m p l e ,   l e t   t h e   c o d e s   o f   t h e  
t e r m i n a l s ,   n o n t e r m i n a l s ,   a n d   p r o d u c t i o n s   b e   a s   f o l l o w s :  

t e r m i n a l s   n o n t e r m i n a l s   p r o d u c t i o n s  

U s i n g   t h e   a b o v e   c o d e s ,   t h e   a c t i o n   and  g o t o   t a b l e s   would 

i n t e r n a l l y   be  r e p r e s e n t e d   a s   f o l l o w s :  

a c t i o n l i s t  ---------- 
1  1:2 2  1:2 
3  9:4 4  13:4 

5  17:4 6  21:2 

7  23:2 8  1:2 
9  1:2 10  28:4 
11  32:4 12  36:4 
13  40:5 14  45:6 
15  54:3 16  57:4 

17  61:4 

P r o d u c t i o n l i s t  -------------- 
1  -1:l 2  -2: 3 
3  -2: 1 4  -3:3 
5  -3: 1 6  -4: 1 

7  -4:3 

g o t o l i s t  -------- 
1  3:3 2  6:3 
3  13:O 4  17:O 
5  21:o 6  23:O 

7  25:O 8  25:l 
9  26:2 1 0   32:O 
11  36:O 12  40:O 
13  45:O 1 4   51:3 
15  57:O 16  61:O 

17  65:O 

p a r s e t a b l e  

For  e x a m p l e ,   t h e   a c t i o n   v a l u e s   h e l d   i n   t h e   a b o v e   t a b l e  
f o r   s t a t e   5  s t a r t   a t   p o s i t i o n   17 i n   t h e   a r r a y   p a r s e t a b l e   and 
h a s   4  n o n - e r r o r   v a l u e s .   P o s i t i o n s   17 t h r o u g h   20  r e p r e s e n t  

t h e   a c t i o n   v a l u e s :  

$  : r e d u c e   E->T 

*  : reduce E->T 
+  : shift 8 

)  : reduce  E->T 

V . 2   SLR(1)  implementation - 

This section describes how to  use  the  SLR(1)  parser 
constructor  with  error  recovery.  This  implementation has 

the restriction that  no  production  can  be  of  the  form 
A  ->  g.  Included  in this section is a brief  description of 

the input grammar,  how  to  run  the  system,  and  how  to 
interpret  the output  produced. 

V.2.1  Input Grammar 

The input for the program  is  the  set  of  productions 
defining  the  CFG  which  the SLR(1)  parsing  table  is to be 

constructed  from.  The input will be parsed  in a free  style 

format, that  is, no formatting by  columns or line boundaries 
will be  used.  The end  of  line character will be  treated  as 

a  blank  character  and  each symbol on the input file must  be 

separated  by  one or more blanks. 

In general, a  terminal  symbol  is  represented  by  a 
nonblank  string, of  15 characters or  less not beginning with 

the  character  "<" ,  and  is  not  one  of  the  metasymbols 

("->n,n$tc, and  "."). In the event that the user may  use one 
of  the metasymbols used  by  the program,  or  a nonblank string 
beginning  with  a  " < "   ,  the  quote  symbol  has been given 

special meaning.  If  the  quote  is  followed  by  a  blank 
character,  it  will  be  treated  as  a  terminal  symbol. 
Otherwise,  if  the quote is followed by  a  nonblank  string, 

the  string  following  the quote will be  treated  as the name 
of  the terminal symbol. 

Nonterminal  symbols  are  represented  as  character 
strings,  of  15 characters or less, enclosed  by  the symbols 

tl < I1  and  ">" .  The first symbol of  the  string,  if  not  the 

empty  string, must  begin with a nonblank character  but  blank 

characters can appear  anywhere  else  in  the  string.  The 
program  also  accepts  the  string  "<>" which  represents a 
nonterminal symbol whose name is the empty  string. 

Productions are represented by  writing  them in the form 
A  ->  w  where A  is  a nonterminal, w is a sequence of  grammar 

symbols, and  It->" is a metasymbol  recognized by  the program. 
Each  production  is  separated  from  the  next  using  the 
metasymbol  "." and  after  the last production,  the metasymbol 

It$"  must  appear.  The  productions  can be  entered  in any 
order  except that  the first production,  on the  input  file, 

must be  the start production. 

For example,  the grammar  presented  in  V.1  could  be 
represented  by  the following piece of  input: 

A  shorthand notation also  exists for productions having 
the  same  left  hand  side  (i.e.  productions of  the form 
A  ->  w where A  remains constant  between  the  productions). 

In  these  cases, the productions can be  entered  in the form 
A  ->  w  ! w  1  ...  ! w  where  there exists  the productions -1  -2  '  -Z1 

For  example,  the grammar  in  section  V.l  could  have 
alternatively been written  as: 

The order  in which  productions  are found  in  the  input 
file  corresponds  to  the order in which  they will be  coded 
internally.  I n   a  similar  manner,  the  terminal  and 
nonterminal symbols will be  coded  in the order  corresponding 

to  their  first appearance in the set of  productions. 

V.2.2  R u n n i n g   t h e   S L R ( 1 )   p a r s e r   c o n s t r u c t o r  

T h e   s y s t e m   c a n   b e   r u n   o n   t h e   Vax-11  i n   t h e   M o o r e  
S c h o o l ,   b y   e n t e r i n g   t h e   f o l l o w i n g   m o n i t o r   l e v e l   p r o c e d u r e  

c a l l :  

$ @  [ k a r l ]  s l r b n f  
A f t e r   i n v o c a t i o n ,   t h e   p r o c e d u r e   w i l l   a s k   t h e   u s e r   f o r   t h e  

f i l e s   u s e d   b y   t h e   p r o g r a m ,   a n d   r u n   t h e   p r o g r a m .  

T h e   f i r s t   f i l e   t o   b e   r e q u e s t e d   i s   t h e   f i l e   c o n t a i n i n g  
t h e   s e t   o f   p r o d u c t i o n s ,   a n d   i s   r e q u e s t e d   w i t h   t h e   p r o m p t :  

i n p u t  : 

T h e   s e c o n d   f i l e   r e q u e s t   i s   f o r   t h e   o u t p u t   f i l e   w h i c h  
w i l l   c o n t a i n   a l l   d i a g n o s t i c   a n d   i n f o r m a t o r y   m e s s a g e s ,   a n d   i s  

r e q u e s t e d   w i t h   t h e   p r o m p t :  

o u t p u t  : 

T h e   t h i r d   f i l e   r e q u e s t   i s   f o r   t h e   f i l e   t h a t   t h e   c r e a t e d  
S L R ( 1 )   p a r s i n g   t a b l e s   s h o u l d   b e   s a v e d   o n ,   a n d   i s   r e q u e s t e d  
w i t h   t h e   p r o m p t :  

i n t e r n a l   r e p r e s e n t a t i o n :  

T h e   l a s t   two  f i l e   r e q u e s t s   a r e   f o r   t e m p o r a r y   f i l e s   t h a t  
c a n   b e   u s e d   by  t h e   p r o g r a m ,   a n d   a r e   b o t h   r e q u e s t e d   w i t h   t h e  
p r o m p t :  

t e m p o r a r y   s t o r a g e   u n i t :  

Upon  c o m p l e t i o n   o f   t h e   f i l e   r e q u e s t s ,   t h e   p r o g r a m   i s  
r u n .   Th e   p r o g r a m   w i l l   n o t   p r o d u c e   a n y   o u t p u t ,   o n   t h e   u s e r ' s  

s c r e e n ,   n o r   w i l l   i t   a s k   t h e   u s e r   f o r   a n y   f u t h e r   i n f o r m a t i o n  
u n l e s s   t h e   S L R ( 1 )   p a r s i n g   t a b l e   w a s   c r e a t e d   a n d   c o n t a i n s  

c o n f l i c t s   ( s e e   s e c t i o n   V.2.4  f o r   h a n d l i n g   t h i s   c a s e ) .  

T h i s   p a p e r   w i l l   n o t   m e n t i o n   how  t o   u s e   t h e   f i l e  
c o n t a i n i n g   t h e   S L R ( 1 )   p a r s i n g   t a b l e s   e x c e p t   f o r   a   PASCAL 
p r o g r a m   s k e l e t o n   i n   a p p e n d i x   a .  

V.2.3  I n t e r p r e t a t i o n   of  the o u t p u t   f i l e  

T h e   o u t p u t   c a n   b e   b r o k e n   i n t o   two  m a j o r   s e c t i o n s   w h e r e  
t h e   f i r s t   s e c t i o n   d e s c r i b e s   how  t h e   p r o g r a m   p a r s e d   t h e   i n p u t  
g r a m m a r   a n d   t h e   s e c o n d   s e c t i o n   p r i n t s   t h e   b u i l t   S L R ( 1 )  
p a r s i n g   t a b l e s .   H o w e v e r ,   t h e   s e c o n d   s e c t i o n   w i l l   b e  

p r o d u c e d   o n l y   i f   t h e r e   were  n o   e r r o r s   d e t e c t e d   i n   t h e   f i r s t  

s e c t i o n .  

T h e   f i r s t   p a g e   of  t h e   o u t p u t   i s   a   c o p y   o f   t h e   i n p u t  
b e i n g   p a r s e d ,   a l o n g   w i t h   a n y   e r r o r   m e s s a g e s   i n d i c a t i n g  

i l l e g a l   s y n t a x .   I f   t h e r e   were  n o   s y n t a c t i c   m i s t a k e s   i n   t h e  

i n p u t   g r a m m a r ,   t h e n   t h i s   p a g e   w i l l   b e   a n   e x a c t   d u p l i c a t e   o f  
t h e   i n p u t   f i l e .   O t h e r w i s e ,   p o r t i o n s   o f   t h e   i n p u t   f i l e   w i l l  
b e   w r i t t e n ,   a n d   w i l l   b e   i n t e r s p e r s e d   w i t h   s y n t a c t i c a l   e r r o r s  

r e c o g n i z e d   b y   t h e   p r o g r a m .  

F o r   e x a m p l e ,   t h e   e r r o n e o u s   i n p u t :  
w o u l d   p r o d u c e   t h e   f o l l o w i n g   o u t p u t :  

< S >   ->  <A >  .  < A >   ->  a  < A >   b   .  A  * * * i l l e g a l   LHS 
I n   t h i s   e x a m p l e ,   t h e   p r o g r a m   i s   r e p o r t i n g   t h a t   t h e  
p r o d u c t i o n   h a s   a   t e r m i n a l   s y m b o l   o n   t h e   l e f t   h a n d   s i d e   o f  

t h e   p r o d u c t i o n .  

T h e   n e x t   t h r e e   s u b s e c t i o n s   o f   t h e   o u t p u t   r e p o r t s   t h e  
c o d i n g   s c h e m e   o f   t e r m i n a l s ,   n o n t e r m i n a l s ,   a n d   p r o d u c t i o n s  
u s e d   b y   t h e   p r o g r a m .  

F o r   e x a m p l e ,   t h e   i n p u t  : 

w o u l d   p r o d u c e   t h e   f o l l o w i n g  o ut pu t:  

T E R M I N A L   NODES: --------  ------ 

N O N T E R M I N A L   NODES: -----------  ------ 
P R O D U C T I O N S  : ------------ 
T h e  p r o g r a m   p r o v i d e s   a d d i t i o n a l   i n f o r m a t i o n   w i t h   t h e  
c o d i n g   s ch em es ,  t h a t   is,  if  t h e  s t r i n g   "*undef*"  p r o c e d e s   a  
n o n t e r m i n a l ,   t h e n  t ha t  n o n t e r m i n a l   d o e s   no t  o c c u r   o n   t h e  

l e f t   h a n d   s i d e   o f   a n y   p r o d u c t i o n   r e c o g n i z e d   w h i l e   p a r s i n g  

t h e   i n p u t   f  i l e a  

B e l o w   t h e   c o d i n g   s c h e m e   i s   a  d i a g n o s t i c   summmary  o f   how 
w e l l   t h e   p r o g r a m   d i d   i n   p a r s i n g   t h e   g i v e n   i n p u t   b n f .   I f  

e v e r y t h i n g   i s   a c c e p t a b l e   t o   t h e   p r o g r a m ,   i t   w i l l   p r i n t   t h e  
m e s s a g e   " s u c c e s s f u l   p a r s e "   a n d   a t t e m p t   t o   c o n s t r u c t   t h e  

SLR(1)  p a r s i n g   t a b l e s .   O t h e r w i s e ,   i t   w i l l   g i v e   a n   e r r o r  
sum mary   o f   why  i t   t h o u g h t   t h e   i n p u t   w a s   w r o n g ,   a n d   a b o r t   a n y  
f u r t h e r   c a l c u l a t i o n s .  

S h o u l d   t h e   i n p u t   g r a m m a r   b e   s u c c e s s f u l l y   p a r s e d ,   t h e  
p r o g r a m   t h e n   a t t e m p t s   t o   b u i l d   t h e   SLR(I)  p a r s i n g   t a b l e s .  

To  b e g i n   w i t h ,   i t   c o m p u t e s   t h e   f i r s t   a n d   f o l l o w   s e t s   f o r  

e a c h   n o n t e r m i n a l ,   a n d   p r i n t s   o u t   t h e s e   s e t s .   S e c o n d ,   i t  
p r i n t s   o u t   t h e   s e t s   o f   SLR(1)  i t e m s   d e f i n i n g   t h e   c o r e   o f  

e a c h   s t a t e .  

F o r   e x a m p l e ,   t h e   p r e v i o u s   i n p u t   g r a m m a r   w o u l d   p r o d u c e  
o u t p u t   f o r   t h e   f i r s t   f i v e   s t a t e s   a s   f o l l o w s :  

.............................................  S T A T E   : 1 

1 )   < S >   ->  . < E >   '<EOF  MARKER> ............................................. 

S T A T E   : 2 
7 )   < F >   ->  (  . < E >   ) 
-------------------------------------------a-  S T A T E   : 3 

6 )   < F >   ->  i d  ............................................. 

S T A T E   : 4 
5 )   < T > - > < F >  ............................................. 

S T A T E   : 5 
3 )   < E >   ->  < T >   . 
4 )   < T >   ->  < T >   . +  < F >  

T h e   l a s t   s e c t i o n   o f   t h e   o u t p u t ,   f o r   a   r u n ,   i s   a  
r e a d a b l e   f o r m   o f   t h e   p r o d u c e d   p a r s i n g   t a b l e   f o l l o w e d   b y   t h e  
s i z e   o f   t h e   a r r a y   p a r s e t a b l e .   N o n - e r r o r   v a l u e s ,   o f   t h e  
p a r s i n g   t a b l e s ,   f o r   e a c h   s t a t e   a r e   l i s t e d   s e p a r a t e l y   w i t h  

t h e   a c t i o n   v a l u e s   p r e c e e d i n g   t h e  s o t o   v a l u e s .  

For example, the output produced  by  the program  for the 
parsing values  for  the first state would  be as follows: 

.............................................. 

STATE  1 

id  SHIFT TO  3 

(  SHIFT TO  2 

V . 2 . 4   Conflict Resolution 

Sometimes, when a CFG G  is provided  as  input  to  the 
SLR(1)  parser  constructor  it can not produce a  SLR(1)  parser 
for G  since L(G)  is not  in the class of  languages of  SLR(1). 

In  such  cases,  the  construction  method  has  produced 
conflicts  in the action table. 

For example,  the grammar  in figure 5.1  is an example of 
a  natural grammar for arithmetic  expressions with  operators 
+  and  *.  The  LR(0)  characteristic  automaton,  for  this 

grammar,  and  the  follow sets are shown in figure 5.2.  In 

states 9  and  10, there  will  exist  S/R  conflicts  on  the 

s y m b o l s   +  and  *  if  t h e   SLR(1)  parser  is built  from  the 

characteristic  automaton.  T h i s   can  also  be  seen  i n   t h e  

output  produced  by  t h e  program  f o r  such  a n   input  (see figure 

5.3). 

f i n u r e  5.1 

f i g u r e  5.2 

...............................................  STATE  : 9 

* * * R E D U C E / S H I F T  C O N F L I C T   O N   S Y M B O L  + OLD  ENTRY:  -2  CONFLICTING ENTRY: 

***REDUCE/SHIFT CONFLICT ON  SYMBOL * OLD  ENTRY:  -2  CONFLICTING  ENTRY: 
...............................................  STATE  :  10 

***REDUCE/SHIFT C O N F L I C T  O N   S Y M B O L  + OLD  ENTRY:  -3  CONFLICTING  ENTRY: 

* * * R E D U C E / S H I F T  CONFLICT O N   S Y M B O L   * OLD  ENTRY:  -3  CONFLICTING  ENTRY: 

f i g u r e   5.3 

It  t u r n s   o u t   t h a t   t h e s e   c o n f l i c t s   c a n   b e   r e s o l v e d   i n  
f a v o r   o f   e i t h e r   a   s h i f t   o r   a   r e d u c e   a c t i o n   b y   k n o w i n g   t h e  
p r e c e d e n c e   a n d   a s s o c i a t i v i t y   o f   t h e s e   t w o   o p e r a t o r s .   F o r  

e x a m p l e ,   l o o k i n g   a t   s t a t e   9  a n d   t h e   o p e r a t o r   *,  t h e   p a r s e r  

i s   a t t e m p t i n g   t o   r e c o g n i z e   t h e   s e n t e n t i a l   f o r m :  

E + E * E  
A s s u m i n g   t h a t   *  h a s   p r e c e d e n c e   o v e r   +,  i t   i s   c l e a r   t h a t   w e  

w a n t   t o   s h i f t   o n   t h e   i n p u t   s y m b o l   *  t o   f i r s t   r e c o g n i z e   t h e  

s t r i n g   E  *  E  a n d   r e d u c e   i t   t o   t h e   s t r i n g   E  p r o d u c i n g   t h e   new 

s e n t e n t i a l   f o r m  

E + E  

S h o u l d   t h e   g r a m m a r   i n   t h e   i n p u t   f i l e   p r o d u c e   c o n f l i c t s ,  
t h e   p r o g r a m   w i l l   a r b i t r a r i l y   p i c k   o n e   o f   t h e   a c t i o n  
d e f i n i t i o n s   f o r   t h e   s y m b o l   c a u s i n g   t h e   c o n f l i c t   i n   t h e   s t a t e  
a n d   d i s c a r d   a l l   o t h e r   c o n f l i c t i n g   e n t r i e s .   T h i s   c h o i c e   i s  

r e p o r t e d   t o   t h e   u s e r   a s   s h o w n   i n   f i g u r e   5 . 3 .   I n   e a c h   c a s e ,  

t h e   "OLD  ENTRY:  x x "   r e p r e s e n t s   t h e   e n t r y   c h o s e n   b y   t h e  
p r o g r a m   w h i l e   t h e   "CONFLICTING  ENTRY:  y y "   s t a t e s   a  

d i s c a r d e d   e n t r y -   H e n c e ,   i n   s t a t e   9 ,   t h e   a r b i t r a r y   c h o i c e ,  

f o r   t h e   s y m b o l   *,  w a s   t o   r e d u c e   o n   t h e   p r o d u c t i o n   l a b e l l e d   2 

( i . e .   E->E+E). 

To  a l l o w   t h e   u s e r   t o   c h a n g e   t h e   a r b i t r a r y   c h o i c e   made 
b y   t h e   p r o g r a m ,   t h e   p r o g r a m   w i l l   a l s o   b e c o m e   i n t e r a c t i v e   i f  

a n y   c o n f l i c t s   a r i s e   i n   b u i l d i n g   t h e   S L R ( 1 )   p a r s e r .   T h a t   i s ,  

t h e   p r o g r a m   w i l l   p r o m p t   t h e   u s e r   w i t h   t h e   p r o m p t :  

ENTER  STATE  TO  RESOLVE: 
To  t h i s   r e s p o n s e ,   t w o   c h o i c e s   a r e   a v a i l a b l e .  

I f   t h e   u s e r   r e s p o n d s   w i t h   t h e   n u m b e r   0 ,   t h e   p r o g r a m  
w i l l   s t o p   s o   t h a t   t h e   u s e r   c a n   l o o k   a t   t h e   o u t p u t   f i l e   i n  

o r d e r   t o   i d e n t i f y   a l l   e x i s t i n g   c o n f l i c t s   i n   b u i l d i n g   t h e  

S L R ( 1 )   p a r s e r .   I f   t h e   u s e r  -  f e e l s   t h a t   t h e s e   c o n f l i c t s   c a n  

n o t   b e   r e s o l v e d ,   t h e n   h e   i s   o u t   o f   l u c k .   O t h e r w i s e ,   t h e  
u s e r   s h o u l d   r e r u n   t h e   p r o g r a m   a n d   when  g e t t i n g   t h e   a b o v e  

p r o m p t ,   h e   s h o u l d   r e s o l v e   t h e   c o n f l i c t s   b y   u s i n g   t h e   s e c o n d  

o p t i o n .  

T h e   s e c o n d   o p t i o n   i n   r e s p o n d i n g   t o   t h e   a b o v e   p r o m p t s   t o  
t y p e   i n   t h e   s t a t e   t h a t   t h e   u s e r   w a n t s   t o   r e s o l v e .   A f t e r   t h e  
u s e r   c o m p l e t e s   h i s   a n s w e r ,   t h e   p r o g r a m   w i l l   p r i n t   o u t   t h e  

c o r e   o f  t h e   s t a t e ,   f o r   v e r i f i c a t i o n ,   a n d   w i l l   a s k   t h e   u s e r  

i f   i t   i s   t h e   s t a t e   h e   w a n t e d .  

T h e   n e x t   r e q u e s t   b y   t h e   p r o g r a m   i s   f o r   t h e   u s e r   t o  
p r o v i d e   t h e   i n t e g e r   c o d e   o f   t h e   t e r m i n a l   s y m b o l   c a u s i n g   t h e  

c o n #  l i c t   u s i n g   t h e   p r o m p t :  

ENTER  SYMBOL  NUMBER  T O   RESOLVE: 
A s   a b o v e ,   t h e   p r o g r a m   w i l l   v e r i f y   t h e   u s e r ' s   r e s p o n s e   b y  

p r i n t i n g   o u t   t h e   t e r m i n a l ' s   name  a n d   a s k i n g   t h e   u s e r   i f   i t  

i s   t h e   c o r r e c t   t e r m i n a l   s y m b o l .   A g a i n ,   a   "N"  r e s p o n s e   w i l l  

c a u s e   t h e   p r o g r a m   t o   r e p r o m p t   f o r   a   s t a t e   t o   r e s o l v e   w h i l e   a  

I1 y It  r e s p o n s e   w i l l   h a v e   t o   p r o g r a m   c o n t i n u e   p r o c e s s i n g   t h e  

r e s o l u t i o n .  

T h e   n e x t   r e q u e s t ,   a f t e r   t h e   s y m b o l   r e q u e s t ,   i s   f o r   t h e  
a c t i o n   f u n c t i o n ' s   v a l u e   f o r   t h e   s t a t e   a n d   s y m b o l   w i t h   t h e  
p r o m p t :  

ENTER  NEW  ACTION  TO  TAKE: 
I f   t h e   v a l u e   p r o v i d e d   b y   t h e   u s e r   i s   a  p o s i t i v e   i n t e g e r   ( a n d  

h e n c e   a   s h i f t   a c t i o n ) ,   t h e   p r o g r a m   w i l l   p r i n t   o u t   t h e   c o r e  

o f   t h e   s t a t e   t h e   s h i f t   i s   t o .   I f   t h e   v a l u e   g i v e n   b y   t h e  
u s e r   i s   n e g a t i v e   ( a n d   h e n c e   a   r e d u c e   e n t r y ) ,   t h e   p r o g r a m  
w i l l   p r i n t   o u t   t h e   p r o d u c t i o n   a s s o c i a t e d   w i t h   t h e   l a b e l  

p r o v i d e d   b y   t h e   u s e r .   I n   e i t h e r   c a s e ,   i t   w i l l   t h e n   a s k   t h e  

u s e r   i f   t h i s   was   w h a t   t h e   u s e r   w a n t e d   a n d   a g a i n   v e r i f y   t h e  

u s e r ' s   i n p u t .  

T h e   p r o g r a m   w i l l   p r o v i d e   t h e   u s e r   o n e   l a s t   c h a n c e ,  
a f t e r   t h e   c o n f l i c t   r e s o l u t i o n   h a s   b e e n   s p e c i f i e d ,   t o  
d i s r e g a r d   t h e   c o n f l i c t   r e s o l u t i o n .   A  " Y t t   r e s p o n s e   b y   t h e  
u s e r   w i l l   c a u s e   t h e   r e s o l u t i o n   t o   b e   p r o c e s s e d   w h i l e   a  "N" 

r e s p o n s e   w i l l   d i s r e g a r d   t h e   r e s o l u t i o n   p r o v i d e d   b y   t h e   u s e r .  

I n   e i t h e r   c a s e ,   t h e   p r o g r a m   w i l l   t h e n   r e q u e s t   f o r   a n o t h e r  

c o n f l i c t   r e s o l u t i o n   w i t h   t h e   p r o m p t :  

ENTER  S T A T E   TO  RESOL VE:  

A t   t h i s   p o i n t ,   t h e   w h o l e   p r o c e s s   r e p e a t s   u n l e s s   t h e  
u s e r   r e s p o n d s   w i t h   a   0.  I f   a   0  i s   t y p e d   i n   b y   t h e   u s e r ,  

t h e n   n o   m o r e   c o n f l i c t   r e s o l u t i o n s   w i l l   b e   p r o c e s s e d   a n d   t h e  
p r o g r a m   w i l l   b u i l d   t h e   S L R ( 1 )   p a r s e r .   N o t e   t h a t   t h e   p r o g r a m  
w i l l   n o t   p r o d u c e   a n   SLR(1)  p a r s e r   u n l e s s   a t   l e a s t   o n e  

c o n f l i c t   h a s   b e e n   r e s o l v e d .  

V.2.5  Size Restrictions 

This program  contains several size  restrictions  which 
are as follows: 

i)  No more  than  100 terminal symbols may  be used. 
ii) No more  than 200 nonterminal symbols may  be used. 

iii) No more  than 300 productions  may  appear  in  the 
input . 

iv) No  terminal  or  nonterminal  name  may  exceed  15 
characters. 

v )   For each  production A  ->  w, w can not be  a  string, 

of  terminal  and nonterminal names, exceeding  a length 
of  ten names. 

vi)  The number  of  parse  states, created by  the program, 

must  not exceed  600. 

vii)  The number of  SLR(1)  items, excluding  the items of 

the form A  ->  . w, must  not  exceed  9,999. 

v i i i )   T h e   s i z e   o f   t h e   a r r a y   p a r s e t a b l e   c a n   n o t   e x c e e d  

t h e   d i m e n s i o n s   o f   1 0 , 0 0 0   x  2 .  

V.3  L R ( 1 I L  L A L R ( l ) ,   Weak  a n d   S t r o n g   C o m p a t i b i l i t y  - 

p a r s e r   g e n e r a t o r s  

T h i s   s e c t i o n   d e s c r i b e s   how  t o   u s e   t h e   p r o g r a m   w h i c h   c a n  
b u i l d   e i t h e r   L R ( l ) ,   LALR(l),  w e a k   c o m p a t i b l e ,   o r   s t r o n g  

c o m p i t a b l e   p a r s i n g   t a b l e s .   I n c l u d e d   i n   t h i s   s e c t i o n   i s   a - 
b r i e f   d e s c r i p t i o n   o f   t h e   i n p u t   g r a m m a r ,   how  t o   r u n   t h e  

p r o g r a m ,   a n d   how  t o   i n t e r p r e t   t h e   o u t p u t .  

V.3.1  I n p u t   Grammar 

T h e   i n p u t   f o r   t h e   p r o g r a m   i s   t h e   s e t   o f   p r o d u c t i o n s  
d e f i n i n g   t h e   C G F   f r o m   w h i c h   t h e   p a r s i n g   t a b l e s   a r e   t o   b e  
p r o d u c e d .   T h e s e   p r o d u c t i o n s   c a n   b e   o p t i o n a l l y   p r e c e e d e d  
w i t h   a   l i s t   o f   t e r m i n a l s   a n d   n o n t e r m i n a l s ,   a l l o w i n g   t h e   u s e r  

t o   s p e c i f y   t h e   i n t e g e r   c o d e s   g i v e n   t o   t h e s e   s y m b o l s .  

T h e   i n p u t   w i l l   b e   p a r s e d   i n   a   f r e e   s t y l e   f o r m a t ,   t h a t  
i s ,   n o   f o r m a t t i n g   b y   c o l u m n s   o r   l i n e   b o u n d a r i e s   w i l l   b e  
u s e d .   T h e   e n d   o f   l i n e   c h a r a c t e r   w i l l   b e   t r e a t e d   a s   a   b l a n k  

character  and  each  symbol on  the input must be separated by 
at  least  one blank. 

In general, a  terminal symbol is any  nonempty  string of 
nonblank  characters which  does not begin with  the character 

I1 (11  .  However, it  can not be any of  the  metasymbols  (i.e. 

It I  9  11 . 11 9  It#",  I1 . I1 , or "e").  I n  the event that  the 
user wants  to  use  one  of  the  metasymbols  or  a  string 

beginning  with  a  "<",  as a terminal  symbol, the quote symbol 
must  preceed  the nonblank string. 

Nonterminal symbols are represented  as  any  character 
string  enclosed by  the symbols "<"  and  ">"  .  The characters 
composing  the name of  the nonterminal can be  any  character 

(including  the  blank)  except  the symbol ">",  and  includes 
the name composed by  the empty  string  ("<>"). 

Productions are represented  by writing  them in the form 
A  ->  w  where A  is  the name of  a nonterminal, w is  a sequence 

of  terminal and  nonterminal names, and  "->I1 is a  metasymbol 
recognized  by  the program.  The symbol "e"  has been  reserved 

to  represent  the empty  string  so  that  productions  of  the 
form A  ->  - e can be written. 

Productions are separated  from  each  other  using  the 
metasymbol  ,  and  no  symbols  should  follow  the last 
production.  Productions having  the  same  left  hand  side, 

i.e.  of  the  form  A  ->  w  A  ->  w -1  '  - 2 ,   .. , A  ->  w  can be -nS 

written in the form A  ->  w  I  A  ->  x2 1  ... I  A ->  %  where -1 

the metasymbol  " 1 "   is treated  as an "or"  symbol. 

For  example,  the grammar 

S ->  A  A  ->  aAb  A  ->  = 
could  be  entered with  the input: 

Productions, when  parsed,  will  be  coded  internally 
using  the  order  in which  they appear on  the input.  The only 

restriction on  the  order  in  which  the  productions  are 
written  is  that the start production must  appear first. 

Unlike  the  SLR(1)  parser  constructor,  this  program 
optionally  allows  the user to specify the coding scheme of 

the nonterminal  and  terminal symbols.  That  is,  before  the 
start  production  the  user  is allowed  to provide a  list of 

terminals, followed by  a  list of nonterminals,  followed  by 
the  metasymbol " # I " .   It  is not necessary  that  all terminals 
and  nonterminals  appear  in these lists, and  either  of  the 

list  may  be  empty.  Elements in these lists will be  labeled 
in the order  that they are found  (I  for  the first  terminal, 

2  for  the  second  terminal  etc*  and  -1  for the first 
nonterminal, -2  for  the  second  nonterminal  etc.).  Any 

remaining  terminals, or nonterminals, not specified by  these 

lists will  be  labelled  according  to  the  order  of  first 

a p p e a r a n c e   i n   t h e   s e t   o f   p r o d u c t i o n s .  

F o r   e x a m p l e ,   a s s u m e   u s i n g   t h e   p r e v i o u s   g r a m m a r   t h a t   t h e  
u s e r   w a n t s   t h e   t e r m i n a l   b   t o   b e   l a b e l l e d   1  a n d   t e r m i n a l   a  t o  
b e   l a b e l l e d   2.  T h i s   c o u l d   b e   d o n e   b y   u s i n g   t h e   i n p u t :  

T h e   p r o g r a m   d e s c r i b e d   b y   t h i s   s e c t i o n   i n   f a c t   h a s   u s e d  
t h e   S L R ( 1 )   p a r s i n g   t a b l e s   ( p r o d u c e d   b y   r u n n i n g   t h e   SLR(1) 
p r o g r a m   d e s c r i b e d   i n   s e c t i o n   V.2)  t o   p a r s e   t h e   i n p u t   f o r  

t h i s   p r o g r a m .   H e n c e ,   t h e   d e s c r i p t i o n   o f  t h e   i n p u t   r u l e s   c a n  
b e   f o r m a l l y   d e s c r i b e d   b y   t h e   s e t   o f   r u l e s   u s e d   i n   c r e a t i n g  

t h e   S L R (1 )   p a r s i n g   t a b l e s   w h i c h   a r e   a s   f o l l o w s :  

<>  ->  <input grammar>  . <input grammar> ->  <start  prod>  '. <other  prods> 

! <symbol defns>  <start prod> '. tother prods>  . 
<start  prod> ->  nonterminal  '->  nonterminal  . <other  prods>  ->  <production> 

!  <other prods>  '. <production>  . <production>  ->  nonterminal  '->  <rhs> . 
<rhs>  ->  e-rule !  <symbols> 

!  <rhs>  I  e-rule ! <rhs>  I  <symbols>  . 
<symbols>  ->  terminal ! nonterminal 

!  <symbols>  terminal ! <symbols> nonterminal  . 
<symbol defns>  ->  <terminals>  <nonterminals>  # !  <terminals>  # 

!  <nonterminals>  #  . <terminals>  ->  terminal 
!  <terminals>  terminal  . <nonterminals>  ->  nonterminal 

!  <nonterminals> nonterminal  $ 

V.3.2  Runing the program 

The program  can be  run  o n   the  Vax-11  in  the  Moore 
School  by  entering  the  following monitor  level procedure 
call: 

@  [karll runnewbnf 
After  invocation,  the procedure willask  the  user  for  the 

files used  by  the program, and  then run the program. 

The first file requested by  the procedure  is  the  file 
containing  the  set of  productions, and is requested with  the 
prompt: 

B N F   FILE: 

T h e   s e c o n d   f i l e   i s   r e q u e s t   i s   f o r   t h e   o u t p u t   f i l e  w h i c h   w i l l  

c o n t a i n   a l l   d i a g n o s t i c   a n d   i n f o r m a t o r y   m e s s a g e s ,   a n d   i s  
r e q u e s t e d   w i t h   t h e   p r o m p t :  

OUTPUT  F I LE :  
T h e   l a s t   r e q u e s t   i s   f o r   t h e   f i l e   t o   s a v e   t h e   p a r s i n g   t a b l e s  

c r e a t e d   a n d   i s   r e q u e s t e d   w i t h   t h e   p r o m p t :  

TABLE : 

Upon  c o m p l e t i o n   o f   t h e   f i l e   r e q u e s t s ,   t h e   p r o g r a m   i s  
r u n .   A f t e r   t h e   p r o g r a m   f i n i s h e s   r e a d i n g   t h e   i n p u t   b n f   f i l e ,  

t h e   p r o g r a m   w i l l   r e q u e s t   t h e   u s e r   t o   s p e c i f y   w h a t   t y p e   o f  
p a r s e r   s h o u l d   b e   c r e a t e d   w i t h   t h e   p r o m p t :  

ENTER  OPTION 0 -  COMPUTE  FIRSTS  ONLY 

1  -  BUILD  L R ( 1 )   PARSE  TABLE 2  -  BUILD  LALR(1)  PARSE  TABLE 
3  -  BUILD  WEAK  COMPATIBLE  LR  PARSE  TABLE 4  -  BUILD  STRONG  COMPATIBLE  LR  PARSE  TABLE 

Once  t h e   u s e r   r e s p o n d s ,   t h e   p r o g r a m   w i l l   b u i l d   t h e  
c o r r e s p o n d i n g   p a r s e   t a b l e ,   p r i n t i n g   o u t   "BUILDING  STATE  X" 

a s   i t   t r i e s   t o   b u i l d   s t a t e   X.  T h i s   c o m p l e t e s   a l l  
i n t e r a c t i o n   t h e   p r o g r a m   h a s   w i t h   t h e   u s e r .  

T h e   f i r s t   p a g e   o f   t h e   o u t p u t   f i l e   i s   a   c o p y   o f   t h e  
i n p u t   b e i n g   p a r s e d ,   a l o n g   w i t h   a n y   e r r o r   m e s s a g e s   d e s c r i b i n g  
i l l e g a l   s y n t a x .  

F o r   e x a m p l e ,   t h e   e r r o n e o u s   i n p u t :  

< S >   ->  < A >   .  <A>  ->  a   < A >   b   .  A  ->  e 
w o u l d   p r o d u c e   t h e   f o l l o w i n g   o u t p u t :  

INPUT  PARSE  OF  PRODUCTIONS: -----  -----  --  ----------- 

* * *   3 2 )   PRODUCTION  DEFINITION  EXPECTED 
T h e   a b o v e   e r r o r   i s   s t a t i n g   t h a t   a t   t h e   b e g i n n i n g   o n   c o l u m n  

3 2   o f   t h e   p r e v i o u s   i n p u t   l i n e ,   t h e   p r o g r a m   w a s   e x p e c t i n g   t o  

f i n d   a   p r o d u c t i o n   b u t   f o u n d   s o m e t h i n g   e l s e   ( i . e .   t h e  

t e r m i n a l   s y m b o l   A ) .  

T h e   n e x t   t h r e e   s u b s e c t i o n s   o f   t h e   o u t p u t   f i l e ,   a f t e r  
t h e   p a r s e   o f   t h e   i n p u t ,   r e p o r t s   t h e   c o d i n g   s c h e m e   o f   t h e  

t e r m i n a l s ,   n o n t e r m i n a l s ,   a n d   p r o d u c t i o n s   u s e d   b y   t h e  
p r o g r a m .  

F o r   e x a m p l e ,   t h e   i n p u t :  

a b l  < s t a r t   s y m b o l >   ->  < A >   . 

< A >   ->  a   < A >   b   I  e 

w o u l d   p r o d u c e   t h e   f o l l o w i n g   o u t p u t :  

TERMINALS: ---------- 

NON-TERMINALS  : -------------- 

-1.  < s t a r t   s y m b o l >   *START  SYMBOL*  * U N I Q U E *  *NOT  USED  O N   RHS* 

-2.  < A >  

PRODUCTIONS : ------------ 

A s   c a n   b e   s e e n   by  t h e   a b o v e   e x a m p l e ,   a d d i t i o n a l  
i n f o r m a t i o n a l   m e s s a g e s   a b o u t   n o n t e r m i n a l   s y m b o l s   a r e  
p r o v i d e d ,   a n d   a r e   a s   f o l l o w s :  

*START  SYMBOL*  -  S t a t e s   t h a t   t h e   n o n t e r m i n a l   s y m b o l   h a s  

b e e n   r e c o g n i z e d   a s   t h e   s t a r t   s y m b o l .  

* U N I Q U E *   -  S t a t e s   t h a t   t h e   s t a r t   s y m b o l   d o e s   n o t   o c c u r  

a n y w h e r e   e l s e   i n   t h e   p r o d u c t i o n s   a n d   h e n c e   i s   a 
v a l i d   s t a r t   s y m b o l .  

*NOT  UNIQUE*  -  S t a t e s   t h a t   t h e   s t a r t   s y m b o l   o c c u r s   i n  

a n o t h e r   p r o d u c t i o n   b e s i d e s   t h e   s t a r t   p r o d u c t i o n  
a n d   h e n c e   i s   a n   i n v a l i d   s t a r t   s y m b o l .  

*NOT  USED  O N   RHS*  -  s t a t e s   t h a t   t h e   n o n t e r m i n a l   n e v e r  

a p p e a r s   o n   t h e   r i g h t   h a n d   s i d e   o f   a n y   p r o d u c t i o n .  

*NT  NOT  REACHABLE*  -  S t a t e s   t h a t   t h e   n o n t e r m i n a l   c a n  

n o t   a p p e a r   i n   a n y   o f   t h e   s e n t e n t i a l   f o r m s   a n d  
h e n c e   n e e d   n o t   b e   p a r t   o f   t h e   i n p u t   g r a m m a r .  

*NT  REPRESENTS  N O   TERMINAL  STRINGS*  -  S t a t e s   t h a t   t h e r e  

i s   n o t   a n y   t e r m i n a l   s t r i n g s   d e r i v a b l e   f r o m   t h e  
n o n t e r m i n a l .  

*NT  NOT  DEFINED*  -  S t a t e s   t h a t   t h e   n o n t e r m i n a l   d o e s   n o t  

a p p e a r   o n   t h e   l e f t   h a n d   s i d e   o f   a n y   p r o d u c t i o n  

r e c o g n i z e d   f r o m   t h e   i n p u t   f i l e .  

A f t e r   t h e   c o d i n g   s c h e m e s ,   t h e   p r o g r a m   w i l l   p r i n t   t h e  
f i r s t   s e t   o f   e a c h   n o n t e r m i n a l .  

F i n a l l y ,   i f   t h e   u s e r   s e l e c t s   t o   h a v e   a  p a r s e r  
c o n s t r u c t e d ,   t h e   p r o g r a m   w i l l   c o n s t r u c t   i t   a n d   p r i n t   t h e  
a p p r o p r i a t e   p a r s i n g   t a b l e s .   T h e   o u t p u t   o f   t h e   p a r s e r   w i l l  
b e   p r i n t e d   b y   s t a t e s   w h e r e   e a c h   s t a t e   w i l l   c o n t a i n   i t s   c o r e  

( i t e m s )   a n d   n o n - e r r o r   a c t i o n   a n d   g o t o   v a l u e s .  

F o r   e x a m p l e ,   u s i n g   t h e   i n p u t   g r a m m a r   u s e d   a b o v e ,   a n d   i f  
t h e   u s e r   c h o s e   t o   b u i l d   a  s t r o n g   c o m p a t i b l e   LR  p a r s i n g  

t a b l e ,   t h e   p a r s e   t a b l e s   p r i n t e d   w o u l d   b e   a s   f o l l o w s :  

STRONG  COMPATIBLE  L   R  ( 1 )   CHARACTERISTIC  TABLE 

l ) < s t a r t   s y m b o l >   ->  . < A >  LOOKAHEADS : 

SEOFS 
TABLE  ENTRIES: 

$EOF$  REDUCE  B Y   3 a  SH IF T  TO  3 

< A >   GO  TO  2  ......................  STATE  : 2   ....................... 

l ) < s t a r t   s y m b o l >   ->  < A >   . LOOKAHEADS : 

SEOFS 
TABLE  ENTRIES: 

$EOF$  REDUCE  B Y   1 ......................  STATE  : 3  ....................... 

2 ) < A >   ->  a  . < A >   b  LOOKAHEADS : 

SEOFS b  

TABLE  ENTRIES: 

a   SHIFT  TO  3 b   REDUCE  B Y   3 

< A >   GO  TO  4 

......................  S T A T E   : 4  ....................... 

2 ) < A >   ->  a  < A >   . b L OOKAHEADS : 

$ E O F $  b 

T A B L E   E N T R I E S :  
b  S H I F T   TO  5 ......................  S T A T E   : f  ....................... 

2 ) < A >   ->  a  < A >   b  a L OOKAREADS : 

$ E O F $  b 

T A B L E   E N T R I E S  : 

$ E O F $   REDUCE  B Y   2  b  REDUCE   b y   2 

Appendix A 
Sample PASCAL skeleton for use of  SLR(1)  parsing  tables 

Program doparse(table,  {any  other files used  by  program)  ) ;  

Const numbers tates  =  x;  {x?  of  actual parse states) 

parsetablesize  =  y;  {yz actual size of array parsetable) 
numberproductions =  z; {zl actual number of  productions) 

errorvalue  =  n; {n  value not  in set of  labels) 

type 

{the  path will be  represented as a stack using a  linear list) 

parsestack  =  ^stacknode; stacknode 

=  record topstate  : integer; 

next  : parsestack end 
-9 

var - 

table  : file of integer; {file  containing parsing  tables) 

function push(stack  : parsestack; newstate  : integer)  : parsestack; 

{returns  stack with new state added  in front) 
var  temporary  : parsestack; - 

begin new(temporary)  ; 

with  temporaryn do  begin topstate:=newstate; 

next:=stack end 
-9 push:=temporary 

end -9 

function pop(stack  : parsestack)  : parsestack; 

{removes  the top  element of  the stack) 
begin pop:=stackA.next; 

dispose(stack) end 
- 9  

function top(stack  : parsestack)  : integer; 

{returns  state on  top  of stack) 
begin top:=stackn,topstate 

end -3 

function empty(stack  : parsestack)  : parsestack; 

{returns  an empty  stack) 
begin while  stack<>nil & stack:=pop(stack); 

empty:=nil end 
-3 

function gettoken  integer; 

{This  routine returns the label of  the next  terminal occuring  in the input  file) 

end -3 
procedure semantics(stack  : parsestack; production  : integer); 

{does  any  semantic routines associated with  reducing the  given production) 
end - 9  
procedure  errormessages(state  , symbol : integer); 

{prints  out message  corresponding  to error value for state and  symbol) 

end - 9  

function parse  : boolean; 

{parses  input.  returns true if no parsing  errors are found  in parsing  the input) 

const  eof token =  0; 
type 

{representation  of  an entry  in parsetable) 

tableentry =  record symbol  , value  :  integer 
end -9 

{representation  of  a reference to  a group  of  entries in parsetable) 

stateeotry =  record startposition , size  : integer 
end -, 

{representation  of  a production in productionlist) 
productionentry  =  record lhssymbol  , rhslength  :  integer 

end -* 
var - 

parsetable  : array  [  1  .. parsetablesize  1  of tableentry; 

actionlist  , gotolist  : array  [  1  .. numberstates  I of  stateentry; - 

productionlist  : array  [  1  .. numberproductions] of  productionentry; - 

{other  parameters  passed  with parsing  tables) 
topstate,  {actual  number of  parse  states) parsestart,  {start  state) 

errorstart,  {forced  shift state on error  recovery) errorcontinue,  {init-error  state) 

topoftable,  {actual  size of  parsetable) productioncount {actual  number of  productions) 

: integer; 

{local  variables) 
token  : integer  ; {next  terminal from input) 
value  : integer; {next  action to  take in parsing  input) 

stop  : boolean;  {true  when have parsed  whole  input) 

parseerror  : boolean;  {true  if  any  parsing  errors) 

stack  : parsestack; {holds  path) 
procedure  getparsetable; 

(reads  in parsing  tables) 
var  index  : integer; - 

procedure getin(=  invalue  : integer); 

{reads  in next  integer from file table) 
begin invalue:=tableA; 

get (table) end 
- 9  

begin reset (table); 

getin(topstate1; getin(parsestart1; 

getin(errorstart1; getin(errorc0ntinue); 

getin(topof table); getin(productioncount); 
for index:=l Q topstate & begin - with  actionlist [index] & begin - 

getin(startposition); getin(size) 
end - 9  with  gotolist [index] do begin 

getin(startpositi0n); getin(size) 
end - end 
- 9  

for  index:=l  to topoftable & - with  parsetable [index] do begin - 

getin(symbo1)  ; getin (value) 
end -9 for index:=l  to productioncount - 
with  productionlist [index] & begin - getin(rhs1ength) ; 

getin (lhssymbol) end - 
end -9 

function clear(stack  : parsestack; newbottom  : integer 

)  : parsestack; 

{empties  stack and put value on bottom  of  stack) 
begin clear:=push(empty(stack),newbottom) 

end -9 

function popelements(stack  : parsestack; amount  : integer 

)  : parsestack; 

{takes  the requested amount of  states off  the stack) 
begin if  (amount 

=  0) or  (stack =  nil) - then popelements:=stack - 

else. popelements:=popelements(pop(stack), pred (count)') 
end -9 

function popoffproduction(stack  : parsestack; count  : integer 

)  :  parsestack; 

{takes  the requested amount  of  states off  the stack, but  if  stack underflow occurs, it resets 

the bottom  state) 
begin stack:=popelements(stack,count); 

if  stack =  nil - then p o p o f f p r o d u ct i o n : = p u s h ( s t a c k 9 e r r o r c o n t i n u e )  - 

else popoffproduction:=stack - end 
-9 