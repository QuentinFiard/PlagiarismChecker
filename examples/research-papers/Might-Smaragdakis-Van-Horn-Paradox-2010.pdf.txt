

Resolving and Exploiting the k-CFA Paradox

Illuminating Functional vs. Object-Oriented Program Analysis

Matthew Might

University of Utah
might@cs.utah.edu

Yannis Smaragdakis
University of Massachusetts

yannis@cs.umass.edu

David Van Horn
Northeastern University

dvanhorn@ccs.neu.edu

Abstract
Low-level program analysis is a fundamental problem, taking theshape of "flow analysis" in functional languages and "points-to"

analysis in imperative and object-oriented languages. Despite thesimilarities, the vocabulary and results in the two communities
remain largely distinct, with limited cross-understanding. One ofthe few links is Shivers's

k-CFA work, which has advanced theconcept of "context-sensitive analysis" and is widely known in both

communities.Recent results indicate that the relationship between the functional and object-oriented incarnations of k-CFA is not as wellunderstood as thought. Van Horn and Mairson proved

k-CFA for
k >= 1 to be EXPTIME-complete; hence, no polynomial-time al-gorithm can exist. Yet, there are several polynomial-time formulations of context-sensitive points-to analyses in object-oriented lan-guages. Thus, it seems that functional

k-CFA may actually be a pro-foundly different analysis from object-oriented

k-CFA. We resolvethis paradox by showing that the exact same specification of

k-CFAis polynomial-time for object-oriented languages yet exponentialtime for functional ones: objects and closures are subtly different,in a way that interacts crucially with context-sensitivity and complexity. This illumination leads to an immediate payoff: by pro-jecting the object-oriented treatment of objects onto closures, we
derive a polynomial-time hierarchy of context-sensitive CFAs forfunctional programs.

Categories and Subject Descriptors F.3.2 [Logics and Meaningsof Programs]: Semantics of Programming Languages--Program
Analysis
General Terms Algorithms, Languages, Theory
Keywords static analysis, control-flow analysis, pointer analysis,functional, object-oriented, k-CFA, m-CFA

1. Introduction
One of the most fundamental problems in program analysis isdetermining the entities to which an expression may refer at runtime. In imperative and object-oriented (OO) languages, this iscommonly phrased as a points-to (or pointer) analysis: to which
objects can a variable point? In functional languages, the problemis called flow analysis [11]: to which expressions can a value flow?

Permission to make digital or hard copies of all or part of this work for personal orclassroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citationon the first page. To copy otherwise, to republish, to post on servers or to redistribute
to lists, requires prior specific permission and/or a fee.
PLDI'10, June 5-10, 2010, Toronto, Ontario, Canada.Copyright cfl 2010 ACM 978-1-4503-0019/10/06.. . $10.00

Both points-to and flow analysis acquire a degree of complexityfor higher-order languages: functional languages have first-class
functions and object-oriented languages have dynamic dispatch;these features conspire to make call-target resolution depend on the
flow of values, even as the flow of values depends on what targetsare possible for a call. That is, data-flow depends on control-flow,
yet control-flow depends on data-flow. Appropriately, this problemis commonly called control-flow analysis (CFA).

Shivers's k-CFA [17] is a well-known family of control-flowanalysis algorithms, widely recognized in both the functional and
the object-oriented world. k-CFA popularized the idea of context-sensitive flow analysis.1 Nevertheless, there have always been annoying discrepancies between the experiences in the application of
k-CFA in the functional and the OO world. Shivers himself notesin his "Best of PLDI" retrospective that "the basic analysis, for any

k > 0 [is] intractably slow for large programs" [16]. This contra-dicts common experience in the OO setting, where a 1- and 2-CFA
analysis is considered heavy but certainly possible [2, 10].To make matters formally worse, Van Horn and Mairson [19]
recently proved k-CFA for k >= 1 to be EXPTIME-complete, i.e.,non-polynomial. Yet the OO formulations of

k-CFA have provablypolynomial complexity (e.g., Bravenboer and Smaragdakis [2] express the algorithm in Datalog, which is a language that can onlyexpress polynomial-time algorithms). This paradox seems hard to
resolve. Is k-CFA misunderstood? Has inaccuracy crept into thetransition from functional to OO?

In this paper we resolve the paradox and illuminate the deepdifferences between functional and OO context-sensitive program
analyses. We show that the exact same formulation of k-CFA isexponential-time for functional programs yet polynomial-time for
OO programs. To ensure fidelity, our proof appeals directly toShivers's original definition of

k-CFA and applies it to the mostcommon formal model of Java, Featherweight Java.

As might be expected, our finding hinges on the fundamentaldifference between typical functional and OO languages: the former create implicit closures when lambda expressions are created,while the latter require the programmer to explicitly "close" (i.e.,
pass to a constructor) the data that a newly created object can ref-erence. At an intuitive level, this difference also explains why the

1 Although the k-CFA work is often used as a synonym for "k-contextsensitive" in the OO world, k-CFA is more correctly an algorithm thatpackages context-sensitivity together with several other design decisions. In

the terminology of OO points-to analysis, k-CFA is a k-call-site-sensitive,field-sensitive points-to analysis algorithm with a context-sensitive heap
and with on-the-fly call-graph construction. (Lhot'ak [9] and Lhot'ak andHendren [10] are good references for the classification of points-to analysis
algorithms.) In this paper we use the term "k-CFA" with this more precisemeaning, as is common in the functional programming world, and not just
as a synonym for "k-context-sensitive". Although this classification is moreprecise, it still allows for a range of algorithms, as we discuss later.

exact same k-CFA analysis will not yield the same results if a func-tional program is automatically rewritten into an OO program: the
call-site context-sensitivity of the analysis leads to loss of preci-sion when the values are explicitly copied--the analysis merges
the information for all paths with the same k-calling-context intothe same entry for the copied data.

Beyond its conceptual significance, our finding pays immediatedividends: By emulating the behavior of OO

k-CFA, we derive ahierarchy,
m-CFA, of polynomial CFA analyses for functional pro-grams. In technical terms,

k-CFA corresponds to an abstract inter-pretation over shared-environment closures, while

m-CFA corre-sponds to an abstract interpretation over flat-environment closures.

m-CFA turns out to be an important instantiation in the space ofanalyses described by Jagannathan and Weeks [8].

2. Background and Illustration
Although we prove our claims formally in later sections, we firstillustrate the behavior of

k-CFA for OO and functional programsinformally, so that the reader has an intuitive understanding of the

essence of our argument.
2.1 Background: What is CFA?
k-CFA was developed to solve the higher-order control-flow prob-lem in

*-calculus-based programming languages. Functional lan-guages are explicitly vulnerable to the higher-order control-flow

problem, because closures are passed around as first-class values.Object-oriented languages like Java are implicitly higher-order,
because method invocation is resolved dynamically--the invokedmethod depends on the type of the object that makes it to the invocation point.In practice, CFAs must compute much more than just controlflow information. CFAs are also data-flow analyses, computingthe values that flow to any program expression. In the objectoriented setting, CFA is usually termed a "points-to" analysis andthe interplay between control- and data-flow is called "on-the-fly
call-graph construction" [9].Both the functional community and the pointer-analysis community have assigned a meaning to the term k-CFA. Informally,
k-CFA refers to a hierarchy of global static analyses whose context-sensitivity is a function of the last

k call sites visited. In its func-tional formulation,
k-CFA uses this context-sensitivity for everyvalue and variable--thus, in pointer analysis terms,

k-CFA is a k-call-site-sensitive analysis with a
k-context-sensitive heap.

2.2 Insight and Example
The paradox prompted by the Van Horn and Mairson proofs seemsto imply that

k-CFA actually refers to two different analyses: onefor functional programs, and one for object-oriented/imperative

programs. The surprising finding of our work is that k-CFA meansthe same thing for both programming paradigms, but that its behavior is different for the object-oriented case.

k-CFA was defined by abstract interpretation of the *-calculussemantics for an abstract domain collapsing data values to static

abstractions qualified by k calling contexts. Functional implemen-tations of the algorithm are often heavily influenced by this abstract
interpretation approach. The essence of the exponential complexityof

k-CFA (for k >= 1) is that, although each variable can appearwith at most

O(nk) calling contexts, the number of variable envi-ronments is exponential, because an environment can combine variables from distinct calling contexts. Consider the following term:

(* (z) (z x1 . . . xn)) .
This expression has n free variables. In 1-CFA, each variable ismapped to the call-site in which it was bound. By binding each of

the xi in multiple call-sites, we can induce an exponential numberof environments to close this

*-term:

((* (f1) (f1 0)(f1 1))

(* (x1)* * *

((* (fn) (fn 0)(fn 1))

(* (xn)

(* (z) (z x1 . . . xn)))) * * * )) .

Notice that each xi is bound to 0 and 1, thus there are 2n environ-ments closing the inner

*-term.The same behavior is not possible in the object-oriented setting

because creating closures has to be explicit (a fundamental differ-ence of the two paradigms2) and the site of closure creation becomes the common calling context for all closed variables.Figures 1 and 2 demonstrate this behavior for a 1-CFA analysis. (This is the shortest, in terms of calling depth, example thatcan demonstrate the difference.) Figure 1 presents the program in
OO form, with explicit closures--i.e., objects that are initializedto capture the variables that need to be used later. Figure 2 shows
the same program in functional form. We use a fictional (for Java)construct

lambda that creates a closure out of the current environ-ment. The bottom parts of both figures show the information that

the analysis computes. (We have grouped the information in a waythat is more reflective of OO

k-CFA implementations, but this isjust a matter of presentation.)

The essential question is "in how many environments does func-tion

baz get analyzed?" The exact same, abstract-interpretation-based, 1-CFA algorithm produces

O(N + M) environments forthe object-oriented program and
O(NM) environments for thefunctional program. The reason has to do with how the contextsensitivity of the analysis interacts with the explicit closure. Sinceclosures are explicit in the OO program, all (heap-)accessible variables were closed simultaneously. One can see this in terms of vari-ables

x and y: both are closed by copying their values to the x and yfields of an object in the expression "

new ClosureXY(x,y)". Thiscopying collapses all the different values for

x that have the same1-call-site context. Put differently,
x and y inside the OO version of
baz are not the original variables but, rather, copies of them. Theact of copying, however, results in less precision because of the finite context-sensitivity of the analysis. In contrast, the functionalprogram makes implicit closures in which the values of

x and y areclosed at different times and maintain their original context. The

abstract interpretation results in computing all O(NM) combina-tions of environments with different contexts for

x and y. (If theexample is extended to more levels, the number of environments

becomes exponential in the length of the program.)The above observations immediately bring to mind a wellknown result in the compilation of functional languages: the choicebetween shared environments and flat environments [1, page 142].
In a flat environment, the values of all free variables are copied intoa new environment upon allocation. In a flat-environment scenario,
it is sufficient to know only the base address of an environment tolook up the value of a variable. To define the meaning of a program,
it clearly makes no difference which environment representation aformal semantics models. However, in compilation there are tradeoffs: shared environments make closure-creation fast and variablelook-up slow, while flat environments make closure-creation slow
and variable look-up fast. The choice of environment representationalso makes a profound difference during abstract interpretation.

2 It is, of course, impossible to strictly classify languages by paradigm
("what is JavaScript?") so our statements reflect typical, rather than uni-versal, practice.

Environment:        ox1 = new Object(); ... oxN = new Object();     oy1 = newObject(); ... oyM = new Object();

caller() {

class ClosureX {

Object x;
ClosureX(Object x0) { class ClosureXY {foo(ox1);

...
foo(oxN);
}

foo(Object x) {

ClosureX cx = 

new ClosureX(x);
cx.bar(oy1);
...
cx.bar(oyM);

( j ) {
x = x0;
}  // constructor

bar(Object y) {

ClosureXY cxy =

new ClosureXY(x,y);

Object x,y;
ClosureXY(Object x0,

Object y0) {
x = x0; y = y0;
}  // constructor...

...

y
}

}

cxy.baz(...);
...
}

}

baz(...) {

... x ... y ...
}

caller@1: foo_x -> [ox1] foo@1: bar_y -> [oy1]
caller@N: foo_x -> [oxN]
...local
 variablepointsError: /invalidaccess in --run--
Operand stack:
   --nostringval--   --dict:6/15(L)--   2   11   4   --nostringval--   --nostringval--   (   **** Error reading a content stream. The page may be incomplete.\n)
Execution stack:
   %interp_exit   .runexec2   --nostringval--   --nostringval--   --nostringval--   2   %stopped_push   --nostringval--   --nostringval--   --nostringval--   false   1   %stopped_push   1909   2   3   %oparray_pop   1908   2   3   %oparray_pop   1892   2   3   %oparray_pop   --nostringval--   --nostringval--   4   1   11   --nostringval--   %for_pos_int_continue   --nostringval--   --nostringval--   --nostringval--   --nostringval--   %array_continue   --nostringval--   --nostringval--
Dictionary stack:
   --dict:1214/1684(ro)(G)--   --dict:1/20(G)--   --dict:85/200(L)--   --dict:85/200(L)--   --dict:108/127(ro)(G)--   --dict:291/300(ro)(G)--   --dict:23/30(L)--   --dict:6/8(L)--   --dict:21/40(L)--   --dict:1/1(ro)(G)--   --dict:1/1(ro)(G)--   --dict:1/1(ro)(G)--
Current allocation mode is local
