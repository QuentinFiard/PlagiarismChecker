

Forthcoming Java(TM)ProgrammingLanguage Features

Joshua Bloch and Neal GafterSenior Staff EngineersSun Microsystems, Inc.

   Forthcoming Java Programming Language Features2

A Brief History of the Java(TM)Programming Language
T, 1995 (1.0)--First public release

   Forthcoming Java Programming Language Features3

Watch Out for Tigers!
T, Java 2 Platform, Standard Edition Release 1.5T, Code name "Tiger"
T, Beta--Early 2004T, A major theme--ease of development

   Forthcoming Java Programming Language Features4

Significant Language ChangesPlanned for Tiger
   I. Generics  II. Enhanced for Loop ("foreach")
 III. Autoboxing/Unboxing IV.  Typesafe Enums
  V. Varargs VI. Static Import
VlI. Annotations

   Forthcoming Java Programming Language Features5

Unifying Theme--Developer-Friendliness
T, Increase expressivenessT, Increase safety
T, Minimize incompatibility

   Forthcoming Java Programming Language Features6

Disclaimer
T, All subject to Java Community ProcessSM

   Forthcoming Java Programming Language Features7

I. Generics
T, When you get an element from a collection,you have to cast

   Forthcoming Java Programming Language Features8

Filtering a Collection--Today

// Removes 4-letter words from c; elements must be stringsstatic void expurgate(Collection c) {    for (Iterator i = c.iterator(); i.hasNext(); )        if (((String) i.next()).length() == 4)
            i.remove();}// Alternative form - a bit prettier?
static void expurgate(Collection c) {    for (Iterator i = c.iterator(); i.hasNext(); ) {        String s = (String) i.next();        if (s.length() == 4)
            i.remove();    }}

   Forthcoming Java Programming Language Features9

Filtering a Collection With Generics

// Removes 4-letter words from cstatic void expurgate(Collection<String> c) {    for (Iterator<String> i = c.iterator(); i.hasNext(); )        if (i.next().length() == 4)
            i.remove();}

T, Clearer and SaferT, No cast, extra parentheses, temporary variablesT,

Provides compile-time type checking

   Forthcoming Java Programming Language Features10

Generics Are Not Templates
T, No code-size blowupT, No hideous complexity
T, No "template metaprogramming"T, Simply provides compile-time type safetyand eliminates the need for casts

   Forthcoming Java Programming Language Features11

II. Enhanced for Loop ("foreach")
T, Iterating over collections is a painT, Often, iterator unused except to get elements
T, Iterators are error-prone

   Forthcoming Java Programming Language Features12

void cancelAll(Collection c) {    for (Iterator i = c.iterator(); i.hasNext(); ) {        TimerTask tt = (TimerTask) i.next();        tt.cancel();
    }}

Applying a Method to EachElement in a Collection--Today

   Forthcoming Java Programming Language Features13
void cancelAll(Collection c) {    for (Object o : c)        ((TimerTask)o).cancel();}
T, Clearer and SaferT, No iterator-related clutterT,

No possibility of using the wrong iterator

Applying Method to Each ElementIn a Collection With Enhanced for

   Forthcoming Java Programming Language Features14
void cancelAll(Collection<TimerTask> c) {    for (TimerTask task : c)        task.cancel();}
T, Much shorter, clearer and saferT, Code says exactly what it does

Enhanced for Really ShinesWhen Combined With Generics

   Forthcoming Java Programming Language Features15
// Returns the sum of the elements of aint sum(int[] a) {    int result = 0;    for (int i : a)
        result += i;    return result;}

T, Eliminates array index rather than iteratorT, Similar advantages

It Works For Arrays, Too

   Forthcoming Java Programming Language Features16
List suits = ...;List ranks = ...;List sortedDeck = new ArrayList();
// Broken - throws NoSuchElementException!for (Iterator i = suits.iterator(); i.hasNext(); )    for (Iterator j = ranks.iterator(); j.hasNext(); )        sortedDeck.add(new Card(i.next(), j.next()));

Nested Iteration Is Tricky

   Forthcoming Java Programming Language Features17
List suits = ...;List ranks = ...;List sortedDeck = new ArrayList();
// Broken - throws NoSuchElementException!for (Iterator i = suits.iterator(); i.hasNext(); )    for (Iterator j = ranks.iterator(); j.hasNext(); )        sortedDeck.add(new Card(i.next(), j.next()));

// Fixed - a bit uglyfor (Iterator i = suits.iterator(); i.hasNext(); ) {    Suit suit = (Suit) i.next();    for (Iterator j = ranks.iterator(); j.hasNext(); )
        sortedDeck.add(new Card(suit, j.next()));}

Nested Iteration Is Tricky

   Forthcoming Java Programming Language Features18
With Enhanced for, It's Easy!

for (Suit suit : suits)    for (Rank rank : ranks)        sortedDeck.add(new Card(suit, rank));

   Forthcoming Java Programming Language Features19

III. Autoboxing/Unboxing

T, You can't put an int into a collection

   Forthcoming Java Programming Language Features20
public class Freq {    private static final Integer ONE = new Integer(1);    public static void main(String[] args) {
        // Maps word (String) to frequency (Integer)        Map m = new TreeMap();        for (int i=0; i<args.length; i++) {
            Integer freq = (Integer) m.get(args[i]);            m.put(args[i], (freq==null ? ONE :                  new Integer(freq.intValue() + 1)));        }
        System.out.println(m);    }}

Making a Frequency Table--Today

   Forthcoming Java Programming Language Features21
public class Freq {   public static void main(String[] args) {      Map<String, Integer> m = new TreeMap<String, Integer>();      for (String word : args) {
          Integer freq = m.get(word);          m.put(word, (freq == null ? 1 : freq + 1));      }      System.out.println(m);
   }}

Making a Frequency Table WithAutoboxing, Generics, and Enhanced for

   Forthcoming Java Programming Language Features22
IV. Typesafe Enums

Standard approach - int enum pattern    public class Almanac {        public static final int SEASON_WINTER = 0;
        public static final int SEASON_SPRING = 1;        public static final int SEASON_SUMMER = 2;        public static final int SEASON_FALL   = 3;
        ...  // Remainder omitted    }

   Forthcoming Java Programming Language Features23

Disadvantages of int Enum Pattern

T, Not typesafeT, No namespace - must prefix constants
T, Brittle - constants compiled into clientsT, Printed values uninformative

   Forthcoming Java Programming Language Features24

Current Solution -Typesafe Enum Pattern
T, "Effective Java Programming Language Guide"T, Basic idea - class that exports self-typedconstants and has no public constructor
T, Fixes all disadvantages of int patternT, Other advantages

   Forthcoming Java Programming Language Features25

Typesafe Enum Pattern Example

import java.util.*;import java.io.*;public final class Season implements Comparable, Serializable {
    private final String name;    public String toString()    { return name; }    private Season(String name) { this.name = name; }

    public static final Season WINTER = new Season("winter");    public static final Season SPRING = new Season("spring");    public static final Season SUMMER = new Season("summer");    public static final Season FALL   = new Season("fall");
    private static int nextOrdinal = 0;    private final  int ordinal = nextOrdinal++;    public int compareTo(Object o) {
        return ordinal - ((Season)o).ordinal;    }    private static final Season[] PRIVATE_VALUES = { WINTER, SPRING, SUMMER, FALL };

    public static final List VALUES =      Collections.unmodifiableList(          Arrays.asList(PRIVATE_VALUES));
    private Object readResolve() {        // Canonicalize        return PRIVATE_VALUES[ordinal];    }
}

   Forthcoming Java Programming Language Features26

Disadvantages ofTypesafe Enum Pattern

T, VerboseT, Error prone--each constant occurs 3 times
T, Can't be used in switch statementsT, Wouldn't it be nice if compiler took care of it?

   Forthcoming Java Programming Language Features27

Typesafe Enum Construct
T, Compiler support for Typesafe Enum patternT, Looks like traditional enum (C, C++, Pascal)

   Forthcoming Java Programming Language Features28
enum Suit { CLUBS, DIAMONDS, HEARTS, SPADES }enum Rank { DEUCE, THREE, FOUR, FIVE, SIX, SEVEN,            EIGHT, NINE, TEN, JACK, QUEEN, KING, ACE }
List<Card> deck = new ArrayList<Card>();for (Suit suit : Suit.values())    for (Rank rank : Rank.values())        deck.add(new Card(suit, rank));

Collections.shuffle(deck);Would require pages of code today!

Enums Interact Well With Genericsand Enhanced for

   Forthcoming Java Programming Language Features29
Enum With Field, Methodand Constructor

public enum Coin {    PENNY(1), NICKEL(5), DIME(10), QUARTER(25);    Coin(int value) { this.value = value; }
    private final int value;    public int value() { return value; }
}

   Forthcoming Java Programming Language Features30

Sample Program Using Coin Class

public class CoinTest {    public static void main(String[] args) {        for (Coin c : Coin.values())            System.out.println(c + ":   \t"
                  + c.value() +"c \t" + color(c));    }    private enum CoinColor { COPPER, NICKEL, SILVER }    private static CoinColor color(Coin c) {
        switch(c) {          case PENNY:   return CoinColor.COPPER;          case NICKEL:  return CoinColor.NICKEL;          case DIME:
          case QUARTER: return CoinColor.SILVER;          default: throw new AssertionError("Unknown coin: " + c);        }    }
}

   Forthcoming Java Programming Language Features31

Actual Output of Sample Program

PENNY:          1c      COPPERNICKEL:         5c      NICKELDIME:           10c     SILVER
QUARTER:        25c     SILVER

   Forthcoming Java Programming Language Features32

V. Varargs
T, To write a method that takes an arbitrarynumber of parameters, you must use an arrayT, Creating and initializing arrays is a pain

T, Array literals are not prettyT, Wouldn't it be nice if the compiler did it for you?
T, Essential for a usable printf facility

   Forthcoming Java Programming Language Features33

Using java.text.MessageFormat--Today
Object[] arguments = {    new Integer(7),    new Date(),    "a disturbance in the Force"
};String result = MessageFormat.format(    "At {1,time} on {1,date}, there was {2} on planet "

  + "{0,number,integer}.", arguments);

   Forthcoming Java Programming Language Features34

Using MessageFormat With Varargs
String result = MessageFormat.format(    "At {1,time} on {1,date}, there was {2} on planet "    + "{0,number,integer}.",    7, new Date(), "a disturbance in the Force");

   Forthcoming Java Programming Language Features35

Varargs Declaration Syntax
public static String format(String pattern,                            Object... arguments)
Parameter type of arguments is Object[]Caller need not use varargs syntax

   Forthcoming Java Programming Language Features36

VI. Static Import Facility
Classes often export constants    public class Physics {        public static final double
            AVOGADROS_NUMBER   = 6.02214199e23;        public static final double            BOLTZMANN_CONSTANT = 1.3806503e-23;        public static final double
            ELECTRON_MASS      = 9.10938188e-31;    }
Clients must qualify constant names    double molecules = Physics.AVOGADROS_NUMBER * moles;

   Forthcoming Java Programming Language Features37

Wrong Way to AvoidQualifying Names
// "Constant Interface" antipattern - do not use!public interface Physics {  public static final double      AVOGADROS_NUMBER   = 6.02214199e23;
  public static final double      BOLTZMANN_CONSTANT = 1.3806503e-23;  public static final double      ELECTRON_MASS      = 9.10938188e-31;
}public class Guacamole implements Physics {    public static void main(String[] args) {
        double moles = ...;        double molecules = AVOGADROS_NUMBER * moles;        ...    }
}

   Forthcoming Java Programming Language Features38

Problems With Constant Interface
T, Interface abuse--does not define typeT, Implementation detail pollutes exported API
T, Confuses clientsT, Creates long-term commitment
T, Wouldn't it be nice if compiler let us avoidqualifying names without subtyping?

   Forthcoming Java Programming Language Features39

Solution--Static Import Facility
T, Analogous to package import facilityT, Imports the static members from a class, ratherthan the classes from a package

T, Can import members individually or collectivelyT, Not rocket science

   Forthcoming Java Programming Language Features40

Importing ConstantsWith Static Import
import static org.iso.Physics.*;public class Guacamole {    public static void main(String[] args) {
        double molecules = AVOGADROS_NUMBER * moles;        ...    }}

org.iso.Physics now a class, not an interface

   Forthcoming Java Programming Language Features41

Can Import Methodsas Well as Fields
T, Useful for mathematicsT, Instead of:  x = Math.cos(Math.PI * theta);T,

Say:            x = cos(PI * theta);

   Forthcoming Java Programming Language Features42

import static gov.treas.Coin.*;class MyClass {    public static void main(String[] args) {
        int twoBits = 2 * QUARTER.value();        ...    }}

Static ImportInteracts Well With Enums

   Forthcoming Java Programming Language Features43
VII. Metadata (Annotations)
T, Many APIs require a fair amount of boilerplate

   Forthcoming Java Programming Language Features44

JAX-RPC Web Service--Today
public interface CoffeeOrderIF extends java.rmi.Remote {    public Coffee [] getPriceList()        throws java.rmi.RemoteException;    public String orderCoffee(String name, int quantity)
        throws java.rmi.RemoteException;}public class CoffeeOrderImpl implements CoffeeOrderIF {
    public Coffee [] getPriceList() {        ...    }    public String orderCoffee(String name, int quantity) {
        ...   }}

   Forthcoming Java Programming Language Features45

JAX-RPC Web ServiceWith Metadata
import javax.xml.rpc.*;public class CoffeeOrder {    @Remote public Coffee [] getPriceList() {
        ...    }    @Remote public String orderCoffee(String name, int quantity) {        ...
    }}

   Forthcoming Java Programming Language Features46

Would You Like to Try it Today?
T, All features available in early access compiler

   Forthcoming Java Programming Language Features47

Conclusion
T, Language has always occupied a sweet spot

Joshua.Bloch@sun.comNeal.Gafter@sun.com