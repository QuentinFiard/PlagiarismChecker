

Type Reconstruction with Recursive Types

and Atomic Subtyping

Jerzy Tiuryn\Lambda 
Institute of Informatics

Warsaw University
Banacha 2, 02-097 Warsaw

Poland
tiuryn@mimuw.edu.pl

Mitchell Wandy
College of Computer Science

Northeastern University
360 Huntington Avenue, 161CN

Boston, MA 02115, USA
wand@flora.ccs.northeastern.edu

Abstract
We consider the problem of type reconstruction for *-terms over a type system
with recursive types and atomic subsumptions. This problem reduces to the problem
of solving a finite set of inequalities over infinite trees. We show how to solve such
inequalities by reduction to an infinite but well-structured set of inequalities over
the base types. This infinite set of inequalities is solved using B"uchi automata. The
resulting algorithm is in DEXPTIME. This also improves the previous NEXPTIME
upper bound for type reconstruction for finite types with atomic subtyping. We
show that the key steps in the algorithm are PSPACE-hard.

1 Introduction
John Mitchell, in his seminal paper [8, 9], considered a system for type reconstruction for
*-terms in which the set of types is augmented with a partial order (the subtype order),
and the type inference rules are augmented with the subsumption rule

A ` M : s s ^ t

A ` M : t

In this case the type reconstruction problem reduces to the problem of solving a set of
inequalities over the set of types. Mitchell showed that if the partial order is generated
by a set of atomic coercions on the base types, it reduces to the problem of solving a set
of inequalities over the base types [9].

This paper has been the source of a considerable body of work [5, 7, 17, 14]. Such a
system is an important component of a type-checking system for object-oriented programming. However, a good model of object-oriented programming must include recursive
types, which correspond to infinite trees [2, 3], but Mitchell's algorithm applies only to
well-founded types, which correspond to finite trees.

\Lambda This work was partly supported by NSF grants CCR-9002253 and CCR-9113196 and by Polish KBN
grant No. 2 1192 91 01

yWork supported by the National Science Foundation under grants CCR-9002253 and CCR-9014603.

1

2
In this paper we show how to extend Mitchell's algorithm to handle recursive types.
Instead of solving inequalities over finite trees, we will need to solve inequalities over possibly infinite trees. Instead of reducing tree inequalities to a finite set of "flat" inequalities
over the base types, we will get an infinite but regular set of flat inequalities. Instead of
solving these inequalities in the base order (as in [17] or [7]) by nondeterministic choice,
we solve them by reducing to the emptiness problem for B"uchi automata. The resulting
algorithm is in DEXPTIME. By contrast, the best previously-known upper-bound for
type reconstruction with atomic subtyping, in the case of well-founded types, is NEXPTIME; our algorithm can be used for this case also. Last, we show that the key steps in
the algorithm are PSPACE-hard.

Definitions are given in Section 3, along with the basic properties of the order on
infinite trees. The decision problems are posed in Section 4. Then, in Section 5, we
begin the development of the algorithm. The algorithm has four main steps:

1. Reduce the type reconstruction problem to a set of inequalities over finite trees.

This is the same as for the finite case. We sketch this familiar reduction in Section 5.

2. Find the shapes of the solutions via unification. The algorithm is presented in

Section 6.1.

3. Enumerate the frontiers of the shapes to generate an infinite but regular set of flat

inequalities. This step is presented in Section 6.2.

4. Solve inequalities over the partial order on the base types. This is done in Section 7

by reduction to B"uchi automata, whose emptiness problem is solvable in polynomial
time [15].

We note that our definition of types includes non-regular as well as regular trees; we
obtain as a corollary that if an expression has any typing at all then it has one in which
all the types are regular.

The resulting algorithm is in DEXPTIME, as all the steps are polynomial except for
the reduction to B"uchi automata, which is 2O(n). On the other hand, when C is discrete,
then C-TR reduces to unification on infinite trees and is therefore in PTIME.

We then present some lower bounds in Section 8. We show that C-REG-SAT is
PSPACE-hard for every non-trivial poset C by reduction from quantified boolean formulas to the termination problem for a class of automata called autonomous reading
pushdown automata (ARPDA), and then from ARPDA termination to C-REG-SAT.

2 Related Work
Mitchell [8, 9] introduced the problem of type reconstruction with coercions, including
atomic coercions, and sketched the main algorithms for the case of well-founded types.
This work concentrated on generating the set of atomic coercions that must hold among
the base types. Fuh and Mishra [5] expanded these algorithms and introduced the variant
in which the set of atomic coercions was either fixed or was part of the input.

Wand and O'Keefe [17] showed that type reconstruction when the set of atomic
coercions was part of the input was NP-hard if certain constants were allowed in the

3
terms to be typed. Mitchell and Lincoln [7] improved this result by establishing NPhardness without constants, and by systematically considering the various versions of
the problem.

Tiuryn [14] considered the problem of satisfiability of subtype inequalities (what we
call C-TREE-SAT, but over finite trees only) and showed that for some classes of posets,
the problem is PSPACE-hard, but for others it is polynomial-time.

All this work concerned well-founded (finite) types only. Amadio and Cardelli [1]
considered a related problem for infinite types. They considered the validity problem
for expressions denoting regular types, but with a rather different order, in which there
were elements ? and ? which were bounds for all types. This order may be related to
the "partial types" of Thatte [13], which have a top (but not a bottom element). The
decidability of type reconstruction for this type discipline was shown for the well-founded
case by O'Keefe and Wand [10]. Kozen, Palsberg, and Schwartzbach [6] gave an O(n3)
algorithm both for finite types and for recursive types under the partial-type ordering.

3 Definitions
3.1 Trees
Given a set C of labels, the set TreesC is the set of binary trees with leaf labels chosen
from C; that is, the set of non-empty partial functions t : f0; 1g\Lambda  ! (C [ f!g) such that

1. the domain of t is prefix-closed,
2. if t(ff) = "!" then t(ff0) and t(ff1) are both defined, and
3. if t(ff) 2 C then neither t(ff0) nor t(ff1) is defined.

Given a tree, its shape is its domain, that is, the set of nodes or paths in the tree. We
will occasionally refer to a string in dom(t) as a "path" or an "address". We say ss is a
leaf of t if it is in dom(t), but neither ss0 nor ss1 is in dom(t).

We will write t#w for the subtree of t rooted at address w, that is the tree defined
by dom(t#w) = fss j wss 2 dom(t)g and (t#w)(ss) = t(wss). The set RegtreesC of regular
trees is the set of trees with only finitely many distinct subtrees t#w. Such trees can be
thought of as being generated by a finite automaton.

3.2 Partial Order on Trees
We assume we are given a partial order ^C on the label set C. This relation is extended
to trees as follows:

1. t ^0 t0 for all t, t0.
2. For each n * 0, ^n+1 is defined as follows:

c ^C c0
c ^n+1 c0

s0 ^n s t ^n t0
(s ! t) ^n+1 (s0 ! t0)

4
3. s ^ t iff s ^n t for all n * 0.

This definition replaces the usual "bottom up" definition for ^ on finite trees by a
"top-down" definition. The subscripts essentially require that s ^n t iff s ^ t down to n
levels; by quantifying over n, we require that s ^ t for all levels. This intuition is made
precise by the following lemmas.

The same-shape property, familiar from finite trees, extends to infinite trees as well:

Lemma 1 If t ^ t0, then dom(t) = dom(t0).

Proof: This is done by induction on the length of addresses, using the following
lemma: for all n * 0, if t ^n t0 and jssj ^ n, then ss 2 dom(t) iff ss 2 dom(t0). This is an
easy induction on n. The base case uses the fact that tree domains always contain ffl. 2

Let POS denote the regular set of strings in f0; 1g\Lambda  with an even number of 0's, and
let NEG denote the corresponding set with an odd number of 0's. The following easy
lemma will also be useful:

Lemma 2 Let t ^ t0 and ss 2 POS (resp. NEG). If ss 2 dom(t) then t#ss ^ t0#ss (resp.
t0#ss ^ t#ss).

Lemma 3 t ^ t0 iff dom(t) = dom(t0) and for every leaf ss of t either

1. ss 2 POS and t(ss) ^C t0(ss)
2. ss 2 NEG and t0(ss) ^C t(ss)

4 The decision problems
4.1 C-TR
Let the set of types be TreesC[X for some set C of base types and some set X of type
variables.

The problem C-TR has as input a triple (A; M; t), where A is a map from a finite
set of variables of the *-calculus to regular types (represented as non-deterministic finite
automata), M is a *-term, and t is a type. The problem is to determine whether there
exists a map B and a substitution oe : X ! TreesC such that B ' A and Boe ` M : toe is
deducible in the following system:

A ` x : A(x)
A ` M : t ! t0 A ` N : t

A ` (M N ) : t0

A[x : t] ` M : t0
A ` (*x:M ) : t ! t0

5
A ` M : t t ^ t0

A ` M : t0

Here t and t0 range over TreesC, and A and B range over maps from a finite set
of variables of the *-calculus to regular types (represented as non-deterministic finite
automata).

This version of the problem does not include constants in the *-terms. The problem
including constants can be reduced to C-TR by including the types of the constants
in A. When C is a discrete order (c ^C c0 implies c = c0), this is the ordinary type
reconstruction problem over infinite trees. Another variant of this problem has as input
only A and M , and asks whether t exists; this problem reduces to C-TREE-SAT similarly.

All these questions can be asked when the types are finite trees (i.e. simple types)
only; we denote the finite-tree version of C-TR by C-TRF .

4.2 C-TREE-SAT
Given a partial order C on the constants, the problem C-TREE-SAT is: Given a finite
set of inequalities of the form t ^ t0 where t and t0 range over terms of the form

t := c j x j t ! t0
is there a valuation oe : Vars ! TreesC that satisfies all the inequalities? When C is
discrete, this is just unification on infinite trees, and it is well-known that it is decidable
in polynomial time, and if a solution exists, then there is a solution in which all the trees
are regular.

We will use \Sigma  as a symbol to range over instances of C-TREE-SAT and similar
problems. We use x, y, z as metavariables ranging over the variables in the inequalities.
For C-REG-SAT below, we will introduce xff as subscripted variables, and we will identify
x and xffl.

Let us consider an example, which we will use throughout to illustrate the pieces of
the algorithm. Consider the inequality

x ^ y ! (c ! x)
By repeatedly applying Lemma 2, it is easy to deduce that in any solution oe, we will
have

oey ^ (oex)#0

c ^ (oex)#10
(oex)#0 ^ (oex)#110
(oex)#10 ^ (oex)#1110

etc. Furthermore, since x and x1 are known to be interior nodes, all of these addresses
must be in the domain of any solution, and all of (oex)#11\Lambda 10 must be leaves comparable
to c, forming an increasing chain. In general, we have

f(oex)#ff0 ^ (oex)#ff110 j ff 2 1\Lambda g

By more complex initial conditions, one can generate quite complex sets of constraints,
with many interlocking chains of inequalities. Our goal is to reduce C-TREE-SAT to an

6
infinite (but structured) set of constraints to be solved in the partial order C. This leads
us to C-REG-SAT.

4.3 C-REG-SAT
Definition 1 A set of constraints is regular iff it can be expressed as a finite union of
sets of inequalities of the following forms:

(1) fxwss ^ yw0ss j ss 2 Rg for some regular set R.
(2) fxw ^ cg for some constant c
(3) fc ^ xwg for some constant c.

Note that a regular set of constraints is a "flat" system: it contains no arrows, so we
may consider solving it over C, not TreesC.

The problem C-REG-SAT is: Given a regular set of constraints, with the regular sets
R represented by nondeterministic finite automata, is there a valuation oe : Vars ! C
that satisfies all the inequalities?

We will show the decidability of C-REG-SAT by reducing it to the emptiness problem
for B"uchi automata.

The fragment of C-REG-SAT in which all the regular sets R are finite is denoted
C-FIN-SAT.

5 Reducing C-TR to C-TREE-SAT
The reduction from ordinary type reconstruction to unification on finite trees is wellknown (e.g. [16]). The same process can be used to reduce C-TR to C-TREE-SAT.

Given an instance (A; M; t) of C-TREE-SAT, assign a type variable to every subexpression of M and every binding occurrence of a variable in M . We write tN for the
type variable associated with subexpression N ; technically we should distinguish different
occurrences of N , but this will be clear from context.

Since ^ is a partial order, consecutive occurrences of the subsumption rule may be
merged. Therefore, if oe is any solution to (A; M; t), then Aoe ` M : toe has a derivation
tree in which each "structural" step is followed by exactly one subsumption step. For
example, for an application, the tree would look like:

Aoe ` M : tM oe Aoe ` N : tN oe

Aoe ` (M N ) : t t ^ t(MN)oe

Aoe ` (M N ) : t(MN)oe

where t is some type. We can summarize this information by generating the inequalities

tM = tN ! t

t ^ t(MN)

where t is a fresh type variable.

Extending these considerations to the other cases gives the following set of rules:

7
For each j generate
x j tA(x) ^ tx
*x:M j tx ! tM ^ t*x:M
(M N ) j tM = tN ! t1

j t1 ^ t(MN)

where tA(x) is the type variable associated with the binding occurrence of x and t1 is a
fresh type variable.

Each solution to the generated set of inequalities corresponds to a type inference tree,
and vice versa. Hence C-TR reduces to C-TREE-SAT.

6 Reducing C-TREE-SAT to C-REG-SAT
6.1 Finding the shape of the solution
By Lemma 1, we can determine the shapes of any solution to C-TREE-SAT by reducing
to the familiar problem of unification over infinite trees. More precisely, given an instance
\Sigma  of C-TREE-SAT, we can produce an instance Shape(\Sigma ) of unification over infinite trees
as follows:

1. Replace every constant appearing in \Sigma  by a single constant c0. For each term t,

call the resulting term _t

2. Replace every inequality t ^ t0 in \Sigma  by the equality _t = _t0.

Lemma 4 If oe is any solution to \Sigma , then the map oe0 defined by

(oe0x)(ss) = ae c0 if (oex)(ss) 2 C(oex)(ss) otherwise
is a solution to Shape(\Sigma ).

Proof: Obvious from Lemma 1. 2
We say \Sigma  is shape-consistent iff Shape(\Sigma ) is solvable.

Lemma 5 If \Sigma  is not shape-consistent, then \Sigma  is unsatisfiable.

Proof: Immediate from Lemma 4. 2
By the familiar algorithm ([4], Theorem 4.9.2), we can determine if Shape(\Sigma ) is solvable and, if it is, we can construct a principal solution to Shape(\Sigma ), that is a map
oe\Sigma  : Vars ! RegtreesC[X for some finite set X of new variables, such that the solutions
to Shape(\Sigma ) are precisely the maps of the form oe ffi o/ , where o/ is any map X ! TreesC.

Therefore, for each variable x appearing in \Sigma , we can construct regular sets L\Sigma (x),
Int\Sigma (x) and C\Sigma (x) with the following properties.

8
ss 2 L\Sigma (x) () ss 2 dom(oe\Sigma x)

() for every solution oe of Shape(\Sigma ), ss 2 dom(oex)

ss 2 Int\Sigma (x) () (oe\Sigma x)(ss) = !

() for every solution oe of Shape(\Sigma ), (oex)(ss) = !

ss 2 C\Sigma (x) () (oe\Sigma x)(ss) = c0

() for every solution oe of Shape(\Sigma ), (oex)(ss) = c0

Let us further define Leaves\Sigma (x) = L\Sigma (x) \Gamma  Int\Sigma (x). Furthermore, any solution oe,
and the functions L\Sigma , Int\Sigma , etc., can be extended to act on finite terms instead of just
on variables by setting L\Sigma (s ! t) = L\Sigma (s) ! L\Sigma (t), etc. Then, if (s = t) 2 \Sigma , we have
L\Sigma (s) = L\Sigma (t), etc.

For our example, we have L\Sigma (x) = 1\Lambda  [ 1\Lambda 0, Int\Sigma (x) = 1\Lambda , Leaves\Sigma (x) = 1\Lambda 0, and
C\Sigma (x) = (11)\Lambda 10.

Lemma 6 Let \Sigma  be a shape-consistent instance of C-TREE-SAT. Then:

1. If ss 2 L\Sigma (x), then in any solution oe of \Sigma , ss 2 dom(oe(x)).
2. If ss 2 Int\Sigma (x), then in any solution oe of \Sigma , (oex)(ss) = !.
3. If ss 2 C\Sigma (x), then in any solution oe of \Sigma , (oex)(ss) is a constant.

Proof: We will do part 3; the others are similar. Let ss 2 C\Sigma (x) and oe be any
solution of \Sigma . Form oe0 as in Lemma 4. Since oe0 is a solution to Shape(\Sigma ), we know that
(oe0x)(ss) = c0. But this implies that (oex)(ss) = c for some c 2 C, by the construction of
oe0. 2

6.2 Enumerating the leaf inequalities
Now we can give the reduction from C-TREE-SAT to C-REG-SAT. For a shape-consistent
instance \Sigma  of C-TREE-SAT, we build an instance Flat(\Sigma ) of C-REG-SAT by the following process. We start with the set \Sigma  of inequalities with variables x, y, etc., and build
a new set of inequalities ^\Sigma  over subscripted variables xw for w 2 f0; 1g\Lambda ; we identify x
and xffl.

1. For each inequality (s ^ t) 2 \Sigma , consider each pair of strings (w; w0) such that w is

a leaf of s and ww0 is a leaf of t.

2. Consider the case in which s(w) is a variable (say x), and ww0 is a leaf (either

t(ww0) = c or t(ww0) = y). If ww0 is positive, insert in ^\Sigma  the inequality xw0 ^ c or
xw0 ^ y. If ww0 is negative, insert in ^\Sigma  the inequality c ^ xw0 or y ^ xw0.

3. If s(w) is a constant c, it must be that w0 = ffl (otherwise \Sigma  would not be shapeconsistent) so t(w) = c0 or t(w) = y. If w is positive, insert in ^\Sigma  the inequality
c ^ c0 or c ^ y. If w is negative, insert in ^\Sigma  that inequality c0 ^ c or y ^ c.

9
4. Similarly for each pair of strings (w; w0) where w is a leaf of t and ww0 is a leaf of

s.

This gives us a set of inequalities of the form xw ^ y, x ^ yw, xw ^ c, c ^ xw, and
c ^ c0.

For our example, this process generates ^\Sigma  = fy ^ x0; c ^ x10; x11 ^ xg.

Lemma 7 If \Sigma  is shape-consistent, then \Sigma  is satisfiable iff ^\Sigma  is satisfiable.

Proof: If \Sigma  has a solution oe, define ^oe(xw) = (oex)#w. If ^oe is a solution to ^\Sigma , define
oex to be the smallest tree such that (oex)(ww0) = (^sxw)(w0), by marking every prefix of
w with !. 2

The instance Flat(\Sigma ) of C-REG-SAT is defined as follows:

ffl For each inequality of the form xw ^ y, include the regular constraints

fxwss ^ yss j ss 2 C(y) " POSg
and

fyss ^ xwss j ss 2 C(y) " NEGg

ffl Include each inequality of the form xw ^ c or c ^ xw.

For our example C\Sigma (x) = (11)\Lambda 10 ` NEG, and C\Sigma (y) = ;, so we get Flat(\Sigma ) = fc ^
x10; fxss ^ x11ss j ss 2 (11)\Lambda 10gg

Theorem 1 If \Sigma  is shape-consistent, then \Sigma  is satisfiable iff Flat(\Sigma ) is satisfiable.

Proof: ()): If oe satisfies \Sigma  and ss 2 C\Sigma (x), then (oex)(ss) is a constant. Hence
the variables in Flat(\Sigma ) are all assigned values in C, and it is easy to see that all of the
constraints in Flat(\Sigma ) are satisfied.

((): Given a solution oe to Flat(\Sigma ), construct a solution oe0 to \Sigma  as follows:

1. For each variable x in \Sigma , let dom(oe0x) = dom(oe\Sigma x) = L\Sigma (x).
2. If ss 2 Int\Sigma (x), let (oe0x)(ss) = !.
3. If ss 2 C\Sigma (x), let (oe0x)(ss) = oe(xss) We will prove that xss is a variable in Flat(\Sigma ).
4. Choose a c0 2 C. If ss 2 Leaves(x) \Gamma  C(x), let (oe0x)(ss) = c0.

Since \Sigma  is shape-consistent, it follows that Int\Sigma (x) " C\Sigma (x) is empty, so it is easy to
see that this assigns a label to every address ss 2 L\Sigma (x).

We must show that oe is a solution to \Sigma . Let (s ^ t) 2 \Sigma . Then (_s = _t) 2 Shape(\Sigma ), so
by the construction of oe0, dom(oe0s) = dom(oe\Sigma _s) = dom(oe\Sigma _t) = dom(oe0t). By Lemma 3,
it is enough to show that for every leaf ss of dom(oe0s), (oe0s)(ss) and (oe0t)(ss) are appropriately related.

10
If ss 2 Leaves\Sigma (s)\Gamma C\Sigma (s), then (oe0s)(ss) = (oe0t)(ss) = c0, so the condition of Lemma 3
is satisfied regardless of whether ss is positive or negative.

The remaining case is that ss 2 C\Sigma (s) = C\Sigma (t). Then there must be paths w1, w2,
ss1, ss2 such that ss = w1ss1 and w1 is a leaf of s, and ss = w2ss2 and w2 is a leaf of t.

If s(w1) is a constant (say c), then ss1 = ffl. So t(w2) must either be some constant c0,
in which case ss2 = ffl, or some variable y. Consider the case in which ss = w1 is positive.
Then Flat(\Sigma ) includes c ^ c0 or c ^ yss2 . Since oe is solution to Flat(\Sigma ), we have c ^C c0
or c ^ (oeyss2 ). In either case we have (oe0s)(ss) ^ (oe0t)(ss) as required. The case for ss
negative is symmetrical.

So assume that s(w1) is some variable x, and t(w2) is some variable y. Then we have
(oe0s)(ss) = (oe0x)(ss1) and (oe0t)(ss) = (oe0y)(ss2).

Without loss of generality, assume that w1 is a prefix of w2, say w2 = w1w. Then we
have w1ss1 = ss = w2ss2 = w1wss2, so ss1 = wss2.

We now have four cases, depending on the parity of w and ss2. We will do only
the case where both are positive. Since w is positive, ^\Sigma  must contain the inequality
xw ^ y. Now ss 2 C\Sigma (s), so ss2 2 C\Sigma (y), wss2 2 C\Sigma (x), and (xwss2 ^ yss2 ) 2 Flat(\Sigma ).
Therefore oe assigns a value from C to each of these variables, as desired. Furthermore, we
observe (oe0s)(ss) = (oe0x)(ss1) = (oe0x)(wss2) = (oexwss2 ) ^ (oeyss2 ) = (oe0y)(ss2) = (oe0t)(ss),
establishing the necessary relation between (oe0s)(ss) and (oe0t)(ss). The other cases are
similar, reversing the signs as needed. 2

7 Reducing C-REG-SAT to B"uchi automata
A B"uchi automaton is a nondeterministic automaton which walks down a possibly infinite
tree in which every node has a label chosen from some alphabet A. A run associates each
node with a state. The state at any node may depend non-deterministically on the state
of the machine at the parent node, the label at the parent node, and the direction (0 or
1) taken from the parent node to the current node.

Formally, the automaton is specified by a tuple (Q; q0; \Delta ; F ), consisting of a finite
set of Q states, an initial state q0 2 Q, a transition relation \Delta  ae Q \Theta  A \Theta  f0; 1g \Theta  Q
and a set F ae Q of final states. a run on a tree t is a labelled tree t0 with the same
domain as t, such that t0(ffl) = q0 and for any address ss in the interior of t, the tuple
(t0(ss); t(ss); a; t0(ssff)) is in the set for a 2 f0; 1g. The run is successful if on each path,
some final state occurs infinitely often. It is well-known that the emptiness problem for
B"uchi automata is decidable, and is in fact decidable in polynomial time [12, 15].

Given a regular set of inequalities over C, we will construct a B"uchi automaton whose
language is non-empty iff the set of inequalities is satisfiable. Our machines will in fact
be deterministic.

The first step is to reverse all the indices in \Sigma . This gets us to a finite set of families
of inequalities of the form

fxssw ^ yssw0 j ss 2 Rg

for some regular set R represented as a nondeterministic finite automaton. This transformation clearly preserves satisfiability. We call such a set of inequalities reverse-regular.

11
Theorem 2 Given any reverse-regular set of inequalities \Sigma , one can construct a B"uchi
automaton A such that the set of trees accepted by A is non-empty iff \Sigma  is satisfiable.

Proof: Without loss of generality, we consider only families of the form

fxssw ^ yss j ss 2 Rg
and

fxss ^ yssw0 j ss 2 Rg

The constraints constructed in the preceding reduction are of this form; in general, any
set of the form fxssw ^ yssw0 j ss 2 Rg can be replaced by fxssw ^ zss j ss 2 Rg, and
fzss ^ yssw0 j ss 2 Rg, for some new variable z.

Assume that there are n unsubscripted variables x1; x2; : : : xn in \Sigma , that is, the variables in \Sigma  are of the form xiw for some i 2 f1 : : :ng. We will run our automaton over
complete binary trees labelled by elements of Cn.

Such a tree will correspond to a solution of the set of inequalities. These trees are
not quite solutions to the original set of inequalities over trees, because the indices have
been reversed.

Each family of inequalities

fxiss ^ xjssw j ss 2 Rg
can be represented by the tuple (i; j; w; +; R). Similarly, each family of inequalities
fxissw ^ xjss j ss 2 Rg can be represented by the tuple (j; i; w; \Gamma ; R). In each case the first
element of the tuple indicates the variable with the shorter subscript. The sign indicates
whether the "later-found" element is larger or smaller than the "earlier-found" one. We
refer to these as the original items.

Each inequality c ^ xiw can be represented by the tuple (c; i; w; +), and each inequality
xiw ^ c can be represented by the tuple (c; i; w; \Gamma ) We refer to these tuples collectively
as items.

We construct an automaton A whose states are either (a) a distinguished failure state
or (b) a finite set of items. The initial state will be the set of items corresponding to the
constraints of the form c ^ xiw and xiw ^ c. The accepting states will be all sets other
than the failure state.

Once in the failure state, the machine will stay in the failure state forever. Otherwise,
at every node the machine splits into two states, one for each branch. We refer to these
states as the 0-successor state and the 1-successor state, respectively.

To construct the set of items for the two successor states, add items according to the
following rules, beginning with the empty set:

1. For each original item (i; j; aw; +; R), if the current address is in R then put the

item (ci; j; w; +) in the a-successor state. Similarly for each item of the form
(i; j; aw; \Gamma ; R).

2. For each original item (i; j; ffl; +; R), if the current address is in R then check to

see if ci ^ cj. If not, then make each a-successor state (a = 0 or 1) the failure
state. (If ci ^ cj, then this constraint is satisfied at this address, so no item need
be inserted.) Similarly for the original item (i; j; ffl; \Gamma ; R).

12
3. For each item (c; i; aw; +) in the state, then the item (c; i; w; +) will be in the

a-successor state (a = 0 or 1).

4. For each item (c; i; aw; \Gamma ) in the state, then the item (c; i; w; \Gamma ) will be in the

a-successor state.

5. For each item (c; i; ffl; +) in the state, let ci be the i-th component of the label at

the current node. If ci 6^ c, then make both successor states the failure state. (If
ci ^ c, then the constraint coded by this item has been satisfied, so the item can
be deleted). Similarly for each item (c; i; ffl; \Gamma ).

For each family of inequalities, represented by (i; j; w; \Sigma ; R), the automaton A keeps
track of the current address in the tree and check to see whether it is in the regular set
R. If the current address is in R, then we create an item (c; j; w; \Sigma ) that will walk down
along the path w and check to see if the j-th component at that location satisfies the
necessary inequality.

Each item (c; j; w; \Sigma ) walks down the tree from its creation point ss, following path w
to the tree address ssw. It then compares the value of the y component at ssw to c and
either succeeds or fails, depending on the value of the \Sigma . If the constraint is violated,
then the machine enters a failure state and rejects the input. Otherwise, the machine
continues.

We next count the number of possible items (c; j; w; \Sigma ). Let the system \Sigma  have k
groups of inequalities, each of the form fc ^ xwig, fxwi ^ cg, fxss ^ ysswi j ss 2 Rg, or
fysswi ^ xss j ss 2 Rg. Then the number of possible items obtained from one such group
is at most jCj \Delta  jwij. So the total number of items is at most

jCj \Delta  (jw1j + : : : + jwkj) ^ jCj \Delta  j\Sigma j
Thus the number of possible items is O(j\Sigma j), so A has at most 2O(j\Sigma j) states.

We next show that this machine accepts some tree iff the reverse-regular set \Sigma  of
inequalities is satisfiable. If oe : Vars(\Sigma ) ! C is a solution to \Sigma , construct a tree
t : f0; 1g ! Cn by setting t(ss) = (c1; : : : cn), where ci = oe(xiss) if xiss 2 Vars(\Sigma ) and
ci = c0 (some fixed constant) otherwise. This tree will be accepted by A, since it will
never send A to the failure state.

Conversely, if t : f0; 1g ! Cn is accepted by A, then for each xiss 2 Vars \Sigma  let oe(xiss)
be the i-th component of t(ss). Since no run of A on t enters the failure state, it follows
that all the partial-satisfaction conditions together with the component inequalities are
satisfied, that is, this is a solution of \Sigma . 2

Theorem 3 1. Given a reverse-regular set of inequalities \Sigma , it is decidable in deterministic exponential time whether \Sigma  is satisfiable.

2. C-REG-SAT is decidable in DEXPTIME.

Proof: By the polynomial decidability of the emptiness problem for B"uchi automata
and the observation that the size of A is 2O(j\Sigma j). 2

Note by contrast that C-FIN-SAT is in NP, for every C.
We can summarize the sequence of reductions as follows:

13
Theorem 4 1. The problem C-TREE-SAT is decidable in deterministic exponential

time.

2. The problem C-TR is decidable in deterministic exponential time.
3. If \Sigma  is an instance of C-TR that has a solution, then it has a solution in which all

the types are regular trees.

Proof: (i) Use nondeterministic finite automata to represent the regular sets in the
solution of Shape(\Sigma ); then all the reductions except the last are polynomial.

(ii) All the reductions except the last are polynomial.
(iii) Because if the language accepted by a B"uchi automaton is nonempty, then it
includes some regular tree. 2

Theorem 5 The problem C-TRF is decidable in deterministic exponential time.

Proof: To use this algorithm for type reconstruction with atomic subtyping in the
case of well-founded types, merely test each set L\Sigma (x) for finiteness. This can be done
in polynomial time. 2

This result improves the upper bound for C-TRF from NEXPTIME to DEXTIME.

8 Lower Bounds
We show that if C is any nontrivial partial order (ie it has two unequal but comparable
elements), then C-REG-SAT is PSPACE-hard. We will do this by defining a class of
automata called autonomous reading PDA's (ARPDA's). Then we show that the ARPDA
termination problem is PSPACE-hard, and that ARPDA termination reduces to C-REGSAT over any nontrivial partial order.

An ARPDA consists of a finite set Q of states and a pushdown stack over the alphabet
f0,1g, so an instantaneous description of a machine state is a pair (q; w) with q 2 Q and
w 2 f0; 1g\Lambda ; we depict the top of the stack as being at the right-hand end of w. The
machine has an initial state q0 and a final state qf , and its behavior is specified by a set
\Delta  of transitions. Each transition is of one of two forms:

1. A pds transition ((p; a) 7! (q; b)), where p; q 2 Q and a; b 2 f0; 1; fflg.
2. A pds query ((p; R) 7! q), where p; q 2 Q, and R ` f0; 1g\Lambda  is a regular set,

represented as a nondeterministic finite automaton.

An ARPDA is a nondeterministic machine. Its behavior relation ! is defined as
follows:

ffl If ((p; a) 7! (q; b)) 2 \Delta , then (p; ua) ! (q; ub) for any u 2 f0; 1g\Lambda .
ffl If ((p; R) 7! q) 2 \Delta , then (p; u) ! (q; u) whenever u 2 R.

The ARPDA termination problem is: Given an ARPDA M , does (q0; ffl) \Lambda ! (qf ; ffl)?

14
Theorem 6 The ARPDA termination problem is PSPACE-hard.

Proof: By reduction from evaluation of quantified boolean formulae. Let (Q1x1) : : : (Qnxn)\Phi 
be a quantified boolean formula; that is, each Qi is a quantifier (8 or 9) and \Phi  is a
boolean formula in disjunctive normal form over the variables fx1; : : : xng. We construct
a ARPDA M that terminates iff this formula is true. The machine works by traversing a
backtracking search tree over fx1; : : : xng. It maintains its position in the tree by keeping
the values of x1; : : : ; xn on the stack. It keeps track of its direction of travel (down or
up) and its current level in f0; : : : n + 1g in its control state Q. The initial state is (down,
1), and the final state is (up, 0).

The machine maintains the invariant that in state (up, i), the stack contains a valuation x1; : : : ; xi that makes the formula (Qi+1xi+1) : : : (Qnxn)\Phi  true.

We next describe what happens at each state (d; i), when the machine is at level i
travelling in direction d, and at the same time show that the machine maintains this
invariant.

(down, i) On this visit, the machine is searching down in the tree. If i ^ n and Qi is

8, push a 0 on the stack. If i ^ n and Qi is 9, nondeterministically choose a value
for xi and push it on the stack. In either case go to state (down, i + 1).

If i ? n, we have a complete set of values for fx1; : : : xng on the stack. Evaluate the
formula \Phi  using these values; this is possible by encoding \Phi  as a nondeterministic
finite automaton and using the ability of M to check whether its stack matches an
arbitrary regular set. If the formula is true, go to state (up, n). If not, then loop.

(up, i). According to the invariant, the stack contains a valuation x1; : : : ; xi that makes

the formula (Qi+1xi+1) : : : (Qnxn)\Phi  true. If Qi is 9, then the current value of xi is
the witness that shows that x1; : : :; xi\Gamma 1 makes (Qixi)(Qi+1xi+1) : : : (Qnxn)\Phi  true.
So pop the stack and go to state (up, i \Gamma  1).

If Qi is 8 and xi = 0, this is the "infix" visit to this node: set xi = 1 (by changing
the topmost cell on the stack from 0 to 1), and go to the state (down, i + 1). If
Qi is 8 and xi = 1, this is the "postfix" visit to this node; at this point we have
succeeded in evaluating the formula at this node, so go to state (up, i \Gamma  1).

Hence if we reach the state (up, 0), the stack will be empty and the original formula
must have been true. Furthermore, it is clear that the machine M explores the entire
subtree, so if the formula is true, all the needed witnesses will be found. 2

Theorem 7 The ARPDA termination problem is polytime reducible to C-REG-SAT
over any nontrivial poset C.

Proof: Let M = (Q; q0; qf ; \Delta ) be an ARPDA. We denote the initial and final states
with superscripts to avoid conflicts with the subscripted variables of C-REG-SAT. Let
C be a non-trivial poset with a ^ b, a 6= b holding in C. We will construct an instance
\Sigma M of C-REG-SAT such that \Sigma M is unsatisfiable iff M halts.

The variables of \Sigma M are Q. The inequalities are

pwa ^ qwb

15
for every w 2 f0; 1g\Lambda  and ((p; a) 7! (q; b)) 2 \Delta ,

pw ^ qw
for ((p; R) 7! q) 2 \Delta  and w 2 R, and the two inequalities

b ^ q0; qf ^ a

It is clear that in M , (p; w) reduces to (q; u) in at most k steps iff the assertion
pw ^ qu is deducible from \Sigma M in at most k applications of transitivity. Hence M halts
iff q0 ^ qf is deducible from \Sigma M .

We claim that M halts iff \Sigma M is unsatisfiable. Assume M halts and \Sigma M is satisfiable
with solution oe. Then we have b ^ oe(q0) ^ oe(qf ) ^ a, so a = b, contradicting our
assumption that a 6= b.

If M does not halt, construct a solution oe to \Sigma M as follows: If (q; w) is reachable
from the initial state (q0; ffl), assign oe(qw) = b. Otherwise assign oe(qw) = a. It is easy to
show that this assignment satisfies all the inequalities in \Sigma M . 2

It should be noted that C-REG-SAT exhibits dramatically different behavior than its
fragment C-FIN-SAT which consists of finite instances of C-REG-SAT. As we remarked
earlier, C-FIN-SAT is always in NP. It follows from the results of [11] that there are
finite posets for which C-FIN-SAT is actually NP-complete. Our results of this paper
indicate that C-REG-SAT is always between PSPACE and DEXPTIME, for all posets
C which are not discrete. Over discrete C, C-REG-SAT is clearly in PTIME.

9 Conclusions
We have shown how to extend Mitchell's algorithm for type reconstruction in a type
system with atomic subtyping to handle recursive types. This extension is necessary to
do type reconstruction for object-oriented systems with self. The resulting algorithm
is in DEXPTIME, which also improves the previous NEXPTIME algorithm for atomic
subtyping on finite types.

References

[1] Roberto M. Amadio and Luca Cardelli. Subtyping Recursive Types. In Conf. Rec.

18th ACM Symposium on Principles of Programming Languages, pages 104-118,
1991.

[2] Kim B. Bruce. A Paradigmatic Object-Oriented Programming Language: Design,

Static Typing and Semantics. Technical Report CS-92-01, Williams College, January
1992.

[3] William R. Cook, Walter L. Hill, and Peter S. Canning. Subtyping is not Inheritance. In Conf. Rec. 17th ACM Symposium on Principles of Programming Languages, pages 125-135, 1990.

[4] Bruno Courcelle. Fundamental Properties of Infinite Trees. Theoretical Computer

Science, 25:95-169, 1983.

16
[5] Y.-C. Fuh and P. Mishra. Type Inference with Subtypes. In Proceedings European

Symposium on Programming, pages 94-114, 1988.

[6] Dexter Kozen, Jens Palsberg, and Michael I. Schwartzbach. Efficient Inference of

Partial Types. Technical Report DAIMI PB-394, Computer Science Department,
Aarhus University, April 1992.

[7] Patrick Lincoln and John C. Mitchell. Algorithmic Aspects of Type Inference with

Subtypes. In Conf. Rec. 19th ACM Symposium on Principles of Programming Languages, pages 293-304, 1992.

[8] John C. Mitchell. Coercion and Type Inference (summary). In Conf. Rec. 11th

ACM Symposium on Principles of Programming Languages, pages 175-185, 1984.

[9] John C. Mitchell. Type Inference with Simple Subtypes. Journal of Functional

Programming, 1:245-285, 1991.

[10] Patrick M. O'Keefe and Mitchell Wand. Type Inference for Partial Types is Decidable. In Bernd Krieg-Br"uckner, editor, European Symposium on Programming
'92, volume 582 of Springer Lecture Notes in Computer Science, pages 408-417.
Springer-Verlag, 1992.

[11] Vaughn Pratt and Jerzy Tiuryn. Satisfiability of Inequalities in a Poset. to appear,

1992.

[12] Michael O. Rabin. Weakly Definable Relations and Special Automata. In Y. BarHillel, editor, Mathematical Logic and the Foundations of Set Theory, pages 1-23,
Amsterdam, 1970. North-Holland.

[13] Satish Thatte. Type Inference with Partial Types. In Proceedings International

Colloquium on Automata, Languages, and Programming '88, pages 615-629, 1988.

[14] Jerzy Tiuryn. Subtype Inequalities. In Proc. 7th IEEE Symposium on Logic in

Computer Science, pages 308-315, 1992.

[15] Moshe Y. Vardi and Pierre Wolper. Automata-Theoretic techniques for modal logics

of programs. J. Comp. Sys. Sci., 32:183-221, 1986.

[16] Mitchell Wand. A Simple Algorithm and Proof for Type Inference. Fundamenta

Informaticae, 10:115-122, 1987.

[17] Mitchell Wand and Patrick M. O'Keefe. On the Complexity of Type Inference with

Coercion. In Conf. on Functional Programming Languages and Computer Architecture, 1989.