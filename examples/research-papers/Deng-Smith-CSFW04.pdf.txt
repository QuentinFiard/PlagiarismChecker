

Lenient Array Operations for Practical Secure Information Flow

Zhenyue Deng Geoffrey Smith

School of Computer ScienceFlorida International University

Miami, Florida 33199, USAf
zdeng01,smithgg@cs.fiu.edu

Abstract
Our goal in this paper is to make secure information
flow typing more practical. We propose simple and permissive typing rules for array operations in a simple sequen-tial imperative language. Arrays are given types of the formo/1

arr o/2, where o/1 is the security class of the array's contents and o/2 is the security class of the array's length. Tokeep the typing rules permissive, we propose a novel, lenient semantics for out-of-bounds array indices. We showthat our type system ensures a noninterference property, and
we present an example that suggests that it will not be too
difficult in practice to write programs that satisfy the typ-ing rules.

1. Introduction

The secure information flow problem is concerned withpreventing information leaks from high-security (H) to
low-security (L) program variables. It has received a greatdeal of attention in recent years, and many type systems
have been developed that provably guarantee various noninterference properties; see [8] for a recent survey. But sofar this research has had little practical impact. One major

practical problem is that these type systems tend to be quiterestrictive.

In this paper, we focus on the typing of array operationsin a type system for secure information flow. Arrays are interesting because they play a major role in many nontriv-ial programs and because they can cause subtle information
leaks, leading existing type systems to impose severe re-strictions.

An example of a leak resulting from array indexing canbe found in Denning's early work on secure information
flow [4, page 509]. If array a is L and secret is H, thenthe assignment

a[secret] = 1; is dangerous; if a isinitially all zero, then after the assignment we can deduce

the value of secret by searching a for a nonzero element:

a[secret] = 1;
i = 0;
while (i < a.length) {

if (a[i] == 1)

leak = i;
i++;
}

Out-of-bounds array indices cause other problems. If ar-ray bounds checking is not performed (as in typical C implementations), then assignments to array elements can ac-tually write outside the array, making it impossible to ensure
any security properties whatsoever. But if out-of-boundsarray indices lead to exceptions (as in Java), then statements sequentially following an array operation may notbe reached, leading to possible information flows. For example, Figure 1 gives a Java program that leaks a 10-bit
secret by turning on each bit of leak following an ar-ray assignment that throws an exception if the corresponding bit of secret is 0.Recent type systems for secure information flow have
imposed a variety of restrictions to prevent leaks caused byarray indexing. The simplest approach, adopted by Agat [1,
page 45] (which aims to prevent timing leaks), is to requirethat all array indices and lengths be L. But this is of course
very restrictive. In fact, just requiring that array indices beL already prevents something as basic as summing an array whose length is H:

sum = 0;
i = 0;
while (i < a.length) {

sum = sum + a[i];
i = i + 1;
}

Here, the while loop causes an implicit flow [4] from
a.length to i, because the assignment i = i + 1is guarded by the condition

i < a.length. Hence if
a.length is H, then we must make i (and sum) be Has well, making

a[i] illegal, if array indices must be L.

class Array {

public static void main(String[] args) {

int secret = Integer.parseInt(args[0]);
int leak = 0;
int [] a = new int[1];

for (int bit = 0; bit < 10; bit++)

try {

a[1 - (secret >> bit) % 2] = 1;
leak |= (1 << bit);
}
catch (ArrayIndexOutOfBoundsException e) { }
System.out.println("The secret is " + leak);
}
}

Figure 1. A leak exploiting out-of-bounds array indices

In Jif [6], a full-featured language for secure informationflow, very complex rules are used to track information flows
resulting from possible exceptions. In particular, subscript-ing an array with a H index causes the

program-counter
label pc to be raised to H, thereby preventing subsequentstatements from assigning to L variables (until the potential

ArrayIndexOutOfBoundsException is caught). Itshould be noted that the Jif type system has not, to our
knowledge, been proved to ensure a noninterference prop-erty.

The treatment of arrays in Flow Caml [9] seems to besimilar, though we have not found a detailed description
of its rules for arrays. A similar strategy is described inYocum's unpublished thesis [12]: an operation involving aH

array index or an array of H length cannot be followedsequentially by any assignments to L variables, since those
assignments will not be reached if there is an out-of-boundsindex.

Because it is so disruptive to have to address the possi-bility of exceptions after every array operation involving aH
index or length, we are led here to propose a lenient exe-cution model in which programs

never abort. The languagedoes check for out-of-bounds indices, butffl

an out-of-bounds array read simply yields 0, andffl
an out-of-bounds array write is simply skipped.
This lenient execution model makes no differenceon programs that are free of out-of-bounds array indices, though it does make debugging erroneous pro-grams harder. (Of course, in this regard we are no worse
off than in C!) But our focus here is on avoiding inse-cure information flows--we sacrifice exception reporting
to L observers for the sake of a more permissive type sys-tem.

The lenient execution model can be used for other par-tial operations. For instance, we can say that division by 0
simply yields 0, thereby avoiding the need for restrictionslike those proposed in [10]. This is also like Java's use of
32-bit two's compliment modular arithmetic, avoiding theneed for integer overflow exceptions [2, page 156].

Because of our lenient execution model, we are able touse a simple and permissive type system. In our system, arrays are given types of the form o/1 arr o/2, where o/1 is thesecurity class of the array's contents and o/2 is the security
class of its length. Several combinations are useful: L arr Lis a completely public array, H

arr L is an array whose con-tents are private but whose length is public, and H

arr H isa completely private array.

The rest of the paper is organized as follows. In Sec-tion 2, we describe the simple sequential imperative language that we consider, and formally define its lenient se-mantics for array operations. In Section 3 we present the
details of our type system, and in Section 4 we prove that itguarantees a noninterference property. In Section 5, we discuss the behavior of the type system on an example tax cal-culation program. Finally, Section 6 concludes.

2. The Language and its Semantics

Programs are written in the simple imperative language[5], extended with one-dimensional integer arrays. The syntax of the language is as follows:

(phrases) p ::= e j c
(expressions) e ::= x j n j x[e] j x:length je1=e2 j e1 + e2 je1 \Lambda  e2 j e1 = e2 j : : :

(commands) c ::= x := e jx[e1] := e2 j

allocate x[e] jskip j
if e then c1 else c2 jwhile e do c jc1; c2

Here metavariable x ranges over identifiers and n over in-teger literals. The expression x:length yields the length of
array x, as in Java. The command allocate x[e] allocates a0-initialized block of memory for array x; the size of the array is given by e. Note that for simplicity we do not treat ar-rays as first-class values. (First-class arrays would lead to
issues of aliasing, which have been considered by Baner-jee and Naumann [3].)

A program c is executed under a memory _, which mapsidentifiers to values. A value is either an integer n or an array of integers hn0; n1; n2; : : : ; nk\Gamma 1i, where k * 0. (Notethat this simple memory model is not sufficient for modeling array aliasing--in Java, for example, two identifiers aand b can point to the same block of memory.)

We assume that expressions are evaluated atomically,with _(e) denoting the value of expression e in memory_
. The formal semantics of array expressions and divisionis given in Figure 2. Note that the rules specify that an array read with an out-of-bounds index yields 0, as does divi-sion by 0.

Execution of commands is given by a standard structuraloperational semantics [5]:

(UPDATE) x 2 dom(_)(x := e; _)\Gamma !_[x := _(e)]

(NO-OP) (skip; _)\Gamma !_
(BRANCH) _(e) 6= 0(if e then c1 else c2; _)\Gamma !(c1; _)_(e) = 0(

if e then c1 else c2; _)\Gamma !(c2; _)
(LOOP) _(e) = 0(while e do c; _)\Gamma !__(e) 6= 0(

while e do c; _)\Gamma !(c; while e do c; _)
(SEQUENCE) (c1; _)\Gamma !_0(c1; c2; _)\Gamma !(c2; _0)

(c1; _)\Gamma !(c01; _0)(c1; c2; _)\Gamma !(c01; c2; _0)
In addition, we have new rules for array writes and ar-ray allocation; these are given in Figure 3. These rules define a transition relation \Gamma ! on configurations. A configu-ration is either a pair (c; _) or simply a memory _. In the
first case, c is the command yet to be executed; in the sec-ond case, the command has terminated, yielding final memory _. We write \Gamma !k for the k-fold self composition of\Gamma !, and \Gamma !\Lambda  for the reflexive, transitive closure of \Gamma !.

3. The Type System

In this section, we extend the typing rules in [11] withnew rules for typing array operations. We type arrays using
types of the form o/1 arr o/2; here o/1 describes the contentsof the array, and o/2 describes its length.

Here are the types used by our type system:
(data types) o/ ::= L j H(

phrase types) ae ::= o/ j o/ var j o/ cmd j o/1 arr o/2

For simplicity, we limit the security classes here to just Land H; it is possible to generalize to an arbitrary lattice of

security classes.

Out of the four possible array types (H arr H, H arr L,L arr H, and L arr L), L arr H does not really make

sense--the contents of an array implicitly includes the ar-ray's length. So if an array's contents are L, then the array's
length must also be L. We therefore adopt the follow-ing constraint globally:

Global Array Constraint: In any array typeo/1

arr o/2, we require that o/2 ` o/1.

We now can present our type system formally. It allowsus to prove

typing judgments of the form fl ` p : ae as wellas subtyping judgments of the form ae1 ` ae2. Here fl denotes an identifier typing, which maps identifiers to phrasetypes of the form o/ var or o/1 arr o/2. The typing rules are
given in Figure 4 and the subtyping rules in Figure 5.

We briefly discuss the array typing rules. In rule
SUBSCR, the value of expression x[e] depends on thelength and contents of array x as well as on the subscript e. For example, if x[e] is nonzero, then we know thate is in range; that is, 0 ^ e ! x:length. So if x : o/1

arr o/2and e : o/3, then we need x[e] : o/1 . o/2 . o/3, where . denotes join in the security lattice. Given the Global ArrayConstraint, this simplifies to o/1 . o/3.

Rule ASSIGN-ARR addresses similar issues. One inter-esting property of this rule is that if x : H

arr L, then thecommand x[e1] := e2 can be given type H
cmd, which saysintuitively that it only assigns to H variables. This is valid

because it does not change the length of x.

(ARR-READ) x 2 dom(_); _(x) = hn0; : : : nk\Gamma 1i; _(e) = i; 0 ^ i ! k_(x[e]) = nix 2

dom(_); _(x) = hn0; : : : nk\Gamma 1i; _(e) = i; (i ! 0 . i * k)_(x[e]) = 0
(GET-LENGTH) x 2 dom(_); _(x) = hn0; : : : nk\Gamma 1i_(x:length) = k
(DIV) _(e1) = n1; _(e2) = n2; n2 6= 0_(e1=e2) = bn1=n2c_(e1) = n; _(e2) = 0_(e1=e2) = 0

Figure 2. Semantics of array expressions and division
(UPDATE-ARR) x 2 dom(_); _(x) = hn0; : : : nk\Gamma 1i; _(e1) = i; 0 ^ i ! k; _(e2) = n(x[e1] := e2; _)\Gamma !_[x := hn0; : : : ; ni\Gamma 1; n; ni+1; : : : ; nk\Gamma 1i]x 2

dom(_); _(x) = hn0; : : : nk\Gamma 1i; _(e1) = i; (i ! 0 . i * k)(x[e1] := e2; _)\Gamma !_
(CALLOC) x 2 dom(_); _(e) * 0(allocate x[e]; _)\Gamma !_[x := h 0; 0; : : : ; 0-- -z ""_(e)

of thesei]x 2
dom(_); _(e) ! 0(allocate x[e]; _)\Gamma !_[x := hi]

Figure 3. Semantics of array commands
In contrast, the command allocate x[e] does as-sign a length to x, and this length can later be read byx:
length. Hence if x : o/ arr L, then rule ALLOCATE givesallocate x[e] type L

cmd, to indicate that it (in effect) as-signs to a L variable.

4. Properties of the Type System

In this section, we use relatively standard techniques toprove that our type system guarantees noninterference.
The proofs of some of the lemmas below are compli-cated somewhat by subtyping. We therefore assume, without loss of generality, that all typing derivations end with asingle (perhaps trivial) use of rule

SUBSUMP.

Lemma 4.1 (Subject Reduction) If fl ` c : o/ cmd and(c; _)\Gamma !(c0; _0), then fl ` c0 : o/ cmd.

Proof. By induction on the structure of c. There are justthree kinds of commands that can take more than one step
to terminate:

1. Case if e then c1 else c2. By our assumption, the typ-ing derivation for c must end with a use of rule

IF fol-lowed by a use of
SUBSUMP:fl ` e : o/ 0fl ` c1 : o/ 0

cmdfl ` c2 : o/ 0
cmdfl ` if e then c1 else c2 : o/ 0

cmdo/ 0
cmd ` o/ cmdfl ` if e then c1 else c2 : o/

cmd

Hence, by rule CMD\Gamma , we must have o/ ` o/ 0. So by

SUBSUMP we have fl ` c1 : o/ cmd and fl ` c2 : o/ cmd.By rule

BRANCH, c0 can be either c1 or c2; therefore,we have fl ` c0 : o/

cmd.

2. Case while e do c. By an argument similar to that usedin the previous case, we have fl ` c : o/ cmd. By rule

LOOP, c0 is c; while e do c. Hence fl ` c0 : o/ cmd byrule

COMPOSE.

3. Case c1; c2. As above, we get fl ` c1 : o/ cmd andfl ` c2 : o/

cmd. By rule SEQUENCE, c0 is either

(R-VAL) fl(x) = o/ varfl ` x : o/
(SUBSCR) fl(x) = o/1 arr o/2; fl ` e : o/3;fl ` x[e] : o/1 . o/3
(INT) fl ` n : L
(QUOTIENT) fl ` e1 : o/; fl ` e2 : o/fl ` e1=e2 : o/

(ASSIGN) fl(x) = o/ var; fl ` e : o/fl ` x := e : o/

cmd

(ASSIGN-ARR) fl(x) = o/1 arr o/2; fl ` e1 : o/1; fl ` e2 : o/1fl ` x[e1] := e2 : o/1

cmd

(LENGTH) fl(x) = o/1 arr o/2fl ` x:length : o/2

(ALLOCATE) fl(x) = o/1 arr o/2; fl ` e : o/2fl ` allocate x[e] : o/2

cmd

(SKIP) fl ` skip : H cmd
(IF) fl ` e : o/fl ` c1 : o/ cmdfl ` c2 : o/

cmdfl ` if e then c1 else c2 : o/

cmd

(WHILE) fl ` e : o/fl ` c : o/

cmdfl ` while e do c : o/

cmd

(COMPOSE) fl ` c1 : o/ cmdfl ` c2 : o/

cmdfl ` c1; c2 : o/

cmd

Figure 4. Typing rules

(BASE) L ` H
(CMD\Gamma ) o/ 0 ` o/o/

cmd ` o/ 0 cmd

(REFLEX) ae ` ae
(TRANS) ae1 ` ae2; ae2 ` ae3ae1 ` ae3

(SUBSUMP) fl ` p : ae1; ae1 ` ae2fl ` p : ae2

Figure 5. Subtyping rules

c2 (if c1 terminates in one step) or else c01; c2, where(c1; _)\Gamma !(c01; _0). For the first case, we have fl ` c2 :o/

cmd. For the second case, we have fl ` c01 : o/ cmd byinduction; hence fl ` c01; c2 : o/

cmd by rule COMPOSE.

Definition 4.1 Memory _ is consistent with identifier typ-ing fl, written _ : fl, if dom(_) = dom(fl) and, for everyx

, _(x) is an integer n if fl(x) = o/ var and _(x) is an array of integers hn0; : : : ; nk\Gamma 1i if fl(x) = o/1 arr o/2.

Lemma 4.2 (Total Expressions) If fl ` e : o/ and _ : fl,then _(e) is a well-defined integer.

Proof. By induction on the structure of e.
Lemma 4.3 (Progress) If fl ` c : o/ cmd and _ : fl, then
there is a unique configuration C, of the form (c0; _0) or just_0, such that (c; _)\Gamma !C and _0 : fl.

Proof. By induction on the structure of c.

From the Subject Reduction and Progress lemmas, it fol-lows that if command c is well typed under fl and c is executed in a memory _ consistent with fl, then the executioneither terminates successfully or else loops--it cannot get
stuck.

We also need a lemma about the execution of a sequen-tial composition:

Lemma 4.4 If (c1; c2; _)\Gamma !j_0, then there exist kand _00 such that 0 ! k ! j, (c1; _)\Gamma !k_00, and(c2; _00)\Gamma !j\Gamma k_0

.
Proof. By induction on j. If the derivation begins with anapplication of the first

SEQUENCE rule, then there exists _00such that (c1; _)\Gamma !_00 and(c1; c2; _)\Gamma !(c2; _00)\Gamma !j\Gamma 1_0:

So we can let k = 1. And, since j \Gamma  1 * 1, we have k ! j.

If the derivation begins with an application of the sec-ond

SEQUENCE rule, then there exists c01 and _1 such that(c1; _)\Gamma !(c01; _1) and(c1; c2; _)\Gamma !(c01; c2; _1)\Gamma !j\Gamma 1_0:

By induction, there exists k and _00 such that 0 ! k !j \Gamma  1, (c01; _1)\Gamma !k_00, and (c2; _00)\Gamma !j\Gamma 1\Gamma k_0. Hence(c1; _)\Gamma !k+1_00

and (c2; _00)\Gamma !j\Gamma (k+1)_0. And 0 ! k +1 ! j.

Now we are ready to show that our type system ensures anoninterference property for well-typed commands c. Noninterference says that changing the initial values of H vari-ables cannot affect the final values of L variables. (Note
however that under typing rule WHILE, changing the initialvalues of H variables

can affect the termination of c.)

Definition 4.2 Memories _ and * are equivalent with respect to fl, written _,fl*, ifffl _

and * are both consistent with fl,ffl _
and * agree on all L variables,ffl _
and * agree on all arrays of type L arr L, andffl _
and * agree on the length (but not necessarily on the
contents) of all arrays of type H arr L.

Lemma 4.5 (Simple Security) If fl ` e : L and _,fl*,
then _(e) = *(e).

Proof. By induction on the structure of e:

1. Case x. By typing rule R-VAL and fl ` x : L, fl(x) =L

var. Therefore, _(x) = *(x).

2. Case x[e]. By typing rule SUBSCR and fl ` x[e] : L,we have fl(x) = L arr L and fl ` e : L. By the definition of memory equivalence, we have _(x) = *(x).By induction, we have _(e) = *(e). Then, by semantic rule ARR-READ, we have _(x[e]) = *(x[e]).
3. Case x:length. By typing rule LENGTH andfl ` x:length : L, we have fl(x) = o/ arr L,

for some o/ . By memory equivalence, we have_(x:length) = *(x:length).

4. Case e1=e2. By typing rule QUOTIENT, we have fl `e1 : L and fl ` e2 : L. By induction, we have _(e1) =*(e1)

and _(e2) = *(e2). Then, by semantic rule DIV,we have _(e1=e2) = *(e1=e2).

5. Other cases are similar.

Lemma 4.6 (Confinement) If fl ` c : H cmd and(c; _)\Gamma !(c0; _0)

(or (c; _)\Gamma !_0), then _,fl_0.

Proof. By induction on the structure of c:

1. Case x := e. Here we have fl(x) = H var, so_,fl_[x := _(e)].

2. Case x[e1] := e2. Here we have fl(x) = H arr Hor fl(x) = H arr L. Hence by rule

UPDATE-ARR wehave _,fl_0.

3. Case allocate x[e]. Here we have fl(x) = H arr H, soby rule

CALLOC, _,fl_0.

4. Cases skip, if e then c1 else c2, and while e do c.These cases are trivial, because _ = _0.

5. Case c1; c2. Follows by induction.

Corollary 4.7 If fl ` c : H cmd and (c; _)\Gamma !\Lambda _0, then_,fl_0

.

Proof. Follows inductively from Subject Reduction andConfinement.

Theorem 4.8 (Noninterference) Suppose that fl ` c :o/

cmd, _,fl*, _ : fl, and * : fl. If (c; _)\Gamma !\Lambda _0 and(c; *)\Gamma !\Lambda *0, then _0,fl*0.

Proof. By induction on the length of the execution(c; _)\Gamma !\Lambda _0. We consider the different forms of c:

1. Case x := e. By rule UPDATE, we have _0 = _[x :=_(e)] and *0 = *[x := *(e)]. Since c is well typed,

we have x 2 dom(fl). If fl(x) = L var then by rule

ASSIGN, we have fl ` e : L. So by Simple Secu-rity, _(e) = *(e), and so _[x := _(e)],fl*[x :=*(e)]

. If, instead, fl(x) = H var then trivially _[x :=_(e)],fl*[x := *(e)].

2. Case skip. The result follows immediately from rule

NO-OP.

3. Case c1; c2. If (c1; c2; _)\Gamma !j_0 then by Lemma 4.4there exist k and _00 such that 0 ! k ! j,(c1; _)\Gamma !k_00

and (c2; _00)\Gamma !j\Gamma k_0. Simi-larly, if (c1; c2; *)\Gamma !j0 *0 then there exist k0 and*00
such that 0 ! k0 ! j0, (c1; *)\Gamma !k0 *00 and(c2; *00)\Gamma !j0\Gamma k0 *0. By induction, _00,fl*00. So by induction again, _0,fl*0.
4. Case if e then c1 else c2. If fl ` e : L then _(e) =*(e) by Simple Security. If _(e) 6= 0 then the two executions have the form(

if e then c1 else c2; _)\Gamma !(c1; _)\Gamma !\Lambda _0
and (

if e then c1 else c2; *)\Gamma !(c1; *)\Gamma !\Lambda *0:
By induction, _0,fl*0. The case when _(e) = 0 is sim-ilar.

If instead fl 6` e : L then by rule IF, and the factthat c is well typed, we have fl ` if e then c1 else c2 :H
cmd. Then by the corollary to Confinement, _,fl_0and *,fl*0. So _0,fl*0.

5. Case while e do c1. Similar to the if case.
6. Case allocate x[e]. We consider the possible types ofx.

If fl(x) = o/ arr L, then by rule ALLOCATE we havefl ` e : L. By Simple Security, we have _(e) = *(e).
So, by rule CALLOC, _0(x) = *0(x). So, _0,fl*0.

If fl(x) = H arr H, by rule ALLOCATE we havefl ` allocate x[e] : H

cmd. By the corollary to Con-finement, we have _0,fl*0.

7. Case x[e1] := e2. We consider the possible types of x.

If fl(x) = L arr o/ , then by rule ASSIGN-ARR wehave fl ` e1 : L and fl ` e2 : L. By Simple Security, we have _(e1) = *(e1) and _(e2) = *(e2). So,by rule

UPDATE-ARR, _0(x) = *0(x). So _0,fl*0.

If fl(x) = H arr H, then by rule ASSIGN-ARR wehave fl ` x[e1] := e2 : H

cmd. By the corollary toConfinement, we have _0,fl*0.

5. An Example Tax Calculation Program

We now try to get a sense of the practicality of our typesystem by considering its behavior on an example tax calculation program. Suppose that we are calculating incometaxes, using a tax table like the following:

Taxable income Income tax
At least Less than Single Married
. . . . . . . . . . . .25,200 25,250 3,434 3,084

25,250 25,300 3,441 3,09125,300 25,350 3,449 3,099
. . . . . . . . . . . .
In a richer language, we would likely represent the tax ta-ble as an array of records; here we use three parallel arrays

instead:

brackets
. . . 25,200 25,250 25,300 . . .

singleTaxTable
. . . 3,434 3,441 3,449 . . .

marriedTaxTable
. . . 3,084 3,091 3,099 . . .

Given these tables, we can calculate the income tax for tax-able income t by using binary search to find an index b such

that

brackets[b] ^ t ! brackets[b + 1]

and then returning either singleTaxTable[b] or
marriedTaxTable[b], depending on the marital sta-tus.

With respect to our type system, we want the typings
brackets : L arr L, singleTaxTable : L arr L, and
marriedTaxTable : L arr L, since the tax table is pub-lic information.

Let us further specify that we wish to calculatethe income taxes for many tax returns. We represent the tax returns using two parallel arrays,
taxableIncome and maritalStatus, using 0to represent "single" and 1 to represent "married". We

choose the typings taxableIncome : H arr L and
maritalStatus : L arr L to indicate that taxable in-come is private, marital status is public, and the number of

tax returns to be processed is public.

Our goal is to fill in an array incomeTax with thetax owed for each tax return. We also wish to compute
singleReturns and marriedReturns, which countthe number of single tax returns and married tax returns,
respectively. The typings that we want for our outputs are
incomeTax : H arr L, singleReturns : L, and
marriedReturns : L.

Given this specification, we would naturally write a pro-gram like the one in Figure 6. Notice that the program

makes use of four auxiliary variables: i, lo, hi, and mid.

Now we wish to see whether the program is acceptedby our type system. To do this, we must figure out whether

there are any acceptable types for the auxiliary variables.We begin by observing that the

if command within the bi-nary search has a H guard, since

taxableIncome[i]is H. Hence the branches must not assign to L variables.

This implies that hi : H and lo : H. And then the assign-ment

mid := (lo + hi) / 2 implies that mid : Has well. Finally, the last

if command assigns to the L vari-ables
singleReturns and marriedReturns. As aresult, its guard must be L, which implies that

i : L.

With these typings for the auxiliary variables, it isstraightforward to verify that the tax calculation program is well typed under our type system. We find itrather encouraging that we are able to write this program in a natural way and still have it accepted by the typesystem.

In contrast, we can observe that other approaches to typ-ing arrays for secure information flow would run into trouble on this program. If we follow Agat's approach [1] andrequire that array indices be L, then the program seems
hopeless, because it uses the H variables lo and mid asindices. If we follow Jif's approach [6] and dissallow assignments to L variables after array operations that mightfail due to H variables, then we cannot follow the reference
to brackets[mid] with assignments to the L variables
singleReturns and marriedReturns. It does seemthat we could rewrite the program to satisfy Jif's typing

rules--it appears that we could move the calculation of theL variables

singleReturns and marriedReturns tothe beginning of the program, before the dangerous array

operations. This has the disadvantage of requiring some du-plication of work; for example, it would require two passes
through the maritalStatus array. More seriously, it isunclear whether this sort of transformation would always be
possible, especially if the lattice of security classes is not atotal order.

Alternatively, it seems that we could satisify Jif's typ-ing rules by wrapping each array operation in a tight
try-catch block as shown in Figure 7. This tech-nique allows us to achieve an approximation to our lenient
semantics within Java, though at the cost of some syntac-tic clumsiness.

6. Conclusion

Because of our lenient execution model and our arraytypes of the form o/1 arr o/2, we are able to do secure information flow analysis on interesting programs, using sim-ple and permissive typing rules. The simplicity of our rules
makes it straightforward to prove that our type system en-sures noninterference. Our tax calculation example suggests
that interesting programs satisfying our typing rules can bewritten in a simple and natural way.

In the future, it would be good to develop techniques forautomatically inferring the classes of auxiliary variables, as
in the tax calculation example. More generally, more ef-fort should be devoted to making secure information flow
analysis practical. Especially important is to better under-stand how to account for

controlled declassification, whichis needed in situations where noninterference is too strong;

the approach of Myers, Sabelfeld, and Zdancewic [7] seemspromising.

7. Acknowledgments

This work was partially supported by the National Sci-ence Foundation under grants CCR-9900951 and HRD0317692.

References

[1] J. Agat. Transforming out timing leaks. In Proceedings 27th

Symposium on Principles of Programming Languages, pages
40-53, Boston, MA, Jan. 2000.

[2] K. Arnold, J. Gosling, and D. Holmes. The Java Programming Language, Third Edition. Addison-Wesley, 2000.

[3] A. Banerjee and D. A. Naumann. Secure information flow

and pointer confinement in a Java-like language. In Proceedings 15th IEEE Computer Security Foundations Workshop, pages 253-267, Cape Breton, Nova Scotia, Canada,
June 2002.

[4] D. Denning and P. Denning. Certification of programs for

secure information flow. Commun. ACM, 20(7):504-513,
1977.

[5] C. A. Gunter. Semantics of Programming Languages. The

MIT Press, 1992.

[6] A. Myers. JFlow: Practical mostly-static information flow

control. In Proceedings 26th Symposium on Principles of
Programming Languages, pages 228-241, San Antonio, TX,
Jan. 1999.

[7] A. Myers, A. Sabelfeld, and S. Zdancewic. Enforcing robust

declassification. In Proceedings 17th IEEE Computer Security Foundations Workshop, Pacific Grove, California, June
2004.

[8] A. Sabelfeld and A. C. Myers. Language-based information

flow security. IEEE Journal on Selected Areas in Communications, 21(1):5-19, Jan. 2003.

// Tax calculation program.
//
// Inputs:
// taxableIncome : H arr L
// maritalStatus : L arr L
// brackets : L arr L
// singleTaxTable : L arr L
// marriedTaxTable : L arr L
// Outputs:
// incomeTax : H arr L
// singleReturns : L
// marriedReturns : L
// Auxiliary variables:
// i, lo, hi, mid

allocate incomeTax[taxableIncome.length];
singleReturns := 0;
marriedReturns := 0;
i := 0;
while i < taxableIncome.length do (

lo := 0;
hi := brackets.length;
while lo+1 < hi do (

mid := (lo + hi) / 2;
if taxableIncome[i] < brackets[mid] then

hi := mid
else

lo := mid
);
if maritalStatus[i] = 0 then (

incomeTax[i] := singleTaxTable[lo];
singleReturns := singleReturns + 1
)
else (

incomeTax[i] := marriedTaxTable[lo];
marriedReturns := marriedReturns + 1
)
i := i+1
)

Figure 6. Tax calculation program

try {

if (taxableIncome[i] < brackets[mid])

hi = mid;
else

lo = mid;
}
catch (ArrayIndexOutOfBoundsException e) { }

Figure 7. Approximating lenient semantics using try-catch

[9] V. Simonet. The Flow Caml system (version 1.00): Documentation and user's manual. Technical report, Institut National de Recherche en Informatique et en Automatique, July
2003. Available at http:// cristal.inria.fr/
~simonet/ soft/ flowcaml/ manual/ index.html.
[10] D. Volpano and G. Smith. Eliminating covert flows with minimum typings. In Proceedings 10th IEEE Computer Security
Foundations Workshop, pages 156-168, June 1997.

[11] D. Volpano, G. Smith, and C. Irvine. A sound type system for secure flow analysis. Journal of Computer Security,
4(2,3):167-187, 1996.

[12] R. Yocum. Type checking for secure information flow in a

multi-threaded language. Master's thesis, Florida International University, 2002.