

What is a pure functional?
Martin Hofmann1, Aleksandr Karbyshev2, and Helmut Seidl2
1 Institut f"ur Informatik, Universit"at M"unchen, Oettingenstrasse 67, 80538 M"unchen, Germany,

hofmann@ifi.lmu.de,
2 Fakult"at f"ur Informatik, Technische Universit"at M"unchen

Abstract. Given an ML function f : (int->int)->int how can we rigorously specify that f is pure, i.e., produces no side-effects other than those arising from calling its functional argument? We show that existing methods based
on preservation of invariants and relational parametricity are insufficient for this
purpose and thus define a new notion that captures purity in the sense that for
any functional F that is pure in this sense there exists a corresponding questionanswer strategy. This research is motivated by an attempt to prove algorithms
correct that take such supposedly pure functionals as input and apply them to
stateful arguments in order to inspect intensional aspects of their behaviour.

1 Introduction
Suppose we are given an unknown SML-function f : (int->int)->int as input.How can we rigorously specify that

f does not cause side-effects other than those thatmight arise by applying
f to a side-effecting argument? Our motivation for studyingthis question stems from an attempt to rigorously verify fixpoint solvers that take such a

supposedly pure functional as input. Let us explain this application in some more detail.

Generic fixpoint solvers have successfully been used as the core algorithmic en-gine for program analyser frameworks both for logic programming languages [5,7] and

C [16], see also [11]. Such solvers take as input an arbitrary equation system over a set
Var of variables and some complete lattice Dom. Each such system is specified as afunction from the set

Var of unknowns to their respective right-hand sides where eachright-hand side is considered as a

function of type (Var ! Dom) ! Dom which typi-cally is implemented in some specification language. The generic local solver then starts

from a set of interesting variables and explores the variable space Var only in so far astheir values contribute to the values of the interesting variables. In order to evaluate
as few right-hand sides as possible, any efficient fixpoint algorithm takes dependenciesamong variables into account. If right-hand sides, however, are just semantically given
as functions, no static preprocessing is possible to identify (a superset of) such depen-dencies. Therefore, generic solvers such as [3, 6, 9] rely on

self-observation to identifythe variable dependencies when they are encountered during fixpoint iteration. Due to

this reflective behaviour, these algorithms are quite involved and thus difficult to beproven correct. While they are formulated as being applicable to systems of equations
using arbitrary functions as right-hand sides, they clearly can only work properly forright-hand sides which are sufficiently well-behaved.

2 Martin Hofmann, Aleksandr Karbyshev, and Helmut Seidl

Other situations where supposedly pure functionals arise as input include Simpson'salgorithm for exact integration [17] and the program transformations described in [10].
More distantly, we hope that our results might also contribute to the issue of purity inobject-oriented specification [15] and be of interest to the Haskell community.

In this paper, we give an extensional semantic criterion for purity and show that itentails the existence of a strategy tree for the given functional. Thus, when trying to
verify one of the aforementioned algorithms one can assume without loss of generalitythat the functional input is presented in the form of such a strategy tree which allows
for a convenient proof by induction. Alternatively, one can use our extensional criteriondirectly for the verification and indeed we do so when verifying a recursive program
that extracts a strategy tree from a given semantically pure functional.

Section 3 and 4 review classical parametricity and explain its weakness in the givencontext. Section 5 defines a new, stronger, notion of parametricity which by way of universal quantification yields our concept of semantic purity. Section 6 applies our notionto identify snapback (memorising and restoring the initial state) as impure, something
that was hitherto impossible in a setting of total functions. Section 7 defines an inductiveset of strategy trees which are shown in Sections 8 and 9 to represent pure functionals.
Section 10 explains relations to Algol theory and game semantics.

The proofs except the one of Theorem 6 have been formalised in Coq. Moreover,one of us has just completed the formal verification (also in Coq) of a generic fixpoint

algorithm using the results reported here. This will be published in a companion paper.

2 Preliminaries
For sets X and Y we denote by X * Y the Cartesian product and by X ! Y thefunction space. We denote pairs by

(x, y) and projections by fst(x) and snd(x). Weuse
* and juxtaposition for function abstraction and applications. We use the notations
f : X ! Y and f 2 X ! Y interchangeably. If (Xi)i2I is a family of sets then wedenote Q

i2I Xi or simply Qi Xi its Cartesian product. If f 2 Qi Xi then fi 2 Xi. Wewrite B for the set {tt, ff} of truth values. We use ) for logical implication; it binds

weaker than the other logical connectives like ^, .. For sets X and S we define thestate monad by

TS(X) := S ! S * X .
We have the associated operations valS : X ! TS(X) and bindS : TS(X) * (X !
TS(Y )) ! TS(Y ) given by valS(x)(s) = (s, x) and bindS(f, g)(s) = g(x)(s1) where
f(s) = (s1, x). We tend to omit the index S whenever sensible.

If S is some set modelling global states, e.g., S = Z * Z in the case of twoglobal variables of integer type, then an element

f of TS(X) may be viewed as a state-dependent and state-modifying expression of type

X.
We let Var and Dom be two fixed sets, for example, Var = Dom = Z. We fixelements

x0 2 Var, d0 2 Dom. We define

Func = \Pi S.(Var ! TS(Dom)) ! TS(Dom)

What is a pure functional? 3
where the product \Pi S ranges over a suitably large universe of sets. We do not intend tohave the domain of the product to include

Func itself so that we do not need to delveinto the somewhat delicate issue of modelling impredicative polymorphism.

We view an element f of the function space Var ! TS(Dom) as a stateful functionfrom

Var to Dom: given x 2 Var and a state s 2 S then f(x)(s) yields a pair (s1, d)thought of as final state (

s1) and result (d). The bind-construct models the applicationof such a function to a stateful expression of type

Var, i.e., an element of TS(Var).

3 Purity at first order
A stateful function f : Var ! TS(Dom) may be considered "pure" (side-effect-free) ifthere exists a function

g : Var ! Dom such that f (x)(s) = (s, g(x)), i.e., f may befactored through val

S : Dom ! TS(Dom). This intensional viewpoint can in this casebe underpinned by a more extensional yet equivalent definition as follows:

Theorem 1. Let f : Var ! TS(Dom) be given. The following are equivalent:

1. f factors through valS : Dom ! TS(Dom).2. For all relations

R ` S * S and x 2 Var and sRs0 one has v = v0 and s1Rs1where
(s1, v) = f(x)(s) and (s01, v0) = f(x)(s0).

Proof. The direction 1) 2 is obvious. For the converse, pick s0 2 S (the boundarycase

S = ; is obvious) and define g : Var ! Dom by g(x) = snd(f(x)(s0)). Weclaim that

f = val ffi g. To see this, fix x 2 Var and s 2 S and define R = {(s0, s)}.If
(s1, v) = f(x)(s0) and (s01, v0) = f(x)(s) then, since s0Rs we get v = v0 and
s01 = s. ut

A functional F : (Var ! TS(Dom)) ! TS(Dom) can be applied to stateful functions.Intuitively, it should be called pure if when applied to a stateful function

f then the onlyside-effects that
F (f ) 2 TS(Dom) will have are those caused by calls to f within F .In particular, if
f is pure as described above, then F (f ) should be pure, too, i.e., of theform val

S(d) for some d 2 Dom.It is tempting to conjecture that such "pure"

F would stem from a functional G :

(Var ! Dom) ! Dom. However, there is no way of applying such a G to a stateful
f : Var ! TS(Dom) and, indeed, such a G does not contain enough information to tellhow to transport the state changes and dependencies caused by calls to the argument

f.

4 Relational parametricity
Let us therefore try to make progress with the relational approach. The following resultmay be encouraging.

Theorem 2. Suppose that F : ({?} ! TS({?})) ! TS({?}) is such that for allrelations

R ` S * S the following is true: For all k, k0 : {?} ! TS({?}) such that
for all s, s0 2 S sRs0 implies fst(k(?)(s)) R fst(k0(?)(s0)), one has that sRs0 impliesfst

(F (k)(s)) R fst(F (k0)(s0)), for every s, s0 2 S.

Then there exists a natural number n such that F = itn where it0(k)(s) = (s, ?)and it

n+1(k)(s) = k(?)(fst(itn(k)(s))).

4 Martin Hofmann, Aleksandr Karbyshev, and Helmut Seidl
Proof. We only show the case where S = N, the general case is similar. We define
k0(?)(s) = (s + 1, ?) and n0 = fst(F (k0)(0)). Intuitively, we assume that the statecontains an integer variable which is incremented upon each call to

k0.
Now pick any k and s0 and define R = {(n, fst(itn(k)(s0))) | n 2 N}. We have
(0, s0) and whenever sRs0 then fst(k0(?)(s)) R fst(k(?)(s0)). Therefore, by assumption
n0 = fst(F (k0)) R fst(F (k)). The claim follows from the definition of R. ut

We remark that this result can also be obtained as a consequence of a Theorem in [18].

It is therefore tempting to generalise this approach to the type of our functionals(and sneaking in polymorphic quantification over state types) as follows:

Definition 1. A functional F : QS(Var ! TS(Dom)) ! TS(Dom) is relationallyparametric if the following is true for all

S, S0 and relations R ` S * S0.
For all k : Var ! TS(Dom) and k0 : Var ! TS0(Dom) such that for all s, s0

sRs0 ) fst(k(x)(s)) R fst(k0(x)(s0)) ^ snd(k(x)(s)) = snd(k0(x)(s0))
holds, one has that the following holds for all s, s0:

sRs0 ) fst(FS(k)(s)) R fst(FS0(k0)(s0)) ^ snd(FS(k)(s)) = snd(FS0(k0)(s0)) .
Definition 2 (Snapback). Define Fsnap : QS(Var ! TS(Dom)) ! TS(Dom) by
(Fsnap)S(k)(s) = (s, d) where (s1, d) = k(x0)(s). Thus, Fsnap invokes k but discardsthe resulting state and only keeps the resulting value in

d. Instead, the initial state is
restored.

The following is direct.
Proposition 1. Fsnap is relationally parametric. ut
Therefore, relational parametricity is not strong enough to ensure purity in the intu-itive sense because snapback cannot be considered pure. Let us introduce the following

abbreviations:
Definition 3. - If X, X0 are sets then Rel(X, X0) denotes the set of binary relationsbetween

X and X0, i.e., P(X * X0);-
if X is a set then \Delta X 2 Rel(X, X) is the equality on set X;-
if R 2 Rel(X, X0) and S 2 Rel(Y, Y 0) then R!S 2 Rel(X!Y, X0!Y 0) is givenby

f R!S f 0 () 8x x0. xRx0 ) f(x)Sf0(x0);-
if R 2 Rel(X, X0) and S 2 Rel(Y, Y 0) then R*S 2 Rel(X*Y, X0*Y 0) is givenby

f R*S f 0 () fst(f ) R fst(f0) ^ snd(f) S snd(f 0);-
if R 2 Rel(S, S0) and Q 2 Rel(X, X0) then TparamR (Q) 2 Rel(TS(X), TS0(X0)) is
given by TparamR (Q) := R!R*Q.

Now, F 2 Func is relationally parametric if for all S, S0 and R 2 Rel(S, S0) one has

(FS, FS0) 2 (\Delta Var ! TparamR (\Delta Dom)) ! TparamR (\Delta Dom) .

What is a pure functional? 5
5 A new notion of parametricity
We view the problem with snapback as a deficiency of the definition TparamR (Q). Astronger way of lifting a relation

Q 2 Rel(X, X0) to Rel(TS(X), TS0(X0)) is needed.Rather than tinkering with specific formats (of which we see examples later on), we

jump to the most permissive notion of relation on sets of the form TS(X).
Definition 4. Fix sets S, S0. For each X, X0 and Q 2 Rel(X, X0) fix a relation Trel(Q) 2
Rel(TS(X), TS0(X0)). The family (X, X0, Q) 7! Trel(Q) is an acceptable monadic re-lation if

- for all X, X0, Q 2 Rel(X, X0), x 2 X, x0 2 X0:

xQx0 ) valS(x) Trel(Q) valS0(x0) ;
- for all X, X0, Q 2 Rel(X, X0), Y, Y 0, P 2 Rel(Y, Y 0), x 2 TS(X), x0 2 TS0(X0),

f : X ! TS(Y ), f0 : X0 ! TS0(Y 0):

xTrel(Q)x0 ^ f(Q!Trel(P ))f 0 ) bindS(x, f ) Trel(P ) bindS0(x0, f 0) .
The lifting of state relations known from relational parametricity forms an exampleof an acceptable monadic relation as stated in the next proposition. We will later see

examples of acceptable monadic relations that are not of this form.
Proposition 2. If R 2 Rel(S, S0) then Q 7! TparamR (Q) is an acceptable monadic
relation. ut

It is now possible to state and prove a parametricity theorem to the effect that allfunctions definable from lambda calculus,

bind, and val respect any acceptable monadicrelation. The precise formulation and proof sketch is elided here for lack of space and

may be found in the full paper.Let us return to the specific example set

Func. We can use the new parametricitynotion to single out the pure elements of
Func as follows.

Definition 5. A functional F 2 Func is pure if

(FS, FS0) 2 (\Delta Var ! Trel(\Delta Dom)) ! Trel(\Delta Dom)
holds for all S, S0 and for all acceptable monadic relations Trel for S, S0.
Notice that functionals arising as denotations of lambda terms involving "parametric"constants (i.e., those for which the parametricity theorem holds) are pure in this sense.

6 Ruling out snapback
Our aim in this section is to prove that the snapback functional from Def. 2 cannot bepure in the following positive sense:

Theorem 3. Let F 2 Func be pure. Put Test := B and define ktest : Var ! TTest(Dom)
by ktest(x)(s) = (tt, d0). If FTest(ktest)(ff) = (ff, d) then FS(k)(s) = (s, d), for all S,
s 2 S and k : Var ! TS(Dom).

6 Martin Hofmann, Aleksandr Karbyshev, and Helmut Seidl
We apply F to a stateful argument ktest which -- when called -- sets a global booleanvariable. If this variable remains unset after the evaluation of

FTest(ktest) then F did notcall its argument and must therefore be constant.

In order to prove the theorem we construct a specific monadic relation.
Definition 6. Let S be a set and Test = B. For each X, X0 and Q 2 Rel(X, X0) define
Trel1 (Q) 2 Rel(TTest(X), TS(X0)) by

Trel1 (Q) = {(f, f 0) | 8s s0 s1 s01 x x0.f (s) = (s1, x) ^ f 0(s0) = (s01, x0) )

(9x00. xQx00) ^ (9x0. x0Qx0) ^ (s1 = ff ) xQx0 ^ s0 = s01 ^ s = ff)} .

Note that the relations Trel1 (Q) are not of the usual form "related pre-states yield relatedpost-states and related results". Rather, relatedness of results (

x and x0) is conditionalon the final state having a specific property (here "being equal to

ff").

Lemma 1. The relations Trel1 (Q) form an acceptable monadic relation.
Proof (Sketch). Let us abbreviate

Z(Q, s, s1, s0, s01, x, x0) j

(9x00. xQx00) ^ (9x0. x0Qx0) ^ (s1 = ff ) xQx0 ^ s0 = s01 ^ s = ff) .

In the val-case we have s = s1 and s0 = s01 and xQx0 by assumption. The claim
Z(Q, s, s1, s0, s01, x, x0) is then trivial.

For the bind-case assume Z( ^Q, s, ^s, s0, ^s0, ^x, ^x0) and g ( ^Q ! Trel1 (Q)) g0. We put
(s1, x) = g(^x)(^s) and (s01, x0) = g0(^x0)(^s0). We should prove Z(Q, s, s1, s0, s01, x, x0).Choose

^x00 such that ^x ^Qx00. The assumption on g yields Z(Q, ^s, s1, ^s0, ?, x, ?) thus inparticular the existence of

x00 such that xQx00. Similarly, we show 9x0. x0Qx0.

Now assume s1 = ff. Applying g ( ^Q ! Trel1 (Q)) g0 to ^x ^Qx00 yields ^s = ff (thisstep is the reason why we carry these 9-clauses around). From

Z( ^Q, s, ^s, s0, ^s0, ^x, ^x0)and
^s = ff we then conclude ^x ^Q^x0 and also s = ff. Using the assumption on g, g0 againwe then obtain the remaining bit

x1Qx01. ut

Lemma 2. Let S be a set and k : Var ! TS(Dom). We have (ktest, k) 2 \Delta Var !
Trel1 (\Delta Dom).

Proof. Suppose that (s1, d) = ktest(x)(s) and (s01, d0) = k(x)(s0). Since s1 = tt all wehave to prove is 9

x00. d = x00 and 9x0. x0 = d0 which is obvious. ut

Note that the only relation R such that ktest (\Delta Var ! R!R*\Delta Dom) k holds for all k isthe empty relation but that is useless since it does not relate initial states to each other.

Proof (of Theorem 3). We prove FTest(ktest) Trel1 (\Delta Dom) FS(k) using purity of F to-gether with Lemmas 1 and 2. This directly gives the desired result. ut

What is a pure functional? 7
7 Strategy trees
In this section we show that pure elements of Func are in fact first-order objects, i.e.,define a question-answer dialogue. We first define those dialogues that can be seen as
strategies in a game leading to the computation of F (k) for any given k. We associatewith each such strategy

t a pure functional tree2fun(t) in the obvious way. We thendefine a functional program fun2tree (see Appendix for ML code) that can extract a

strategy from any functional whether pure or not.However, the program might in general fail to terminate and produce "strategies"
whose continuation functions do not terminate. We will first prove that if the programreturns a proper strategy and the input functional is pure then the computed strategy
corresponds to the input functional. To do this, we axiomatise the graph Fun2tree of thefunctional program restricted to proper strategies as a well-founded relation. Later in
Section 9 we show that for pure input functional the program does indeed return a properstrategy, i.e., the well-founded relation defines a total function on pure functionals.

We focus on the set Func here since it comes from the intended applications tofixpoint solvers.

Definition 7 (Strategies). The set Tree is inductively defined by the following clauses.

- If d 2 Dom then answ(d) 2 Tree.-

If x 2 Var and f : Dom ! Tree then que(x, f) 2 Tree.

The function tree2fun : Tree ! Func is (well-founded) recursively defined by:

- tree2fun(answ(d))(k)(s) = (s, d);-

tree2fun(que(x, f ))(k)(s) = tree2fun(f(d))(k)(^s) where (^s, d) = k(x)(s).

In order to extract an element of Tree from a given functional we define the state set

Test = Dom* * Var* * Var * B .
As usual, (-)* is Kleene star. We refer to the components of s = (~d, ~x, x, b) by ~d =
s.ans, ~x = s.qns, x = s.arg, b = s.cal.

We write s[qns := ~x0] for (~d, ~x0, a, b) and use similar notation for the other components. For ~d 2 Dom* the initial state r~d is given by (~d, ", x0, ff) (recall that x0 and d0are the default elements of

Var, Dom).

Definition 8. The function ktest : Var ! TTest(Dom) is given by:

- ktest(x)(s) = (s, d0), if s.cal = tt;-

ktest(x)(s) = (s[arg:=x, cal:=tt], d0), if s.cal = ff and s.ans = ";

- ktest(x)(s) = (s[ans:=~d, qns:=~xx], d), if s.cal = ff, s.ans = d~d and s.qns = ~x;

where d0 2 Dom is the default element.
Intuitively, so long as cal is not set, ktest reproduces the prerecorded answers from ansand stores the questions asked in

qns. Once ans is empty the next question is stored in
arg and cal is set preventing any further state modifications.

8 Martin Hofmann, Aleksandr Karbyshev, and Helmut Seidl
Definition 9. The relation

Fun2treeAux ` ((Var!TTest(Dom))!TTest(Dom)) * Dom* * Tree
is inductively defined by the following clauses.

- If F (ktest)(r~d) = (r1, d) and r1.cal = ff then Fun2treeAux(F, ~d, answ(d)).- If

F (ktest)(r~d) = (r1, d) and r1.cal = tt and r1.arg = x and f : Dom ! Tree is

such that Fun2treeAux(F, ~db, f (b)), b 2 Dom, holds then Fun2treeAux(F, ~d, que(x, f)).

We also define

Fun2tree(F, t) () Fun2treeAux(F, ", t) .

8 Strategy trees for pure functionals
We will argue later in section 9 that for any pure F there always exists t such that
Fun2tree(F, t). Here, we merely show that if Fun2tree(F, t) then F = tree2fun(t),thus

F is induced by a strategy tree.

Theorem 4. Suppose that F 2 Func is pure and that Fun2tree(FTest, t) holds. Then
F = tree2fun(t).

We prove a more general statement involving the auxiliary relation Fun2treeAux. Forthat, we relate sequences of questions to sequences of answers w.r.t. a given

k : Var !
TS(Dom).

Definition 10. Suppose S is a set and k : Var ! TS(Dom). We define MatS(k) `
Var* * Dom* * S * S inductively by:

- MatS(k)(", ", s, s) for all s 2 S.-

If MatS(k)(~x, ~d, s, ^s) and (s1, d) = k(x)(^s) then MatS(k)(~xx, ~dd, s, s1).

Basically, MatS(k)(~x, ~d, s, s1) asserts that if we apply k successively to the argumentsin

~x beginning in state s then (threading intermediate states through) we end up in state
s1 and the results we obtain along the way are recorded in ~d.Theorem 4 is a direct consequence of the following characterisation of

Fun2treeAux.

Theorem 5. Suppose that F 2 Func is pure and that Fun2treeAux(FTest, ~d, t) holds.
Suppose furthermore that FTest(ktest)(r~d) = (r, ) and MatS(k)(r.qns, ~d, s, ^s) holds. If
FS(k)(s) = (s1, d1) and tree2fun(t, k, ^s) = (s2, d2) then s1 = s2 and d1 = d2.

The proof of Theorem 4 is by induction on Fun2treeAux and breaks down into thefollowing two lemmas covering base case and inductive case.

Lemma 3 (Base case). Let F be a pure functional. If FTest(ktest)(r~d) = (r, v) and
MatS(k)(r.qns, ~d, s, s1) and r.cal = ff then FS(k)(s) = (s1, v).

This lemma is similar to Theorem 3 but is complicated by the fact that ktest only sets
cal to tt after having worked off the pre-recorded answers ~d. Accordingly, the Lemmarequires that

k match these prerecorded answers w.r.t. the questions asked on the way(
r.qns). The proof uses an acceptable monadic relation in the following general format.

What is a pure functional? 9
Definition 11. Let S, S0 be sets. Let Tr 2 Rel(S, S) and Re, Gu 2 Rel(S * S0, S * S0)
and Q 2 Rel(X, X0). The relation TrelTr,Re,Gu (Q) 2 Rel(TS(X), TS0(X0)) is definedby

f TrelTr,Re,Gu (Q) f 0 () 8s s0 s1 s01 x x0.

f(s) = (s1, x) ^ f0(s0) = (s01, x0) ) (9x00. xQx00) ^ (9x0. x0Qx0)^

Tr(s, s1) ^ (Re((s, s0), (s1, s01)) ) xQx0 ^ Gu((s, s0), (s1, s01)) .

Lemma 4. If Tr, Gu are reflexive and transitive and furthermore

Re((s, s0), (s1, s01)) ^ Tr(s, ^s) ^ Tr(^s, s1) )

Re((s, s0), (^s, ^s0)) ^ (Gu((s, s0), (^s, ^s0)) ) Re((^s, ^s0), (s1, s01)))

holds then Q 7! TrelTr,Re,Gu (Q) is an acceptable monadic relation. ut
We could have a more general format that also maintains a transition relation corre-sponding to

Tr on the S0-component, but this is not needed for our present purpose.

Proof (of Lemma 3, Sketch). We instantiate Lemma 4 w.r.t. the state sets Test and S:

Tr(r, r1) j 9~x ~d. TrP(r, r1, ~x, ~d) ,
Re((r, s), (r1, s1)) j r1.cal = ff ^ 8~x ~d. TrP(r, r1, ~x, ~d) ) 9^s. MatS(k)(~x, ~d, s, ^s) ,
Gu((r, s), (r1, s1)) j 9~x ~d. TrP(r, r1, ~x, ~d) ^ MatS(k)(~x, ~d, s, s1) ,
TrP(r, r1, ~x, ~d) j r1.cal = ff ) r.cal = ff ^ r1.arg = r.arg ^ |~x| = |~d|^

r1.qns = r.qns ~x ^ r.ans = ~d r1.ans .

One must now show that these definitions meet the conditions of Lemma 4 and that theresulting monadic relation relates

ktest(x) to k(x) for all x. Note that via MatS(k) thedefinition of the monadic relation is dependent on the

k in question. This was not thecase in the proof of Theorem 3. The result then follows. ut

Lemma 5 (Inductive Case). Let F be a pure functional. If FTest(ktest)(r~d) = (r, v)and

FTest(ktest)(r~d d) = (t0, v0) and r.cal = tt then r0.qns = r.qns r.arg.

Notice that the inductive case no longer involves the state set S and k but operatesentirely on the specific state set

Test.We use an acceptable monadic relation obeying the following generic format that

does not seem to be an instance of the previous one used for the base case.
Definition 12. Let S, S0 be sets. Let Tr 2 Rel(S, S), Tr0 2 Rel(S0, S0) and St1, St2 2
Rel(S, S0). The relation TrelTr,Tr0,St1,St2 (Q) 2 Rel(TS(X), TS0(X0)) is defined by

f TrelTr,Tr0,St1,St2 (Q) f0 () 8s s0 s1 s01 x x0.

f (s) = (s1, x) ^ f 0(s0) = (s01, x0) ) (9x00. xQx00) ^ (9x0. x0Qx0)^Tr

(s, s1) ^ Tr0(s0, s01) ^ (St1(s, s0) ) St1(s1, s01) ^ xQx0 . St2(s1, s01)) .

Lemma 6. If Tr, Tr0 are reflexive and transitive and furthermore

St2(s, s0) ^ Tr(s, s1) ^ Tr0(s0, s01) ) St2(s1, s01)
then Q 7! TrelTr,Tr0,St1,St2 (Q) is an acceptable monadic relation. ut

10 Martin Hofmann, Aleksandr Karbyshev, and Helmut Seidl
Proof (of Lemma 5 (Sketch)). We instantiate the framework with state sets S := Testand

S0 := Test and

Tr(r, r1) j Tr0(r, r1) j

(r1.cal = ff ) r.cal = ff) ^ (r.cal = tt ) r = r1)^
(r.ans = " ) r = r1 . r1.ans = " ^ r1.cal = tt ^ r1.qns = r.qns) ,St1
(t, t0) j r.cal = ff ^ r0.cal = ff ^ r0.ans = r.ans d ^ r0.qns = r.qns ,
St2(r, r0) j r.cal = tt ^ r.ans = " ^ r0.ans = " ^ r0.qns = r.qns r.arg .

The main result is then a fairly direct consequence. ut
Theorem 4 is proved by induction on Fun2treeAux employing Lemmas 3 and 5. ut

9 Existence of strategy trees
We will now show that for any pure functional one can indeed find a correspondingstrategy tree in the sense of Fun2tree. By the results of the previous section this then
implies that any pure functional can be represented by or seen as a strategy tree.Admittedly, this result came as a certain surprise to us: we believed for a long time
that existence of strategy trees could only be guaranteed under some additional conti-nuity assumptions. For example, the minimum functional Min

: (N ! N) ! N givenby
Min(f ) = min{f (n) | n} is not continuous and cannot be represented by a strategytree. However, there is no pure functional (with

Var = Dom = N) because it wouldhave to make infinitely many calls to its argument which could be tracked by a suitable

set S: consider, for instance, the application of such putative pure functional F to a
k : N ! TN(N) that increments a global variable upon each call.

Theorem 6. Let F 2 Func be pure. There exists t such that Fun2tree(FTest, t).
Proof (Sketch). Assume for a contradiction that no such t exists. By studying an unsuc-cessful attempt at constructing such a

t (formally this involves the use of the axiom ofchoice) we can construct an infinite sequence

d1, d2, d3, . . . of elements of Dom suchthat
(fst(FTest(ktest)(s~dn)).cal = tt for all n where ~dn = d1d2d3 . . . dn-1.Now let

Test1 be defined like Test except that the ans-component may containfinite as well as infinite lists over

Dom. Let k1test be the extension of ktest to Test1.By a simulation argument using Proposition 2 one finds

FTest1(k1test)(s) = FTest(ktest)whenever
s 2 Test ` Test1. The following facts are proved using a mild generalisa-tion of the acceptable monadic relation used in the proof of Lemma 3:

- FTest1(ktest)(r~d) = (r1, d) ^ r1.cal = tt ) r1.ans = ";
- FTest1(ktest)(r~d) = (r1, d) ) 9ans 2 Dom*.~d = ans r1.ans;-

FTest1(ktest)(r~d) = (r1, d) ^ r1.cal = ff ) (FTest1(ktest)(r~d_)).cal = ff where

~d _ comprises the first |r1.qns| elements of ~d.

Let ~d be the infinite list of the di and write (r1, d) = FTest1(ktest)(r~d). By the first andsecond fact we must have

r1.cal = ff. Thus, by the third fact, there exists n (namely|
r1.qns|) with (fst(FTest(ktest)(s~dn)).cal = tt, a contradiction. ut

What is a pure functional? 11
10 Related work
Relational parametricity has been introduced by Reynolds [13, 14] as a means for re-stricting the range of polymorphic type quantification. Wadler then popularised Reynolds' results in his famous [18].

Relational parametricity has also been used in order to justify program equivalencesin
Idealized Algol a higher-order call-by-name language with local variables and statefulinteger expressions. The equivalences of interest rely on the fact that a procedure cannot

modify or read a local variable declared in a disjoint scope. In this context, an alterna-tive extension of relational parametricity has been developed which can also rule out
snapback functionals: strict logical relations [12]. It works in the setting of monotonecontinuous functions on Scott domains and relies crucially on the following "built-in"
parametricity property of such functions: if F (*x.?) = x 6= ? then F (k) = x for all
k. Loc. cit. also relates certain functionals to strategy trees (there called resumptions).

The differences to our work are twofold: (1) we address all types of computationallambda calculus in particular allow to return functions as results; (2) we work in a total,

set-theoretic framework whereas strict logical relations can only operate in the presenceof ? and monotonicity.

The strategy trees are reminiscent of game semantics [1,2,8] and can be traced backeven further to Berry-Curiens sequential algorithms [4] and even to Kleene's. The new
aspect here is the construction of a strategy tree for any set-theoretic functional that ispure in an extensional sense defined by preservation of structure rather than by existence of intensional representations. It would be very interesting to investigate to whatextent our notion of purity which makes sense at all types of the computational lambda
calculus entails existence of strategies in the sense of game semantics or sequentialalgorithms also at those higher types.

References

1. S. Abramsky, R. Jagadeesan, and P. Malacaria. Full abstraction for PCF (extended abstract).

In M. Hagiya and J. C. Mitchell, editors, Theoretical Aspects of Computer Software, pages
1-15. Springer-Verlag, 1994.
2. Samson Abramsky and Guy McCusker. Linearity, sharing and state: a fully abstract game

semantics for idealized algol with active expressions. Electr. Notes Theor. Comput. Sci., 3,
1996.
3. Baudouin Le Charlier and Pascal Van Hentenryck. A Universal Top-Down Fixpoint Algorithm. Technical Report CS-92-25, Brown University, Providence, RI 02912, 1992.
4. G. Berry and Pierre-Louis Curien. Sequential algorithms on concrete data structures. Theor.

Comput. Sci., 20:265-321, 1982.
5. Christian Fecht. GENA - A Tool for Generating Prolog Analyzers from Specifications. In

2nd Static Analysis Symposium (SAS), pages 418-419. LNCS 983, 1995.
6. Christian Fecht and Helmut Seidl. A faster solver for general systems of equations. Sci.

Comput. Program., 35(2):137-161, 1999.
7. Manuel V. Hermenegildo, Germ'an Puebla, Kim Marriott, and Peter J. Stuckey. Incremental

analysis of constraint logic programs. ACM Trans. Program. Lang. Syst., 22(2):187-223,
2000.

12 Martin Hofmann, Aleksandr Karbyshev, and Helmut Seidl

8. J. M. E. Hyland and C.-H. Luke Ong. On full abstraction for pcf: I, ii, and iii. Inf. Comput.,

163(2):285-408, 2000.
9. Niels Jorgensen. Finding Fixpoints in Finite Function Spaces Using Neededness Analysis

and Chaotic Iteration. In 1st Static Analysis Symposium (SAS), pages 329-345. LNCS 864,
Springer Verlag, 1994.
10. John Longley. When is a functional program not a functional program? In ICFP, pages 1-7,

1999.
11. Hanne Riis Nielson and Flemming Nielson. Flow logics for constraint based analysis. In

Compiler Construction, 7th International Conference (CC), pages 109-127. LNCS 1383,
springer Verlag, 1998.
12. Peter W. O'Hearn and John C. Reynolds. From algol to polymorphic linear lambda-calculus.

J. ACM, 47(1):167-223, 2000.
13. John Reynolds. Types, abstraction and parametric polymorphism. In Information Processing.

IFIP, North-Holland, 1983.
14. John C. Reynolds and Gordon D. Plotkin. On functors expressible in the polymorphic typed

lambda calculus. Technical Report ECS-LFCS-88-53, University of Edinburgh, May 1988.
15. Arsenii Rudich, 'Ad'am Darvas, and Peter M"uller. Checking well-formedness of pure-method

specifications. In Proc. FM, LNCS 5014, pages 68-83, 2008.
16. Helmut Seidl and Vesal Vojdani. Region analysis for race detection. In Static Analysis, 16th

Int. Symposium, (SAS), pages 171-187. LNCS 5673, Springer Verlag, 2009.
17. Alex K. Simpson. Lazy functional algorithms for exact real functionals. In Lubos Brim,

Jozef Gruska, and Jir'i Zlatuska, editors, Proc. MFCS, LNCS 1450, volume 1450 of Lecture
Notes in Computer Science, pages 456-464. Springer, 1998.
18. Philip Wadler. Theorems for free! In FPCA, pages 347-359, 1989.

What is a pure functional? 13
A Parametricity theorem
In the following, we introduce the call by value lambda calculus. Define simple typesover some set of base types ranged over by

o through the grammar

o/ ::= o | o/1 * o/2 | o/1 ! o/2 .
Fix an assignment of a set JoKS for each base type o and set S; we extend J-K to alltypes by putting J

o/1 * o/2KS = Jo/1KS * Jo/2KS ,J
o/1 ! o/2KS = Jo/1KS ! TS(Jo/2KS) .

Given a set of constants (ranged over by c) with their types o/ c and variables ranged overby

x we define the lambda terms by

e ::= x | c | *x.e | e1 e2 | e.1 | e.2 | he1, e2i .
A typing context \Gamma  is a finite map from variables to types. The typing judgement \Gamma  `
e : o/ is defined by the usual rules:

x 2 dom(\Gamma  )
\Gamma  ` x : \Gamma  (x) \Gamma  ` c : o/ c

\Gamma , x : o/1 ` e : o/2
\Gamma  ` *x.e : o/1 ! o/2

\Gamma  ` e1 : o/1 ! o/2 \Gamma  ` e2 : o/1

\Gamma  ` e1 e2 : o/2

\Gamma  ` e : o/1 * o/2

\Gamma  ` e.1 : o/1

\Gamma  ` e : o/1 * o/2

\Gamma  ` e.2 : o/2

\Gamma  ` e1 : o/1 \Gamma  ` e2 : o/2

\Gamma  ` he1, e2i : o/1 * o/2

For each S and c fix an interpretation JcKS 2 Jo/ cKS.An environment for a context

\Gamma  and S is a mapping j such that x 2 dom(\Gamma  )implies
j(x) 2 J\Gamma  (x)KS. If \Gamma  ` e : o/ and j is such an environment then we defineJ
eKS(j) 2 TS(Jo/ KS) by the following clauses:J

xKS(j) = valS(j(x)) ,J
cKS(j) = valS(JcKS) ,J
*x.eKS(j) = valS(*v.JeKS(j[x7!v])) ,J
e1 e2KS(j) = bindS(Je1KS(j), *f.bindS(Je2KS(j), *x.f x)) .

We omit semantic equations for pairing and projections.
Definition 13. Fix sets S, S0 and an acceptable monadic relation Trel for S, S0. Given
a binary relation JoKrel 2 Rel(JoKS, JoKS0) for each base type o we can associate arelation J

o/KrelTrel 2 Rel(Jo/ KS, Jo/ KS0) with each type o/ by the following clauses:J

oKrelTrel = JoKrel , Jo/1 * o/2KrelTrel = Jo/1KrelTrel * Jo/2KrelTrel ,J
o/1 ! o/2KrelTrel = Jo/1KrelTrel ! Trel(Jo/2KrelTrel ) .

The following parametricity theorem is immediate from the definition of acceptablemonadic relation and the previous one.

Theorem 7. Fix S, S0 and an acceptable monadic relation Trel for S, S0. Suppose thatJ

cKS Trel(Jo/ cKrelTrel ) JcKS0 holds for all constants c. If ; ` e : o/ then JeKS Trel(Jo/ KrelTrel) JeKS0.

14 Martin Hofmann, Aleksandr Karbyshev, and Helmut Seidl
Proof. One proves the following stronger statement by induction on typing derivations.If

\Gamma  ` e : o/ and j is an environment for \Gamma  and S and j0 is an environment for \Gamma  and
S0 then 8x. j(x) J\Gamma  (x)KrelTrel j0(x) implies JeKS(j) Trel(Jo/ KrelTrel) JeKS0(j0). ut

As for base types and constants we can for example include a type of natural numbers Nwith zero, successor function, and a recursor as in G"odel's system T. One takes J

N KS =N and J
N KrelTrel = \Delta N. Parametricity of the recursor is easily proved by induction. We

can also include other datatypes like lists or trees. The relation on such types wouldinsist on equal shapes and componentwise relatedness of the entries.

Note that since we model computations as total functions (no domains etc) we donot interpret nontermination and hence do not accommodate general recursion.

B OCAML Code
The function tree2fun corresponds to the following OCAML-program where Var, Domare represented by

int:

type tree =

Answer of int
| Question of int * (int -> tree)
let rec tree2fun t k =

match t with

Answer c -> c
| Question (a,f) -> tree2fun (f (k a)) k

The inductive definition Fun2treeAux represents the well-founded part of the graphof the following OCAML program.

let called = ref false
let arg = ref 0
let questions = ref []
let answers = ref []
let init ds = called:=false; arg:=0; questions:=[]; answers:=ds

let ktest a =

if !called then 0
else

match !answers with
| [] -> (called:=true; arg:=a; 0)
| x::r -> questions:=!questions@[a]; answers:=r; x

let rec fun2tree_aux ff ds =

init ds;
let result = ff ktest in

if not (!called) then Answer result
else let a0 = !arg in

Question (a0,fun b -> fun2tree_aux ff (ds@[b]))
let fun2tree ff = fun2tree_aux ff []

Applying fun2tree to fun k -> 1 + k 0 correctly yields Question(0,f) where
f n = Answer(n + 1).