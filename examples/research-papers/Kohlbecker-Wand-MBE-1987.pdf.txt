

Macro-by-Example: 
Deriving  Syntactic  Transformations  from  their  Specifications 

Eugene  E.  Kohlbecker,  Indiana  University 

Mitchell  Wand,  Northeastern  University  Received 10/31/&5 

Abstract 

This  paper  presents  two  new  developments.  First,  it 
describes  a  "macro-by-example"  specification  language  for 
syntactic  abstractions  in  Lisp  and  related  languages.  This 
specification  language  allows  a  more  declarative  specifica- 

tion  of  macros  than  conventional  macro  facilities  do  by  giv- 

ing  a better  treatment  of iteration  and  mapping  constructs. 
Second,  it  gives  a  formal  semantics  for  the  language  and  a 
derivation  of a compiler  from  the  semantics.  This  derivation 

is  a practical  application  of  semantics-directed  compiler  de- 
velopment  methodology. 

1.  Introduction 

Modern  programming  languages  offer  powerful  facili- 
ties  for  procedural  and  data  abstraction  which  encapsu- 
late  commonly-used  patterns  of  procedure  invocation  and 

of  data  usage,  respectively.  Often,  however,  one  encounters 

typical  patterns  of  linguistic  usage  that  do  not,  fall  neatly 
into  either  category.  An  example  is  the  let  expression, 
which  encapsulates  an  often-used  pattern  of  function  cre- 

ation  and  call: 

(let  ((i  e)  . ..>  b  . ..I 

==>  ((lambda  (i  . ..>  b  . ..>  e  . ..> 

This  Material  is based on work  supported  by  the  National  Science Foun- 
dat~ion  under  grant  numbers  MCS  8303325,  MCS  8304567,  and  DCR 

n(XJ.5218. Eugene  Kohlbecker  was  supported  by  an  IBM  Graduate  Fel- 

lowship  while  part  of  this  work  was  being  developed. 
Aul  hors'  addresses:  Eugene  E.  Kohlbecker,  Computer  Science  Depart- 
mcnt,  Indiana  University,  Lindley  Hall  101,  Bloomington,  IN  47405. 
.\litchell  \Vand,  College  of  Computer  Science,  Northeastern  University, 
3fXJ Huntington  Avenue  #lGlCN,  Boston,  MA  02115. 

Permission  to copy  without  fee all  or  part  of  this material  is granted provided  that  the  copies  are  not  made  or  distributed  for  direct 
commercial  advantage,  the  ACM  copyright  notice  and  the  title  of the publication  and its date appear,  and notice  is given  that  copying 

is by  permission  of  the  Association  for  Computing  Machinery.  To copy  otherwise,  or  to  republish,  requires  a  fee  and/or  specfic 
permission. 

0  1987 O-8979t-2t5-2/87/0100-0077  754  77 

This  is  not  a procedural  abstraction;  rather,  it  is a syntactic 

abstraction:  an  abstraction  of  a  typical  pattern  of  syntax. 

Most,  modern  languages  do  not  provide  tools  for  the  cre- 
ation  of  syntactic  abstractions  comparable  to  those  avail- 
able  for  procedural  or  data  abstractions.  Even  in  languages 
such  as  Lisp  that  allow  syntactic  abstractions,  the  process 
of  defining  them  is  notoriously  difficult  and  error-prone. 

To  define  let  as  a  macro,  we  must  write  a  procedure  that 
transforms  any  expression  which  matches  the  left-hand  pat- 
tern  into  a  corresponding  instance  of  the  right-hand  pat- 
tern.  The  code  for  this  looks  like: 

(lambda  (6) 

(cons 
,  (cons  `lambda 

(cons  (map  car  (cadr  s>> 

(cddr  s>>> 
(map  cadr  (cadr  8)))) 

This  code  can  hardly  be  considered  transparent.  It 
bears  no  obvious  relation  to  the  transformation  it  engen- 

ders.  It  is  difficult  to  see  the  shape  of  the  structure  it  is 
building  or  the  shape  of  the  structure  it  is  trying  to  take 

apart.  Furthermore,  it  does  no  error  checking  on  its  input. 

Modern  Lisps  supply  some  tools  to  help  the  macro- 
writer,  most  notably  backquote  and  defmacro  (e.g.,  [Foder- 

aro,  &lower,  &  Layer  831).  Backquote  makes  the  code  for 

building  the  output  look  more  like  the  output  itself,  and 
defmacro  includes  a  pattern-matching  facility.  Using  these 
tools,  the  let  macro  might  be  defined  as: 

(defmacro  let  (decls  .  body) 

' ((lambda  , (map  car  decls)  .  ,body) 

.  ,(map  cadr  decls))) 

This  is  considerably  better,  but  the  mapping  functions 
are  still  mysterious.  Furthermore,  the  backquote  mecha- 
nism  is  itself  error-prone:  one  always  leaves  out  at  least 
one  comma  on  the  first  try! 

In  our  facility,  one  defines  let  as follows: 

(declare-syntax  let 

[(let  ((i  e)  . ..>  b  . ..> 

((lambda  (i  . ..>  b  . ..)  e  . ..)I> 

This  is  close  to  the  language  used  for  specifying  syn- 
tactic  extensions  in  the  revised  Scheme  report  [Steele  and 

Sussman  781 and  the  1986  Scheme  report  [Rees,  Clinger, 

et  al.  861,  except  that  it  is  executable.  The  specification 
language  has  the  following  features: 

1.  Pattern-matching,  including  error-checking,  is  done  on 

the  input. 
2.  The  output  specification  matches  the  form  of  the  out- 

put.  No  commas  or  other  symbols  are  needed. 
3.  Repetitive  elements  are  specified  naturally  on  both  in- 

put  and  output. 

This  specification  mechanism  has  been  used  in  various 
versions  of  Scheme  since  1982,  and  has  proved  to  be  a robust 

and  highIy  useful  feature.  Only  recently,  however,  did  the 
need  for  formal  documentation  of  the  mechanism  lead  us to 

develop  the  formal  semantics  and  the  semanticahy-derived 
compiler  presented  here. 

We  call  this  mechanism  macro-by-example,  or  MBE.  It 
has  allowed  us  to  embed  a number  of  interesting  languages 

in  Scheme,  such  as: 

l  a  type-checked  Scheme  variant  called  SPS  [Wand  841 
l  a coroutine  mechanism  [Friedman,  Haynes,  k  Wand  861 
l  an  import/export  mechanism  for  modules  [Felleisen  and 

fiiedman  861 
l  two  quite  different  semantically-derived  subsets  of  Pro- 
log  [Felleisen  85,  Wand  851 

The  presence  of  this  convenient  syntactic  extension  tool 
provides  an  important  design  dimension:  given  any  pro- 
posed  language  extension,  we  get  to  decide  how  much  of  it 
should  be  treated  as  procedural  abstraction,  how  much  as 

data  abstraction,  and  how  much  as  syntactic  abstraction. 
The  presence  of  a  good  syntactic  abstraction  mechanism 
means  that  a  language  extension  which  might  be  highly 

cumbersome  expressed  in  a  purely  procedural  way  can  be 

made  far  more  usable  by  a propitious  choice  of syntax.  (In- 
deed,  the  declare-syntax  facility  itself  may  be  viewed  as 
such  a  propitious  choice  of  syntax).  Conversely,  given  a 
complex  syntactic  abstraction,  we  can  try  to  convert  some 
of  it  to  a procedural  or  a  data  abstraction. 

In  Section  2,  we  give  a  brief  description  of  the  specifica- 
tion  language  itself  and  additional  examples.  In  Section  3, 
we  present  a formal  semantics  of  the  specification  language. 
This  semantics  could,  if  desired,  be  used  to  create  an  inter- 
preter  for  this  language  of  transformations.  In  Sections  4 

and  5,  we  show  how  the  semantics  can  be  transformed  into 
a  compiler  which  takes  a  transformation  specification  and 
produces  Scheme  code  for  performing  the  transformation 

(including  error  checking  and  mapping  functions). 

2.  The  Specification  Language 

Consider  the  following  example  of  MBE: 

(declare-syntax  and 

[(and)  true] 
[(and  e>  e3 

[(and  el  e2  . . .>  (if  el  (and  e2  . . .>  false)]) 

It  illustrates  some  of  the  important  features  of  MBE: 

1. 

2. 

3. 

An  MBE  specification  consists  of  a  series  of  input-out- 
put  patterns,  which  are  tried  in  order.  If  a call  matches 

none  of  the  input  patterns,  then  an  error  is  signalled. 
Backquotes  and  commas  in  the  output  patterns  are 
avoided  by  a  simple  convention:  identifiers  which  ap- 
pear  in  the  input  pattern  are  treated  as  pattern  vari- 

ables;  all  other  identifiers  are  constants.  No  special 
treatment  is  necessary  for  lambda  or  quote  in  the  tran- 
scription  proper,  but  the  result  of  the  transcription 
can  be  processed  using  the  a-converting  expander  of 

(Kohlbecker,  et  al.  861 to  avoid  capture  of  bound  vari- 
ables  in  macros  such  as: 

(declare-syntax  or2 

[(or2  x  y)  (let  ((v  x>>  (if  v  v  y))l) 

which  would  otherwise  capture  any  occurrences  of  v  in 

its  second  argument.  (The  production  version  of  MBE 
also  allows  the  user  to  specify  the  capture  of  particular 
variables). 

Whenever  the  ellipsis  (indicated  by  the  atom  ".  . .")  is 
used,  it  must  be  preceded  by  a pattern,  and  it  must  be 

the  last  element  of  the  pattern  list  or  sublist.  (Again, 
the  production  version  is  somewhat  more  generous;  we 
do  not  illustrate  this  here).  Ellipses  may  be  nested, 
so  pattern  variables  may  denote  S-expressions,  lists  of 

S-expressions,  lists  of  lists  of  S-expressions,  etc. 

As  an  ilustration  of  MBE  as  a  language-embedding 
tool,  consider  the  following  macros,  which  are  taken  from 

[Wand  851.  These  macros  define  two  new  special  forms 
whose  translation  produces  (through  details  that  are  of  no 

concern  here)  an  interface  to  an  underlying  Prolog  seman- 
tics. 

(declare-syntax  clauses 

((clauses  (varl  . . .>  cl1  . . .) 

(lambda  (z> 

(let  ((varl  (genvar))  . . .) 

(call&f 

(lambda  (kf) 

(ff-set-ref!  **cut-point**  kf) 
(choose  (clause  cll)  . ..>>)))>) 

78 

(declare-syntax  clause 

((clause  (pat  act1  . ..>I 

(begin 

(unify  (pattern  pat)  z> 

(action  act11  . . .)>I 

(declare-syntax  action 

((action  (fn  el  ,.  .>> 

(fn  (list  (pattern  el>  . . .)I>> 

Without  the  ability  to  adapt  the  syntax,  the  interface 
would  have  been  impossible  to  use  (indeed,  an  earlier  ver- 
sion  of  our  Prolog  semantics  foundered  on  precisely  this 

point).  With  these  macros  in  place,  we  can  write  Prolog 
predicates  as  Scheme  procedures  in  a  moderately  conve- 

nient  syntax,  for  example: 

(define  Append 

(clauses  (y  a  d  u  v) 

((nil  y  y)> 
(((a  .  d>  u  (a  .  v)> 

(Append  d  u  v>>>) 

The  production  version  [Kohlbecker  861 includes  a num- 
ber  of  additional  bells  and  whistles.  First,  arbitrary  tests 
may  be  specified  by  an  optional  argument  called  a  fender. 
For  example,  the  macro  for  let  should  include  a  test  to 
make  sure  the  bound  variables  are  atoms: 

(declare-syntax  let 

[(let  ((i  e>  . ..>  b  . ..> 

(mapand  atom?  `(i  . . .)> 
((lambda  (i  . ..I  b  . ..>  e  . ..>I) 

Second,  arbitrary  processing  of  the  macro  call  may  be  per- 
formed  by  a  with-specification,  which  binds  its  variable  to 
the  result  of  a  Scheme  calculation, 

(declare-syntax  new-lang 

[(new-lang  e  . . .) 

(with  ([code  (translate-to-scheme  ' (e  . . .>)I> 

(top-level  code)  > 1) 

And  third,  the  macro-writer  may  also  specify  keywords  to 
serve  as pattern  constants  in  the  input  patterns  (e.g.,  else) 
and  as  terminators  for  ellipses. 

3.  Semantics 

In  this  section,  we  sketch  the  formal  semantics  of  the 
MBE  mechanism.  We  restrict  ourselves  to  a  single  input- 
output  pair,  emphasizing  the  correct  treatment  of  ellipses. 

In  our  description,  we  employ  relatively  standard  no- 
tation.  We  use  three  closely-spaced  dots  (...)  for  the  ellip- 
sis  symbol  and  center  dots  (.a-)  for  ellipsis  in  the  meta- 
language.  We  use  (5)r,  (2)s  for  projection,  (o  *  /3,-y)  for 
conditional,  and  A  ++  B  for  the  set  of  partial  functions 
from  A  to  B. 

We  define  the  following  domains: 

S-ezp  ::=  Ident  1 (S-ezp  . - l  S-czp) 

sfl  ::=  s-ezp  1 (sn  * -a  5% 

Pat  ::=  ()  1 Zdent  1 (Put  .  Pat)  I  (Pat  . ..) 
Enu  =  Ident  -s+  (Int  x  S") 

The  function  fv,  defined  over  Pat  returns  a list  of  identifiers 
contained  in  a  pattern.  The  meta-variable  a  ranges  over 

Ident,  p  over  Pat,  s  over  S-ezp  and  5'8, and  p  over  Em. 

The  semantics  is  comprised  of  three  main  functions: 

B:  Pat  3  S-ezp  4  Boo1 
D:  Pat  +  S-ezp  -e+  Env 
T:  Pat  4  Env  -e+  S-exp 

8  takes  an  input  pattern  and  an  S-expression;  it  returns 
a boolean  indicating  whether  the  S-expression  matches  the 
pattern.  D  takes  an  input  pattern  and  an  S-expression  and 

(if  it  matches  the  pattern)  returns  an  environment  associ- 
ating  pattern  variables  with  their  resulting  bindings.  Each 
binding  is  a pair  consisting  of  a non-negative  integer  and  an 
element  of  S%. The  integer  indicates  the  variable's  level,  the 

number  of  ellipses  enclosing  it.  The  element  of  Sj  is  of  the 
corresponding  type:  if  the  level  is  0,  it  is  an  S-expression; 

if  the  level  is  1,  it  is  a  list  of  S-expressions;  if  the  level  is  2, 
a  list  of  lists  of  S-expressions,  etc. 

7  takes  an  output  pattern  and  an  environment  and 
expands  the  pattern  in  that  environment.  Thus a transform 
function  with  type  S-ezp  -e+  S-ezp  for  one  input-output 
pattern  pair  (Ihs  rhs)  may  be  described  as: 

&[(fhs  rhs)]  =  Xs.(B[ihs]s  =+T[rhs](D[lhs]s), 

error) 
The  variable  s  represents  a  macro  invocation. 

We  begin  with  the  clauses  for  8.  They  are  as  follows: 

B[O]  =  Xs.null?s 

B[a]  =  Xs.true 
B[(pl  . p2)]  =  Xs.pair?s  A  Bbl](hds)  A  Bb$tls) 

B[(p  . ..)I  =  Xs.list?sA  mapand(Bfp])s 

The  pattern  0  matches  only  the  empty  list.  The  pat- 
tern  a  is  a  variable  and  matches  anything.  The  pattern 

(pr  . ~2)  matches  s if  and  only  if  s is  a pair  (that  is,  not  an 
atom  and  not  empty),  and  the  corresponding  subpatterns 
match.  The  pattern  (p  . ..I  matches  s  if  and  only  if  s  is  a 
list  and  p  matches  each  element  of  s. 

The  equations  for  D  are  guaranteed  to  be  sensible  only 
on  the  condition  that  Bbls  is  true: 

D[O]  =  As.0 

D[a]  =  Xs.{(a  i+  (1,  s))} 
Dl[(pl  . p2)]  =  Xs.Pbl](hd$  u  Dbpn](tls) 

Here  we  assume  that  there  are  no  variables  in  common  be- 
tween  pi  and  ~2. 

79 

To  create  an environment  from  a pattern  (p  . ..)  and  a 
subject  S-expression  s,  we  map  Pip]  across the  elements of  s,  creating  a  list  of  environments.  Then  the  environ- 

ments  are combined  componentwise,  incrementing  the  level 
associated  with  each variable: 

D[(p  . . ..](s1  . ..s.)  =  combine-envs(Db]sl  ..  . Db]sn) 

combine-envs 

=  ~(Pl...P").~i.((Pl~)l  +l,((pli)2"`(P"i)P)) 
Thus,  in  the  pattern  (let  ((i  e)  . ..)  b  .  . .),  the 
variable  f  becomes bound  with  level  1 to  the  list  of  match- ing  elements  in  an invocation  s. 

We can  now  move  on  to  the  processing  of  the  output pattern.  Again,  the  equations  are straightforward,  except 
for  ellipses: 

T[O]p  =o 

T]a]p  =(a  E Dam p) * 

((ball  =  0)  *  (~42,  error), 

If  the  output  pattern  is  an  identifier,  we  first  check to see if  it  is  bound  in  the  environment.  If  it  is,  and  its  level 
is zero,  then  the  result  is its  value.  If  the  level  is non-zero, 
then  it  was bound  to  a list  of values,  not  a  value,  so it  may not  be  transcribed.  If  it  is  not  bound  in  the  environment, 

then  it  is treated  as a constant. 

If  the  output  pattern  is  a  pair  (pl  . p2),  its  head  and tail  are each processed separately.  The  two  results  are then 

joined. 

In  processing  an output  pattern  (p  . ..> with  T,  we have the  inverse  of  the  problem  with  D:  we must  split  a single 

environment  into  a  list  of  environments.  To  do  this,  we first  restrict  the  environment  to  the  free variables  of 

p.  We then  check  whether  the  variables  of 
p  include  at  least  one 
variable  of  level  greater  than  0.  If  not,  the  prototype  p  is 

rejected,  since  there  is  no  way  to  determine  the  length  of 
the  repetition.  If  the  prototype  passes, then  we decompose 

the  environment  into  a list  of  environments  and  map  Tbl over  this  list.  The  decomposition  is  complicated  by  three 

considerations:  First,  we must  decrement  the  level  of  each 

non-scalar  variable  in  the  environment.  Second,  we  copy scalar  (level  0)  variables  across the  list,  being  sure  not  to 

decrement  their  level,  so that  code like 

(declare-syntax  copy-it 

[(copy-it  i  j  . ..)  (bar  `(i  j>  . ..)I> 

correctly  transcribes 

into  (bar  `(a  1)  `(a  2)'  `(a  3)). 

Last,  we  must  determine  the  length  of  the  list.  This  is 

the  length  of  the  lists  in  the  environment  if  they  are  all the  same length.  If  they  are not  the  same length,  an error 

is  signalled.  These  tasks  are  performed  by  the  following 
clauses: 

T[(p  . ..)]p  =  controllablepp  j 

map  (WI)  (decompose  (p  I MPH), 
error 

controlhblepp  =  3u (u  E  dom(p  1 /u(p))  A  ((pv)~  >  0)) 

decompose  p  =  UnequalLengths?  p  j  error, 

Stopivow?,  *  0, 

cons  (split  hd  o p) 

decompose  (split  tl  o p) 

split  f(n,c)  =  (n  =O)  *  (O,c),((n-  l),(fc)) 
This  completes  the  semantics. 

A  fender  or  with-specification  may  easily  be  modeled using  this  semantics.  They  are the  same as ordinary  output 

patterns:  when  encountered  they  are expanded  using  7  and 
then  evaluated.  The  result  of  the  evaluation  is  then  used 
either  as  a  guard  to  decide  whether  to  proceed  with  the 
expansion  or  as a value  to  be inserted  in  the  environment for  the  main  expansion. 

4.  Deriving  the  Compiler 

The  original  versions  of  MBE  (along  with  the  current production  version,  detailed  in  [Kohlbecker  86]),  used 

ad 
hoc  code generation  methods  to  compile  a specification  into Scheme code.  The  code generator  is quite  clever;  for  exam- 

ple,  for  let  it  produces  the  code shown  in  the  first  display. The  evolution  of this  code generator  has been tortuous,  and 
therefore  MBE  seemed to  be a good real-world  example  on which  to  exercise  semantic  methods. 

The  first  step  in  the  derivation  was  the  production  of 
the  formal  semantics  sketched above.  From  there,  the  deri- vation  proceeded in  two phases: 

staging  [Jorring  and Sherlis 
861 and  representation  [Wand  821. 

The  goals  of  staging  are  to  identify  opportunities  for early  binding  and  to  reorder  and  re-curry  the  arguments  to 

the  various  functions  so that  the  early-bindable  arguments 

appear  first. 

Our  particular  goal  is  to  avoid  building  intermediate 
structures  such  as environments  whenever  possible.  Recall that  P  has functionality 

Pat  +  S-ezp -e+  (Ident  *  (Int  x  S')) (copy-it  a  i  2  3) 

80 

We d&y  the  binding  of  S-exp  by  replacing  Enu  by 

lhu'  =  (Ident  --8-) Itrt)  X  (Ident  4,  S-elp  +  9) 
and  replacing  D  by  a function  D'  of  functionality  Pat  -+ 

Env'. 

An  element  of  Enu'  may  be  thought  of  as  a  symbol table.  Instead  of  having  the  function 

D  which  takes an  S- 
expression  and  builds  an environment  containing  S-expres- 

sions,  we  have  a new  function  which  takes  a pattern  and 

builds  a symbol  table  containing  functions  from  S-expres- 
sions  to  S-expressions.  We call  these  functions  selectors. 

A  selector  is  later  applied  to  the  subject  S-expression  to 
extract  the  values  for  the  variables.  Thus  the  condition  we 
want  is that  if  BlIpI s is  true,  then  for  all  i, 

((D'M),C  (D'IIPW~)  =  D[[plls; 
This  formulation  also makes clear that  the  levels of the vari- 
ables are independent  of  the  subject  S-expression  to  which 
the  pattern  is  matched.  (This  is  analogous  to  static  chain 
analysis  or  type  analysis). 

It  is  easy to  build  D'  as the  product  of  two  functions, 
which  we  call  P,! and  4.  Each  of  these  is  obtained  by 

modifying  the  appropriate  piece of the  definition  of D, using 

the  congruence  condition  above as a guide.  Doing  this,  we 
get: 

D:[O]  = 0 

D:U4 = {(a ++ 0)) D:Bh  - P&II =  D:hlI  u 

D:I[p21 D,'[(p 
. ..>]I =  add1  o D;Bp]I 

D;[O]  =0 

D;[a]  =  {(u  H  Xs.s)} 
D;[(P,  .p2)]  =  {(z'++ Xs.f(hds))  1 (i++ f)  E D;I[p,j, 

u  {(i  ++ W(tls))  I (i  ++ f)  E  D;b21> D;[(p  . ..>I =  {(i  H  Asmap fs)  1 (i I-+ f)  E D.&J} 

Now  we  can  proceed  to  modify  IT  to  work  with  new- 
style  environments.  Just  as  the  analysis  of  D  produced selectors,  the  analysis  of  7  produces 

constructors.  The new  version  of  T  will  be 

T':  Pat  -+  Env'  4  S-exp  -+-+ S-ezp 
Using  the  condition  on  D'  above to  iIlustrate  how  to  trans- 
late  new  environments  into  old  environments,  we see that the  condition  we want  I'  to  obey  is 

7'npDP'S = T[[pB(Xi.((p')li,(d)2id))  (*I 
With  this  condition,  we can  redefine  &  as: 

&[(fhs  rhs)l)  =  Xs.(fi[fhs]s  =~T'l[rhs](D'~fhs~)s, 

error) 
A  simple  calculation  shows that  this  definition  is equivalent 
to  the  old  one. 

As  usual,  it  is  easy to  write  the  first  three  clauses for 7': 

T'[  O]p'  =xs.  0 

T'[u]P'  =(a  E  Dam (p')~)  + 

(($),a  =  0 =S (p')lu,  error), 

(ha) 
T'[(Pl  . p&J  =Xs.(  cons (T'bpljp's)  (T'np?]dS)) 

The  analysis  of  T'[(p  Q.,)l is harder;  we defer it  to  the  next section. 

The  staging  analysis  shows that  at  compile-time  we can 
produce  a set of tests,  selectors,  and  constructors  that  can 

be applied  at  macro-expansion  time  to  an  S-expression.  In 
the  second phase of  the  derivation,  we choose appropriate 
representations  for  these  functions.  In  keeping  with  slo- 
gan  "target  code  as a representation  of  semantics"  [Wand 

821, we represent  these functions  in  Scheme, our  target  lan- guage. 

We begin  with  the  representation  for  selectors.  To  de- 
termine  the  representation,  we  look  at  Di  to  see what  are the  basic  selectors  and  what  are  the  constructors  which 

build  selectors.  This  gives us  a mini-language  of  selectors. 

We then  choose representations  for  this  language in  Scheme. 
In  particular,  we  represent  these  functions  as Scheme ex- pressions  with  a  single  free  variable  s.  Then  the  function 

can  be  applied  simply  by  evaluating  the  expression  in  a suitable  environment. 

Looking  at  the  definition  of  Pi,  we can  see that  every 
selector  is either  Xs.s or  of  one of  the  forms  Xs.(M(hd  s)), Xs.(M(  tf s))  and 

Xs.(map  M  s),  where  A4 is  another  selec- 
tor.  Thus  we can represent  these by the  Scheme expressions 

s,  M[(car  s)/s],  M[(cdr  s)/s],  and  (map  (lambda  (s) 
M)  s),  respectively,  where M[N/v]  means the substitution of  N  for  the  free occurrences  of v  in 

M.  We can  then  do a 
small- amount  of  peephole  optimization  on  the  representa- 

tions  (e.g.,  replacing  (lambda  (s)  (map  (lambda  (s)  s> 

8))  by  s).  This  is  easy since  the  language  of  selectors  is 
small.  We can  analyze  tests  and  constructors  similarly,  by 

looking  at  the  definitions  of  8  and  7'.  \Ve summarize  the 
representations  as follows: 

`rests: 

s=  0 

true 
kpair?  s AM(hd  s) 

AN(tf  s) Xs.list?s 
A mapand  A4 s 

(null?  6) 
true (and  (pair?  s> 

M[  (car  6)/s] A'( (cdr  s) /s]) 
(and  (list?  s) 

(mapand (lambda  (s) 

M) 

d) 

81 

Selectors: 

xs.s 
M(  hd  s) 
M(tl  s) 

Xs.map  M  s 

car  8)/s] 
M[  (cdr  s)/s] (map  (lambda  (s) 

M)  s) 

Constructors: 

~s.0  nil ha 

Xs.(eons(Ms)(Ns))  ;cons  M  iV) 
Since the  same representation  is used for  all  these func- 
tions,  they  can  be  intermixed  when  necessary.  For  exam- ple,  in  T'  there  is  no  separate  representation  for  (p')la, 

since  this  is  a  selector  whose  representation  is  already  de- 

termined. Having  decided  on  a  representation,  we  then  go  back 

and  modify  the  functions  8,  0;  and  T'  to  produce  these concrete  representations  rather  than  the  functions.  This 

gives  us  a  compiler:  a  function  which  takes  a  pattern- transcription  pair  and  produces  a  piece  of  Scheme code 

which  performs  the  transliteration. 

More  precisely,  we replace  E by 

E"[(lhs  rhs)] 

=  (lambda  (8) 

(if  B"[lhs] 

1T"[rhs)(D"[lhs]) 

(error  "pattern  not  matched")  ) ) 
where  the  doubly-primed  functions  produce  the  concrete 
representations  specified  in  the  table  above.  Each  doubly primed  function  is obtained  by  modifying  the  correspond- 

ing  singly-primed  function  so that  instead  of  returning  a function,  it  produces  the  representation  of that  function. 

The  function  8  is replaced  by: 

8"[(>]  =(null?  s) 

B"[a]  =true 
B"[(pl  . ~2))  =(and  (pair?  4 

B"bpl][(car  8)/s] 
B"bs][(cdr  8)/s]) 
B"[  @  . ..)I  =(and  (list?  s) 

(mapand  (lambda  (a)  B"b])  s) 
D"[&+]  produces  a  pair,  consisting  of  a level-environ- ment, 

O:[lhs]  as  before,  and  an  environment  of  concrete 
selectors  in  which  the  selector  functions  are  replaced  by their  representations.  Only  the  selectors need to  be repre- 

sented  concretely,  since  these  are  the  only  things  that  7" inserts  in  its  concrete  output. 

P"[lhs]  =  (D#hs],  P:`[lhs]) 

4'[0~  =  0 

q'[a]  =  {(u  I-+ s)} 
q'J[(Pl  * P2)]  = 

{(i  w  M[(car  s>/s])  1 (i  I+  M)  E  D:lIpl]} 

U{(i  I+  M[(cdr  s>/s])  1 (i  I-+ M)  E &!`bp2lj} 
D[[(p  . ..)I  =  {(i  I-+ (map  (lambda  (s)  M)  s)) 

I (i  H  Ml  E q'[[PDl 

The  function  7  becomes: 

T"]()]p'  =nil 

7"[a]$  =(a  E  Dom  ($)I)  * 

((p')la  =  0 j  (&a,  error), 
a 
T"[(p,  . pd]P  =(  cons  T"[p~]p'  T"[p~]p') 

Note  that  all  this  code  is  obtained  by  modifying  the 
output  of  the  previous  functions,  not  by  doing  any  nb  ini- 

tio  coding  or  analysis.  In  Scheme, this  modification  may 
be  accomplished  by  simply  introducing  backquotes  in  the 
appropriate  places. This  completes  the  compiler,  except  for  the  transcrip- 

tion  of  ellipses. 

5.  Transcribing  Ellipses 

Transcribing  ellipses  is  a harder  problem  for  this  com- pilation  strategy,  since  in  general  there  is  no  way  to  avoid 

building  intermediate  structures  akin  to  environments. 

Our  strategy  is to  deal first  with  the  most common  spe- cial  case, which  luckily  does not  require  any  intermediate 

structures.  It  is  easy to  confirm  that  the  following  clause satisfies  the  congruence  relation  (*),  given  in  the  previous 
section,  which  must  hold  between  T  and  7': 

?[(a  . ..)]p'  =  (($)~a  =  1) 3  ($)2a,  error 
This  takes care of  what  seems to  be the  most  common 
use of  ellipses.  In  general,  however,  we need to  attack  the 
congruence relation  for  T'[  (p  . ..)I  directly.  The  congruence relation  requires  that 

T'[(p  . ..>]p's 

=  T[[(p  . ..>](Xi.((P')li.  (&is)) 

=  map (WI) 

(decompose (Xi  E fu(p).((p')li,  (p')$s))) 

Let  us write  p for  the  argument  to  decompose  above.  We 
need to  build  some representation  of p and  of  decompose  p, 

That  representation  should  allow  us  to  build  as  much  as possible  of  the  environment  before  knowing  the  value  of  s. 

Once that  is  done,  we can  attack  the  problem  of  replacing 
the  7  in  the  mapping  expression  by  7'. 

a2 

Let i'  = [io,--- ' ,Q]  be an enumeration  of  the  free vari- 
ables  of  p  in  a  list.  (We  use the  square  brackets  [---I  or [a..  1 ..-  ] 

1 E  L]  to  denote  lists).  We represent  all  func- tions  whose domain  is 

fu(p)  as lists,  indexed  by  i'.  Thus  a 
function  f  can be represented  by  the  list  [E(&),  e-0, f(ik)]. 

Since an element  of  Enw  is a pair  of functions,  we rep- resent it  as a pair  of lists.  We refer  to  these two  lists  as the 

level  component  and  the  value  component  of  the  environ- ment.  Hence  decompose p becomes 

decompose  [(&Ii  1 i  E  i']  [(p')&  1 i  E i'] 
The  output  from  decompose  is  a  list  of  envirbnments, each of which  has the  same level  component.  Hence we can 

represent  this  list  of  environments  as a single  level  compo- 
nent  and a list  of value  components.  Thus  we can represent 

decompose(Xi  E  fv(p).((p')li,  (p')zis))  as 

(decompose-levels  n*,  decompose-values  n'  s')) 
where 

12' =  [(p'),i  1 i  E i'] 

s* =  [(p')*is  1 i  E i'] 
decompose-levels  =  An*.[((n  =  0)  +-  0,n  -  1) 1 n  E n*] 
decompose-values 

=  Xn*s*.  UnequalLengths?  S* G-  error, 

StopNow?  p  +  (), 

cons (split'  hd n*  s') 

decompose-valuesn'  (split'  tl  n'  s') 

split * =  xfn*s*.[(n  =  0)  =+ s, fs  ) (n,s)  E (n',  s*)] 

Here the  definition  of split*  describes mapping  over two lists 
of equal  length. 

By  these  manipulations,  we  have  given  ourselves  the 
possibility  of  precomputing  the  levels.  We take  advantage of this  by  currying  the  functionality  of  T',  changing  it  from 

T':  Pat  -t((ldent  -EM Int)  x  (Ident  -e+  S-ezp  -+  S')) 

-b  S-ezp  ++S-ezp 

to 

7':  Pat  -+( Ident  -e-+ Int)  +  (Ident  --8-t S-ezp  -+  Sy) 

-+  S-ezp  4-b  S-ezp 

We may  also make a similar  change in  the  functionality  of T  to  refiect  our  new  representation  of  environments: 

7:  Pat  +  (Ident  -e-t  Int)  +  (Ident  -EM Sy)  +  S-ezp 

With  these changes, the  congruence  condition  between T  and  7'  may  be restated  as: 

T'[[p]/w*s  =  T  [P]Pl  (%Gs)  (**I 

Let  p'  be  the  selector  environment  D;[i*],  that  is,  the environment  ((&  I+ 

Xs.(hd  s)),  (il  w  Xs.(hd  (tl  s))),  - - e}. 
Hence,  if  we have  an  environment  represented  by  the  pair 

(n',s*),  we  can  use  p'  with  `7'  to  retrieve  elements  from 
s'.  More  precisely,  we  may  deduce  from  the  congruence 
condition  (**)  that  for  any  pattern  p',  we  have 

T'([p)]n'p*s*  =  7 ip']n*s* 
where  the  first  s*  denotes a list  which  is the  subject  of  the transcription  and  the  second  denotes  the  same list  in  its 

role  as the  representation  of  a value  environment. 

We can  use this  identity  to  replace the  T  in  the  defini- tion  of 

T'l[(p  . ..)I  by  7'.  For clarity,  we assume for  the mo- ment  that  the  pattern  p is controllable  in  level-environment 

pt.  We may  now  derive  the  new  definition: 

T'[(P  J]IP,PzS 

=  T[(p  . ..)]pl(xi.p+) 

=  map  (%I)  (d ecompose  (Xi  E  fv(p).(pli,  plis))) 
=  let  i'  =  fu(p);  n*  =  [pli  1 i  E  i']; 

m'  =  decompose-levels  n'  in 

Xs.map  (TBplm')(d  ecompose-values  n'  (p$s  ( i  E  i']) 
=  let  i'  =/u(p);  n*  =  [pli  ) i  E i']; 

m'  =  decompose-levels  n';  p*  =  D[[i*g  in 

Xs.map (T'[plm*p') 

(decompose-ua[ues  n*  (p?is  ( i  E  i']) 

This  version  of  the  definition  allows  us to  write  7'  as a pure  structural  recursion,  so that  we can  transcribe  it  into 

a concrete  representation  as well: 

T"II(P  . ..>Ilp.p2 

=  let  i'  =fu(p);  n*  =  [pli  1 i  E  i']; 

m'  =  decompose-levels  n*;  p'  =  Di[;`B  in 
(map  (lambda  (6)  T'b]m'p*) 

(decompose-values  (quote  n') 

(list  p&  *a-  P2ik))) 

For  the  last  line,  recall  that  ~2 contains  concrete  selec- 
tors,  which,  when  evaluated  with  s bound  to  s, will  return the  value  of  psis.  Hence, if  i'  =  [;o,.  . . ,ik],  then  the  list 

expression  will  evaluate  correctly  to  [plis  1 i  E i']. 

This  version  of the  target  code includes  an explicit  call to  decompose-values.  It  is  possible  to  apply  the  same 

methods  to  decompose-values, using  staging  to  take  advan- tage of the fact  that  its  first  argument  is known.  The  result- 
ing  system generates target  code that  includes  a local  let- 
ret  loop  in  place of  the  decompose-values,  and  in  which 
the  run-time  level  tests  are eliminated.  We leave  this  de- 
velopment  as an  exercise for  the  reader. 

83 

6.  Results 

The  derivation,  including  false starts  and  debugging  of 
the  resulting  code,  took  well  under  one  man-week.  The 

production  compiler,  by  contrast,  embodies  several  man- 
months  of  work. How good is the  resulting  compiler?  It  seems to produce 

code which  is comparable  with  ,the production  version.  For let,  it  produces  the  following  code for  the  transcription: 

(lambda  (8) 

(cons 

(cons  `lambda (cons  (map  (lambda  (s)  (car  8)) 

(car  (cdr  8))) 
(cdr  (cdr  s>>>> (map  (lambda  (6)  (car  (cdr  8))) 

(car  (cdr  8))))) 
which  is  clearly  equivalent  (given  a reasonably  optimizing 
compiler)  to  the  production  version  code  given  above.  It 

also produces  comparable  code for  the  tests.  In  view  of this performance,  we regard  the  derivation  as a success. 

7.  Conclusions 

We  have  presented  a  "macro-by-example"  facility  for 
Lisp-like  languages.  The  facility  allows  the  user  to  spec- ify  syntactic  extensions  in  a natural,  non-procedural  man- 

ner.  These  specifications  are  expanded  into  transforma- tions  which  automatically  perform  pattern-matching,  error- 

checking,  and  mapping.  We have  given  a formal  semantics 
for  the  specification  language  and  have shown  how  the  se- 

mantics  can be converted  into  a compiler  by the  use of stag ing  and  suitable  choices of  representations  for  the  semantic 

functions. Dan  Friedman  originally  suggested  the  idea  of  a  new 

macro  declaration  tool.  We gratefully  acknowledge his  con- tributions  to  this  work.  We also thank  Matthias  Felleisen 
for  helping  implement  the  compiler  and proof-read  this  pa- 

per. 

References 

[Felleisen  85] 

Felleisen,  M.  "Transliterating  Prolog  into  Scheme," In- diana  University  Computer  Science Department  Tech- 

nical  Report  No.  182, October,  1985. 
[Foderaro,  Sklower,  &  Layer  831 Foderaro,  J.K.,  Sklower, 

K.L.,  and Layer,  K.  The Franz 
Lisp  Manual,  June,  1983. 

[Felleisen  &  Friedman  861 

Felleisen,  M.,  and  Friedman,  D.P.,  "A  Closer  Look  at Export  and  Import  Statements," 

Computer  Languages 11 (1986),  29-37. 

[Friedman,  Haynes,  &  Wand  861 Friedman,  D.P.,  Haynes, C.T.,  and Wand, M.  "Obtain- 

ing  Coroutines  with  Continuations,"  Computer  Lan- 

guages  11  (1986),  to  appear. 

[Jorring  &  Sherlis  861 Jorring,  U.,  and  Sherlis,  W.L.  "Compilers  and  Stag- 

ing  Transformations,"  Conf.  Rec.  19th  Annual  ACM 

Symposium  on  Principles  of  Programming  Languages 
(1986),  86-96. 

[Kohlbecker  861 

Kohlbecker,  E.,  Syntactic  Eztensions  in  the  Program- 

ming  Language  Lisp,  PhD  dissertation,  Indiana  Uni- 
versity,  August,  1986. 

[Kohlbecker,  et al.  861 

Kohlbecker,  E.,  Fried&,  D.P.,  Felleisen,  M.,  and 
Duba,  B.  `Hygienic  Macro  Expansion,"  Proceedings 
1986  ACM  Conference  on  Lisp  and  Functional  Pro- 

gramming,  151-161. 

[Rees, Clinger,  et  al.  861 

Rees, J.,  and  Clinger,  W.,  eds.  "Revised3  Report  on the  Algorithmic  Language  Scheme," 

SIGPLAN  No- 
tices,  to  appear, 

[Steele &  Sussman 781 Steele,  G.L.  and  Sussman,  G.J.  "The  Revised  Report 

on  SCHEME,"  Mass.  Inst.  of Tech.  Artif.  Intell.  Memo 
No.  452,  Cambridge,  MA  (January,  1978). 

[Wand  821 

Wand,  M.  "Deriving  Target  Code  as  a  Representa- tion  of Continuation  Semantics," 

ACM  Trans.  on  Prog. 
Lang.  and  Systems  4,  3  (July,  1982) 496-517. 

[Wand  841 

Wand,  M.  "A  Semantic  Prototyping  System,"  Proc. 
ACM  SIGPLAN  `84  Compiler  Construction  Conjer- 

ence  (1984),  213-221. 

[Wand  851 Wand,  M.  "The  Semantics of  Backtracking,"  Brandeis 

University  Computer  Science Department  Colloquium, 
January,  1985 (unpublished). 

84 