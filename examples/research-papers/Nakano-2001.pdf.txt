

Fixed-point logic with the approximation

modality and its Kripke completeness

Hiroshi Nakano
Ryukoku University, Japan
nakano@math.ryukoku.ac.jp

Abstract. We present two modal typing systems with the approximation modality, which has been proposed by the author to capture selfreferences involved in computer programs and their specir'cations. The
systems are based on the simple and the F-semantics of types, respectively, and correspond to the same modal logic, which is considered the
intuitionistic version of the logic of provability. We also show Kripke
completeness of the modal logic and its decidability, which implies the
decidability of type inhabitance in the typing systems.

1 Introduction
Although recursion, or self-reference, plays an indispensable role in both pro-grams and their specir'cations, it also introduces serious dis'culties into their
formal treatment. Consider, for example, objects which represent integers andhave an accessor method to obtain its value, and methods for doing subtraction
and r'nding the greatest common divisor provided another integer object. InJava, the interface, or the coarse specir'cation, of such objects could be written
as:

interface Int {

int getValue();

Int sub(Int peer);
Int getGCD(Int peer);
}

and we could implement it as the following class Int1, which includes someexcessive occurrences of "

this" for readability.

class Int1 implements Int {

private int value;
Int1(int v) { value = v; } // constructor
public int getValue() { return value; } // accessor
public Int sub(Int peer) { // subtraction method

return new Int1(this.getValue() - peer.getValue());
}
public Int getGCD(Int peer) { // gcd method

if (this.getValue() == peer.getValue())

return this;
else if (this.getValue() > peer.getValue())

return this.sub(peer).getGCD(peer);
else

return peer.getGCD(this);
}
}

We could also consider another implementation, say Int2, which employs thefollowing der'nition of

getGCD method:

public Int getGCD(Int peer) {

if (this.getValue() == peer.getValue())

return this;
else if (this.getValue() < peer.getValue())

return peer.sub(this).getGCD(this);
else

return peer.getGCD(this);
}

These two class are quite symmetrical to each other, and either one works r'neas long as we only use objects of the same kind. However, these two kinds of

objects are not interchangeable; if we mix objects of the two classes, they runinto an inr'nite loop whenever their

getGCD methods are invoked with objectsof the other class. If the specir'cation being supposedly satisr'ed by the objects

of these two classes were identical, we would be able to mix the objects withoutproblems. So we realize that it is inevitable to give dio""erent, maybe slightly
dio""erent, specir'cations to these two implementations of Int in order to obtainmodularity of programs with respect to their termination, or convergence.

The approximation modality has been proposed by the author in order toincorporate general self-reference into formal specir'cation of programs and their
implementations without such loss of modularity, with which we can constructa wider range of programs, such as r'xed point combinators and objects with
so-called binary methods in object-oriented programming, through the proof-as-programs paradigm. We refer the reader to [1] for the motivation of the modality
and examples of applications (see also [2] for proofs).

The original typing system, however, would be now considered as a specir'cexample of a class of more general systems. In this paper, we present two basic

typing systems with the modality, of which the original system can be consideredan extension. One is based on the simple semantics of types, and the other is
its variant based on the F-semantics of types (cf. [3, 4]). We show that both thesystems have desirable convergence properties and correspond to the same modal
logic, which is Kripke complete with respect to intuitionistic, transitive andconverse wellfounded frames. The completeness theorem implies its decidability,
and also the decidability of type inhabitance in the typing systems. We also showthat the modal logic is a conservative extension of the intuitionistic version of
the logic of provability (cf. [5]).

2 The typing systems
We introduce two basic modal typing systems denoted by S-y"*u and F-y"*u,respectively. As a preparation for der'ning the syntax of type expressions, we
r'rst give one of pseudo type expressions PTExp, which are obtained by addinga unary type constructor * to those of

y"u, namely the simply typed y"-calculusextended with recursive types (cf. [6, 7]). Let

TVar be a countably inr'nite setof type variable symbols
X, Y , Z, . . . . The syntax of PTExp is given by:

PTExp ::= TVar (type variables)| PTExp ! PTExp (function types)

| * PTExp (approximative types)|

uTVar. PTExp (recursive types)

Type constants are omitted for simplicity. We assume that ! associates to theright as usual, and each (pseudo) type constructor associates according to the
following priority: (highest) *, !, uX. (lowest). For example, * uX.*X !Y !Z isthe same as *(

uX.((*X) ! (Y ! Z))). We use ? as an abbreviation for uX.*Xand use *
nA to denote a (pseudo) type expression * . . . *-- -z ""

n times

A, where n >= 0.

Der'nition 1. A type expression A is an F-?-variant if and only if A = *m0uX1.*

m1uX2.*m2 . . . uXn.*mnXi for some n, m0, m1, m2, . . ., mn, X1, X2, . . ., Xn

and i such that 1 <= i <= n and mi +mi+1 +mi+2 +. . .+mn >= 1. A type expression
A is an S-?-variant if and only if A is an F-?-variant, where A is der'ned asfollows:

X = X, A ! B = B, uX.A = uX.A.
An F-?-variant is also an S-?-variant, and by der'nition it is decidable whethera type expression is an S(F)-?-variant or not. S(F)-?-variants correspond to the
universe into which y"-terms are interpretated. Hence, every y"-term should havethese types in S(F)-

y"*u, respectively.

Der'nition 2. We say that a pseudo type expression A is S-proper (respectivelyF-proper) in

X if and only if X occurs freely only (a) in scopes of the *-operatorin
A, or (b) in a subexpression B ! C of A with C being an S-?-variant (F-?-variant).

1

For example, *X, *(X ! Y ), uY .*(X ! Y ), and X ! ? are S(F)-proper in X,and neither

X, X ! Y nor uY .uZ.X ! Y is S(F)-proper in X.

Der'nition 3. A type expression of S-y"*u (respectively F-y"*u) is a pseudo typeexpression such that

A is S-proper (F-proper) in X for any of its subexpressionsin the form of
uX.A. We denote the set of type expressions by TExp.

1 The condition (b) is included so that the equivalence relation ' on type expressions

(cf. Der'nition 4) preserves properness.

For example, X, X ! Y , uX.*X ! Y , uX.X ! ? and uX.* uY .X ! Z are typeexpressions, and neither

uX.X ! Y nor uX.uY .X ! Y is a type expression.We use
A, B, C, D, . . . to denote type expressions of y"*u's, and denote the setof type variables occurring freely in

A by F T V (A) regarding a type variable Xas bound in
uX.A. We also regard o""-convertible type expressions as identical,and use
A[B1/X1, . . . , Bn/Xn] to denote the type expression obtained from Aby substituting

B1, . . . , Bn for each free occurrence of X1, . . . , Xn, respectively.

Der'nition 4. The equivalence relation ' on type expressions is der'ned as thesmallest binary relation that satisr'es:

('-rer^ex) A ' A.('-symm) If

A ' B, then B ' A.('-trans) If
A ' B and B ' C, then A ' C.('-*) If
A ' B, then *A ' *B.('-!) If
A ' C and B ' D, then A ! B ' C ! D.('-r'x)
uX.A ' A[uX.A/X].('-uniq) If

A ' C[A/X] and C is S(F)-proper in X, then A ' uX.C.

All the condition above are common to S-y"*u and F-y"*u, and the following onesare respectively satisr'ed:

S-y"*u: ('-!?) A ! ? ' ?.
F-y"*u: ('-!?) A ! ? ' B ! ?.

Intuitively, two type expressions are equivalent if their (possibly inr'nite) typeexpression obtained by unfolding recursive types occurring in them inder'nitely

are identical modulo the rule ('-!?). This equality on type expressions isdecidable. One can also observe that a type expression

A is an S(F)-?-variant ifand only if
A ' ? in S(F)-y"*u, respectively.We now der'ne a subtyping relation on type expressions, which is induced by

the *-modality, by a set of the subtyping rules (cf. [8]). A subtyping assumptionis a r'nite set of pairs of type variables such that any type variable appears at
most once in the set. We write {X1 z' Y1, X2 z' Y2, . . . , Xn z' Yn} to denotethe subtyping assumption {

<Xi, Yi> | i = 1, 2, . . . , n }, and use r^, r^0, r^1,
r^2, . . . to denote subtyping assumptions, and F T V (r^) to denote the set of typevariables occurring in

r^.

Der'nition 5 (z'). The derivability of a subtyping judgment r^ ` A z' B isder'ned by the following subtyping rules:

r^ [ {X z' Y } ` X z' Y

(z'-assump) r^ ` A z' ? (z'-?)

r^ ` A z' *A (z'-approx) r^ ` A z' A0 (z'-rer^ex) (A ' A

0)

r^1 ` A z' B r^2 ` B z' C

r^1 [ r^2 ` A z' C (z'-trans)

r^ ` A z' B
r^ ` *A z' *B (z'-*)

r^1 ` A0 z' A r^2 ` B z' B0

r^1 [ r^2 ` A ! B z' A0 ! B0

(z'-!)

r^ [ {X z' Y } ` A z' B

r^ ` uX.A z' uY .B (z'-u) A~

X /2 F T V (r^) [ F T V (B), Y /2 F T V (r^) [
F T V (A), and A and B are S(F)-proper
in X and Y , respectively !

Note that r^ [ {X z' Y } and r^1 [ r^2 in the rules above must be (valid) subtypingassumptions, i.e., any type variable must not have more than one occurrence in

them. All the rules above are common to S-y"*u and F-y"*u, and they respectivelyhave another rule called (!z'-!*) as follows:

S-y"*u : r^ ` *(A ! B) z' *A ! *B (z'-!*)
F-y"*u : r^ ` A ! B z' *A ! *B (z'-!*)
The binary relation z' on type expressions is der'ned as: A z' B if and only if{} `

A z' B is derivable. It should be noted that if A z' B in F-y"*u, then it isalso the case in Sy"*u.

We now der'ne the typing rules for S-y"*u and F-y"*u. A typing context is ar'nite mapping that assigns a type expression to each individual variable of its

domain. We use \Gamma  , \Gamma  0, . . . to denote typing contexts, and {x1 : A1, . . . , xm : Am}to denote the typing context that assigns

Ai to xi for every i. We write \Gamma  0 z' \Gamma  ifand only if
Dom(\Gamma  0(x)) = Dom(\Gamma  (x)) and \Gamma  0(x) z' \Gamma  (x) for every x 2 Dom(\Gamma  ).

Der'nition 6. The typing systems S-y"*u and F-y"*u are der'ned by the followingderivation rules:

\Gamma  [ {x : A} ` x : A

(var) \Gamma  ` M : A*\Gamma  ` M : *A (nec)

\Gamma  ` M : ? (?)

\Gamma  ` M : A \Gamma  0(x) z' \Gamma  (x) A z' A0

\Gamma  0 ` M : A0

(z')

\Gamma  [ {x : A} ` M : B

\Gamma  ` y"x. M : A ! B (! I)

\Gamma 1 ` M : *n(A ! B) \Gamma 2 ` N : *nA

\Gamma 1 [ \Gamma 2 ` M N : *nB (!E)
where Dom(*\Gamma  ) = Dom(\Gamma  ) and (*\Gamma  )(x) = *\Gamma  (x) for every x 2 Dom(\Gamma  ). Notethat since Sy"*u has the subtyping rule *(A ! B) z' *A ! *B, the (!E)-rulefor Sy"*u can be simplir'ed to the following usual form:

\Gamma 1 ` M : A ! B \Gamma 2 ` N : A

\Gamma 1 [ \Gamma 2 ` M N : B (!E)

Since A z' B in F-y"*u implies the same in S-y"*u, one can observe the following.

Proposition 1. If \Gamma  ` M : A is derivable in F-y"*u, then so is it in S-y"*u.
The most interesting thing about S(F)-y"*u is that one can derive ` Y : (*A!

A) ! A for any A, where Y = y"f. (y"x. f (xx)) (y"x. f (xx)) (cf. [1]). Thetyping systems Sy"*u and F-y"*u also enjoy some basic properties such as subjectreduction property.

Proposition 2. (1) If \Gamma  ` M : A is derivable, then F V (M ) ! Dom(\Gamma  ).

(2) If \Gamma  [ {x : A} ` M : B and \Gamma  ` N : A are derivable, then so is \Gamma  `

M [N/x] : B .

(3) If \Gamma  ` M : A is derivable and M !r' M0, then \Gamma  ` M0 : A is derivable.

Proof. Straightforward induction on the derivations. In the proof of (3), we applythe following property of z' to the case that the derivation ends with (!E): if
A ! B z' *n(C ! D) and D /' ?, then *lB z' C and D z' *lA for some l. ut

3 Semantics
In this section, we show revised results presented in Sections 4 and 5 of [1].We give two kinds of realizability interpretations, the simple semantics and the
F-semantics, over certain Kripke-frames to S-y"*u and F-y"*u, respectively, andshow soundness of each typing system with respect to the corresponding interpretation. We also show that the new systems preserve the convergence propertiesof well-typed

y"-terms presented in [1].
We now consider the following class of Kripke-frames.

Der'nition 7. A transitive and converse wellfounded frame is a pair <W, !>,which consists of a set W of possible worlds and an accessibility relation ! on

W such that:

(1) The relation ! is transitive.
(2) The relation ! is converse wellfounded, i.e., there is no inr'nite sequencesuch that

p0 ! p1 ! p2 ! p3 ! . . . .

Let <V, *, [[ ]]> be a y"-model of untyped y"-calculus. The meaning of a y"-term
M is denoted by [[M]]!, where ! is an individual environment that assigns anelement of V to each individual variable. Each type expression is interpreted as

a mapping I from W to the power set P(V) of V such that:

p ! q implies I(p) ! I(q)
A mapping that assigns such a monotone mapping to each type variable is calleda type environment.

Der'nition 8 (Semantics of types). Let <W, !> be a transitive and con-verse wellfounded frame, and

z. a type environment. We der'ne a mapping IS(A)z.

from W to P(V) for each type expression A by extending z. as follows, where weprefer to write I

S(A)z.p rather than IS(A)z.(p).

IS(X)z.p = z.(X)pI

S(*A)z.p = { u | u 2 IS(A)z.q for every q A~ p }

IS(A ! B)z.p = ! u r'r'r'r' If B is not an S-?-variant, then u * v 2 I

S(B)z.qfor every

v 2 IS(A)z.q whenever q = p or q A~ p. ?

IS(uX.A)z.p = IS(A[uX.A/X])z.p

IS is called the simple semantics of types. We similarly der'ne IF (A)z., the F-semantics of types, where the only dio""erence is the der'nition of I

F (A ! B)z.,which is der'ned as:

IF (A ! B)z.p = 8??!??: u r'r'r'r'r'r'r'r'

1. If B is not an F-?-variant, then u * v 2 IF (B)z.q

for every v 2 IF (A)z.q whenever q = p or q A~ p,and

2. u = [[y"x. M ]]! for some x, ! and M.

9??=??
;
In the squeal, we prefer to write I(A)z., or I(A), rather than IS(A)z. or IF (A)z.when it would cause no confusion in context. Note that the I(

A)z.p has beender'ned by induction on the lexicographic ordering of
<p, r(A)>, where thenon-negative integer
r(A) is der'ned as:

r(X) = r(*A) = 0
r(A ! B) = ! 0 (B is an S(F)-?-variant)max(r(A), r(B)) + 1 (otherwise)
r(uX.A) = r(A) + 1
I(uX.A)z.p is well der'ned since r(A[B/X]) < r(uX.A) for any B whenever A is
S(F)-proper in X. We can easily verify that p ! q implies I(A)z.p ! I(A)z.q.

Proposition 3. The equivalence relation ' and the subtyping relation z' ontype expressions well respect these semantics. That is:

(1) If A ' B, then I(A)z.p = I(B)z.p for every p 2 W.
(2) If A z' B, then I(A)z.p ! I(B)z.p for every p 2 W.

From these results, we can also show the soundness of S-y"*u and F-y"*u withrespect to the semantics of types I

S and IF , respectively.

Theorem 1 (Soundness). If {x1 : A1, . . . , xn : An} ` M : B is derivable,then [[

M]]! 2 I(B)z.p for every p, z. and ! whenever !(xi) 2 I(Ai)z.p for every i(
i = 1, 2, . . . , n).

Proof. By induction on the derivation and by cases of the last rule used in thederivation. Most cases are straightforward. Use Proposition 3 for the case of (z').

Prove it by induction on p in the case of (!I). ut

One can observe that F-y"*u is also sound with respect to the simple semanticsI

S by Proposition 1. If the transitive and converse wellfounded frame <W, !>also satisr'es the following extra condition:

if r ! p, then r *! q ! p for some q such that q ! s implies p *! sfor any

s, where *! denotes the rer^exive (and transitive) closureof !,

then the rule below is also sound with respect to IS (respectively IF ), whenadded to Sy"*u (F-y"*u).

r^ ` *A ! *B z' *(A ! B)

(z'-*!)

Similarly, if for every p 2 W there exists some q 2 W such that q ! p, then

*\Gamma  ` M : *A

\Gamma  ` M : A (*)

is sound. For example, the set of non-negative integers, or limit ordinals, andthe "greater than" relation

>, where a smaller number is accessible from alarger one, constitute a frame satisfying the two conditions above. We call the

extended systems with these two rules S-y"*u+ and F-y"*u+, respectively, wherethe (z'-*!) rule makes (nec) redundant. It should be noted that the two rules
provide the converses of (z'-!*) and (nec), respectively. The original systemgiven in [1] is equivalent to Fy"*u+. Although the base systems S-y"*u and F-y"*uare somewhat weaker than that, all the examples of programs presented in the

paper still work in them.

Theorem 1 assures us that the modularity of programs is preserved even ifwe regard type expressions, or specir'cations, as asserting the convergence of

programs. For example, if a type B comprises of certain canonical values, andwe have a program

M of a type A ! B, then we can expect that M terminatesand returns such a canonical value when we provide a value of

A. By a discussionon soundness with respect to an interpretation over the term model of untyped

y"-calculus, we can obtain such convergence properties of well-typed y"-terms.The corresponding results for the original system Fy"*u+ was r'rst presented inSection 5 of [1].

Der'nition 9. A type expression A is tail r'nite if and only if A ' *m1(B1 !*

m2(B2 ! *m3(B3 ! . . . ! *mn(Bn ! X) . . .))) for some n, m0, m1, m2, . . .,

mn, B1, B2, . . ., Bn and X.

A type expression is tail r'nite if and only if it is not an S-?-variant.

Der'nition 10. Let A be a type expression. Two sets ET V +(A) and ET V -(A)of type variables are der'ned as follows:

ET V +(X) = {X}, ET V -(X) = {},
ET V +-(*A) = ET V +-(A),

ET V +-(A ! B) = ! {} (B is an S(F)-?-variant)ET V l'(A) [ ET V +-(B) (otherwise)

ET V +-(uX.A) = ! (ET V +-(A) [ ET V l'(A)) - {X} (X 2 ET V -(A))ET V +-(A) - {X} (otherwise)
It should be noted that the set ET V +(A) (ET V -(A)) consists of the typevariables that have free positive (negative) occurrences in

A, where we ignore anysubexpression
B ! C of A whenever C is an S(F)-?-variant. If X 2 ET V +-(A)in Sy"*u, then so is in F-y"*u.

Der'nition 11. A type expression A is positively (negatively) r'nite if and onlyif

C is tail r'nite whenever A ' B[C/X] for some B and X such that X 2
ET V +(B) (X 2 ET V -(B)) and X /2 ET V -(B) (X /2 ET V +(B)).

Every positively r'nite type expression is tail r'nite. If a type expression of F-y"*uis tail (positively, or negatively) r'nite, then so is as a type expression of Sy"*u.

Theorem 2 (Convergence). Let \Gamma  ` M : A be derivable in S-y"*u, F-y"*u,Sy"*u+ or F-y"*u+.

(1) If A is tail r'nite, then M is head normalizable.
(2) If A is positively r'nite, and \Gamma  (x) is negatively r'nite for every x 2

Dom(\Gamma  ), then the B"ohm tree of M has no occurrence of ?, i.e., a y"-term not being head normalizable.

Proof. It sus'ces to prove the case of S-y"*u+. See Appendix. ut
Moreover, if the typing judgement is derivable in F-y"*u or F-y"*u+ for some Anot being an F-?-variant, then

M is weakly head normalizable, i.e., r'-reducesto the form
y"x. N or x N1 N2 . . . Nn (n >= 0) (cf. [1]).

4 The modal logic behind S-y"*u and F-y"*u
In this section, we consider S-y"*u and F-y"*u as modal logics by ignoring lefthand sides of ":" from typing judgments, and show that they precisely correspond
to the same modal logic.
Der'nition 12 (Formal system L*u). We der'ne a modal logic consideringtype expressions as logical formulae, where the equivalence relation '

L on for-mulae is der'ned as the smallest binary relation that satisr'es the conditions listed

in Der'nition 4 except ('-uniq) and ('-!?). Let L*u be the formal system de-r'ned by the following inference rules, where

\Gamma  denotes a r'nite set of formulae.

\Gamma  [ {A} ` A

(assump) \Gamma  ` A*\Gamma  ` *A (nec) \Gamma  ` A\Gamma  ` A0 ('L) (A 'L A0)

\Gamma  ` *(A ! B) ! *A ! *B

(K) \Gamma  ` A ! *A (approx)

\Gamma  [ {A} ` B

\Gamma  ` A ! B (! I)

\Gamma 1 ` A ! B \Gamma 2 ` A

\Gamma 1 [ \Gamma 2 ` B (!E)

Proposition 4. If {A1, . . . , An} ` B is derivable in L*u, then {x1 : A1, . . . ,
xn : An} ` M : B is derivable in F-y"*u for some y"-term M and distinct individ-ual variables

x1, . . ., xn, such that F V (M) ! {x1, . . . , xn}.

Proof. Straightforward. ut
Der'nition 13. A *u-frame is a triple <W, !, R>, which consists of a set Wof possible worlds and two accessibility relations ! and

R on W such that:

(1) <W, R> is a transitive and converse wellfounded frame.(2) ! is a transitive relation on W.

(3) p ! q implies p R q.
It should be noted that ! is also converse wellfounded by the condition (3); andhence

<W, ! > is also a transitive and converse wellfounded frame.

Der'nition 14 (Semantics of L*u). Let <W, !, R> be a *u-frame. A map-ping I from W to {

t, f } is hereditary if and only if:

if p R q, then I(p) = t implies I(q) = t.
A mapping z. that assigns a hereditary mapping to each propositional variable,i.e., type variable, is called a valuation. We der'ne a hereditary mapping I

L(A)z.from W to {t
, f } for each formula A by extending z. as follows, where we write|

=z.pA to denote IL(A)z.(p) = t.

|=z.pX io"" z.(X)p = t
|=z.pA ! B io"" |=z.qA implies |=z.qB for every q such that q = p or p R q
|=z.p*A io"" |=z.qA for every q such that p ! q or p R r ! q for some r
|=z.puX.A io"" |=z.pA[uX.A/X]

Note that |=z.pA is again der'ned by induction on the lexicographic ordering of
<p, r(A)>. We write \Gamma  |=z.p A if and only if |=z.pA whenever |=z.pB for every B 2 \Gamma  .
By a discussion similar to Theorem 1, one observes soundness of S-y"*u as a logicwith respect to this semantics of formulae.

Proposition 5. If A z' B in S-y"*u, then {A} |=z.p B.
Proposition 6. Let <W, !, R> be a *u-frame, and z. a valuation. If {x1 :
A1, . . . , xn : An} ` M : B is derivable in S-y"*u, then {A1, . . . , An} |=z.p B forevery

p 2 W.

The main results of the present paper can be summarized as the following the-orem.

Theorem 3. The following four conditions are equivalent.

(1) {A1, , . . . , An} ` B is derivable in L*u.(2) {

x1 : A1, . . . , xn : An} ` M : B is derivable in F-y"*u for some M, x1,
. . ., xn.(3) {

x1 : A1, . . . , xn : An} ` M : B is derivable in S-y"*u for some M , x1, . . .,
xn.(4) {

A1, , . . . , An} |=z.p B for every *u-frame <W, !, R>, valuation z., and
p 2 W.

Proof. We get (1) ) (2), (2) ) (3), and (3) ) (4) by Propositions 4, 1 and6, respectively. Hence, it sus'ces to show that (4) ) (1), which is given by the

following completeness theorem. ut
Theorem 4 (Completeness of L*u). If {A1, . . . , An} ` M : B is notderivable in

L*u, then there exist some *u-frame <W0, !0, R0>, valuation z.0,and
p0 2 W0 such that /|=z.0p0B while |=z.0p0Ai for every i (i = 1, 2, . . . , n).

The rest of the present section is devoted to proving this theorem. Suppose that{

A1, . . . , An} ` M : B is not derivable.Let

C and D be formulae, i.e., type expressions. We call C a component of
D, and write C <= D, if and only if

E[C/X] 'L D and X 2 F T V (E)
for some type expression E and type variable X. We also der'ne Comp(D) as:

Comp(D) = {C | C <= D}.
Note that Comp(D)/'L is a r'nite set (cf. e.g. [9, 8]). Let

F = { C | C 2 Comp(B) or C 2 Comp(Ai) for some i },
and der'ne W0 and p0 as:

W0 = { p ! F | C 2 p whenever C 2 F and p ` C is derivable2 }

p0 = { C 2 F | {A1, . . . , An} ` C is derivable }

Note that W0 is a r'nite set since Comp(D)/'L is r'nite and L*u has the ('L)rule. Then, for each

p 2 W0, der'ne ~p as:

~p = { C 2 F | p ` *C is derivable }
2 More precisely, \Gamma  0 ` C derivable for some r'nite \Gamma  0 ! p.

Observe that p 2 W0 implies ~p 2 W0, since if ~p ` C is derivable for some
C 2 F, then so is *~p ` *C by (nec); and therefore, p ` *C is also derivable,i.e.,

C 2 ~p. Note also that p ! ~p holds because L*u has the (approx) rule. Theaccessibility relations !

0 and R0 are der'ned as follows:

p !0 q io"" ~p ! q and ~q /= q.

p R0 q io"" p ! q and p /= q.

We can easily verify that !0 and R0 are transitive, and p!0q implies p R0 q.Since W

0 is r'nite, R0 is also converse wellfounded. We r'nally der'ne the valuation
z.0 as:

z.0(X)p = ! t (X 2 p)f (X /2 p)

Obviously, z.0 is hereditary by the der'nition of R0. Since B /2 p0 while Ai 2 p0for every

i, to r'nish the proof of the completeness theorem, it sus'ces to provethe following lemma.

Lemma 1. Let C 2 F and p 2 W0. Then, C 2 p if and only if |=z.0p C.
Proof. The proof proceeds by induction on the lexicographic ordering of <p,
r(C)>, and by cases of the form of C.

Case: C = X. Trivial from the der'nition of z.0(X).
Case: C = D ! E. For the "only if" part, suppose that D ! E 2 p, |=z.0q D,
and q = p or p R0 q. We get D 2 q from |=z.0q D by induction hypothesis, since p
decreases to q or else r(D) < r(D ! E), and D ! E 2 q from p ! q. Therefore,
E 2 q, and by induction hypothesis again, |=z.0q E. Thus we get |=z.0p D ! E. As
for "if" part, suppose that |=z.0p D ! E, i.e.,

|=z.0q D implies |=z.0q E whenever q = p or p R0 q (1)
Let q as:

q = { C0 2 F | p [ {D} ` C0 is derivable }.

Note that q = p or p R0 q. Since D 2 q, we get |=z.0q D by induction hypothesis,
and then |=z.0q E from (1). Hence, by induction hypothesis again, E 2 q, i.e.,

p [ {D} ` E is derivable, and so is p ` D ! E .

Case: C = *D. For the "only if" part, suppose that *D 2 p. If p ! q or
p R r ! q for some r, then since ~p ! q and p ` *D is derivable, we get
D 2 q. Hence, |=z.0q D by induction hypothesis. We thus get |=z.0p *D. For "if"

part, suppose that |=z.0p *D, i.e.,

|=z.0q D for any q if p ! q or p R r ! q for some r . (2)

Let q as:

q = { C0 2 F | ~p [ {*D} ` C0 is derivable }.

If p ! q, then |=z.0q D by (2); therefore, D 2 q by induction hypothesis. Otherwise,

~q = q, i.e., also D 2 q. Hence, ~p [ {*D} ` D is derivable. On the other hand,there is a derivation of ` (*

D ! D) ! D corresponding to the Y-combinator.Therefore, ~
p ` D is also derivable, and so is *~p ` *D by (nec). That is,
p ` *D is derivable; and therefore, *D 2 p.

Case: C = uX.D. For the "only if" part, suppose that uX.D 2 p, i.e., also
D[uX.D/X] 2 p by ('L) rule. We get |=z.0p D[uX.D/X] by induction hypothesis,

since r(D[uX.D/X]) < r(uX.D); and therefore, |=z.0p uX.D by der'nition. For "if"
part, suppose that |=z.0p uX.D, i.e., |=z.0p D[uX.D/X]. We get D[uX.D/X] 2 p by
induction hypothesis; and therefore, uX.D 2 p by the ('L) rule. ut

This completes the proof of Theorems 4 and 3. Since the counter modelconstructed in the proof of Lemma 1 is based on a r'nite frame, the logic

L*uhas the r'nite model property, and we therefore get the following corollary.

Corollary 1. The following problems are decidable.

(1) Provability in L*u.
(2) Type inhabitance in S-y"*u.
(3) Type inhabitance in F-y"*u.

5 Relationship to the intuitionistic logic of provability
The logic L*u permits self-referential formulae. In this section, we show that if
L*u is restricted to r'nite formulae, i.e., those without any occurrence of u, thenone gets the intuitionistic version of the logic of provability GL (cf. [5]), where

"intuitionistic" means that the interpretation is monotonic with respect to theaccessibility relation, and not provability in intuitionistic systems such as HA.
GL is also denoted by G (for G"odel), L (for L"ob), PrL, KW, or K4W, in theliterature.

Der'nition 15 (Formal system iKW). We der'ne a modal logic iKW, whichonly allows r'nite formulae, by replacing the '

L rule of L*u by the followinginference rule.

\Gamma  ` *(*A ! A) ! *A

(W)

We observe that iKW is sound with respect to the Kripke semantics over *u-frames, i.e., Der'nition 14, because the (W) rule is derivable in

L*u, by (approx)and (K), from the seemingly more general (*
A ! A) ! A, which is derivable

by the Y-combinator. And conversely, the axiom schema W : *(*A ! A) ! *Aimplies (*

A ! A) ! A as follows:

{*A ! A} ` *A ! A

(assump)

{*A ! A} ` *A ! A

(assump)

{*A ! A} ` *(*A ! A)

(approx), (!E)

{*A ! A} ` *A

(W), (!E)

{*A ! A} ` A

(!E)

{} ` (*A ! A) ! A

(!I)

Then, since the only role of ('L) for r'nite formulae in the proof of Lemma 1is the derivability of (*

D ! D) ! D, which is used in the "if" part of the case
C = *D, we get the following.

Theorem 5 (Completeness of iKW). The formal system iKW is also Kripkecomplete with respect to *

u-frames.

And hence, by Theorem 3, L*u is a conservative extension of iKW.

6 Concluding Remarks
Two modal typing systems S-y"*u and F-y"*u, which are respectively based onthe simple and the F-semantics of types, and a formal system of the modal
logic behind them have been presented. We have shown that the modal logicis Kripke complete with respect to intuitionistic, transitive and converse wellfounded frames. The completeness also connects provability in the modal logicto type inhabitance in the two modal typing systems, and implies their decidability. We have also shown that the modal logic is a conservative extensionof the intuitionistic version of the logic of provability. We have not, however,
yet obtained corresponding results for the extended typing systems S-y"*u+ andFy"*u+, which are also logically equivalent to each other, and completeness anddecidability of typing and typability of

y"-terms in all the typing systems pre-sented in the present paper are also still open.

References
1. Nakano, H.: A modality for recursion. In: Proceedings of the 15th IEEE Symposium

on Logic in Computer Science. IEEE Computer Society Press (2000) 255-266
2. Nakano, H.: A modality for recursion (technical report). Available as http://

www602.math.ryukoku.ac.jp/~nakano/papers/modality-tr01.ps (2001)
3. Hindley, R.: The completeness theorem for typing y"-terms. Theoretical Computer

Science 22 (1983) 1-17
4. Hindley, R.: Curry's type-rules are complete with respect to F-sematics too. Theoretical Computer Science 22 (1983) 127-133
5. Boolos, G.: The logic of provability. Cambridge University Press (1993)

6. Barendregt, H.P.: Lambda calculi with types. In Abramsky, S., Gabbay, D.M.,

Maibaum, T.S.E., eds.: Handbook of Logic in Computer Science. Volume 2. Oxford
University Press (1992) 118-309
7. Cardone, F., Coppo, M.: Type inference with recursive types: syntax and semantics.

Information and Computation 92 (1991) 48-80
8. Amadio, R.M., Cardelli, L.: Subtyping recursive types. ACM Transactions on

Programming Languages and Systems 15 (1993) 575-631
9. Courcelle, B.: Fundamental properties of inr'nite trees. Theoretical Computer Science 25 (1983) 95-169

Appendix: Proof of Theorem 2
We r'rst give alternative der'nitions of tail r'niteness and positively (negatively)r'niteness.

Der'nition 16. Let V be a set of type variables. We der'ne subsets TFV, PFand NF of TExp as follows:

TFV ::= X (X /2 V )| *

TFV | TExp ! TFV | uY .TFV [{Y }

PF ::= TVar | * PF | NF ! PF|

uY .A (A 2 TF{Y } " PF, and Y 2 ET V -(A) implies A 2 NF).

NF ::= TVar | * NF | PF ! NF | C (C is an S-?-variant)|

uY .A (A 2 NF, and Y 2 ET V -(A) implies A 2 TF{Y } " PF).

Proposition 7. (1) A is tail r'nite if and only if A 2 TF{}.(2)

A is positively r'nite if and only if A 2 PF.(3)
A is negatively r'nite if and only if A 2 NF.

It follows that tail r'niteness and positively (negatively) r'niteness are decidableproperties of type expressions. Through these alternative der'nitions, we get the

following proposition.
Proposition 8. Suppose that A z' B.

(1) If B is tail r'nite, then so is A.(2) If

B is positively r'nite, then so is A.(3) If
A is negatively r'nite, then so is B.

Proof of the r'rst claim of Theorem 2. Suppose that \Gamma  ` M : A is derivablein Sy"*u+. We consider the frame <N , >>, which consists of the set of non-negative integers and the "greater than" relation on it, over the term model

<V, *, [[ ]]> of untyped y"-calculus. Der'ne a subset K of V as:

K = ! [ xN1N2 . . . Nn ] r'r'r'r' x is an individual variable, n >= 0, andN

i 2 V for every i (i = 1, 2, . . . , n) ? .

Taking ! as !(x) = [x] for any x, we get [M ] = [[M]]! 2 IS(A)z.p by Theorem 1
for S-y"*u+. Note also that K ! IS(A)z.p for any A and p by Der'nition 8.Since

z. can be any type environment, it sus'ces to show that M has a headnormal form whenever

(a) A 2 TFV,(b)

z.(X)p = K for every p and X /2 V , and(c) [

M ] 2 I(A)z.p for every p.

The proof proceeds by induction on the complexity of A, and by cases of theform of

A. Suppose (a) through (c).

Case: A = X. In this case, I(A)z.p = z.(X)p = K by (a) and (b). Therefore, Mobviously has a head normal form.

Case: A = *B. In this case, B 2 TFV by (a). Therefore, M has a head normalform by the induction hypothesis. Note that (c) implies [

M ] 2 I(B)z.p for every
p, because there exists some q such that q ! p.

Case: A = B ! C. In this case, C 2 TFV by (a). Let y be a fresh individualvariable. Since [

M] 2 I(B ! C)z.p and [y] 2 K ! I(B)z.p for every p, we get

[M y] 2 I(C)z.p for every p. Therefore, M y has a head normal form, say L, by the
induction hypothesis. There are two possible cases: for some K, (1) M *!r' K 2 K
and L = K y 2 K, or (2) M *!r' y"y. K and K *!r' L. In either case, M has a headnormal form.

Case: A = uY .B. In this case, B 2 TFV [{Y } by (a). By Der'nition 8, weget I(

uY .B)z.p = I(B[uY .B/Y ])z.p = I(B)z.0p , where z.0 = z.[I(uY.B)z.p/Y ], sinceI

(C[D/Y ])z.p = I(C)z.[I(D)

z./Y ]

p holds for any C and D. Note that (a0) B 2

TFV [{Y }, (b0) z.0(X)p = K for every p and X /2 V [ {Y }, and (c0) M 2 I(B)z.0pfor every

p. Therefore, M has a head normal form by the induction hypothesis.ut

As for the second claim of Theorem 2, we employ the following lemma.
Lemma 2. Suppose that A /' ?. If \Gamma  ` xN1N2 . . . Nn : A is derivable inSy"*u+, then \Gamma  (x) z' *m1(B1 ! *m2(B2 ! . . . ! *mn(Bn ! C) . . .)) for some
m1, m2, . . ., mn, B1, B2, . . ., Bn and C such that

1. *m1+m2+...+mnC z' A, and2. for every

i (0 <= i <= n), \Gamma  ` Ni *m0iBi is derivable for some m0i.

Proof. By induction on n. If n = 0, then since A /' ?, the derivation ends with:

\Gamma  0 ` x : \Gamma  0(x)

(var)

... 0 or more (z')'s
\Gamma  ` x : A

Therefore, we get C z' A by taking C as C = \Gamma  0(x). If n > 0, then for some m0,
D and E, the derivation ends with:

...

\Gamma  0 ` xN1N2 . . . Nn-1 : *m0(D ! E)

...
\Gamma  0 ` Nn : *m0D
\Gamma  0 ` xN1N2 . . . Nn : *m0E

(!E)

... 0 or more (z')'s
\Gamma  ` xN1N2 . . . Nn : A
Note that *m0E z' A, and E /' ? since A /' ?. By induction hypothesis,
\Gamma  0(x) z' *m1(B1 ! *m2(B2 ! . . . ! *mn-1(Bn-1 ! C0) . . .)) for some m1, m2,
. . ., mn-1, B1, B2, . . ., Bn-1 and C0 such that:

- *m1+m2+...+mn-1C0 z' *m0(D ! E), and- for every

i (0 <= i <= n-1), \Gamma  ` Ni *m0iBi is derivable for some m0i.

This implies that there exist some m00, j, k, l, Bn and C such that:

- *m1+m2+...+mn-1C0 ' *m00(Bn ! C),-

m00-j <= m0-k, and- *

kD z' *j+lBn and *j+lC z' *kE.

We then get C0 z' *mn(Bn ! C), where mn = m00-m1-m2- . . . -mn-1; andtherefore,

\Gamma  (x) z' *m1(B1 ! *m2(B2 ! . . . ! *mn-1(Bn-1 ! *mn(Bn ! C) . . .)).On the other hand, *

m1+m2+...+mn-1+mnC = *m00C z' *m0-kC z' *m0-k+j+lC z'*

m0E z' A and *m0D z' *m0-k+j+lBn. We get the derivation of \Gamma  ` Nn :*
m0-k+j+lBn from the one of \Gamma  ` Nn : *m0D by (z'). ut

Proof of the second claim of Theorem 2. Suppose that \Gamma  ` M : A is derivablein Sy"*u+ for some A and \Gamma  such that A is positively r'nite and \Gamma  (x) is negativelyr'nite for every

x 2 Dom(\Gamma  ). We show that for every n, every node of the B"ohm-tree of
M at the level n is head normalizable, by induction on n. Since A ispositively r'nite,

M is head normalizable by (1) of Theorem 2, that is

M *!r' y"x1. y"x2. . . . y"xm. yN1 N2 . . . Nl
for some x1, x2, . . ., xm, y, N1, N2, . . ., Nl. By (3) of Proposition 2, \Gamma  `
y"x1. y"x2. . . . y"xm. yN1 N2 . . . Nl : A is also derivable; and this implies that sois

\Gamma  [ {x1 : B1, x2 : B2, . . . , xm : Bm} ` yN1 N2 . . . Nl : C for some B1, B2,
. . ., Bm and C such that:

B1 ! B2 ! . . . ! Bm ! C z' A.
Since A is positively r'nite, so is C, i.e., C /' ?, and B1, B2, . . ., Bm are negativelyr'nite by Proposition 8. Let

\Gamma  0 = \Gamma  [ {x1 : B1, x2 : B2, . . . , xm : Bm}. Since
C /' ?, by Lemma 2, \Gamma  0(y) z' *k1(D1 ! *k2(D2 ! . . . ! *kl(Dl ! E) . . .)) forsome

k1, k2, . . ., kl, D1, D2, . . ., Dl and E such that:

- *k1+k2+...+klE z' C, and- for every

i (0 <= i <= l), \Gamma  0 ` Ni : *k0iDi is derivable for some k0i.

Since C is positively r'nite, so is E, i.e., E /' ?; and therefore, Di is positivelyr'nite for every

i (0 <= i <= l) because \Gamma  0(z) is negatively r'nite for every z 2
Dom(\Gamma  0). Therefore, by the induction hypothesis, for every i (0 <= i <= l), everynode of the B"ohm-tree of

Ni at a level less than n is head normalizable; that is,so is one of
M at a level less than or equal to n. ut