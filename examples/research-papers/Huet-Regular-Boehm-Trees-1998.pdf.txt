

Math. Struct. in Comp. Science (1998), vol. 00, pp. 1-11 Copyright cfl Cambridge University Press
Regular B"ohm Trees
G'erard HUET#
INRIA-Rocquencourt
BP 105, 78153 Le Chesnay Cedex, France

Received December 1996

Introduction
We give a decision procedure for the extensional equality of total B"ohm trees presented
by regular systems of recursion equations.

1. B"ohm trees presentations
B"ohm trees are the natural infinite generalisations of normal forms in pure *-calculus.
They arose from the work of B"ohm on separability (B"ohm 1968), and were first identified
by Barendregt, who devotes chapter 10 of his book (Barendregt 1980) to their study, and
relates denotational models such as D1 to appropriate quotients over B"ohm trees.

There is however no generally agreed presentation of B"ohm trees, and the various
partial orderings considered on them make this topic a difficult one (L'evy 1993). We
shall adopt here the point of view that B"ohm trees are potentially infinite computational
objets similar to the streams studied in the theory of communicating processes, and treat
them accordingly as maximal solutions to systems of recursive definitions.

1.1. Systems of guarded combinators
Definitions. We assume given two disjoint denumerable alphabets of symbols: X ={

X1, X2, ...} is the set of combinator symbols, U = {u1, u2, ...} is the set of parameter
symbols. Intuitively, combinators name B"ohm trees, whereas parameters name bound
*-variables.

We call B"ohm tree presentation with respect to these two alphabets any denumerable
system of guarded equations: E = {E1, E2, ...}, with

Ei : Xi u1 u2...uni := uki(M1, ..., Mpi )
where 1 <= ki <= ni, 0 <= pi, Xi 2 X , and for 8j <= pi Mj = Xki,j (v1, ..., vli,j ) with
1 <= ki,j <= ni and {v1, ..., vli,j } ` {u1, ..., uni} ` U.

Email: Gerard.Huet@inria.fr

G. Huet 2

We assume furthermore the system to be deterministic, in the sense that every X 2 X
possesses at most one defining equation in E. We shall then call arity of Xi in E the
natural number ni, and we shall denote it by arE (Xi). We say that it is total when every
X 2 X possesses exactly one defining equation in E.

1.2. Completeness
Whatever is your favorite formalism for B"ohm trees, you ought to be able to convince
yourself that any B"ohm tree T containing only a finite number of free variables {v1, ..., vm}
is definable as X(v1, ..., vm) in a suitable B"ohm tree presentation. Indeed, if T is the
undefined B"ohm tree, define it as ? in the presentation ; over X = {?}, U = ;. If T
is of the form * u1 u2...un * w(T1, ..., Tp) and its set of free variables is {v1, ..., vm}, then
let Tj be represented by Xj(vj,1, ..., vj,m) in Ej for 1 <= j <= p where we assume that
the parameter sets Xj of the Ej's are disjoint. Note that vj,1, . . . , vj,m are included in
v1, . . . , vm, u1, . . . , un. Now choose a new parameter X0, and consider the new equation:

E0 : X0 v1...vm u1 u2...un := w(M1, ..., Mpi)
with Mj = Xj(vj,1, ..., vj,m). Now with E0 = {E0} and X0 = {X0}, we consider the
presentation Spi=0 Ej over X = Spi=0 Xj . In this presentation, T may indeed be defined as
X0(v1, ..., vm). This construction may be made rigorous as a limit construction, defining
T as the ideal of its finite approximations, as usual.

Let us remark at this point that this shows that B"ohm tree presentations are general
enough to represent arbitrary families of finitely generated B"ohm trees, which is enough
for instance to represent B"ohm trees of any *-term. But they permit to do more, in that
we may represent dags and looping structures.

For instance, the *-term in normal form *u1 u2 *(u1 *v *(v v) *w * w) may be presented
as X in the system

X u1 u2 := u1(D, I)

D v := v(I(v))

I w := w

with sharing of combinator I. Whereas the single equation Z u := u(Z) defines as Z the
infinite tree *u1 * u1(*u2 * u2(...)). Another example is the fixpoint combinator Y , with
Y f := f (Y (f )). Still another example, also denoting an infinite B"ohm tree, is J presented
by the system: J x y := x(J(y)). It is the B"ohm tree of *-term (Y *j *x *y (x (j y))),
for Y any fixpoint combinator such as Curry's.

Indeed we shall call regular any finitely definable B"ohm tree (in analogy with regular
languages).

Definition. We call regular any finite B"ohm tree presentation. Such presentations
define B"ohm trees which are regular in the sense of admitting only a finite number of
distinct subtrees, up to variable renaming. Of course not every B"ohm tree is regular.

RBT 3
2. Semantics
We just saw that arbitrary finitely generated B"ohm trees were definable by B"ohm tree
presentations. Conversely, let us show that any B"ohm tree presentation defines a unique
B"ohm forest.

2.1. Parameterization of B"ohm trees
We start with a few auxiliary technical notions.

If T is the (defined) B"ohm tree

* u1 u2...un * w(T1, ..., Tp)
and x is a variable, we define (T x) as the B"ohm tree

*u2...un * w0(T 01, ..., T 0p)
if n > 0, with w0 = x if w = u1 and w0 = w otherwise, and T 0j is obtained from Tj
by substituting every free occurrence of u1 by x. If n = 0 it is just the B"ohm tree
w(T1, ..., Tp, x). Finally, when T is the undefined B"ohm tree ?, we define (T x) as ?.

The top node of the defined B"ohm tree

T = * u1 u2...un * w(T1, ..., Tp)
is the triple (n, w, p). The head variable w may be encoded as a de Bruijn index, or as a
pair of indexes as in (Huet 1993), or in any way which is invariant by variable renaming.
A path u in tree T is a list of integers addressing a node T/u in the tree. If u is the
empty list T /u is the top node of T . If u = q; v with q <= p then T /u is Tq/v.

Two trees T and T 0 are different if and only if there exists a common path u such that
T/u 6= T 0/u. In this case we define the distance d(T, T 0) between T and T 0 as 2-h, where
h is the minimum of the lengths of such differentiating paths, otherwise d(T, T 0) = 0.
The set of (finite and infinite) B"ohm trees equipped with distance d has the structure of
a complete metric space.

2.2. Constructing the B"ohm forest
Now every X -indexed family of B"ohm tree T is mapped into an X -indexed family E(T )
as follows. If X has no defining equation in E then E(T )X =?.

If it has the defining equation:

X u1 u2...un := uk(M1, ..., Mp)
with Mj = Xj(v1, ..., vl) then

E(T )X = * u1 u2...un * uk(T1, ..., Tp)
with Tj = (TXj v1, ..., vl) as defined in the previous section.

This defines a contracting map T 7! E(T ), in the sense that if for all trees T, T 0, we
have d(E(T ), E(T 0)) <= 12 d(T, T 0). We leave this easy proof to the reader. By the Banach

G. Huet 4
fixpoint theorem it has a unique fixpoint associating a B"ohm tree TX to every combinator
X in X . These trees are all total when E is total.

Remark that when X has no defining equation in E we could alternatively defineE
(T )X = X. We would get a slight generalisation of B"ohm trees with (parameterized)
constructors, whose leaves are of the form X(v1, ..., vl) for X 2 X with no definition inE

.

2.3. Alternative formulations
Many variations on the formulation of systems of recursive combinators are possible.
What is essential is that our combinator definitions are guarded, in the sense that the
head variable is explicit in the definition of each combinator, which guarantees that every
defined combinator is solvable, in the sense of having a head normal form. It is the guard
indeed that guarantees that the defining map is contracting.

Our definition is minimal in the sense that we define the B"ohm tree one layer at a
time: each immediate subterm Mj starts with a combinator symbol. We may relax this
condition by simply requiring that a right hand side is a head expression u(M1, ..., Mp)
where the Mj's are either formed with a combinator applied to parameters (as above),
or else are themselves head expression.

Another variation is to be on the contrary more restrictive, by demanding that each
Mj is a linear pattern X(v1, ..., vm) where the vk's are distinct variables. Obviously both
variations have the same expressive power, but differ in the number of combinators needed
to define a given B"ohm tree.

2.4. Operational Semantics
Systems of recursive combinators admit a straightforward operational semantics, by viewing each definition as a rewrite rule. This is similar to combinatory reduction, the recursive nature of our systems does not introduce extra difficulty. In terms of *-calculus, as
usual, one gets a notion of weak reduction, i.e. a reduction which does not occur below
*s. In order to get a more interesting equational theory, one has to allow j-expansion,
leading to a notion of extensional equality.

3. Extensional equality
In the following we assume given alphabets X and U as well as a regular B"ohm tree
presentation E. We saw that B"ohm trees could be represented as linear patterns of the
form X(v1, ..., vm) with X 2 X and the vj's distinct variables in U. Let us now relax the
linearity requirement.

Definition. A pattern is any expression X(v1, ..., vm) with X 2 X and vj 2 U for
1 <= j <= m. The pattern is said to be saturated if m >= arE (X).

A head expression is an expression u(M1, ..., Mp) where u 2 U and the Mj's are simple
expressions for 1 <= j <= p, where a simple expression is either a pattern or a head
expression.

RBT 5

We define the notion of shape of a simple expression as follows. The shape of the head
expression u(M1, ..., Mp) is (-p, u). The shape of pattern X(v1, ..., vm), with X defined
by equation:

E : X u1 u2...un := uk(M1, ..., Mp)
is defined as (n - p - m, v) where v is vk if k <= m, and wj if k = m + j, where w1, w2, ... is
some denumerable set disjoint from U. Finally, the shape of pattern X(v1, ..., vm), with
X undefined, is defined as some default value ?.

We say that two simple expressions are similar when they have the same shape, dissimilar otherwise.

We shall now define extensional equality as the largest bisimulation consistent with E
which separates dissimilar expressions. More precisely, we define mutually an inductive
relation jE and a co-inductive relation ,E between simple expressions by the following
closure conditions:

Consistency : Mi jE Ni (1 <= i <= p) =) u(M1, ..., Mp) ,E u(N1, ..., Np)

Inclusion : M ,E N =) M jE N
where M and N are patterns.

Extensionality : M(x) jE N (x) =) M jE N
Here M and N are unsaturated patterns where parameter x does not occur.

Def inition : M := N 2 E =) M jE N

Renaming : M jE N =) oe(M ) jE oe(N )
where M and N are patterns and oe is a parameter substitution (not necessarily one-one).

The renaming rule could be dispensed with if we impose the linearity of patterns (at the
cost of increasing the number of combinators); it would then be reduced to ff-conversion,
which may be made implicit provided a proper canonical representation of parameter
variables.

If E is not total, when we want to consider undefined combinators as representing
the undefined tree rather than free constructors, we could single out one such undefined
combinator, say ?, and add the following extra closure conditions:

U ndef ined : X jE ?
where X 2 X has no defining clause in E.

Saturation : ?(x) jE ?
Finally, we take the closure conditions for jE to be an equivalence relation (Reflexivity,
Symmetry, Transitivity), and a congruence with respect to application:

G. Huet 6

Congruence : M jE N =) M (x) jE N (x)
where M and N are patterns and x a parameter.

This ends the mutual definition of relations ,E and jE.
Lemma 1. M jE N only if M and N are two similar expressions.
Proof. Similarity is an equivalence relation. It is straightforward to check that it is preserved by rules Extensionality, Renaming, and Congruence. By definition, rules Definition, Undefined and Saturation introduce as equivalent only similar expressions. Finally,
since Consistency relates only similar expressions, and is the only introduction rule for,

E , similarity is also enforced by rule Inclusion. Assume that M jE N ; by induction onits proof, we get that

M and N are similar. Inversely, M ,E N =) F alse for any two

dissimilar simple expressions.

Remarks. Note that ,E is not defined inductively. It is rather a co-inductive definition,
in the sense of Pitts (Pitts 1994). It has the flavor of defining truth as consistency, in the
spirit of inductionless induction (Huet and Hullot 1982). For instance, with

EY = {Y f := f (Y (f )); Z f := f (Z0(f )); Z0 f := f (Z(f ))}
we may prove by co-induction that Y ,EY Z.

On the other hand, jE is an inductively defined equivalence relation. ,E and jE are
mutually defined in the same recursion. Such mixtures of inductively and co-inductively
defined objects are explained in (Gim'enez 1995); a corresponding proof package, allowing
such definitions and the mechanical checking of formal proofs about such objects, is
available in the Coq proof assistant (Gim'enez 1996).

From the semantics point of view, M ,E N corresponds to equality in D1 of the
B"ohm trees defined by M and N in E (Wadsworth 1976).

Many equivalent variations are possible. For instance, we do not need the closure by
reflexivity, which may be proved to be an admissible rule. Similarly, Symmetry may be
dispensed with, if we add the symmetric rules of Definition and Undefined. On the other
hand, remark that we cannot dispense with transitivity, for instance to chain applications
of Extensionality. And thus we are obliged to have an interplay between an inductive and
a co-inductive relation (the co-inductive closure by transitivity being trivial).

If, on the other hand, we were interested in intensional equality (i.e. equality of the
underlying B"ohm trees), we would need to restrict the Extensionality rule to unsaturated
patterns, in the spirit of Section 9-C of (Hindley and Seldin 1986).

4. Decidability of Regular Systems
The main result of this paper is to show that extensional equality is decidable for regular
systems.

Theorem. It is decidable whether M jE N for any regular total E and simple expressions M and N .

We shall now prove this theorem, by exhibiting a completion algorithm which completes a finite set of equations into another one which either equates two dissimilar head

RBT 7
expressions, or else is closed by the closure conditions above. The theorem follows from
its termination proof. This algorithm is inspired from a similar one in recursive program
schemas (Courcelle et al. 1974).

4.1. The algorithm
Each recursion combinator Xi is either undefined or it has a unique recursion equation
Ei defining it in a given regular system:

Ei : Xi u1 u2...uni := uki(M1, ..., Mpi).
We decide sets of equations of the form E : M = N where M and N are simple
expressions.

The algorithm manages two sets CON and HY P of such formulas. Initially, the set of
conjectures is put in HY P , and CON is initialised as empty. The algorithm terminates
with YES when HY P is empty.

Here is one step of the algorithm, when HY P is non empty: let HY P = REST [ {E},
with E of the form above. If E is already in CON modulo equivalence and renaming, we
just iterate with HY P := REST and CON unchanged. Otherwise, let us unfold M and
N to head normal form, in case we do not have them already in head variable form, by
using the defining equation for their governing combinator. This may need replacing M
by (M z1... zk) and N by (N z1... zk), where z1, ..., zk are new variables not occurring
already in M or N , in order to have the X's have enough arguments to match their arity.
This is the analogue of j expansion. We thus get two applicative forms x(M1, ..., Ml)
and y(N1, ..., Nm). Now if either x 6= y or l 6= m the algorithm stops with answer N O.
Otherwise, we iterate, with HY P := REST [ {E1, ..., El} where Eq : Mq = Nq and
CON := CON [ {E}.

When the governing combinator of M is undefined, then if governing combinator of N
is also undefined we iterate with HY P := REST and CON unchanged, and otherwise
we stop with answer N O.

4.2. Its proof
Remark that, without loss of generality, we may assume that HY P and CON contain
only equations between patterns; an initial query containing a head expression may be
reduced to pattern queries by one initial pass; thereafter head expressions occur only in
temporary conjectures in the processing step.

Lemma 2. The algorithm always terminates.
Proof. There is a finite number of candidates for CON , since all patterns X(v1, ..., vm)
stored in CON (except possibly the ones given in the initial query) have a number of
parameter arguments m bound by the maximum of such arguments in all X-patterns
used in right hand sides of the system E.

Lemma 3. When the algorithm stops with YES, M jE N for every initial conjecture
M = N .
Proof. Every initial conjecture ends up in CON ultimately. Let us consider the set of

G. Huet 8
pairs CON as a relation ae between simple expressions, and let oe be the closure of ae by
rules Extensionality, Definition, Renaming, Equivalence and Congruence (plus Undefined
and Saturation if we allow undefined combinators). By construction of the algorithm,
the rule Consistency holds when we replace jE by oe and ,E by ae. Thus, by bisimulation/coinduction, we have that ae `,E and oe `jE. Thus in particular M jE N for every
initial conjecture M = N .

Lemma 4. When the algorithm stops with NO, the set of initial conjectures is inconsistent.
Proof. The steps of the algorithm correspond to inversion schemas of the various closure
conditions. Thus all the formulas placed in CON are logical consequences of the initial
conjectures. When the algorithm stops with NO, one such formula equates two dissimilar
expressions, from which a contradiction may be derived by lemma 1.

Equivalently, the algorithm may be interpreted in this case as a successful search for
a separating path (in the sense of section 4.4 below) in the B"ohm trees denoted by two
members of one initial equation.

Note. We provide in this paper only informal proofs. It is hoped that fully formal
proofs, mechanically verified by the Coq proof assistant, will be soon available.

4.3. Example: I=J
Here is a simple, but generic, example of the procedure.

Let E = {J x y := (x (J y)); I x := x}. We show that I jE J.
Initially CON0 = {}, HY P0 = {I = J}.
We select E0 : I = J. We introduce new variables x and y, j-expand to (I x y) =
(J x y), and substitute I and J by their definitions, obtaining (x y) = (x (J y)). Since
shapes fit, we generate the subgoal y = (J y) (Note that we get rid of the useless x, this
is important.) Thus we get: CON1 = {I = J}, HY P1 = {y = (J y)}.

We now select E1 : y = (J y). We j-expand to (y z) = (J y z), substitute J, and
get (y z) = (y (J z)). Since shapes fit, we generate the subgoal z = (J z), and get
CON2 = {I = J, y = (J y)}, HY P2 = {z = (J z)}.

We now select E2 : z = (J z). But this equation is equivalent by renaming to one in
CON2, and thus we stop with CON3 = {I = J, y = (J y)}, HY P3 = {}. Thus we have
shown that I jE J, i.e. that *x * x = (Y *j *x *y (x (j y))) in D1.

As exercise for the reader, we suggest trying the algorithm on proving Y ,EY Z in the
presentation EY above.

4.4. Distances, separability, apartness
We recognize as equal combinators defining B"ohm trees which are indeed quite different
as trees, since I has a finite B"ohm tree, whereas J's is infinite. And note that these B"ohm
trees do not correspond to equivalent *-terms in the sense of fij-conversion; intuitively
an infinite number of j expansions is necessary to transform I into J. However, these
trees are not separable in the sense of B"ohm's theorem.

The equality between B"ohm trees which is here in question corresponds to trees being

RBT 9
hereditarily of the same shape, where the shape of * u1 u2...un * u(T1, ..., Tp) is (n - p, u),
and `hereditarily' means recursing in the Ti's, after possible j-expansion to the same
prefix. Equivalently, we may define equality as non-separability, with two trees being
separable if their distance is greater than 0, where now the distance between two B"ohm
trees is 2-h where h is the length of a minimum separating path for the two trees, in
the sense of (Huet 1993). Intuitively, a separating path is a virtual path through j-
expansions of the two trees, where the corresponding subterms are of different shapes.
B"ohm's theorem, in the slightly different context of *-calculus, shows that a separating
path permits to construct a uniform context which separates the two original *-terms,
in the sense of fi-reducing to respectively * x y * x and * x y * y.

The idea of defining equality as non-separability has a long history. This notion is
already implicit in Leibniz' equality. More recently, the idea was systematically applied
to von Plato's treatment of constructive geometry (von Plato 1995). This conforms to the
view of mathematical modelling of reality up to the precision of measuring instruments.
It is thus quite natural to define separability with some measure d:

X 6= Y =def dXY > 0.
Remark that if d is an ultrametric, i.e. if dXX = 0 and dXZ >= max{dXY, dY Z}, then
separability is an apartness relation, that is: ~X 6= X and X 6= Z ) 8Y X 6= Y . Y 6= Z
and its opposite (i.e. equality) is by construction an equivalence relation. This gives a general methodology for constructive mathematical modelling, from measure to separability
to equality.

5. Applications and further investigations
The formalism of guarded combinators is extremely simple, but powerful, since it combines in one notion combinatory logic and recursion (as opposed to indirectly coding up
recursion by a fixpoint combinator). Furthermore it accomodates (mutually recursive)
definitions. It has the flavor of machine code, with combinators playing the role of program addresses, and parameterization the role of register transfer. The notion of guard
gives to its execution a dataflow flavor: at each combinator invocation, when enough
arguments are provided for it to fire, one grain of information is computed.

This formalism is thus a good candidate for a sort of basic programmming language
for communicating processes: overall computation may be infinite, but no process may
loop without producing information, in sharp contrast to pure *-calculus, or non-guarded
recursion. For instance, it would be interesting to investigate closely in what way it relates
to applicative programming languages proposed for describing reactive processes. Lustre
is a particularly good candidate. Recently, Caspi and Pouzet have shown that a functional
extension to Lustre could be implemented in a kernel of recursively defined primitives
for stream manipulations (Caspi and Pouzet 1995). This kernel can be represented in a
rather direct way as a set of regular combinators.

Many further investigations are needed to make practical such an application. For
instance, there are several alternative ways to represent data structures or more complex

G. Huet 10
control structures. An exemple is given in (Huet and Laulh`ere 1997) which considers the
encoding of finite-state transducers as regular B"ohm trees.

The algorithmic aspects of the decision procedure remain to be investigated. If no
constraint is put on the way combinators mutually recurse, in the worst case the number
of parameters of such calls may be of the same order as the size of the system, in
which case the algorithm may have exponential behaviour. If mutual recursion is checked
with further devices, such as local sections with hierarchical scoping we may hope to
improve the bounds and obtain an algorithm which will scale up to realistic sizes. Sharing
techniques from BDD technology may also prove useful in this context.

Finally, application of this formalism to typed systems, in particular to proof assistants where B"ohm trees may represent sequent calculus partial proofs, in the manner of
(Herbelin 1995), remains to be investigated. In particular, the Extensionality rule needs
to be constrained (for instance with a notion of j-long normal form).

Acknowlegment. We thank Martin Abadi and Gilles Dowek for their judicious remarks.

References
H. Barendregt. The Lambda-Calculus: Its Syntax and Semantics. North-Holland (1980).
C. B"ohm. Alcune propriet`a delle forme fi - j-normali nel * - K-calcolo. Pubblicazioni

dell'Istituto per le Applicazioni del Calcolo N. 696, Roma, 1968.
C. B"ohm, M. Dezani-Ciancaglini, P. Peretti and S. Ronchi della Rocca. A discrimination algorithm inside * - fi-Calculus. Theoretical Computer Science 8 (1979), 271-291.
C. B"ohm, A. Piperno and E. Tronci. Solving equations in Lambda-Calculus. In Logic Colloquium'88, Eds Ferro, Bonotto, Valentini and Zanardo, North-Holland (1989).
P. Caspi and M. Pouzet. A functional extension to Lustre. International Symposium on Languages for Intentional Programming, Sydney, May 1995.
M. Coppo, M. Dezani-Ciancaglini and S. Ronchi della Rocca. (Semi-)separability of finite sets

of terms in Scott's D1 models of the *-calculus. In Proc. 5th ICALP, Eds G. Ausiello and
C. B"ohm, LNCS 62 (1978), 142-164.
C. Coquand and T. Coquand. On the definition of reduction for infinite terms. C. R. Acad. Sci.

Paris, t. 323, S'erie I, p. 553-558 (1996).
B. Courcelle, G. Kahn et J. Vuillemin. Algorithmes d''equivalence et de r'eduction `a des expressions minimales dans une classe d''equations r'ecursives simples. Proceedings ICALP 74,
Springer-Verlag.
R. David and K. Nour. Une preuve syntaxique de l''equivalence op'erationnelle de deux *-termes.

Private communication.
E. Gim'enez. Codifying guarded definitions with recursive schemes. Proceedings of the 1994

Workshop on Types for Proofs and Programs, LNCS 996 (1995) 39-59. Extended version of
the paper available by ftp at lip.ens-lyon.fr:/pub/Rapports/RR/RR95/RR95-07.ps.Z.
E. Gim'enez. Co-inductive types in Coq. Documentation included in the release of Coq V6.1.

Available by ftp at ftp.inria.fr:INRIA/Projects/coq/coq/V6.1.beta.
H. Herbelin. S'equents qu'on calcule : de l'interpr'etation du calcul des s'equents comme calcul de

*-termes et comme calcul de strat'egies gagnantes. Th`ese, U. Paris 7, 1995.
J. R. Hindley and J. P. Seldin. Introduction to Combinators and *-Calculus. Cambridge University Press.

RBT 11
G. Huet. An analysis of B"ohm's Theorem. In To C. B"ohm: Essays on Lambda-Calculus and

Functional Programming. S. Ronchi della Rocha, M. Dezani-Ciancaglini and M. V. Zilli (eds.).
Also Theoretical Computer Science, 121 (1993) pp. 145-167.
G. Huet and J. M. Hullot. Proofs by Induction in Equational Theories With Constructors. JCSS

25,2 (1982) 239-266.
G. Huet and H. Laulh`ere. Finite-state Transducers as Regular B"ohm Trees. Proceedings of

TACS'97, Sendai, Japan (Sept. 1997).
J. J. L'evy. B"ohm trees and Extensionality. Private communication (1993).
A. Pitts. A Co-induction Principle for Recursively Defined Domains. Theoretical Computer

Science 124 (1994), 195-219.
von Plato. The axioms of constructive geometry. Annals of Pure and Applied Logic 76 (1995)

169-200.
C. Wadsworth. The relation between computational and denotational properties for Scott's

D1-models of the lambda calculus. SIAM J. Comput. 5 (1976), 488-521.