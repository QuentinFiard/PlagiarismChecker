

Scalable Shape Analysis For Systems Code

Hongseok Yang1, Oukseh Lee2, Josh Berdine3, Cristiano Calcagno4,Byron Cook

3, Dino Distefano1, and Peter O'Hearn1

1 Queen Mary, Univ. of London 2 Hanyang University, Korea

3 Microsoft Research 4 Imperial College

Abstract. Pointer safety faults in device drivers are one of the leading
causes of crashes in operating systems code. In principle, shape analysis
tools can be used to prove the absence of this type of error. In practice,
however, shape analysis is not used due to the unacceptable mixture
of scalability and precision provided by existing tools. In this paper we
report on a new join operation t# for the separation domain which aggressively abstracts information for scalability yet does not lead to false error
reports. t# is a critical piece of a new shape analysis tool that provides an
acceptable mixture of scalability and precision for industrial application.
Experiments on whole Windows and Linux device drivers (firewire, pcidriver, cdrom, md, etc.) represent the first working application of shape
analysis to verification of whole industrial programs.

1 Introduction
Pointer safety faults in device drivers are one of the leading causes of operatingsystem crashes. The reasons for this are as follows:

- The average Windows or Linux computer has numerous (i.e. >15) devicedrivers installed,
- Most device drivers manage relatively complex combinations of shared singly-and doubly-linked lists,
- Device drivers are required to respect many byzantine invariants while ma-nipulating data structures (e.g. pieces of data structures that have been

paged out can only be referenced at low thread-priority). This results incomplex and nonuniform calling conventions, unlike typical benchmark code.

By pointer safety we mean that a program does not dereference null or adangling pointer, or produce a memory leak. In principle a shape analysis tool
can be used to prove the absence of pointer safety violations: shape analysis isa heap-aware program analysis with accurate handling of deep update. Furthermore, device drivers are small (e.g. <15k LOC) and usually do not use trees orDAGs--thus making device drivers the perfect application for shape analysis.

So, why aren't shape analysis tools regularly applied to device drivers? Thereason is that today's shape analysis tools are either scalable, or precise, but
not both. Numerous papers have reported on the application of accurate shapeanalysis to small examples drawn from real systems code; other papers have

Program LOC Sec MB Memory leaks Dereference errors False error rate
scull.c 1010 0.36 0.25 1 0 0%
class.c 1983 8.21 7.62 2 1 0%
pci-driver.c 2532 0.97 1.72 0 0 0%
ll rw blk.c 5469 887.94 485.87 3 1 0%
cdrom.c 6218 103.26 71.52 0 2 0%
md.c 6635 1585.69 847.63 6 5 0%
t1394Diag.c 10240 135.05 68.81 33 10 0%

Table 1. Results with the t# extension of SpaceInvader on Windows and Linux device
drivers. Experiments were performed on an Intel Core Duo 2.0GHz with 2GB. Each error found was confirmed manually. Errors in the Windows device driver (t1394Diag.c)
were confirmed by the Windows kernel team. The time and space columns contain the
numbers for the analysis of fixed versions of the drivers (and so report time to find
proofs of pointer safety).

reported on very imprecise analysis on large code bases. The verification of wholeindustrial programs, however, requires both.

Towards the elusive goal of finding a scalable and precise analysis, in thispaper we describe a new join operation, t# , for shape analysis tools based on the
separation domain [10, 17, 4]. t# provides a mixture of scalability and precisionsufficient for the problem of proving pointer safety of whole industrial device
drivers. A join operation (in the terminology of abstract interpretation [9]) takesa disjunction of two abstract states, each of which describes (in our setting) a
set of concrete heaps that may arise during program execution. t# attempts toconstruct a common generalization of the states. In case the attempt succeeds (t#
is a partial join operator) the generalization subsequently replaces the originaldisjunction, leading to fewer cases to consider during the shape analysis.

In order to demonstrate the scalability and accuracy of t# , we have imple-mented it in our shape analysis tool

SpaceInvader, together with an abstractmodel of the operating system environment that we have developed. Then, we

have applied the resulting tool to numerous Windows and Linux device drivers.

2 Experiments
Before describing the technical details of t# , we first present the results of anexperimental evaluation that demonstrates its scalability and precision. Table 1
displays the results of experiments with the t# extension of SpaceInvader onseven device drivers. Each of the drivers manipulates multiple, sometimes nested,
sometimes circular, linked lists. One driver, t1394Diag.c, is the IEEE 1394(firewire) driver for the Windows operating system. The drivers

pci-driver.c,
ll rw blk.c, cdrom.c and md.c are from an industrial version of EmbeddedLinux, given to us by ETRI. The driver

class.c is from a standard Linux dis2

tribution, and scull.c is a Linux char driver used in the experiments in [7].1Each of these drivers is analyzed in the context of environment code which nondeterministically generates input data structures, and calls the driver's dispatchroutines repeatedly. In essence, each driver is supplied with a particular precondition (expressed as C code, as in [7]) but the model of system calls can bereused from driver to driver.

During our experiments SpaceInvader was used in a stop-first configura-tion, where the analyzer halts if it cannot prove that a dereferencing operator
is safe or if it cannot prove that a cell is reachable. When we encountered bugswe would fix them, and then run our tool again. The time and space columns
in Table 1 report the numbers for the analysis of our bug-fixed versions of thedrivers. Note that, during our experiments, no false errors were found. Also, note
that for the fixed drivers SpaceInvader proved pointer safety. No known toolwith scalability reported to programs up to 10k LOC can match that precision.

Caveats. Device drivers often use circular doubly-linked lists. The first caveat isthat, in several cases, we modified the examples in order to operate over singlylinked lists, in order to aid our analysis. Pointer safety can often be provedusing singly-linked semantics even though the code is designed to operate over
doubly-linked lists (it is rare for code to actually make use of the back pointers).Second, there is a significant caveat regarding arrays.

SpaceInvader currentlypresumes memory safety of arrays, by returning a nondeterministic value for any

array dereferencing. The treatment of pointer safety can still be sound undersuch an assumption, and in the (slightly modified) Linux drivers our analyzer
encountered no false alarms. However, the 1394 device driver contains arraysof pointers, which are beyond what our method can handle: we modified the
code such that those arrays have size 1 and can be treated as pointer variables.This, of course, is just one instance of the fact that the problems of analyzing
arrays and pointers are not independent. We regard this issue as an avenuefor interesting future work. Finally, note that

SpaceInvader currently onlyimplements shape analysis for sequential programs, whereas device drivers of

course are multi-threaded. As reported in [12], a sequential shape analysis toolsuch as

SpaceInvader can be used to find and then verify resource invariantsfor device drivers, thereby proving pointer safety for the concurrent program.

However, we emphasize that developing a scalable, precise shape analysis forconcurrent programs is an open problem; only very recently, some interesting
ideas such as [12, 18, 5] have been proposed, which give promising new lines ofattack, but on which further, especially experimental, work is needed.

3 Abstract States and Setting
In this section we describe the abstract states that SpaceInvader analysisoperates over. In the next section we will describe the details of t# . Due to space

1 This is a modified version of the Linux scull driver, where arrays are assumed to be

of size 1.

3

constraints we will assume that the reader is somewhat familiar with the basicsof program analysis and shape analysis.

SpaceInvader operates over abstract states expressed as separation logicformulae. Following [4, 10, 17], we call these abstract states symbolic heaps. The
symbolic heaps q, are defined by the following grammar:

e ::= x | x0 | 0 P ::= * * *
\Pi  ::= \Pi  ^ \Pi  | e=e | e6=e | true \Sigma  ::= \Sigma  * \Sigma  | emp | P | true

q ::= err | \Pi  ^ \Sigma 

A symbolic heap q can be err, denoting the error state, or it has the form \Pi  ^ \Sigma ,where

\Pi  and \Sigma  describe properties of variables and the heap, respectively. Theseparating conjunction

\Sigma 0 * \Sigma 1 holds for a heap if and only if the heap can besplit into two disjoint parts, one making

\Sigma 0 true and the other making \Sigma 1 true.
emp means the empty heap, and true holds for all heaps. The primed variables
x0 in a symbolic heap are assumed to be (implicitly) existentially quantified.P is a collection of basic predicates. One instantiation is

k ::= PE | NE P ::= (e 7! e) | ls k e e
Here, e 7! f means a heap with only one cell e that stores f . The list segmentpredicate

ls k e0 e1 denotes heaps containing one list segment from e0 to e1 only.This list segment starts at cell

e0 and its last cell stores e1. The list is possiblyempty if
k = PE; otherwise (i.e., k = NE), the list is not empty. The meanings ofthe segment predicates can be understood in terms of the definitions

ls PE e f () (e = f ^ emp) . (ls NE e f ),
ls NE e f () (e 7! f ) . (9y0. e 7! y0 * ls NE y0 f ).

These definitions are not within the shape domain (e.g., the domain does nothave .), but are mathematical definitions in the metalanguage, used to verify
soundness of operations on the predicates. Note that there is no problem withthe recursion in

ls NE : the recursive instance is in a positive position, and thedefinition satisfies monotonicity properties sufficient to ensure a solution.

A different instantiation of P gives us a variation on [3].2

k ::= PE | NE P ::= (e 7!~f : ~e) | ls k OE e e
Here, the points-to predicate (e 7!~f : ~e) is for records with fields ~f, and OE is abinary predicate that describes the shape of each node in a list. The definition
of the nonempty list segment here is

ls NE OE e f () OE(e, f ) . (9y0. OE(e, y0) * ls NE y0 f)
and the OE predicate gives us a way to describe composite structures.

2 This instantiation assumes the change of the language where we have heap cells with

multiple fields, instead of unary cells.

4

For example, if f is a field, let OEf be the predicate where OEf(x, y) is x 7! f : y.Then using

OEf as OE, the formula ls NE OE e f describes lists linked by the f field.The formula

(x 7! f : y0, g : z0) * ls PE OEf y0 x * ls PE OEg z0 x
describes two circular linked lists sharing a common header, where one list uses ffor linking and the other uses

g. Finally, if OE itself describes lists, as when OE(x, y)is the predicate 9
x0. (x 7! g : x0, f : y) * ls PE OEg x0 0, then ls NE OE e f describes anonempty linked list where each node points to a possibly empty sublist, and

where the sublists are disjoint. Combinations of these kinds of structures, nestedlists and multiple lists with a common header node, are common in device drivers.

The experiments in this paper are done using this second instantiation of P. Itis similar to the domain from [3], but uses predicates for both possibly empty and
necessarily nonempty list segments. The reader might have noticed that having
ls PE does not give us any extra expressive power: its meaning can be representedusing two abstract states, one a

emp and the other a ls NE. However, having ls PEimpacts performance, as it represents disjunctive information, succinctly.

SpaceInvader implements a context sensitive, flow sensitive analysis, us-ing a variant of the RHS interprocedural dataflow analysis algorithm [22, 11]. It
employs join to make procedure summaries smaller. Following [21, 23], SpaceInvader also passes only the reachable portion of the heap to a procedure andaggressively discards intermediate states. The mixture of these optimizations--

join, locality, discarding states--is key; turning off any one of the optimizationsresults in the analysis using more than the 2GB RAM on at least one of the
examples, causing disk thrashing, and then leading to timeout (which we set at90min). Thus we do not claim that t# alone is the root cause for the performance
found in Table 1, but it is a critical ingredient (c.f., $4.3).

4 A Join for Symbolic Heaps
We now discuss t# . We begin with an intuitive explanation. Later, in $4.1, weprovide a formal definition.

In the framework of abstract interpretation [9], a join operator takes two sym-bolic states in a program analysis and attempts to find a common generalization.
To see the issue, consider the program

x=0; while (NONDET) { d=malloc(sizeof(Node)); d->next=x; x=d; }
which nondeterministically generates acyclic linked lists. When we run our ba-sic analysis algorithm, without t# , it returns three symbolic heaps at the end:

(ls NE x 0) . (x 7! 0) . (x = 0 ^ emp). (Here, for simplicity in the presentation, wehave elided the

OE parameter of the ls predicates.)Now, if you look at the first two disjuncts there is evident redundancy: If

you know that either x points to 0 or a nonempty linked list, then that is thesame as knowing you have a nonempty linked list. So, t# replaces the first two

5

NO JOIN JOIN
Program NE PE NE PE
onelist create.c 3 3 2 1
twolist create.c 9 9 4 1
firewire create.c 3969 3087 32 1

Table 2. Creation routines. Reports the number of states in the postcondition with
join turned on or off, and the base list predicates chosen to be either nonempty ls only
(NE), or both nonempty and possibly empty ls (PE).

disjuncts with just the list segment formula, giving us (ls NE x 0) . (x = 0 ^ emp).It is possible to take yet a further step, using the notion of a possibly empty list
segment. If you know that either you have a nonempty list, or that x = 0 ^ emp,then that is the same as having

ls PE x 0, and t# produces this formula from theprevious two. Thus, using t# we have gone from a position where we have three

disjuncts in our postcondition, to where we have only one. The saving that thispossibly gives us is substantial, especially for more complicated programs or
more complicated data structures.

Table 2 gives an indication. onelist create.c in the table is the C programabove that nondeterministically creates a list and

twolist create.c is a simi-lar C program that creates two disjoint linked lists.

firewire create.c is theenvironment code we use in the analysis of the 1394 firewire driver: it creates

five cyclic linked lists, which share a common header node, with head pointersin some of the lists, and with nested sublists.

There are two points to note. The first is just the great saving, in number ofstates (e.g., from 3087 down to 1). This is particularly important with environment code, like firewire create.c, which is run as a harness to generate heapson which driver routines will subsequently be run. The second is the distinction
between NE and PE. In the table we keep track of two versions of our analysis,one where

ls NE is the only list predicate used by the analysis, and another wherewe use both

ls NE and ls PE.

This illustration shows some of the aspects of t# , but not all. In the illustrationt# worked perfectly, never losing any information, but this is not always the case.

Part of the intuition is that you generalize points-to facts by list segments whenyou can. So, considering

y 7! 0 * (ls NE x 0) . (ls NE y 0) * x 7! 0, t# will produce(
ls NE y 0) * (ls NE x 0). This formula is less precise than the disjunction, in that itloses the information that one or the other of the lists pointed to by

x and y haslength precisely 1. Fortunately, it is unusual for programs to rely on this sort of

disjunctive information.

We have tried to keep the intuitive description simple, but the truth is thatt# must deal with disequalities, equalities, and generalization of "nothing" by

ls PE in ways that are nontrivial. It also must deal with the existential (primed)

6

variables specially. In the end, for instance, when t# is given

q0 j x6=y ^ (ls NE x 0 * y 7! 0) and
q1 j x6=y ^ x06=y ^ (x 7! x0 * ls NE y x0 * ls NE x0 0),

it will produce x6=y ^ ls NE x v0 * ls NE y v0 * ls PE v0 0. Now we turn to the formaldefinition.

4.1 Formal Definition
In this section, we define the (partial) binary operator t# on symbolic heaps,considering only the simple linked lists (the first instantiation of P). The t# for

nested lists will be described in the next section.t# works in two stages. Suppose that it is given symbolic heaps (

\Pi 0 ^ \Sigma 0) and(
\Pi 1 ^ \Sigma 1) that do not share any primed variables. In the first stage, t# constructs
\Sigma  and a ternary relation ffl0 on expressions such that

(1) 8i 2 {0, 1}. i^{ei=x0 | (e0, e1, x0) 2 ffl0}j ^ \Sigma i =) \Sigma .
Intuitively, this condition means that \Sigma  overapproximates both \Sigma 0 and \Sigma 1,and that

ffl0 provides witnesses of existential (primed) variables of \Sigma  for thisoverapproximation. For instance, if

\Sigma 0 j (ls NE x 0 * y 7! 0) and \Sigma 1 j (x 7! x0 *
ls NE y x0 * ls NE x0 0), then t# returns

(2) \Sigma  j ls NE x v0 * ls NE y v0 * ls PE v0 0, ffl0 j {(0, x0, v0)}.
In this case, the condition (1) is

0=v0 ^ (ls NE x 0 * y 7! 0) =) (ls NE x v0 * ls NE y v0 * ls PE v0 0)
x0=v0 ^ (x 7! x0 * ls NE y x0 * ls NE x0 0) =) (ls NE x v0 * ls NE y v0 * ls PE v0 0).

This means that both \Sigma 0 and \Sigma 1 imply \Sigma  when 0 and x0 are used as witnessesfor the (implicitly) existentially quantified variable

v0 of \Sigma .After constructing
\Sigma  and ffl0, the t# operator does one syntactic check on ffl0, inorder to decide whether it has lost crucial sharing information of input symbolic

heaps. Only when the check succeeds does t# move on to the second stage. (Wewill describe the details of the first stage, including the check on

ffl0, later.)In the second stage, the t# operator computes an overapproximation

\Pi  of \Pi 0and
\Pi 1:

\Pi 

def= ^ 0@{e=f | e=f has no primed vars, it occurs in \Pi 0 and \Pi 1}[ {e6=f | e6=f has no primed vars, it occurs in \Pi 

0 and \Pi 1}[ {

x06=0 | (e0, e1, x0) 2 ffl0 and ei6=0 occurs in \Pi i} 1A

.

This definition says that t# keeps an equality or disequality in \Pi  if it appearsin both

\Pi 0 and \Pi 1 and does not contain any primed variables, or if it is of theform
x06=0 and its witness ei for the i-th symbolic heap is guaranteed to be dif-ferent from 0. Both cases are considered here in order to deal with programming

7

patterns found in device drivers. For instance, x06=0 in the second case shouldbe included, because some drivers store 0 or 1 to a cell, say,

x, depending onwhether a linked list
y is empty, and subsequently, they use the contents of cell
x to decide the emptiness of the list y. The computed \Pi  and the result \Sigma  of thefirst stage become the output of t# .

Computation of \Sigma , ffl0: We now describe the details of the first stage of t# . Forthis, we need a judgment

\Sigma 0, \Sigma 1, ffl  \Sigma , ffl0, ffi0, ffi1
where ffii is a binary relation on expressions in \Sigma i. This judgment signifies that
\Sigma 0 and \Sigma 1 can be joined to give \Sigma  and a ternary relation ffl0 for witnesses.Furthermore, the judgment ensures that

ffl0 extends the given ffl, and that ffiirecords (
ei, fi) of all ls k ei fi in \Sigma i that have been generalized to a possiblyempty list during the join; these

ffii components are used later to decide whetherthis join to
\Sigma  has lost too much information and should, therefore, be discarded.For instance, we have

(ls NE x 0 * y 7! 0), (x 7! x0 * ls NE y x0 * ls NE x0 0), ; (

ls NE x v0 * ls NE y v0 * ls PE v0 0), {(0, x0, v0)}, ;, {(x0, 0)}.

which means that \Sigma 0 j (ls NE x 0 * y 7! 0) and \Sigma 1 j (x 7! x0 * ls NE y x0 * ls NE x0 0)are joined to

\Sigma  j (ls NE x v0 * ls NE y v0 * ls PE v0 0). The judgment also says that v0in
\Sigma  corresponds to 0 in \Sigma 0 and x0 in \Sigma 1. Note that the ffi1 component of thejudgment is {(

x0, 0)}, and it reflects the fact that ls NE x0 0 in \Sigma 1 is generalizedto a possibly empty list and results in

ls PE v0 0 in \Sigma .The derivation rules of the  predicate are given in Figure 1. The first two

rules deal with the cases when emp or true appear in both \Sigma 0 and \Sigma 1. The thirdrule has to do with generalizing two lists or abstracting a points-to to a list,
and the last two rules are about generalizing (or synthesizing) possibly emptylists. Note that when possibly empty lists are introduced by the last two rules,
the appropriate ffii component is extended with the information about the lspredicate of

\Sigma i that supports this generalization.The first stage of t# works as follows:

1. t# searches for \Sigma , ffl0, ffi0, ffi1 for which \Sigma 0, \Sigma 1, ;  \Sigma , ffl0, ffi0, ffi1 can be derivedusing the rules in Figure 1. This proof search proceeds by viewing rules

backward from conclusion to premise. It searches for a rule whose conclusionhas the left hand side matching with

\Sigma 0, \Sigma 1, ffl and whose side condition issatisfied with this matching. Once such a rule is found, the search modifies

\Sigma 0, \Sigma 1, ffl such that they fit the left hand side of the  judgment in thepremise. The search continues with this modified

\Sigma 0, \Sigma 1, ffl, until it hits thebase case (i.e., the first rule in Figure 1). Figure 2 shows an example proof

search. If the search fails, the join fails.2. t# checks whether for all (

e0, e1, e), (f0, f1, f ) 2 ffl0 [ {(e, e, e) | e not primed var}and all
i 2 {0, 1},\Gamma 

ei = fi ^ ei 6= 0 =) (e1-i, f1-i) 2 eq(ffi1-i)\Delta ,

8

A(e, f) ::= (e 7! f) | ls k e f EQ = {(e, e, e) | e is not a primed var}

PE t NE = NE t PE = PE t PE = PE NE t NE = NE
A(e, f) t A(e, f) = A(e, f) (ls k0 e f) t (ls k1 e f) = (ls (k0 t k1) e f)

(e 7! f) t (ls k e f) = (ls k e f) t (e 7! f) = ls k e f

emp, emp, ffl  emp, ffl, ;, ; emp

\Sigma 0 , \Sigma 1 , ffl  \Sigma  , ffl0 , ffi0 , ffi1
true * \Sigma 0, true * \Sigma 1, ffl  true * \Sigma , ffl0, ffi0, ffi1 true

\Sigma 0 , \Sigma 1 , ext(ffl, f0, f1, f)  \Sigma  , ffl0 , ffi0 , ffi1
A0(e0, f0) * \Sigma 0 , A1(e1, f1) * \Sigma 1 , ffl  (A0(e, f) t A1(e, f)) * \Sigma  , ffl0 , ffi0 , ffi1 match

(when (e0, e1, e) 2 (ffl [ EQ) ^ combffl(f0, f1) = f)

\Sigma 0 , \Sigma 1 , ext(ffl, f0, e1, f)  \Sigma  , ffl0 , ffi0 , ffi1
(ls k e0 f0) * \Sigma 0 , \Sigma 1 , ffl  (ls PE e f) * \Sigma  , ffl0 , ffi0[(e0, f0) , ffi1 PE-left

(when (e0, e1, e) 2 (ffl [ EQ) ^ e1 62 MayAlloc(\Sigma 1) ^ combffl(f0, e1) = f)

\Sigma 0 , \Sigma 1 , ext(ffl, e0, f1, f)  \Sigma  , ffl0 , ffi0 , ffi1
\Sigma 0 , (ls k e1 f1) * \Sigma 1 , ffl  (ls PE e f) * \Sigma  , ffl0 , ffi0 , ffi1[(e1, f1) PE-right

(when (e0, e1, e) 2 (ffl [ EQ) ^ e0 62 MayAlloc(\Sigma 0) ^ combffl(e0, f1) = f)

Here (a) we write X [x instead of X [{x}; (b) ext(ffl, e0, e1, e) is (ffl[(e0, e1, e))-EQ; (c)
MayAlloc(\Sigma ) is the set of expressions that appear on the left hand side of a points-to
predicate or as a first expression argument of ls in \Sigma ; (d) combffl is a function defined as:

combffl(e0, e1) = 8<:

e if (e0, e1, e) 2 ffl for some e
e0 if e0=e1 and e0 is not a primed var
x0 for some x0 62 FV(ffl, e0, e1) otherwise

Fig. 1. Rules for 

where eq(ffii) is the least equivalence relation containing ffii. Intuitively thiscondition amounts to the following: consider

\Sigma 0 and \Sigma 1 viewed as graphswith edges for 7! and
ls, and then identify vertices according to the returned
ffi's, then they should be isomorphic via ffl0[{(e, e, e) | e not primed var}. Onlywhen the check succeeds does the first stage of t# return

\Sigma , ffl0. For instance,given
\Sigma 0 j (x 7! y) * ls NE y 0 and \Sigma 1 j ls NE x 0 * (y 7! 0), the proof search inthe previous step succeeds with

\Sigma  j ls NE x y0 * ls NE y 0, ffl0 j {(y, 0, y0)}, ffi0 j ffi1 j ;.
However, the final check on ffl0 fails, since y in the \Sigma 0 symbolic heap is relatedto both 0 (by

ffl0) and y (by default) in \Sigma 1. Thus, the join fails. Note that thefailure is desired in this case since

\Sigma 0 and \Sigma 1 describe heaps with differentshapes.

9

emp , emp , ffl0  emp , ffl0 , ; , ; emp
emp , (ls NE x0 0) , ffl0  ls PE v0 0 , ffl0 , ; , {(x0, 0)} PE-right
(y 7! 0) , (ls NE y x0 * ls NE x0 0) , ffl0  ls NE y v0 * ls PE v0 0 , ffl0 , ; , {(x0, 0)} match

(ls NE x 0 * y 7! 0) , (x 7! x0 * ls NE y x0 * ls NE x0 0) , ;

ls NE x v0 * ls NE y v0 * ls PE v0 0 , ffl0 , ; , {(x0, 0)}

match

Fig. 2. Example proof search, where ffl0 = {(0, x0, v0)}
4.2 Composite Structures
In order to handle composite structures, such as nested lists, we adjust thedefinition of t# in the previous section. Specifically, we change the rules for the 

relation in Figure 1. Firstly, we modify the third rule, which is used to generalizetwo

ls or points-to predicates, such that it can deal with points-to predicates withmultiple fields

~f and a parameterized list-segment predicate. Each of the new

rules, shown in Figure 3, corresponds to one of the four cases of A0 t A1 inthe third rule of Figure 1. The first rule combines two points-to predicates with

multiple fields, by extending ffl with the targets of all the fields. The other rulesgeneralize two list-segment predicates (the second rule) or a list segment and
its length-one instance (the third and fourth rules), by looking inside the twoavailable descriptions of list nodes (denoted

OE0 and OE1), and chooses the moregeneral one (denoted
OE0 t OE1). In the third rule of Figure 3, the first input

symbolic heap is decomposed into OE0(e0, f0)[~e/~x0] * \Sigma 0 using a frame inference
algorithm [4] to subtract a symbolic heap OE0(e0, f0)[~e/ ~x0] such that OE0 can bet-joined with

OE1, leaving \Sigma 0 as a remainder. And similarly in the fourth rule.Secondly, we change the remaining rules in Figure 1 such that they work with

parameterized list-segment predicates. We simply replace all unparameterizedlist-segment predicates

ls k e e0 in the rules by parameterized ones ls k OE e e0.After these changes, t# works for composite structures. For instance, let

OEd(x, y) j (x 7! d:y), OE(x, y) j 9x0. (x 7! d:x0, f:y) * (ls PE OEd x0 0), and (x, y) j(

x 7! d:0, f:y). Given two symbolic heaps

(ls NE OE x y) * (y 7! d:y0, f:0) * (y0 7! d:0) . (ls PE  x y) * (ls PE OE y 0),
the t# generalizes the list segments from x to y to a possibly empty OE-shapedlist since

(x, y) ` OE(x, y). Then, it views the two points-to facts on y and y0as an instantiation

OE0(x, y)[y0/x0] of OE0(x, y) j 9x0. (x 7! d:x0, f:y) * (x0 7! d:0),combines these facts with the list

y since OE0(x, y) ` OE(x, y), and produces

ls PE OE x y * ls PE OE y 0.

4.3 Incorporating t# into the analysis
SpaceInvader incorporates t# together with RHS [22], a now-standard inter-procedural analysis algorithm. RHS associates a set of symbolic heaps with each

10

OE0 t OE1 = 8<:

OE0 if OE1(x, y) ` OE0(x, y) where OE0(x, y) ` OE1(x, y) denotes
OE1 if OE0(x, y) ` OE1(x, y) a call to a sound theorem prover
undefined otherwise for fresh x, y

\Sigma 0, \Sigma 1, ext(ext(ffl, f0, f1, f), g0, g1, g)  \Sigma , ffl0, ffi0, ffi1
(e0 7! f:f0, g:g0) * \Sigma 0, (e1 7! f:f1, g:g1) * \Sigma 1, ffl  (e 7! f:f, g:g) * \Sigma , ffl0, ffi0, ffi1 match1

(when (e0, e1, e) 2 (ffl [ EQ) ^ combffl(f0, f1)=f ^ combffl(g0, g1)=g)

\Sigma 0, \Sigma 1, ext(ffl, f0, f1, f)  \Sigma , ffl0, ffi0, ffi1
ls k0 OE0 e0 f0 * \Sigma 0, ls k1 OE1 e1 f1 * \Sigma 1, ffl  ls (k0tk1) (OE0tOE1) e f * \Sigma , ffl0, ffi0, ffi1 match2

(when (e0, e1, e) 2 (ffl [ EQ) ^ OE0 t OE1 is defined ^ combffl(f0, f1) = f)

\Sigma 0, \Sigma 1, ext(ffl, f0, f1, f)  \Sigma , ffl0, ffi0, ffi1
OE0(e0, f0)[~e/~x0] * \Sigma 0, (ls k OE1 e1 f1) * \Sigma 1, ffl  (ls k (OE0tOE1) e f) * \Sigma , ffl0, ffi0, ffi1 match3

(when (e0, e1, e) 2 (ffl [ EQ) ^ OE0 t OE1 is defined ^ combffl(f0, f1) = f)

\Sigma 0, \Sigma 1, ext(ffl, f0, f1, f)  \Sigma , ffl0, ffi0, ffi1
(ls k OE0 e0 f0) * \Sigma 0, OE1(e1, f1)[~e/~x0] * \Sigma 1, ffl  (ls k (OE0tOE1) e f) * \Sigma , ffl0, ffi0, ffi1 match4

(when (e0, e1, e) 2 (ffl [ EQ) ^ OE0 t OE1 is defined ^ combffl(f0, f1) = f)

Here -[~e/~x0] in OE(e, f)[~e/~x0] is the substitution of all the existentially quantified
primed variables ~x0 in OE(e, f) by ~e.

Fig. 3. Sample rules for . Composite structure case.

program point, which represents the disjunction of those heaps. t# is applied toreduce the number of disjuncts in those sets.

Given a set of symbolic heaps at a program point, the analysis takes twosymbolic heaps in the set and applies t# to them. If the application succeeds, the
result of the join replaces those heaps. Otherwise, those two symbolic heaps arereturned to the set.

In order to maintain precision in the analysis, we restrict the application oft# to only those program points where controlling the number of disjuncts is crucial. They are (a) the beginning of loops, (b) the end of conditional statementswhen those statements are not inside loops, (c) the call sites of procedures, and
(d) the exit points of procedures. The first case accelerates the analysis of theusual fixed-point computation for loops, and the second prevents the combinatorial explosion caused by a sequence of conditional statements; for instance,the procedure

register cdrom in cdrom.c uses 25 conditional statements toadjust values of a structure for cdrom, which makes the analysis without join

suffer from a serious performance problem. The other two cases aim for comput-ing small procedure summaries; the third reduces the number of input symbolic
heaps to consider for each procedure, and the last reduces the analysis resultsof a procedure with respect to each symbolic heap.

We have measured the effects of t# on the performance of SpaceInvader,using our seven driver examples. Table 3 reports the results of our measurements.

11

No Opt. Opt. except t# Opt. including t# , Opt. including t# ,
Program LOC (sec) (sec) with NE only (sec) with NE and PE (sec)
scull.c 1010 1.41 1.15 0.59 0.36
class.c 1983 X X 48.24 8.21
pci-driver.c 2532 X X 2.69 0.97
ll rw blk.c 5469 X X X 887.94
cdrom.c 6218 X X 193.01 103.26
md.c 6653 X X X 1585.69
t1394Diag.c 10240 X X 3415.76 135.05

Table 3. Experimental results on the effects of t# . Timeout (X) set at 90min. Experiments run on Intel Core Duo 2.0GHz with 2GB RAM. The "Opt. except t# " column
records the results of the analysis runs without t# nor possibly empty ls predicates, but
with two optimizations: discarding the intermediate analysis results and passing only
the reachable portion of the heap to a procedure. The next column contains the analysis time with these two optimizations and t# , but without possibly empty ls predicates.
The last column contains the analysis time with all the optimizations.

The third and fourth columns of the table record the time of analyzing the driverswithout using t# : without t# , we cannot analyze our example drivers except the
simplest one, scull.c. The next two columns concern a pivotal design decisionfor t# , looking at variations on the

ls predicate; the fifth column considers thenecessarily non-empty
ls predicate only, and the sixth column considers boththe necessarily non-empty and possibly empty

ls predicates. These experimentalresults confirm the benefit of using the
ls PE predicate in t# .

5 Related Work
Device driver verification has attracted considerable interest due to the realiza-tion that most OS failures arise from bugs in device drivers [8, 24, 2]. Tools like
Slam [2] and Blast [15] have been effectively applied in verification of propertiesof real device drivers, especially properties describing the calling conventions of
OS kernel APIs. Unfortunately these tools use coarse models of the heap; Slam,for example, assumes memory safety. Other tools are known to prove memory
safety, but with the restriction that the input programs do not perform dynamicmemory allocation (e.g. ASTR'EE [6]). Proving full memory safety (which includes array bounds errors as well as what we have termed pointer safety) ofentire systems programs is thus a more difficult problem than that considered
in this paper, or in work that concentrates on array bounds errors.Several papers report on the results of applying shape analysis to the source
code of substantial, real-world systems programs. The analysis in [14] has beenapplied to non-trivial code, but the abstract domain there is purposely much less
precise than here, and it could not be used to verify pointer safety of the devicedrivers that we consider. [7] includes an analysis of a restricted and modified
version of the Linux scull driver. Our analysis terminates on the modified scull

12

code (which they kindly supplied to us) in 0.36sec, where [7] terminated in9.71sec when using user-supplied assertions (which we did not use) to help the
analysis along. It is also worth mentioning [13], which uses slicing to removeheap-irrelevant statements. An earlier version of

SpaceInvader [3] analyzedseveral procedures from the 1394 driver used in Table 1. It timed out on an 1800

LOC subset of the driver, and this drove us to consider t# .

The very idea of a join operator is of course not novel, and many other joinshave been successfully applied in their application domain. The problem is always one of balancing precision and speed. The claim that t# does not lose toomuch precision is backed up with experimental results. t# is not unrelated to
other join operators that have been proposed in shape analysis [19, 1, 7]. For in-stance, Chang et al. define a partial join operator for separation logic formulas,
and Arnold [1] develops a notion of "loose embedding" in TVLA [16] which isin an intuitive sense related to our use of predicates for possibly-empty, rather
than only nonempty, lists. However, our t# is different in its detailed formula-tion; unlike Chang et al., we simplify symbolic heaps before applying t# , and
unlike Arnold and Manevich [19, 1], our t# keeps the structure of composite datastructures precisely. The latter difference, in particular, is crucial to verifying
the drivers.

Marron et al. reports on shape analyses of several Java programs of up to3705 LOC [20]. They use an aggressive join operator which always merges several

abstract states into one. Such a join operator would lead to many false alarmswhen applied to our device drivers (for example, when dealing with exceptional
conditions), and so is too imprecise for our goal of proving pointer safety.

6 Conclusions
This paper has presented the first application of shape analysis to a real-worldindustrial verification problem: proving pointer safety of entire Windows and
Linux device drivers. We have achieved this milestone by enhancing our separa-tion domain based shape analysis tool with a sophisticated new join operation,
t# . This paper has made two contributions: t# , and a demonstration that shapeanalysis can be scaled to real-world industrial verification problems. The second
contribution is, in a sense, the most important one. We hope, now that we knowthat whole device drivers can be accurately handled by today's shape analysis
tools, that future research papers on the subject will use device drivers and othersubstantial systems programs as a part of their experimental evaluations.

Acknowledgments. We would like to thank Viktor Vafeiadis for helpful discus-sions on the OCaml garbage collector. The London authors acknowledge the
support of the EPSRC. Lee was supported by Brain Korea 21. Distefano wassupported by a Royal Academy of Engineering research fellowship. O'Hearn was
supported by a Royal Society Wolfson Research Merit Award.

13

References

1. G. Arnold. Specialized 3-valued logic shape analysis using structure-based refinement and loose embedding. In SAS, pages 204-220, 2006.
2. T. Ball, E. Bounimova, B. Cook, V. Levin, J. Lichtenberg, C. McGarvey, B. Ondrusek, S. K. Rajamani, and A. Ustuner. Thorough static analysis of device drivers.
In EuroSys, 2006.
3. J. Berdine, C. Calcagno, B. Cook, D. Distefano, P. O'Hearn, T. Wies, and H. Yang.

Shape analysis of composite data structures. In CAV, 2007.
4. J. Berdine, C. Calcagno, and P. O'Hearn. Symbolic execution with separation

logic. In APLAS, 2005.
5. J. Berdine, T. Lev-Ami, R. Manevich, G. Ramalingam, and M. Sagiv. Thread

quantification for concurrent shape analysis. In CAV, 2008.
6. B. Blanchet, P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Min'e, D. Monniaux,

and X. Rival. A static analyzer for large safety-critical software. In PLDI, 2003.
7. B. Chang, X. Rival, and G. Necula. Shape analysis with structural invariant checkers. In SAS, 2007.
8. A. Chou, J. Yang, B. Chelf, S. Hallem, and D. R. Engler. An empirical study of

operating system errors. In SOSP, 2001.
9. P. Cousot and R. Cousot. Abstract interpretation: A unified lattice model for static

analysis of programs by construction or approximation of fixpoints. In POPL, 1977.
10. D. Distefano, P. O'Hearn, and H. Yang. A local shape analysis based on separation

logic. In TACAS, 2006.
11. A. Gotsman, J. Berdine, and B. Cook. Interprocedural shape analysis with separated heap abstractions. In SAS, 2006.
12. A. Gotsman, J. Berdine, B. Cook, and M. Sagiv. Thread-modular shape analysis.

In PLDI, 2007.
13. B. Guo, N. Vachharajani, and D. August. Shape analysis with inductive recursion

synthesis. In PLDI, 2007.
14. B. Hackett and R. Rugina. Region-based shape analysis with tracked locations. In

POPL, 2005.
15. T. Henzinger, R. Jhala, R. Majumdar, and K. McMillan. Abstractions from proofs.

In POPL, 2004.
16. T. Lev-Ami and M. Sagiv. TVLA: A system for implementing static analyses. SAS

2000.
17. S. Magill, A. Nanevski, E. Clarke, and P. Lee. Inferring invariants in Separation

Logic for imperative list-processing programs. In SPACE, 2006.
18. R. Manevich, T. Lev-Ami, G. Ramalingam, M. Sagiv, and J. Berdine. Heap decomposition for concurrent shape analysis. In SAS, 2008.
19. R. Manevich, M. Sagiv, G. Ramalingam, and J. Field. Partially disjunctive heap

abstraction. In SAS, 2004.
20. M. Marron, M. Hermenegildo, D. Kapur, and D. Stefanovic. Efficient contextsensitive shape analysis with graph based heap models. In CC, 2008.
21. P. O'Hearn, J. Reynolds, and H. Yang. Local reasoning about programs that alter

data structures. In CSL, 2001.
22. T. Reps, S. Horwitz, and M. Sagiv. Precise interprocedural dataflow analysis via

graph reachability. In POPL, 1995.
23. N. Rinetzky, J. Bauer, T. Reps, M. Sagiv, and R. Wilhelm. A semantics for

procedure local heaps and its abstractions. In POPL, 2005.
24. M. M. Swift, B. N. Bershad, and H. M. Levy. Improving the reliability of commodity operating systems. In SOSP, 2003.

14