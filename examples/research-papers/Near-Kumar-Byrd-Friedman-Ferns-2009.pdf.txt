

Bottom-Avoiding Streams
Joseph P. Near?, Ramana Kumar??, William E. Byrd, and Daniel P. Friedman

Indiana University, Bloomington, IN 47405, USA{

jnear,ramkumar,webyrd,dfried}@indiana.edu

Abstract. We present the first shallow embedding of ferns, stream-like
bottom-avoiding, shareable, and implicitly-parallel data structures proposed in 1979. Our implementation is written as a portable library written in a small subset of R6RS Scheme. Unlike the original conceptualization of ferns, our implementation is sequential but addresses most of the
issues that would appear in a parallel implementation. We also present
a non-trivial example showing the utility of ferns: a generalization of
standard logic combinators.

1 Introduction
We present the first shallow embedding of ferns [1], a shareable data structuredesigned to avoid divergence. Our implementation is written in Scheme and is
available as a portable R6RS Scheme [2] library. In addition to this implementa-tion, we also present an extended example demonstrating the power of ferns. In
this example we provide a bottom-avoiding generalization of stream-based logiccombinators.

In the early work of Friedman and Wise [3], the implementation of fernsassumed an arbitrary number of processors along with a proposed hardware
interlock-free store instruction. We model the parallelism that inspired the fernsconcept using preemptible computations on a single processor. Although the
single processor model doesn't capture all of the ramifications of the originalideas, our implementation reveals enough of the intricacies so that ferns can be
easily adapted to other architectures.Ferns are constructed with cons and

cons?, originally called frons [4], andaccessed by car

? and cdr?. Ferns built with cons? are like streams in thatthe evaluation of elements is delayed, permitting unbounded data structures. In

contrast to streams, the ordering of elements is also delayed: convergent valuesform the prefix in some unspecified order, while divergent values form the suffix.

The rest of the paper is as follows. In Section 2, we give examples of famil-iar recursive functions using ferns. In Section 3, we give an extended example
using ferns: a generalization of logic programming combinators. In Section 4we describe the promotion algorithm [3] that characterizes the necessary sharing properties of ferns. In Section 5, we present our complete implementation

? now at MIT
?? on exchange from The Australian National University

of cons?, car ?, and cdr ?. In Section 6 we present related work. Finally, wepresent our conclusions and some problems for future research.
2 Examples
We begin by presenting several examples illustrating the nondeterministic prop-erties of ferns, showing their similarities to and differences from traditional lists
and streams. Later, we include examples that show that the natural recursivestyle can be used when programming with ferns and point out the advantages
ferns afford the user.

2.1 Nondeterminism
Convergent elements of a fern form its prefix in some unspecified order. Forexample, evaluating the expression

(let ((s (cons? 0 (cons? 1 '()))))(display (car

? s)) (display (cadr? s)) (display (car? s)))

prints either 010 or 101, demonstrating that the order of values within a fern isnot specified in advance but remains consistent once determined, while

(let ((s1 (cons? (! 6) ?)) (s2 (cons? ? (cons? (! 5) ?))))(cons (car

? s1) (car ? s2)))

returns (720 . 120), demonstrating that accessing a fern avoids divergence asmuch as possible. (? is any expression whose evaluation diverges.) In the latter

example, each fern contains only one convergent value; taking the cdr ? of s1 orthe cadr

? of s2 results in divergence.Ferns are shareable data structures; sharing, combined with delayed ordering

of values, can result in surprising behavior. For example, consider these expres-sions:

(let ((b (cons 2 '())))(

let ((a (cons 1 b)))(list (car a) (cadr a) (car b))))

and
(let ((b (cons? 2 '())))(let ((a (cons

? 1 b)))(list (car? a) (cadr? a) (car ? b))))

where the first expression must evaluate to (1 2 2). The second expression mayalso return this value--as expected, the car of b would then be equal to the cadr
of a. However, the second expression might instead return (2 1 2); in this case,the car of b would be equal to the car of a rather than to its cadr. Section 4
discusses sharing in detail.

2.2 Recursion
We now present examples of the use of ferns in simple recursive functions. Con-sider the definition of ints-from

?1.

(define ints-from?(

*t (n)(cons

? n (ints-from? (+ n 1)))))

Then (caddr? (ints-from? 0)) could return any non-negative integer, whereasthe streams version would return

2.There is a tight relationship between ferns and lists, since every cons pair

is a fern. The empty fern is also represented by (), and (pair? (cons? e1 e2))returns

#t for all e1 and e2. After replacing the list constructor cons with the fernconstructor cons

?, many recursive functions operating on lists avoid divergence.For example, map? is defined by replacing cons with cons?, car with car ?, and

cdr with cdr ? in the definition of map, and can map a function over an infinitefern (caddr

? (map? add1 (ints-from? 0))) where the result can be any positiveinteger.

Ferns work especially well with annihilators. True values are annihilators foror
?, so we can write

(define or?(

*t (s)(cond

((null? s) #f)((car

? s) (car? s))(else (or? (cdr ? s))))))

which searches in a fern for a true convergent value. and can avoid divergence ifit finds one: (or

? (list? ? (odd? 1) (! 5) ? (odd? 0))) returns some true value,where list? is defined as follows.

(define-syntax list?(syntax-rules ()

(( ) '())(( e e* . . . ) (cons

? e (list? e* . . . )))))

We can define append? for ferns.
(define append?(

*t (s1 s2)(

cond((null? s

1) s2)(else (cons? (car? s

1) (append? (cdr ? s1) s2))))))

1 *t is identical to *, except it creates preemptible procedures. (See Section 5.)

To observe the behavior of append? we define take?
(define take?(

*t (n s)(

cond((null? s) '())

((not n) (cons (car? s) (take? n (cdr ? s))))((zero? n) '())
(else (cons (car ? s) (if (= n 1) '() (take? (- n 1) (cdr ? s))))))))
which returns a list of the first n values in a fern. If n = #f, take? attemptsto retrieve every element of the fern. When determining the

nth value, it isnecessary to avoid taking the cdr

? after the nth value is determined.Our definition of append
? appears to work as expected: (take? 2 (append?(list?
1) (list? ? 2))) ) (1 2). Moving ? from the second argument to thefirst, however, reveals a problem: (take

? 2 (append? (list? ? 1) (list? 2))) )?. Even though we can see that the result of the call to append? should contain

two convergent elements, taking the first two elements of that result diverges.This is because our current definition of append

? requires that s1 be completelyexhausted before any elements from s
2 can appear in the result. If one of theelements of s
1 is ?, then no element from s2 will ever appear. The same is true ifs
1 contains an unbounded number of convergent elements: since s1 is never null,the result will never contain elements from s

2. As we will see with the definitionof mplus? in Section 3.1, the solution to these problems is to interleave the

elements from s1 and s2 in the resulting fern as in the next example.

Functional programs often share rather than copy data, and ferns are de-signed to encourage this programming style. Consider a procedure to compute

the Cartesian product of two ferns:
(define Cartesian-product?(

*t (s1 s2)(cond

((null? s1) '())(else (mplus

? (map? (* (e) (cons (car? s1) e)) s2)(Cartesian-product? (cdr? s

1) s2))))))

(take? 6 (Cartesian-product? (list? ? 'a 'b) (list? 'x ? 'y ? 'z)))
 ((a . x) (a . y) (b . x) (a . z) (b . y) (b . z))
where  indicates one of the possible values. This definition ensures that theresulting fern shares elements with the ferns passed as arguments. Many references to a particular element may be made without repeating computations,hence the expression

(take? 2 (Cartesian-product? (list? (begin (display #t) 5)) (list? 'a ? 'b)))

((5 . a) (5 . b))

prints #t exactly once. (There are more examples of the use of ferns [5-8].)

3 Extended Example: New Logic Combinators
In this section, we use the task of logic programming as an extended exampleof the use of ferns in avoiding bottom while maintaining a natural recursive
style. We compare two sets of logic combinators, one using streams and theother using ferns. We begin by describing and implementing operators

mplus?and bind

? over ferns, and go on to implement logic programming combinatorsin terms of these operators. The fern-based logic combinators are shown to be

more general than the standard stream-based ones. (See the historical accountof logic combinators of Wand and Vaillancourt [9].)

3.1 mplus and bind
To develop logic programming combinators in a call-by-value language, we mustmake

mplus? itself lazy to avoid diverging when its arguments diverge. Weaccomplish this by defining mplus

? as a macro that wraps its two arguments inlist? before passing them to mplus-aux ?. In addition, mplus? must interleave

elements from both of its arguments so that a fern of unbounded length in thefirst argument will not cause the second argument to be ignored.

(define-syntax mplus?(syntax-rules ()

(( s1 s2) (mplus-aux ? (list? s1 s2)))))
(define mplus-aux ?(

*t (p)(

cond((null? (car

? p)) (cadr? p))(else (cons? (caar? p)

(mplus-aux ? (list? (cadr? p) (cdar? p))))))))

(define bind?(

*t (s f )(

cond((null? s) '())

(else (mplus? (f (car ? s)) (bind ? (cdr ? s) f ))))))
We use a fern constructor to make mplus? lazy: if one of the ferns in theargument to mplus-aux

? is divergent, it can select the other one. For example,(car ? (mplus? ? (list?

5))) returns 5. bind ? avoids the same types of diver-gence as map

? described in Section 2 but uses mplus? to merge the results ofthe calls to f . Thus, (bind ? (ints-from?

0) ints-from?) is an unbounded fernof integers; for every (nonnegative) integer

n, it contains the integers startingfrom
n and therefore every nonnegative integer n is contained n + 1 times. Theinterleaving leads to duplicates in the following example:

(take? 15 (bind ? (ints-from? 0) ints-from?))  (0 1 1 2 2 3 2 4 3 5 3 6 4 7 3).

The addition of unit? and mzero? rounds out the set of operators typicallyused to implement logic programs in functional languages.
(define unit? (*t (oe) (cons oe '())))(

define mzero? (*t () '()))

Using these definitions, we can run programs that require both nondeterminismand multiple unbounded ferns, such as this variant of Seres and Spivey [10]:

(car ? (bind ? (ints-from? 2)(

*t (a)(bind

? (ints-from? 2)(
*t (b)(if (= (* a b)

9) (unit? (list a b)) (mzero?)))))))) (
3 3).

In this example, the streams version diverges, since 2 does not evenly divide 9.

3.2 Implementation of Logic Programming Combinators
Our combinators comprise three goal constructors: j?, which unifies terms;
disj?, which performs disjunction over goals; and conj?, which performs con-juction over goals. These goal constructors are required to terminate, and they

always return a goal. A goal is a procedure that takes a substitution and returnsa fern of substitutions.

(define-syntax j?(

syntax-rules ()(( u v)

(*t (oe)(let ((

oe (unify u v oe)))(
if (not oe) (mzero?) (unit? oe)))))))

(define-syntax disj?(

syntax-rules ()(( g

1 g2) (*t (oe) (mplus? (g1 oe) (g2 oe))))))

(define-syntax conj?(

syntax-rules ()(( g

1 g2) (*t (oe) (bind ? (g1 oe) g2)))))

Logic programs evaluate to goals; to obtain answers, these goals are appliedto the empty substitution. The result is a fern of substitutions representing

answers. We define run? in terms of take?, described in Section 2, to obtain alist of answers from the fern of substitutions

(define run?(

*t (n g)(take

? n (g empty-oe))))

where n is a non-negative integer (or #f) and g is a goal.

Given two logic variables x and y, we present some simple logic programs thatproduce the same answers in both fern-based and stream-based combinators.
(run? #f (j? 1 x )) ) ({x/1})(run

? 1 (conj? (j? y 3) (j? x y))) ) ({x/3, y/3})(run?

1 (disj? (j? x y) (j? y 3))) ) ({x/y})(run

? 5 (disj? (j? x y) (j? y 3))) ) ({x/y} {y/3})(run?

1 (conj? (j? x 5) (conj? (j? x y) (j? y 4)))) ) ()(run

? #f (conj? (j? x 5) (disj? (j? x 5) (j? x 6)))) ) ({x/5})

It is not difficult, however, to find examples of logic programs that diverge whenusing stream-based combinators but converge using fern-based combinators:

(run? 1 (disj? ? (j? x 3))) ) ({x/3})(run

? 1 (disj? (j? ? x ) (j? x 5))) ) ({x/5})

and given idempotent substitutions [11], the fern-based combinators can evenavoid some circularity-based divergence without the occurs-check, while streambased combinators cannot:

(run? 1 (disj? (j? (list x ) x ) (j? x 6))) ) ({x/6})
We can also write functions that represent relations. The relation always-five
? associates 5 with its argument an unbounded number of times:

(define always-five?(

*t (x )(disj

? (always-five? x ) (j? x 5))))

Because both stream and fern constructors do not evaluate their arguments, wemay safely evaluate the goal (always-five

? x ), obtaining an unbounded collec-tion of answers. Using run?, we can ask for a finite number of these answers.

Because the ordering of streams is determined at construction time, however, thestream-based combinators cannot even determine the first answer in that collection, while the fern-based combinators compute as many answers as desired:(run

? 4 (always-five? x )) ) ({x/5} {x/5} {x/5} {x/5}). This is because thedefinition of always-five? is left recursive.

In the next section we look at how the sharing properties of ferns are main-tained alongside bottom-avoidance.

4 Sharing and Promotion
In this section, we provide examples and a high-level description of the promotionalgorithm of Friedman and Wise [3]. The values in a fern are computed and
promoted across the fern while ensuring that the correct values are availablefrom each subfern, ?'s are avoided, and non-? values are computed only once.
Ferns have structure, and there may be references to more than one subfern ofa particular fern. Consider the example expression

(let ((ffi (cons? (! 6) '())))(

let ((fl (cons? (! 3) ffi)))(let ((

fi (cons? (! 5) fl)))(
let ((ff (cons? ? fi)))(list (take

? 3 ff) (take? 3 fi) (take? 2 fl) (take? 1 ffi))))))

 ((6 120 720) (6 120 720) (6 720) (720))
assuming list evaluates its arguments left-to-right. Since the subfern ffi is itselfa fern, accessing

ffi cannot retrieve values in the prefix of the enclosing fern ff.We now describe in detail how the result of (take

? 3 ff) is determined, and thenecessary changes to the fern data structure during this process. Whenever we

encounter a nondeterministic choice, we shall assume a choice consistent withthe value returned in the example.

During the first access of ff the cdrs are evaluated, as indicated by the arrowsin Figure 1a. Figure 1b depicts the data structure after (car

? ff) is evaluated.We assume that, of the possible values for (car ?
ff), namely ? (which is neverchosen), (!

5), (! 3), and (! 6), the value of (! 3) is chosen and promoted. Sincethe value of (!

3) might be a value for (car ? fi) and (car ? fl), we replace thecars of all three pairs with the value of (!

3), which is 6. We replace the cdrs of
ff and fi with new frons pairs containing ? and (! 5), which were not chosen.The new frons pairs are linked together, and linked at the end to the old cdr of

fl. Thus ff, fi, and fl each become a fern with 6 in the car and a fern of the restof their original possible values in their cdrs. As a result of the promotion,

ff, fi,and
fl become cons pairs, represented in the figures by rectangles.Figure 1c depicts the data structure after (cadr

? ff) is evaluated. This time,(!
5) is chosen from ?, (! 5), and (! 6). Since the value of (! 5) is also a possiblevalue for (cadr

? fi), we replace the cadrs of both ff and fi with the value of(!
5), which is 120, and replace the cddr of ff with a frons pair containing the? that was not chosen. The cddr of

fi points to ffi; no new fern with remainingpossible values is needed because the value chosen for (cadr

? fi) was the firstvalue available. As before, the pairs containing values become cons pairs.

Figure 1d depicts the data structure after (caddr? ff) is evaluated. Of ? and(!
6), it comes as no surprise that (! 6) is chosen. Since the value of (! 6), whichis
720, is also a possible value for (car ? ffi) (and in fact the only one), we updatethe car of

ffi and the car of the cddr of ff with 720. The cdr of ffi remains as theempty list, and the cdr of the cddr of

ff becomes a new frons pair containing?. The cdr of the new frons pair is the empty list copied from the cdr of

ffi.The remaining values are obvious given the final state of the data structure.

No further manipulation of the data structure is necessary to evaluate the threeremaining calls to take

?.In Figure 1d we see that each of the ferns

ff, fi, fl, and ffi contains somepermutation of its original possible values, and ? has been pushed to the end

of ff. Furthermore, if there are no shared references to fi, fl, and ffi, the numberof accessible pairs is linear in the length of the fern. If there are references to
subferns, for a fern of size n, the worst case is (n2 + n)/2. But, as these sharedreferences vanish, so do the additional cons pairs.

(a)
ff

?

fi

!5

fl

!3

ffi

!6

(b)

ff

6

? !5

fi

6

fl

6

ffi

!6

(c)
ff

6

120

?

120
fi

6

fl

6

ffi

!6

(d)

ff

6

120
720

?

120
fi

6

fl

6

ffi

720

Figure 1. Fern ff immediately after evaluation of cdrs, but before any cars have finished
evaluation (a) and after the values, 6 (b), 120 (c), and 720 (d) have been promoted.

If list evaluated from right-to-left instead of evaluating from left-to-right, theexample expression would return ((

720 6 120) (720 6 120) (720 6) (720)). Eachlist would be independent of one another and the last pair of

ff would be a fronspair with ? in the car and the empty list in the cdr. This demonstrates that if

there is sharing of these lists, the lists contain four pairs, three pairs, two pairs,and one pair, respectively. If the example expression just returned

ff, then onlyfour pairs would be accessible.

The example presented in this section provides a direct view of promotion.When a fern is accessed by multiple computations, the promotion algorithm
must be able to handle various issues such as multiple values becoming availablefor promotion at once. The code presented in the next section handles these
details.

5 Ferns Implementation
In this section we present a complete, portable, R6RS compliant implementationof ferns

2. We begin with a description of engines [12], which we use to handle

suspended, preemptible computations. We then describe and implement fronspairs, the building blocks of ferns. Next we present car

? and cdr ? which workon both frons pairs and cons pairs. Taking the car ? of a frons pair involves nondeterministically choosing one of the possible values in the fern and promotingthe chosen value. Taking the cdr

? of a frons pair ensures the first value in thepair is determined and returns the second value (usually the rest of the fern).

Taking the car ? (cdr?) of a cons pair is the same as taking its car (cdr ).

2 Our ferns library is available at http://www.cs.indiana.edu/,webyrd/ferns.html

5.1 Engines
An engine is a procedure that computes a delayed value in steps. To demonstratethe use of engines, consider the procedure

(define wait(

*t (n)(cond

((zero? n) #t)(else (wait (- n

1))))))

To create an engine e to delay a call to (wait 20), we write:

(define e (engine (wait 20)))
To partially compute (wait 20), we call e with a number of ticks and two handlerprocedures: (e

5 (* (t v) (list t v )) (* (^e) #f)) ) #f. This call runs the expres-sion (wait
20) with 5 ticks. In our implementation, a tick is spent on each call toa procedure defined with

*t. If the expression is not completely evaluated afterall the ticks are spent, the second handler is called with a new engine containing

the rest of the computation. In this case, we discard the new engine and return
#f. We could, however, call the new engine to complete the computation. If thecomputation finishes, the first handler is called with the unspent ticks and the

computed value. For example, consider
(let ((succeed (* (t v ) (list t v))))(

letrec ((fail (* (^e) (cons #f (^e 5 succeed fail )))))(e

5 succeed fail))))
(#f #f #f #f 4 #t).

In this example, (wait 20) calls wait a total of 21 times (including the initialcall), so 4 ticks are unspent after the last call to ^

e.
The delayed computation in an engine may involve creating and calling moreengines. When a nested engine [13] consumes a tick, every enclosing engine also

consumes a tick. To see this, we can define the amb operator [14] using engines:
(define-syntax amb(

syntax-rules ()(( exp

1 exp2) (amb-aux (engine exp1) (engine exp2)))))

(define amb-aux(

*t (e1 e2)(e

1 1 (* ( v ) v ) (* (e1) (amb-aux e2 e1)))))

Nested calls to amb, for example (amb v1 (amb v2 v 3)), rely on nestable en-gines. This implementation of

amb is fair because our implementation of nestedengines is fair: every tick given to the second engine in the outer call to amb-aux

is passed on to exactly one of the engines, alternating between the engines forv

2 and v3, in the inner call to amb-aux .

5.2 The Ferns Data Type
We represent a frons pair by a cons pair that contains at least one tagged engine(te). Engines are tagged with either

L when locked (being advanced by anothercomputation) or
U when unlocked (runnable). We distinguish between lockedand unlocked engines because the car

? of a fern may be requested more thanonce simultaneously, for example in determining the car ? of a fern whose values

both depend on the car ? of another fern: (car ? (list? (car ? s) (cdar? s))). Tomanage effects, we prevent the same engine from being advanced in more than
one computation.We define simple predicates L

a? , Ua? , Ld? , and Ud? for testing whether oneside of a frons pair contains a locked or unlocked engine.

(define engine-tag-compare(

* (get-te tag)(

* (q)(

and (pair? q) (pair? (get-te q)) (eq? (car (get-te q)) tag)))))

(define La? (engine-tag-compare car 'L))(define U

a? (engine-tag-compare car 'U))(define L
d? (engine-tag-compare cdr 'L))(define U

d? (engine-tag-compare cdr 'U))

The procedure stepd (stepa) takes a frons pair with an unlocked tagged enginein the cdr (car) and locks and advances the tagged engine by nsteps ticks. If the

engine does not finish, the tagged engine is unlocked and updated with theadvanced engine. If the engine finishes with value v, then v becomes the frons
pair's cdr (car). In addition, the tagged engine will be updated with an unlockeddummy engine that returns v. We do this because the cdrs of multiple frons
pairs may share a single engine, as will be explained at the end of this section.Although the cars of frons pairs never share engines, we do the same for the cars.

(define step(

* (get-te set-val! )(

* (q)(

let* ((te (get-te q)) (set-te! (* (e) (set-car! te 'U) (set-cdr! te e))))(set-car! te '

L)(
let ((e (cdr te)))(e nsteps (

* ( v) (set-val! q v ) (set-te! (engine v))) set-te! ))))))

(define stepa (step car set-car! ))(

define stepd (step cdr set-cdr! ))

Now we present the implementation of the fern operators.

5.3 cons?, car ?, and cdr ?
cons? constructs a frons pair by placing unlocked engines of its unevaluatedoperands in a cons pair.

(define-syntax cons?(syntax-rules ()

(( a d) (cons (cons 'U (engine a)) (cons 'U (engine d))))))

When the car? (definition below) of a fern is requested, parallel evaluationof the possible values is accomplished by a round-robin race of the engines in the
fern. During its turn, each engine is advanced a fixed, arbitrary number of ticksuntil a value is produced. The race is accomplished by two mutually recursive
functions: racea, which works on the possible values of the fern, and raced, whichmoves onto the next frons pair by either following the cdr of the current frons
pair or starting again at the beginning.race

a dispatches on the current pair or value q. When the car of q is a lockedengine, race

a waits for it to become unlocked by waiting nsteps ticks and thencalling race
d. The call to wait is required to allow racea to be preempted at thispoint, so the owner of the lock does not starve. When the car is an unlocked

engine, racea advances the unlocked engine nsteps ticks, then continues the raceby calling race

d. When q is not a pair, racea simply starts the race again fromthe beginning. This happens when racing over a finite fern and emerges from

the else clause of raced. When the car contains a value, that value is promotedto the front of all the subferns in the chain from p to q.

(define car ?(

* (p)(

letrec ((racea(

* (q)(

cond((L

a? q) (wait nsteps) (raced q))((U

a? q) (stepa q) (raced q))((not (pair? q)) (race

a p))(else (promote p q) (car p)))))

(raced(

* (q)(

cond((L

d? q) (racea p))((U

d? q) (stepd q) (racea p))(else (race

a (cdr q)))))))(race
a p))))

One subtlety of racea is that it does not care, after advancing an enginensteps ticks, whether that engine completed. The value will be picked up the

next time the race comes around, if necessary. Calling promote immediatelywould be incorrect because an engine may be preempted while advancing, at
which point promotion from p may be performed by another computation witha different value for the car of p.

raced also dispatches on q, this time examining its cdr. When the cdr of q isa locked engine, race

d, being unable to proceed further down the fern, restartsthe race by calling race

a on p. When the cdr of q contains an unlocked engine,race
d advances the engine nsteps ticks as in racea, and then restarts the race. Ifthat engine finishes with a new frons pair, the new pair will then be competing

in the race and will be examined next time around. When the cdr of q is a value,usually a fern, race

d continues the race by passing it to racea; if a non-pair valueis at the end of a fern it will be picked up by the third clause in race

a.

car? avoids starvation by running each engine in a car for the same numberof ticks. During a race, a subfern of the fern in question is in a fair state: up
to a point, there are no engines in the cdrs, so each potential value in a caris considered equally. When this fair subfern is not the entire fern, the race
devotes the same number of ticks to lengthening the fair subfern as it does toeach element of that subfern. Since cdr engines often evaluate to pairs quickly,
the entire fern usually becomes fair in a number of races equal to the length ofthe fern. When cdr engines do not finish quickly, however, the process of making
the entire fern fair can take much longer, especially for long ferns. The cost offinding the value of an element occurring near the end of such a fern can be
much greater than the cost for an element near the beginning.promote (definition below) propagates a convergent value found in the pair
q across the subfern from p, whose car was requested, to q. Each frons pair inthis chain is transformed into a cons pair whose car is the convergent value and
whose cdr is a copy of that frons pair. These new frons pairs are connected asa fern and terminate at the cdr of q. After promotion, the subferns from p to
the cdr of q contain the convergent value in their cars and a fern containing theremaining possible values in their cdrs.

(define promote(

* (p q)(cond

((eq? p q) (cdr q))(

else (let ((new-p (cons (car p) (promote (cdr p) q))))(set-car! p (car q))

(set-cdr! p new-p)new-p)))))

The cdr of a fern (definition below) cannot be determined until the fern'scar has been determined. Once the car has been determined, there is no longer
parallel competition between potential cdrs. Thus, we can use cdrs, which takesthe cdr of a stream. Then, since q's car has been determined, q has therefore
become a cons pair, so cdr ? returns the value in q's cdr. (cars's definition followsby replacing all ds by as.

conss is the same as cons?, and the definitions of theother stream operators: mplus

s, mplus-aux s, bind s, disjs, and conjs follow thedefinitions of Section 3 with operators

f? replaced by fs.)

(define cdr ? (* (q) (car ? q) (cdrs q)))

(define cdrs(

* (q)(cond

((Ld? q) (wait nsteps) (cdrs q))((U

d? q) (stepd q) (cdrs q))(else (cdr q)))))

If the engine being advanced by cdr ? completes, cdr ? indicates that stepdshould replace the tagged engine in p by the computed value. The value will be

picked up after loop terminates. cdr ? also indicates that the pair representingthe tagged engine should be unlocked and the engine should be replaced with a
new engine that simply returns the value.

raced and cdr ? are required to not only update the frons pair with the cal-culated value, but also they must update the tagged engine because there might

be a fern other than p sharing this engine. Consider the following expressionwhere we assume

list evaluates its arguments from left to right.

(let ((fi (cons? 1 (ints-from? 2))))(

let ((ff (cons? ? fi)))(

list (car? ff) (cadr? fi) (cadr? ff))))

 (1 2 2)

Figure 2 below shows the data structures involved in evaluating the expres-sion. Figure 2a shows

ff immediately after it has been constructed, with enginesdelaying evaluation of ? and

fi. In evaluating (car ? ff), the engine for fi finishes,resulting in Figure 2b.
fi can now participate in the race for (car? ff). Supposethe value
1 found in the car of fi is chosen and promoted from ff to fi. The resultis Figure 2c, in which the engine delaying (ints-from

? 2) is shared by both fiand the cdr of
ff. (cadr? fi) forces calculation of (ints-from? 2), which results ina fern,

fl, whose first value (in this example) is 2. Figure 2d now shows why stepdupdates the current pair (

fi) and creates a new engine with the calculated value(
fl): the cddr of ff needs the new engine to avoid recalculation of (ints-from? 2).In Figure 2e when (cadr

? ff) is evaluated, the value 2, calculated already by(cadr?
fi), is promoted and the engine delaying (ints-from? 3) is shared by both

ff and fi.

(a)
ff

? fi

(b)

ff

?

fi

1

'2

(c)

ff

1

?

fi

1

'2

(d)
ff

1

? fl

fi

1

fl

2

'3

(e)

ff

1

2

?

fi

1

fl

2

'3

Figure 2. Fern ff after construction (a); after fi in the cdr of ff has been evaluated
(b); after 1 from the car of fi has been promoted to the car of ff, resulting in a shared
tagged engine (c); after the shared engine is run, while evaluating (cadr?fi), to produce
a fern ff (d); after 2 from the car of fl has been promoted to the cadr of ff (e).

6 Related Work
Previous implementations of ferns have been for a call-by-need language. Thework of Friedman and Wise [3, 4, 1] differs from our shallow embedding in two

major respects. First, the languages were implemented using an interpreter. Sec-ond, the laziness of the cons operator resulted in the operands to cons competing
in the race described in Section 5.3.Johnson's master's thesis [15] under Friedman's direction presents an interpreter implemented in Pascal for a lazy ferns language. Subsequently, Johnsonand his doctoral student Jeschke implemented a series of native C symbolic multiprocessing systems based on the Friedman and Wise model. This series culmi-nated with the parallel implementation Jeschke describes in his dissertation [8].
In their Daisy language, ferns are the means of expressing explicit concurrency[5, 6]. This work differs from our shallow embedding approach in the same ways
as the earlier work of Friedman and Wise.

7 Conclusion
We have presented a shallow embedding of ferns, which are shareable, bottom-avoiding data structures. Ferns are useful in avoiding divergence; elements that

do not converge are avoided until it is no longer possible to do so. Ferns areshareable, meaning that many different computations can use the elements of a
fern without repeating computation. Since the fern constructor cons? is similarto the constructor cons, writing bottom-avoiding functions is often intuitive.

We have also presented some motivating examples for ferns, including a gen-eralization of logic programming combinators. We have shown that fern-based
combinators avoid more types of divergence than stream-based combinators.Ferns were originally conceptualized as a data structure for the abstraction of
multiprogramming, and were specified by a formal characterization rather thana concrete implementation. Future research includes proving the correctness and
fairness of our implementation, proving completeness of the fern-based combina-tors, and implementing a multicore shallow embedding of ferns. We hope that the
relative simplicity of our work along with the ease of defining bottom-avoidingrecursive functions will encourage others to take up some of these challenges.

8 Acknowledgements
Guy Steele Jr.'s inspiring keynote address at Dan Friedman's 60th birthdaycelebration renewed our interest in ferns. In addition, Guy made a critical observation that simplified promote, which in turn allowed us to simplify car ?and cdr

?. We thank Kevin Millikin, Olivier Danvy, Mitch Wand, Steve John-son, Chung-chieh Shan, and Oleg Kiselyov for their comments on drafts of this

paper. Oleg's clever use of thunks to represent "incomplete" computations inminiKanren led to our interest in avoiding divergence whenever possible. Once
again, we have found Dorai Sitaram's excellent SLATEX package invaluable fortypesetting our code.

References

1. Friedman, D.P., Wise, D.S.: Fancy ferns require little care. In Holmstr"om, S., Nordstr"om, B., Wikstr"om, *A., eds.: Symposium on Functional Languages and Computer
Architecture, G"oteborg, Sweden, Laboratory for Programming Methodology, University of G"oteborg and Chalmers University of Technology (June 1981) 124-156

2. Sperber, M., Dybvig, R.K., Flatt, M., van Straaten, A. (eds.): Revised6 report on

the algorithmic language Scheme (September 2007)

3. Friedman, D.P., Wise, D.S.: An approach to fair applicative multiprogramming.

In Kahn, G., ed.: Semantics of Concurrent Computation: Proceedings of the International Symposium. Volume 70 of Lecture Notes in Computer Science (LNCS).,
Evian, France, Springer-Verlag (Berlin/Heidelberg/New York) (July 1979) 203-225

4. Friedman, D.P., Wise, D.S.: An indeterminate constructor for applicative programming. In: Conference Record of the Seventh ACM Symposium on Principles
of Programming Languages (POPL '80), New York, USA, ACM Press (January
1980) 245-250

5. Johnson, S.D.: Circuits and systems: Implementing communication with streams.

IMACS Transactions on Scientific Computation, Vol. II (1983) 311-319

6. Johnson, S.D., Jeschke, E.: Modeling with streams in Daisy/The SchemEngine

Project. In Sheeran, M., Melham, T., eds.: Designing Correct Circuits, (DCC'02),
ETAPS 2002 (2002) Presentation at the Workshop on Designing Correct Circuits,
held on 6-7 April 2002 in Grenoble, France.

7. Filman, R.E., Friedman, D.P.: Coordinated Computing: Tools and Techniques for

Distributed Software. McGraw-Hill (1984)

8. Jeschke, E.R.: An Architecture for Parallel Symbolic Processing Based on Suspending Construction. PhD thesis, Indiana University Computer Science Department
(May 1995) Technical Report No. 445, 152 pages.

9. Wand, M., Vaillancourt, D.: Relating models of backtracking. In: Proc. 9th Int.

Conf. on Functional Programming, ACM Press (2004) 54-65

10. Spivey, M., Seres, S.: Combinators for logic programming. The Fun of Programming (2003) 177-200

11. Lloyd, J.W.: Foundations of logic programming. Second extended edn. SpringerVerlag, New York (1987)

12. Haynes, C.T., Friedman, D.P.: Abstracting timed preemption with engines. Journal

of Computer Languages 12(2) (1987) 109-121

13. Hieb, R., Dybvig, K., Anderson, III, C.W.: Subcontinuations. Lisp and Symbolic

Computation 7(1) (1994) 83-110

14. McCarthy, J.: A basis for a mathematical theory of computation. In Braffort, P.,

Hirschberg, D., eds.: Computer Programming and Formal Systems, North Holland
(1963) 33-69

15. Johnson, S.D.: An interpretive model for a language based on suspended construction. Master's thesis, Indiana University Computer Science Department (1977)
Indiana University Computer Science Department Technical report No. 68.

16. Dybvig, R.K., Hieb, R.: Engines from continuations. Comput. Lang 14(2) (1989)

109-123

17. Baader, F., Snyder, W.: Unification theory. In Robinson, A., Voronkov, A., eds.:

Handbook of Automated Reasoning. Volume I. Elsevier Science (2001) 445-532

A Nestable Engines
Our implementation of ferns requires nestable engines [16, 13], which we presenthere with minimal comment. We use two global variables: timer , which holds
the number of ticks available to the currently running engine and uses #f torepresent infinity, and throw , which holds an escape continuation. make-engine
makes an engine out of a thunk. engine is a macro that makes an engine fromexpressions.

*t is like * except that it passes its body, as a thunk, to expend-tick-to-call , which ensures a tick is spent before the body is evaluated and passes the

suspended body to throw if no ticks are available.
(define timer #f)(

define throw 0)(define make-engine

(* (thunk )(

* (ticks sk fk )(let* ((gift (or (and timer (min timer ticks)) ticks))

(saved-timer (and timer (- timer gift)))(saved-throw throw )
(caught (call-with-current-continuation(

* (k)(

set! timer gift)(set! throw k)

(let ((result (thunk )))(throw (cons timer result)))))))
(set! timer saved-timer )(

set! throw saved-throw )(let ((owed (- ticks gift)))

(cond((pair? caught)

(and timer (set! timer (+ timer (car caught))))(sk (+ (car caught) owed) (cdr caught)))
(else (let ((e (make-engine caught)))(

if (zero? owed) (fk e)(let ((th (

* () (e owed sk fk ))))((call-with-current-continuation

(* (^k) (throw (* () (^k th))))))))))))))))
(define-syntax engine(

syntax-rules ()(( e) (make-engine (

* () e)))))

(define-syntax *t(

syntax-rules ()(( formals b0 b . . . ) (

* formals (expend-tick-to-call (* () b0 b . . . ))))))

(define expend-tick-to-call(

* (thunk )((call-with-current-continuation

(* (k )(let th ()

(case timer((

#f) (k thunk ))((
1) (throw (* () (k thunk ))))((
0) (throw th))(
else (set! timer (- timer 1)) (k thunk )))))))))

B Logic Programming Auxiliaries
To complete the implementation of the logic programming combinators pre-sented in Section 3 we provide a logic variable constructor make-var , a unification

algorithm unify, and substitution helpers empty-oe, ext-oe, and walk . We representlogic variables by R

6RS [2] records (syntactic layer); defining the record type var

creates the constructor make-var automatically. We represent substitutions asassociation lists, and use the triangular substitution model [17].

(define-record-type var)
(define unify(

* (t1 t2 oe)(

let ((t1 (walk t1 oe)) (t2 (walk t2 oe)))(cond

((eq? t1 t2 ) oe)((var? t1 ) (extoe t1 t2 oe))((var? t2 ) (extoe t2 t1 oe))((
and (pair? t1 ) (pair? t2 ))(let ((

oe (unify (car t1 ) (car t2 ) oe)))(
and oe (unify (cdr t1 ) (cdr t2 ) oe))))(else (if (equal? t1 t2 )

oe #f))))))

(define empty-oe '())
(define ext-oe(

* (x t oe)`((,x . ,t) . ,

oe)))

(define walk(

* (t oe)(

let ((b (assq t oe)))(if b (walk (cdr b)

oe) t))))