

Electronic Notes in Theoretical Computer Science 59 No. 3 (2001)
URL: http://www.elsevier.nl/locate/entcs/volume59.html 14 pages

Quantitative Analysis of the Leakage of

Confidential Data

David Clark 1
Department of Computer Science

King's College London

Sebastian Hunt 2
Department of Computing

City University, London

Pasquale Malacaria 3
Department of Computer Science
Queen Mary, University of London

Abstract
Basic information theory is used to analyse the amount of confidential information
which may be leaked by programs written in a very simple imperative language. In
particular, a detailed analysis is given of the possible leakage due to equality tests
and if statements. The analysis is presented as a set of syntax-directed inference
rules and can readily be automated.

1 Introduction
We use basic information theory to analyse the amount of confidential information which may be leaked by programs written in a very simple imperative
language (no iteration). We deal with the same issues that are the subject of
[VS00] but use different methods.

Our work is motivated by the fact that it is quite common for programs
to leak acceptably small amounts of information about sensitive data. The
archetype is a program which performs a password check before allowing access
to a sensitive resource. While the password check protects the resource, it also

1 Email: david@dcs.kcl.ac.uk
2 Email: seb@soi.city.ac.uk
3 Email: pm@dcs.qmw.ac.uk

cfl2001 Published by Elsevier Science B. V.

Clark and Hunt and Malacaria

64 bit variable
32 bit variable

8 bit variable

entropy
leak
age

6050403020100

1
0.8
0.6
0.4
0.2

0

Fig. 1. leakage of a password check as a function of the password entropy
leaks a small amount of information about the password file, since a failed
attempt (marginally) narrows the space which an attacker needs to explore.
We begin by formalising what is meant by an `amount of information', using
very basic information theory. We go on to develop syntax-directed rules
which allow bounds on the amount of information leaked by a program to be
automatically determined.

To illustrate the key idea, consider a program which performs a single
password check, where the password is stored in a k bit variable. There are
2k possible values for the password. If passwords are randomly allocated, we
can assume a uniform probability distribution for the variable. According to
the basic information-theoretic measure of entropy (see sect. 2.1) the variable
then `contains' its maximum information content of k bits (but note that it is
perfectly possible in general for a variable which occupies k bits in memory to
contain fewer than k bits of information). It will be very difficult to discover
the password in one check in this case, especially for large k. However, if the
distribution of possible values is made less uniform, by making some values
significantly more likely than others, it becomes easier to learn the password
by a single test. The analysis presented below hinges on a precise account of
how the effectiveness of such a test, measured as the number of bits leaked,
varies with k and with the entropy of the variable. Figure 1 plots the maximum
possible leakage of a simple equality test against entropy, for a few values of k.
Note that as the entropy increases beyond a certain point (1 + 12 log(2k \Gamma  1)),
the maximum possible leakage falls to a near zero minimum.

1.1 Related work
The work we describe in this paper is not the first attempt to apply information theory to the analysis of confidentiality properties. The earliest example

2

Clark and Hunt and Malacaria
of which we are aware is in Denning's book [Den82] where she gives some
examples of how information theory may be used to calculate the leakage of
confidential data via some imperative language program constructs. However
she does not develop a systematic, formal approach to the question as we do
in this paper. Another early example is that of Jonathan Millen [Mil87] which
points to the relevance of Shannon's use of finite state systems in the analysis of channel capacity. More recent is the work of James W. Gray [WG91],
which develops a quite sophisticated operational model of computation and
relates non-interference properties to information theoretic properties. However, neither of these deals with the analysis of programming language syntax,
as we do here. By contrast, much more has been done with regard to syntax
directed analysis of non-interference properties. See particularly the work of
Sands and Sabelfeld [SS99,SS00].

2 Leakage
We suppose that the variables Var of a program are partitioned by two vectors:

~xh the high security variables
~xl the low security variables
We assume fixed some probability distribution p on \Sigma : this is the distribution
on the initial values taken by oe, ie the inputs to the program being analysed.
We note here that the analysis developed in sect. 3 does not require p to be
fully specified.

Our concern in this paper is with the amount of information initially in ~xh
which an "attacker" can learn by observing a run of a program. The attacker
has only low security privileges: it is unable to observe ~xh directly but is able
to observe the initial and final values of ~xl. For x 2 Var, the leakage into x is
intended to model the amount that can be learnt about the initial values of
~xh from the final value of x. Our intention is that if the leakage is zero the

program satisfies a non-interference property.

2.1 The use of information theory
As mentioned above, the use of information theory in the analysis of security
is not novel. Nonetheless, its relevance to the problem we address may not be
immediately obvious. We attempt here to motivate its use by appeal to an
intuitively reasonable operational model of a class of possible attackers.

We start by recalling Shannon's basic definition. [Sha48]. For our purposes, a random variable in a finite set V is a variable v taking values in V
and equipped with a probability distribution. P (v = v) is the probability that
v takes the value v. Shannon defines the following measure of the information

3

Clark and Hunt and Malacaria
content of v, which he calls entropy :

H(v) def=

X

v

P (v = v) log

1

P (v = v)
(1)

Here and in rest of the paper, log is to the base 2. Suppose we determine
(somehow) that, according to this measure, the information content of the
confidential inputs to a program, minus the amount of information leaked, is
n bits. What does this tell us about how hard it is to determine our secret?
Of course, it depends on what the attacker is able to do. We suppose that
the attacker is able to guess at the value of the secret v and has an oracle
which can (cheaply) confirm or refute the guess. It is crucial here that the
oracle can only answer questions of the form "is v = v?" and not more general
Yes/No questions. Supposing that the attacker knows the distribution for v,
the best strategy is clearly to start by guessing the most likely v and proceed
in decreasing order of likelihood until the secret is determined. The relevance
of entropy is then given by the following result, due to James L. Massey
[Mas94]: the average number of guesses required to guess the secret is at least
(1=4)2n + 1.

2.2 Random variables and program variables
Suppose f : A ! B. By b def= f (a) we mean that b is the random variable in
B such that

P (b = b) =

X

a2f\Gamma 1b

P (a = a)

Suppose given random variable a in A, functions f : A ! B and g : A ! C,
and the associated random variables b def= f (a) and c def= g(a). We derive new
random variables from b and c in two main ways:

pairing We write !b; c? for the random variable !f; g?(a). This is extended to vectors of higher arity in the obvious way. We usually write
P (b1 = b1; b2 = b2) instead of P (!b1; b2? = !b1; b2?).

specialisation Given c 2 C, we write bc=c for the random variable such that

P (bc=c = b) = P (b = bjc = c) def=

P (b = b; c = c)

P (c = c)

Let s0 be the random variable in \Sigma  such that P (s0 = oe) = p(oe). All the
random variables of interest in the remaining sections will be functions of s0.
For x 2 Var, we let x def= (*oe:oex)(s0): Hence P (x = n) is calculated as follows:

P (x = n) = P ((*oe:oex)(s0) = n)

= P (s0x = n)

=

X

8oe:oex=n

p(oe)

In contexts where a state transformer f : \Sigma  ! \Sigma  is understood, we also define
the output random variable x0 def= (*oe:f oex)(s0): With the vectors ~xh and ~xl of

4

Clark and Hunt and Malacaria
high and low security variables, we associate the random variables:

h def= (*oe:oe\Lambda (~xh))(s0)
l def= (*oe:oe\Lambda (~xl))(s0)
where oe\Lambda  is the element-wise extension of oe to a vector of variables. We let h
and l range over the values taken by h and l, respectively.

2.3 Definition of leakage
Our definition of leakage can be seen as a specialisation of a proposal made by
Gray [WG91] based on the notion of mutual information between two systems.
Here we need the notion of conditional entropy. The conditional entropy of a
given b is:

H(ajb) def=

X

b

P (b = b)H(ab=b)(2)

Re-stated in these terms and specialised to the current setting, Gray's proposal
is to define the amount of information leaked into x as:

I(h; x0 j l) def= H(x0 j l) \Gamma  H(x0 j h; l)(3)
The intuition is that I(h; x0 j l) is the amount of information that h and x0
have in common given that l is known and it is defined to be H(x0 j l), i.e.
the uncertainty in the final value of x given full knowledge of the low inputs,
less H(x0 j h; l), the `intrinsic uncertainty' in the final value of x, that is,
the uncertainty about the final value of x which would remain even given full
knowledge of the initial values of all input variables. In the current setting,
H(x0 j h; l) is always 0, because our programming language is deterministic
(the state transformer f is a function). This is easy to check.

Let f : \Sigma  ! V and let v def= f (s0). Define:

L(v) def= H(v j l) =

X

l

P (l = l)H(vl=l)(4)

Our use of v is meant to suggest a random variable that takes on the values
of expressions as well as (like x0) those of variables. For a program with state
transformer f : \Sigma  ! \Sigma , we define the leakage into x to be L(x0).

2.4 Observations on the definition
Our choice of measure implies that the total amount of confidential information available to be leaked is given by:

H(h j l) =

X

l

P (l = l)H(hl=l)(5)

and, indeed, this is an upper bound for L(l0). We also note that when h and
l are independent: H(h j l) = H(h):

5

Clark and Hunt and Malacaria
c 2 Com x 2 Var e 2 Exp n 2 Num
c ::= skip j x := e j c1 ; c2 j if e then c1 else c2

e ::= x j n j e1 + e2 j e1 \Gamma  e2 j e1 \Lambda  e2 j

:e j e1 ^ e2 j e1 ! e2 j e1 ^ e2 j e = n

Table 1
the language

Rather than measuring leakage we could have chosen to measure `secureness':

S(v) def= H(h j l; v) =

X

l;v

P (l = l; v = v)H(h!l;v?=!l;v?)

Intuitively, this is the uncertainty in h given full knowledge of l and v: the
more uncertain the attacker, the more secure the program. It is easy to show
that S(v) is just the part of H(h j l) which is not leaked:

S(v) = H(h j l) \Gamma  L(v)

3 The Analysis
The language we analyse is presented in table 1. We assume a standard statetransformer semantics of the following form:

V def= f0; 1gk (vectors of k bits)
oe 2 \Sigma  def= Var ! V
C[[\Delta ]] : Com ! \Sigma  ! \Sigma 
E[[\Delta ]] : Exp ! \Sigma  ! V
To simplify the presentation we have opted for a single k-bit integer data
type, treating 0 as false and 1 as true wherever boolean values are required.
We assume a basic well-formedness check that guarantees expressions do not
take values other than 0, 1 in boolean contexts. The + operator in the semantics should be understood as an operation on binary words, such as twoscomplement addition (our analysis is too crude for the exact choice to matter).
With the above provisos, the details of the semantics are routine and are omitted.

This is clearly a very limited language. The most serious limitation is that
it provides no form of iteration. It is fairly straightforward to extend our
analysis to cope with bounded iteration but unbounded iteration raises more
fundamental issues. The point is discussed further in sect. 3.8. A less obvious
limitation is that the language's equality test requires one parameter to be
a constant. However, the analysis can be extended to cope with a general

6

Clark and Hunt and Malacaria
equality test, and this point is also discussed in sect. 3.8.
3.1 How the analysis works
The ultimate aim of analysing a program is to place an upper bound on
L(x0) for each low-security variable x. We aim to analyse programs in a
compositional and incremental fashion. We start with a partial specification
of a probability distribution on the inputs (s0 - see sect. 2.2). More precisely,
we start by specifying, for each variable x, an interval which includes H(xjl).
To analyse programs directly for the values of H(x0jl) would be problematic
because it would require knowledge of the distribution of input values for the
low variables ~xl and such knowledge might not be available. Worse still, the
attacker may actually be providing the low inputs. The analysis we present
avoids this problem by calculating bounds on the best and worst cases for
leakage over the complete set of possible input values for the low variables.
These bounds are defined as follows:

L\Gamma (v) def= min

l

H(vl=l)(6)

L+(v) def= max

l

H(vl=l)(7)

The minima and maxima here are taken over all l for which H(vl=l) is defined
(that is, all l such that P (l = l) ? 0). These quantities bound L(v):

Proposition 3.1

L\Gamma (v) ^ L(v) ^ L+(v)

3.2 Inference rules
The analysis is presented as a collection of inference rules in tables 2 and
3. The rule NoAss for commands makes use of an auxiliary function X:= on
commands: this just returns the set of all variables x which occur as the target
of an assignment anywhere in the command; its definition is obvious for the
simple language under consideration and is omitted.

We note that these rules can readily be presented in functional form and
automated. The rules Eq(2) and Eq(3) require some simple numerical methods, discussed briefly in sect. 3.5.

In these rules, \Gamma  is a partial function from Var to closed intervals [a; b] in
the range 0 ^ a ^ b ^ k. We write x : [a; b] to mean the partial function
sending x to [a; b] and having domain fxg. \Gamma 1; \Gamma 2 denotes the union of partial
functions with disjoint domains.

Informally, the meaning of an entailment \Gamma  ` c # x : [a; b] is that the
program c modifies x in such a way that L\Gamma (x0) ^ a and b ^ L+(x0). To

formalise this, given f : \Sigma  ! \Sigma , for any x 2 Var, let xf def= (*oe:f oex)(s0). Say
that f j= x : [a; b] if L\Gamma (xf ) ^ a and b ^ L+(xf ). Say further, that f j= \Gamma  if
f j= \Gamma (x) for all x 2 dom(\Gamma ). Then the meaning of \Gamma  ` c # \Gamma 0 is given by the
following theorem.

7

Clark and Hunt and Malacaria
EConj

\Gamma  ` e : [a1; b1] \Gamma  ` e : [a2; b2]

\Gamma  ` e : [max(a1; a2); min(b1; b2)]

Const

\Gamma  ` n : [0; 0]

Var

\Gamma ; x : [a; b] ` x : [a; b]

And

\Gamma  ` ei : [ ; bi]

\Gamma  ` (e1 ^ e2) : [0; b1 +1 b2]

Neg

\Gamma  ` e : [a; b]

\Gamma  ` :e : [a; b]

Plus

\Gamma  ` ei : [ ; bi]

\Gamma  ` (e1 + e2) : [0; b1 +k b2]

Eq(1)

\Gamma  ` e : [ ; b]

\Gamma  ` (e = n) : [0; min(1; b)]

Eq(2)

\Gamma  ` e : [a; ]

\Gamma  ` (e = n) : [B(q); 1]

q ^ 12k ; Uk(q) ^ a

Eq(3)

\Gamma  ` e : [a; ]

\Gamma  ` (e = n) : [0; B(q)]

1
2k ^ q ^

1
2 ; Uk(q) ^ a

Table 2
leakage inference for expressions

CConj

\Gamma  ` c # x : [a1; b1] \Gamma  ` c # x : [a2; b2]

\Gamma  ` c # x : [max(a1; a2); min(b1; b2)]

Join

\Gamma  ` c # \Gamma 1 \Gamma  ` c # \Gamma 2

\Gamma  ` c # \Gamma 1; \Gamma 2

dom(\Gamma 1) " dom(\Gamma 2) = ;

Ass

\Gamma  ` e : [a; b]

\Gamma  ` x := e # x : [a; b]

Seq

\Gamma  ` c1 # \Gamma 0 \Gamma 0 ` c2 # \Gamma 00

\Gamma  ` c1 ; c2 # \Gamma 00

NoAss

\Gamma ; x : [a; b] ` c # x : [a; b]

x 62 X:=(c)

If(1)

\Gamma  ` e : [ ; b] \Gamma  ` ci # x : [ ; bi]

\Gamma  ` if e then c1 else c2 # x : [0; b +k b1 +k b2]

If(2)

\Gamma  ` e : [0; 0] \Gamma  ` ci # x : [ai; bi]

\Gamma  ` if e then c1 else c2 # x : [min(a1; a2); max(b1; b2)]

Table 3
leakage inference for commands

8

Clark and Hunt and Malacaria
Theorem 3.2 For all commands c and for all f : \Sigma  ! \Sigma , if \Gamma  ` c # \Gamma 0 then

f j= \Gamma  ) f ; C[[c]] j= \Gamma 0(8)
Proof: by induction on the height of the derivation of \Gamma  ` c # \Gamma 0.

We omit the details of the proof for reasons of space.
Corollary 3.3 The analysis gives correct results for any initial \Gamma  such that
[L\Gamma (x); L+(x)] ` \Gamma (x) for all x 2 dom(\Gamma ) (recall that x is the random variable
describing the input distribution for x).

Note that L\Gamma (x) = L+(x) = 0 for low-security x and, when the highsecurity and low-security inputs are independent, L\Gamma (y) = L+(y) = H(y) for
high-security y.

The expression rules for \Gamma ; \Lambda ; !; ^ are essentially the same as those for
+ and ^ and are omitted. Many of the rules are crudely conservative, based
simply on the observation that the entropy of a function of a vector of random
variables cannot be less than 0 and cannot exceed the sum of the entropies of
the component random variables. This applies to And, Plus and If(1). The
less obvious of the remaining rules are discussed below.

3.3 Logical rules
EConj, CConj and Join are generic logical rules allowing the results of subanalyses to be conjoined. Their correctness is more or less obvious.

3.4 Assignment
The rule Ass is immediate since assignment makes the random variable for
the variable coincide with the random variable associated with the expression.
The rule NoAss reflects the fact that the leakage into a variable is unchanged
by any command which leaves that variable unaltered (though see sect. 3.8 on
this point).

3.5 Analysis of equality tests
The analysis of a test of the form e = n is determined by the Eq rules.

Eq(1) is straightforward. It is justified by the simple observations that
the total amount of information which can be leaked by a boolean expression
cannot exceed 1 and, since the meaning of e = n is solely a function of the
meaning of e, the amount leaked by e = n cannot exceed the amount leaked
by e.

Eq(2) and Eq(3) are justified by the answer to the following question.
Suppose that v is a k-bit random variable (ie, there are at most 2k possible
values which v can take). Now suppose that P (v = n) = q, for some q. What
is the maximum possible value for the entropy H(v)?

9

Clark and Hunt and Malacaria

B(q)
Uk(q)

q = 1=2q = 1=2k

a = 3:75

10.80.60.40.20
4
3.5

3
2.5

2
1.5

1
0.5

0

Fig. 2. the upper entropy for q in 4 bits
We call this maximum the upper entropy for q in k bits, denoted Uk(q).
Since entropy is maximised by uniform distributions, the maximum value possible for H(v) is obtained in the case that P (v = n0) is uniformly distributed
for all n0 6= n. There are 2k \Gamma  1 such n0 and applying the definition of H
(eqn. 1) immediately gives.

Uk(q) def= q log

1

q

+ (1 \Gamma  q) log

2k \Gamma  1

1 \Gamma  q
(9)

The rules Eq(2) and Eq(3) are based on the observation that q is constrained
to have a value such that L\Gamma (v) ^ Uk(q). Once we have determined a range of
possible values for q, we can compute corresponding bounds on the entropy for
(the random variable determined by) e = n using the formula for the entropy
of a 2-element space where one element has probability q:

B(q) def= q log

1

q

+ (1 \Gamma  q) log

1

1 \Gamma  q
(10)

The idea is illustrated by the example shown in fig. 2. This plots Uk(q) and
B(q) against q for k = 4 and shows that for a lower entropy bound of a = 3:75,
q is bounded by 0 ^ q ^ 0:25 (the precise upper bound is slightly lower than
this).

It is easily seen that B(q) achieves its maximum value of 1 when q = 1=2
and Uk(q) achieves its maximum value of k when q = 1=2k. This leaves two
regions of interest: q ^ 1=2k and 1=2k ^ q ^ 1=2, corresponding to the
rules Eq(2) and Eq(3), respectively. To find maximum and minimum q in
these regions we need to solve equations of the form Uk(q) \Gamma  a = 0 and, for
this, simple numerical techniques suffice [LF89]. (In fact, as k increases, Uk
becomes close to linear and so a very simple geometrical approximation may
be adequate.)

10

Clark and Hunt and Malacaria
3.6 Analysis of if-then-else
As mentioned above, If(1) is very conservative. We note that the contribution
of the entropy of the condition e corresponds to what Denning calls an implicit
information flow.

If(2) applies in the case that the boolean condition has zero entropy. This
means that the value of the condition is completely independent of the values
of the high-security inputs. Thus, the choices of low-security inputs which
minimise and maximise the overall leakage of the program will each select just
one of the two branches and it is safe to take the smaller of the lower bounds
and the larger of the upper bounds.

3.7 Example
Let c be the command if y = 0 then x := 0 else x := 1 with y high-security
and x low-security. Suppose that k = 32 and the input distribution makes
y uniform over its 232 possible values and independent of x. Thus we can
analyse c starting with \Gamma 0 = fx : [0; 0]; y : [32; 32]g. The rules presented above
are easily seen to derive:

\Gamma 0 ` y = 0 : [ffl; ffl]
where ffl = B(1=232) ss 7:8 \Theta  10\Gamma 7. (The final rule is EConj, with premises
given by Eq(2) and Eq(3).) Thus, using If(1), we derive:

\Gamma 0 ` c # x : [0; ffl]

3.8 Improvements to the analysis
The first improvement that can readily be made is to record in \Gamma  explicit
bounds on the cardinality of the space over which the random variables are
defined. Currently the rules implicitly assume the bound 2k where k is the
length of the primitive data type. Specifying a bound explicitly would allow us
to deal well with input distributions which are uniform, or near uniform, but
sparse (assigning probability 0 to many of the 2k possible inputs). It would
also be of help in generalising the Eq rules to arbitrary equality tests of the
form e1 = e2. The issue here is that, without bounds on the cardinalities of
the ranges of the ei, we may naively make the worst case assumption that q
could be uniformly distributed over the entire diagonal, of size 2k. In fact we
can do much better than this in many cases where the entropy of one of the
expressions is very low, by calculating an upper bound on the size of the set
which can carry a given q.

We can also do better for if statements. The rule If(2) is weak because
it takes no account of the relative probabilities of either branch being chosen.
Bounds on the probabilities will in many cases be available (provided, for
example, by the analysis of equality tests). To illustrate the weakness of If(2),
let c0 be the command if y = 0 then x := y else x := 1, This is semantically

11

Clark and Hunt and Malacaria
equivalent to c in sect. 3.7 but the best we can derive for c0 is the totally
uninformative:

\Gamma 0 ` c0 # x : [0; 32]
The problem is caused by the statement x := y which, in isolation, would
leak all the information in y into x. But, in the context of this if statement,
it actually leaks no information. A careful analysis of conditionals gives the
following result.

Proposition 3.4 Let c be the command if e then c1 else c2. Let v be a random variable in \Sigma , let b def= [[e]](v), t def= (*oe:[[c1]]oex)(v), f def= (*oe:[[c2]]oex)(v),

i def= (*oe:[[c]]oex)(v). Let q = P (b = 1) (hence 1 \Gamma  q = P (b = 0)). Then

0 ^ H(i) \Gamma  (qH(tb=1) + (1 \Gamma  q)H(fb=0)) ^ H(b)(11)

An alternative (but more complicated) version of If(2) can be derived using
this result, giving much better results for examples such as c0. This result can
also be used to decompose a non-uniform input distribution into two more
nearly uniform distributions on a pair of subsets which partition the domain,
and then to combine the results of separate analyses for the partitions (here
b would characterise the property which partitions the domain).

Finally, we briefly address the thorny issue of iteration. It would be possible, on the basis of the existing rules, to handle bounded forms of iteration, simply by treating them as nested if statements of finite depth. In
many security-sensitive contexts, bounded iteration may be sufficient and so
it would be worthwhile to pursue the details of such an extension. However,
ultimately we wish to be able usefully to analyse quite general programs and
so we need to deal with unbounded iteration. But, of course, this takes us
outside the simple state-transformer semantics we assume here, due to the
possibility of non-termination. This raises a fundamental theoretical problem
since (at a minimum) it becomes necessary to define a measure of information
which makes sense for the images of partial functions. We conjecture that
the formal definition of entropy can be applied, mutatis mutandis, in the case
when the `distributions' may sum to less than 1, and that this would give a
reasonable measure (intuitively, non-termination is not something which can
be observed, rather it is the absence of an observation). Even if this is true,
significant problems remain. Firstly, the possibility of non-termination would
invalidate the NoAss rule: using high-security inputs to affect termination, a
while loop could leak information even without making any variable assignments. Secondly, we believe that, in the presence of iteration (even bounded
iteration) it becomes more appropriate to consider the rate at which information may be leaked, rather than the absolute amount leaked. This is the
subject of ongoing research.

12

Clark and Hunt and Malacaria
4 Conclusions and Future Work
We have presented preliminary results in an ongoing attempt to develop a general and practically useful analysis for confidentiality properties. Our results
deal with programs which may leak some confidential information and our
concern is to determine bounds on the quantity of information leaked. Like
others before us, we have applied information theory to this problem. Where
our work differs from previous work is in our emphasis on analysis which may
be automated and which, therefore, must be defined directly in terms of the
syntax of programs (though, of course, correctness is established with respect
to the semantics of the language). Unlike Volpano and Smith in [VS00] we are
concerned not with establishing an asymptotic limit but with quantifying the
actual amount leaked. Our approach is able to give good results for programs
which leak small amounts of information via equality tests. We are, as yet,
unable to deal in a satisfactory way with unbounded iteration. Our model
of what attackers can observe is too simple to address more subtle forms of
leakage such as can result from timing properties.

Clearly, there is much to be done. As priorities, we wish to broaden the
work described above to more realistic models of what can be observed by an
attacker, and to move from the emphasis on absolute leakage to the analysis of
rates of leakage as in [VS00]. This suggests a shift from a simple denotational
semantic setting to an operational one (or a more sophisticated denotational
one). In particular, it will be interesting to see if the operational setting of
[SS00] can be adapted.

References

[Den82] D. E. R. Denning. Cryptography and Data Security. Addison-Wesley, 1982.

[LF89] Richard L.Burden and J. Douglas Faires. Numerical Analysis. PWSKENT, 1989. ISBN 0-534-93219-3.

[Mas94] James L. Massey. Guessing and entropy. In Proc. IEEE International

Symposium on Information Theory, Trondheim, Norway, 1994.

[Mil87] Jonathan Millen. Covert channel capacity. In Proc. 1987 IEEE Symposium

on Research in Security and Privacy. IEEE Computer Society Press, 1987.

[Sha48] Claude Shannon. A mathematical theory of communication. The Bell

System Technical
Journal, 27:379-423 and 623-656, July and October 1948. Available online at http://cm.bell-labs.com/cm/ms/what/shannonday/paper.html.

[SS99] Andrei Sabelfeld and David Sands. A per model of secure information flow

in sequential programs. In Proc. European Symposium on Programming,
Amsterdam, The Netherlands, March 1999. ACM Press.

13

Clark and Hunt and Malacaria
[SS00] Andrei Sabelfeld and David Sands. Probabilistic noninterference for multithreaded programs. In Proc. 13th IEEE Computer Security Foundations
Workshop, Cambridge, England, July 2000. IEEE Computer Society Press.

[VS00] Dennis Volpano and Geoffrey Smith. Verifying secrets and relative secrecy.

In Proc. 27th ACM Symposium on Principles of Programming Languages,
pages 268-276, Boston MA, Jan 2000.

[WG91] James W. Gray, III. Toward a mathematical foundation for information

flow security. In Proc. 1991 IEEE Symposium on Security and Privacy,
pages 21-34, Oakland, CA, May 1991.

14