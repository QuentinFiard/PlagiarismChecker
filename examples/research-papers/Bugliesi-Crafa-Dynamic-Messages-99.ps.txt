

Object Calculi with Dynamic Messages

Michele Bugliesi\Lambda  Silvia Crafa

Dip. di Informatica Dip. di Matematica
Universit`a "Ca' Foscari" di Venezia Universit`a di Padova
Via Torino 155, I-30173 Mestre (VE), Italy Via Belzoni 7, I-35131 Padova, Italy

e-mail: michele@dsi.unive.it e-mail: crafas@math.unipd.it

Abstract
Dynamic messages, as proposed in [Nis98], are first-class
expressions that may occur as messages within programs:
being first-class, they may dynamically be bound to program variables, and evaluated to "ordinary" messages
during the computation. We present an extension of
Abadi and Cardelli's typed calculus FOb !: [AC96] and
a type system that give provision for dynamic messages.
The new type system retains the flexibility and expressive power of the original system of [Nis98] while relying
on a new class of types, called message types, to capture
the desired typing of dynamic messages. We prove type
soundness and the existence of minimum types for the
new system. We also study the formal relationships between object types and message types, and discuss how
message types can be encoded in terms of object types.

1 Introduction
In most-object oriented languages messages are formed
around a method label - a constant that identifies the
method to be invoked - and a list of arguments for the
invocation. Dynamic messages, as proposed in [Nis98],
provide additional flexibility by allowing methods to be
invoked by means of expressions that reduce (i.e. evaluate) to "ordinary" messages during the computation.
Dynamic messages are thus first-class expressions that
may occur as messages within programs: being first-class,
they may dynamically be bound to program variables,
and hence allow powerful forms of higher-order programming where code (functions or methods) may be written
that abstracts over the methods actually invoked by a
message.

Dynamic messages have been studied in the context of
statically typed formal calculi by S. Nishimura in [Nis98].
In that paper the author presents an untyped object calculus with dynamic messages, a sound type system, and
a principal type inference algorithm. While Nishimura's
type system gives important and elegant foundations for
dynamic messages, the typing discipline that results from
his system seems to depart significantly from the foundational models of objects and object types found in the
previous literature [AC96, Bru94, BSvG95, PT94, Mic90,
FHM94, FM95, BCP97, CHC90]. In his second-order
system, no type is provided that directly represents the
structure of objects and messages. Instead, the type information is expressed at the kind level: an object type
has the form t :: ^, where t is a type variable that indexes
the kind ^ which, in turn, encodes all the information relative to the object's structure. Given this completely flat
type structure, the system does not seem to lend itself to
direct or smooth integration with any of the foundational
models listed above.

The presupposed difficulty discussed above represents
the main motivation of the work we report in this paper. We present an extension of the Abadi and Cardelli's
typed calculus FOb !: [AC96] and a type system that
give provision for dynamic messages. Unlike in the original proposal of [Nis98], the treatment of dynamic messages in our type system is first-order, thus allowing a
natural integration of the new feature with the original
system for FOb !: .

The new type system retains the flexibility and expressive power of the original system of [Nis98] while relying
on a new class of types - that we call message-types - to
capture the desired typing of dynamic messages. Message
types are, in certain respects, similar to the variant-record
[CW85] or sum types found in traditional programming
languages: as we show in the paper (see Section 6) a
formal counterpart of Ghelli' encoding of sum types into
record types [Ghe90] within F !: can be given to show
that message types can be represented in terms of object
types.

\Lambda This paper was initiated and partly developed when the author was at the Department of Mathematics at the University of Padova.

1

The extension of the type system with message types
scales smoothly from the first-order system to the system
with Self Types and structural rules from [AC96]. We
give a proof of type soundness and of the existence of
minimum types for the most powerful of these systems.

We organize the rest of the paper as follows. In Section 2 we review the main concepts and constructs of the
FOb !: calculus of [AC96]. In Section 3, we describe the
extension of this calculus with dynamic messages, introducing the new class of message-types, and defining the
operational semantics for the extended calculus. In Section 4 we describe the typing and subtyping rules for the
new calculus, and illustrate their use with a few examples.
In Section 5 we give the proofs of type soundness and of
existence of minimum types. In Section 6 we then study
a formal relationship between object types and message
types discussing an encoding of the latter in terms of the
former. We conclude in Section 7 with some final remarks.
Two separate appendices collect the typing and subtyping
rules of FOb !: and of the the new type system.

2 Review of Object Calculi
In this section, we give an informal review of the concepts and constructs of Abadi and Cardelli's &-calculus
[AC96]. The core calculus is based a minimal set of construct and primitives: object formation, method invocation and method update. Additional features, including
the functional constructs of *-abstraction and application may then be included, encoding them in terms of
the object-related forms, or taking them as primitives.

2.1 The Untyped &-calculus.
An untyped object [li = &(xi)bi i21::n] is a collection of
method labels li, with each label associated with a corresponding method body: labels of an object are assumed
to be distinct and their relative order is immaterial. The
object containing a given method is called the method's
host object. Each method body &(xi)bi is an abstraction
of xi, the self parameter, which represents the host object: sibling methods may be invoked within the body
using the self parameter.

The interpretation of self as an abstraction of the
host object is enforced by the self-substitution semantics of method invocation. Methods are invoked by
sending corresponding messages to their host objects: a
message-sent has the syntax a:l where a is the recipient object and l, the message, a method label requesting
an invocation of the corresponding method from a. If
a j [: : : ; lj = &(xj )bj; : : :], the invocation a:lj reduces to
bj[a=xj], the expression that arises from substituting a
(the host object) for every free occurrence of xj in the
body of the method.

The final construct of the &-calculus is method override, a primitive that allows the behavior of an object to
be modified by replacing one of the object's methods. A
method override is an expression of the form a:lj := &(y)b,
which replaces the method associated with lj in a with
the new body &(y)b. The semantics is functional: an override produces a modified copy of the object to which it is
applied.

2.2 Object Types and Self Types
In its simplest, first-order, form, an object type is a type
expression of the form [li : Bi i21::n], denoting the collection of objects that have methods l1; : : : ; ln which, when
invoked, return values of types, respectively, B1; : : : ; Bn.

To allow satisfactory typings for objects whose methods return or modify self, the syntax of object types is
extended to include a construct for recursion. In this extended syntax, an object type is an expression of the form
Obj(X)[li : BifXg i21::n], where Obj is a binder, X is a
type variable, and the notation BfXg indicates that X
may occur free in B. The binder Obj scopes over the
Bi's, and the bound variable X may occur free within
the scope of the binder, with every free occurrence referring to the object type itself. Obj-types are a form of
recursively-defined types, even though Obj should not to
be understood as a standard fixed-point operator: as we
shall discuss shortly, Obj-types obey typing and subtyping rules that are different from the corresponding rules
for recursive types1.

2.3 Typed Syntax and Typing Rules
Typed object calculi attach to every object a type describing the object's structure. A typed object is an expression
of the form obj(X = A)[li = &(xi : X)bi i21::n], where A

1Obj-types are called SelfTypes by Abadi and Cardelli. As they show in [AC96], SelfTypes can be encoded within the second-order
&-calculus by a combination of recursion and bounded existential types. Here, however, we take them as primitive, and define ad hoc
rules, as in [AC96] (Chap. 16).

2

is the object type Obj(X)[li : BifXg i21::n]. The self parameters have the same type, X, in all the methods of the
object, and this type is required to be equal to the type A
of object itself: this guarantees that the self-substitution
involved in the reduction of a method invocation is well
typed. Also note that object types exhibit only the result types Bi of their component methods, disregarding
the type of the self variables: no information is missing,
however, because the type of self is just the type A associated with the host object. The typing rule for objects,
given below, should help explain and motivate the format
of the construct for object formation.

(Val Obj) A j Obj(X)[li : BifXg i21::n]

\Gamma ; xi : A ` bifAg : BifAg 8i 2 1::n
\Gamma  ` obj(X = A)[li = &(xi : X)bifXg i21::n] : A

The syntax of method update is also affected in the
change from untyped to typed syntax. A typed method
update is written a:lj := (Y !: A)&(x : Y )b: the type
variable Y , used as the type of self in the method body
provided in the update represents the (possibly unknown)
type A of the object a being updated. The need for the
type variable Y is best explained looking at the corresponding typing rule:

(Val Update) A0 j Obj(X)[li : BifXg i21:::n]
\Gamma  ` a : A \Gamma  ` A !: A0 \Gamma ; Y !: A; x : Y ` b : BjfY g

\Gamma  ` a:lj := (Y !: A)&(x : Y )b : A

An override for a method lj on the object a requires a
to have a type containing the method name lj being replaced by the override. This is insured by the judgement
\Gamma  ` A !: A0 in the premises of the rule. The remaining
two judgements in the premise insist, respectively, that
the override preserve the type of the object being updated, and that the new body provided for lj have the
same type Bj as the original body. Note, however, that
the typing of the new body is expressed in terms of the
variable Y rather than in terms of A: this is required for
soundness, since the type A may happen to be a proper
super-type of the "true" type of a, obtained by a number
of subsumption steps. Also note that A may either be an
Obj type, or else an unknown type (i.e., a type variable)
occurring (bounded) in the context \Gamma . Rules like (Val Update) are sometimes referred to as structural rules [AC96],
and their use is critical for an adequate rendering of SelfTypes.

2.4 Subtyping
The subtyping rules for objects resemble the corresponding subtyping rules for (recursive) records in functional
calculi. In the first-order case, the subtyping relation
between two object types A and B states that A is a
subtype of B, written A !: B, if "B has fewer methods
than A". Unlike record types, however, object types are
invariant in their components: the subtyping relationship [li : Bi i21::n+m] !: [li : B0i i21::n] requires Bi and
B0i (i 2 1::n) to be the same type. Invariance for components of object types is required for soundness, essentially
because all components are both readable and writable.
Subtyping over SelfTypes is defined as a generalization of
the subtyping relation we just described, with the additional constraint that the component types be covariant
in the bound variable (see Appendix A). As discussed in
[AC96] the additional covariance constraint, is needed for
sound uses of method invocation in the presence of object
subsumption.

2.5 FOb !: : Objects and Functions
As we anticipated, extended calculi may be defined, that
include additional features and constructs in the core &-
calculus. In the rest of the paper, we will consider one
such calculus, called FOb !: , that extends the typed object calculus with SelfTypes and structural rules we just
illustrated, with typed *-abstraction and function application. The complete set of typing rules for FOb !: is
reported in Appendix A.

3 Dynamic Messages in FOb !:
FObdyn!: is a proper extension of FOb !: , the typed calculus we illustrated in the previous section, with dynamic
messages.

3.1 Syntax
Types and expressions are defined in Table 1 The syntax
(as well as the intended semantics) of variables, abstractions, applications and object formation are exactly as in
FOb !: . Instead, the syntax of messages, message-sends
and method updates generalize the corresponding constructs from FOb !: by treating messages as first-order
values. The generalization arises from allowing arbitrary

3

a; b; m ::= x variable

*(x : A)b abstraction
b(a) application
obj(X = A)[li = &(xi : X)bifxi; Xg i21::n] object formation
a:m := (Y !: A)&(x : Y )b method update
a ( m message send
lhb1; :::; bki message (k * 0)

A; B ::= X type variable

Top the biggest type
A ! B function type
Obj(X)[li : BifXg i21::n] object type (n * 0, li distinct, Bi covariant in X)
hhlihBi;1; :::; Bi;kii21::n k21::mii message type (n * 0, li distinct)

Table 1: Types and Expressions

expressions to occur in the message position of a messagesend and in the label position of a method update: messages are thus computed values in FObdyn!: rather than
constant labels as in FOb !: . The expected values of a
and m in the expression a ( m are, respectively, an object containing a, say, l method, and a message lhb1:::bki,
invoking the method labeled by l in a with arguments
b1 : : : bk. As we shall prove, the evaluation of a ( m is
guaranteed to follow the expected pattern whenever the
expression is well typed. Similarly, the expected value of
m in the expression a:m := (Y !: A)&(x : Y )b is a constant label that refers to a method in a, and whenever
this expression is well typed, the semantics of the update
is just as in FOb !: .

The syntax of types parallels the syntax of expressions discussed above. Again, the first four productions
are exactly as in FOb !: . The object type Obj(X)[li :
BifXg i21::n] is the type of the objects containing (at
least) the li methods (i 2 1::n). When invoked, each of
the li's returns a value of type Bi, with every free occurrence of X substituted by the object type itself. As
discussed in Section 2, the Bi's must be covariant in X:
as in [AC96], we use covariance as a syntactic condition
for well formedness of object types.

A new class of types describes the structure of messages. A message type hhlihBi;1; :::; Bi;kii21::n k21::mii is
the type assigned to the messages that may invoke one of
the methods labeled li (i 2 1::n) with k arguments of type
Bi;1; :::; Bi;k. Message types are similar to the variantrecord or sum types found in traditional programming
languages: the difference is that a message type does not
specify the return types of its labels, as the return types

depend on the objects where (the methods associated to)
the labels reside. To ease the notation, in the following
we omit writing k 2 1::m in the syntax of message types,
and take k as a dummy variable that may be different for
any i.

3.2 Operational Semantics
Following the standard practice, the operational semantics of FObdyn!: is lazy: it does not work under *-
abstractions, and similarly it defers reducing under primitives of object and message formation until reduction is
required to evaluate a message-send. As usual, the goal
of evaluation is to reduce a closed expression to a value.
For the purpose of the present calculus, we define a value
to be either one of the following:

v ::= *(x : A)b

obj(X = A)[li = &(xi : X)bi i21::n]
lha1; : : : ; aki k * 0

The operational semantics is defined by cases below. The
evaluation of function application is standard. Evaluation of overrides is defined by a simple generalization of
the corresponding rule of FOb !: . Message-sends also are
evaluated, essentially, as in FOb !: , by self-substitution:
the differences are that (i) reducing an invocation may require prior evaluation of the message, and (ii) (some of)
the arguments of the call may be passed along directly
with the message.

4

(Red Val)

v  v

(Red App)
b  *(x : A)efxg efag  v

b(a)  v

(Red Update)

a  obj(X = A0)[li = &(xi : X)bi21::ni ] m  lj j 2 1::n
a:m := (Y !: A)&(x : Y )bfY g  obj(X = A0)[lj = &(x : X)bfXg; li = &(xi : X)bifXgi21::n\Gamma j ]

(Red Send)

v0 j obj(X = A0)[li = &(xi : X)bifX; xigi21::n]
a  v0 m  ljha1; : : : ; aki (::(bjfA0; v0g)a1::)ak  v j 2 1::n

a ( m  v

Table 2: Reduction Rules
4 Typing and Subtyping
For the most part, the typing and subtyping rules of
FObdyn!: are as in the type system of FOb !: . The new
rules, for messages, message-sends and updates, are illustrated below.

The rule to type a message is routine.

\Gamma  ` ai : Bi i 2 1:::k
\Gamma  ` lha1:::aki : hhlhB1; : : : ; Bkiii

The type of a message contains the label mentioned in
the message, with input types corresponding to the types
of the arguments passed along with the message.

The rule for message-sends generalizes the corresponding rule (Val Select) from [AC96].

A0 j Obj(X)[li : Bi;1fXg \Delta  \Delta  \Delta  ! \Delta  \Delta  \Delta  Bi;kfXg ! CfXgi21:::n]
\Gamma  ` a:A \Gamma  ` A !: A0 \Gamma  ` m : hhlihBi;1fAg : : : Bi;kfAgii21::nii

\Gamma  ` a ( m : CfAg

As in [AC96] we use a structural rule allowing the type
A of the recipient object a to be a (possibly unknown)
subtype of the type A0: this type must be an object type
containing (possibly a superset of) the labels li's listed
in the type of the message that is sent to the recipient,
with corresponding types Bi;1; : : : ; Bi;k. The return type,
C, is assumed to be the same for all of the li's: this assumption is required to uniquely determine the type of

the invocation, which is obtained by a type substitution
(mimicking the self-substitution used in the operational
semantics) that replaces the true type A of a for the free
occurrences of X.

A similar generalization of the typing rule for overrides is used to defined the typing of a method update in
FObdyn!: .

A0 j Obj(X)[li : BfXg i21::n]
\Gamma  ` a : A \Gamma  ` A !: A0
\Gamma  ` m : hhli i21::nii \Gamma ; Y !: A; x : Y ` b : BfY g

\Gamma  ` a:m := (Y !: A)&(x : Y )b : A

The rule requires the type A0 to list the set of labels li's
occurring in type of m. The judgement \Gamma  ` A !: A0 insures then that all such labels are also contained in the
type A of the object being updated. As in the typing
of message sends, the labels occurring in A0 are required
to have the same type to ensure a sound typing of the
update.

A final rule defines the subtype relation over message
types. As for variant records [CW85], supertype of any
given message type may be obtained by (i) extending the
set of component labels, and (ii) by taking supertypes at
the components.

\Gamma  ` B0i;j !: Bi;j
\Gamma  ` hhlihB0i;1 : : : B0i;kii21:::nii !: hhlihBi;1 : : : Bi;kii21:::n+mii

5

Note that message types are covariant in their components, unlike object types (cf. Appendix A), that are instead invariant. Covariance is natural for message types
as messages are read-only values.

4.1 Examples of Typing
We conclude this section with a few examples that illustrate the behavior of the type system, and the use of
dynamic messages in programming.

As a first example, consider the object o defined as
follows:

o

4= obj(X = A)

[x = &(s : X)0;

add = &(s : X)*(i : int)(s ( x) + i;
set = &(s1 : X)*(i : int)s1:x := (Y !: A)&(s2 : Y )i]

The object has three methods: a integer field x, an add
method that returns the sum of x and the value of the
argument passed for the parameter i, and a set method
that sets the x field. A routine check verifies that for
A j Obj(X)[x : int; add : int ! int; set : int ! X],
the judgement ` o : A is derivable in the type system.
Given this typing, we may now write code fragments that
abstract over messages to o.

a : int

4= *(m : hhx; addhintiii) o ( m OK

a : int ! A

4= *(m : hhsetii) o ( m OK

a : any type

4= *(m : hhset; xii) o ( m Error

The last expression does not typecheck, as the return type
of the set and x methods of o are different and hence the
type of the invocation may not be determined uniquely.

The next example illustrates the use of dynamic messages in higher-order object-oriented programming.

w : Win

4= obj(X = Win)

[wacti = \Delta  \Delta  \Delta i21::n ;

wev = &(x : X)*(m : Wmsg)(x ( m) ( wev]

The object w implements a window object, with the
wacti methods associated with the different window actions, and a dispatcher method wev that behaves like
a server for the possible window events. The dispatcher
is implemented as an infinite loop that first invokes the
method corresponding to the message passed as argument, and then invokes itself recursively. To allow the
recursive invocation, the wacti methods should be coded

so as to return self after performing the action. It is
again a routine check to verify that the definition of w
typechecks if we define the types Win and Wmsg as follows:

WinMsg j hhwactihBi;1; : : : ; Bi;kii21::nii
Win j Obj(X)[wacti : Bi;1 ! : : : ! Bi;k ! Xi21::n;

wev : Wmsg ! Unit]

A final example shows a simple but efficient use of the
generalized update construct. Consider an object that
collects a set of fields containing values to be read or
written. In a realistic implementation, such fields would
be protected from direct access, enriching the interface of
the object with get and set methods for each field. In
FObdyn!: , an alternative solution exists that relies on the
generalized update construct: two methods that abstract
over the field name may be used to get or set all of the
fields (as long as the fields have all the same type). The
format of the two methods is described below.

o : A

4= obj(X = A)

[x1 = ::; x2 = ::; \Delta  \Delta  \Delta  xn = ::;

set = &(self : X)*(m : M )*(val : B) self:m := val;
get = &(self : X)*(m : M ) self ( m ]

It is again routine to verify that the definition of o typechecks if we define the types A an M as follows:

A j Obj(X)[x1 : B; x2 : B; \Delta  \Delta  \Delta  xn : B;

set : M ! B ! X; get : M ! B ]
M j hhxi i21::nii

5 Properties of the Type System
5.1 Type Soundness
The soundness proof follows the standard pattern: we
prove that types are preserved by evaluation, then we
show that the evaluation of well-typed closed expressions
does not get stuck, and finally we derive the soundness
result as a corollary.

Lemma 5.1.1 (Substitution)

1. If E; x:D; E0 ` --fxg and E ` d:D then E; E0 ` --fdg
2. If E; X !: D; E0fXg ` --fXg and E ` D0 !: D

then E; E0fD0g ` --fD0g

6

Theorem 5.1.2 (Subject Reduction) Let c be a
closed term and v a value s.t. c  v. If ` c : C then
` v : C.

Proof. By induction on the derivation of c  v. The case
(Red Val) is trivial, since c j v, while the case (Red
App) is standard. The remaining cases are worked out
below.

(Red Update). Assume ` a:m := (Y !: A)&(x :
Y )bfY g : C. An inspection of the typing rules shows
that this judgement must have come from a derivation of
the following form:

` a : A ` A !: D
` m : hhli i21::n

0ii Y !: A; x : Y ` bfY g : BfY g

` a:m := (Y !: A)&(x : Y )bfY g : A..

.. (subsumption steps)
` a:m := (Y !: A)&(x : Y )bfY g : C

where D j Obj(X)[li : BfXgi21::n

0].

By inductive hypothesis, since m  lj, we have ` lj :
hhli i21::n

0ii and this must have come form the judgement ` lj : hhlj ii by some subsumption steps that imply
j 2 1::n0.
Let be v j obj(X = A0)[li = &(xi : X)bi21::ni ] where
A0 j Obj(X)[li : B0ifXg i21::n], from ` a : A and a  v,
by induction hypothesis we have ` v : A. Then A must
be an object type, and the judgement ` v : A must have
come from a derivation of the form:

xi : A0 ` bifA0g : B0ifA0g i 2 1::n

` v : A0..

.. (subsumption steps)

` v : A

Now, from ` A0 !: A and ` A !: D we have n * n0,
BifXg j B0ifXg and Bi j B for i 2 1::n0, so Bj j B.
Now from Y !: A; x : Y ` bfY g : BjfY g, by Substitution Lemma (2), we have x : A0 ` bfA0g : BjfA0g and
collecting all leaves we may conclude with an application
of (Val Object) followed by two subsumption steps.

(Red Send). Assume ` a ( m : C. This judgement
must have come from:

` a : A ` A !: D
` m : hhlihBi;1fAg; : : : ; Bi;kfAgii21::nii

` a ( m : C0fAg..

.. (subsumption steps)
` a ( m : C

where D j Obj(X)[li : Bi;1fXg ! \Delta  \Delta  \Delta  ! Bi;kfXg !
C0fXgi21::n; : : :].

From ` m : hhlihBi;1fAg; : : : ; Bi;kfAgii21::nii and from
m  ljha1:::aki, by induction hypothesis, we have `
ljha1; : : : ; aki : hhlihBi;1fAg; : : : ; Bi;kfAgii21::nii and the
last judgement must have been defined as follows:

` ai : B00j;i j 2 1::n 8i 2 1::k.

... (subsumption steps)

` ai : B0j;i j 2 1::n 8i 2 1::k
` ljha1; : : : ; aki : hhlj hB0j;1; : : : ; B0j;kiii.

... (subsumption steps)

` ljha1; : : : ; aki : hhlihBi;1fAg; : : : ; Bi;kfAgi i21::nii
From the lower subsumption steps it follows that j 2 1::n
and that \Gamma  ` B0j;i !: Bj;ifAg, while the upper steps of
subsumption imply that \Gamma  ` B00j;i !: B0j;i. Now, from
` a : A and from a  v0 j obj(X = A0)[li = &(xi :
X)bifX; xigi21::m] we have ` v0 : A. The last judgement
must have come from a derivation of the form:

xi : A0 ` bifA0; xig : bBifA0g i 2 1::m
` obj(X = A0)[li = &(xi : X)bifX; xigi21::m] : A0..

.. (subsumption steps)
` v0 : A

From ` A0 !: A and ` A !: D, it follows that A0 j
Obj(X)[li : bBifXgi21::m; : : :] where m * n, and

bBifA0g j Bi;1fA0g ! \Delta  \Delta  \Delta  ! Bi;kfA0g ! C0fA0g for

i 2 1::n.

Now from the j-th judgement xj : A0 ` bjfA0; xjg :
bBifA0g and from ` v0 : A0, by substitution lemma (1),

we have ` bjfA0; v0g : bBjfA0g. Since bBjfXg is covariant in X by hypothesis, from ` A0 !: A we also have
` bBjfA0g !: bBjfAg, and hence ` bjfA0; v0g : bBjfAg j
Bj;1fAg ! : : : ! Bj;kfAg ! C0fAg (remember that
j 2 1::n). Now we can construct the following derivation:

` bjfA0; v0g : Bj;1fAg ! ::: ! Bj;kfAg ! C0fAg
` ai : Bj;ifAg i 2 1::k

` (::(bjfA0; v0g)a1::)ak : C0fAg

7

where ` ai : Bj;ifAg i 2 1::k are derived by `
ai : B00j;i and ` B00j;i !: Bj;ifAg, i 2 1::k. Now, from
(::(bjfA0; v0g)a1::)ak  v and the last judgement by induction hypothesis we have ` v : C0fAg, from which
` v : C by a final subsumption step. \Lambda 

Theorem 5.1.3 (Absence of Stuck states) Let e be
a closed expression such that the judgement ` e : C is
derivable for some type C. Then:

1. if e = e1(e2) and e1  val, then val = *(x : A)b

for some x and b;

2. if e = a:m := (Y !: C)&(x : Y )b and a  val,

m  val0, then val = obj for some object expression obj and val0 = l for some label l;

3. if e = a ( m and a  val, m  val0, then val =

obj for some object expression obj and val0 = msg
for some message expression msg.

Proof. Standard, using Subject Reduction (and a few
Generation Lemmas, that we omit for brevity). \Lambda 

5.2 Minimum Types
We conclude proving a minimum-type property for
FObdyn!: . In that direction, we first define a new system Min obtained from the original one by removing
(Val Subsumption) and replacing (Val Appl), (Val Object), (Val Update), and (Val Send) with the new rules in
Table 3.

The proof of existence of minimum types is then standard, and follows directly from the next three propositions, whose proof is by easy inductions on the derivations. Below, we write \Gamma  ` a : A and \Gamma  `min a : A to say
that the judgement \Gamma  ` a : A is derivable, respectively, in
the original system for FObdyn!: and in the system Min.

Lemma 5.2.1 (Soundness) If \Gamma  `min a : A, then also
\Gamma  ` a : A.

Lemma 5.2.2 (Completeness) If \Gamma  ` a : A, then then
\Gamma  `min a : A0 for some A0 such that the judgement
\Gamma  ` A0 !: A is derivable (in either systems).

Lemma 5.2.3 (Uniqueness) If \Gamma  `min a : A and
\Gamma  `min a : A0, then A j A0.

Theorem 5.2.4 (Minimum Types) If \Gamma  ` a : A then
there exists B such that \Gamma  ` a : B and, for any A0, if
\Gamma  ` a : A0 then \Gamma  ` B !: A0.

\Lambda 

6 Message Types vs Object Types
We conclude our analysis of the new type system showing
that message types can be encoded into object types, in
ways similar to how variant types have been encoded into
record types by Ghelli in [Ghe90].

As in [Ghe90], our encoding relies on the use of
(bounded) universal types: therefore, strictly speaking,
the encoding cannot be given directly in the theory of
FObdyn!: . However, the extension of the type system
with bounded universal types seems a relatively mild one,
given that a construct for bounded universal quantification is already implicitly present in the type system, in the
subtyping constraints used in the typing rule for method
override.

We illustrate the encoding in a simple case, where we
assume that object types are first-order, and that message types are formed around method labels, without argument types.

Assume that we are given the type M of a message
m, and let M be the message type hhli i21::nii. The encoding relies on the idea that the message m may legally
be used in conjunction with any object that contains (at
least) the li labels, provided that the labels have the same
return type.

More specifically, assume that m occurs in the expression a ( m. This expression has a type, say B,
provided that we may prove that a has a type Y such
that Y !: [li : B i21::n]. Abstracting over B and Y , we
have the encoding of M , namely:

[[ hhli i21::nii ]]

4= 8Z 8(Y !: [l

i : Z i

21::n]) Y ! Z

Given this definition, we may prove a simple result relating the encoding to the subtype relation.

Proposition 6.1 (Preservation of Subtyping)
Let M j hhli i21::nii and M 0 be two message types s.t.
\Gamma  ` M !: M 0 is derivable. Then \Gamma  ` [[ M ]] !: [[ M 0 ]] is
derivable as well.

Proof. We use the following, standard, subtyping rule
for bounded universal quantifiers:

8

(Val Min Appl)
\Gamma  ` b : A ! B \Gamma  ` a : A0 \Gamma  ` A0 !: A

\Gamma  ` b(a) : B

(Val Min Obj)

\Gamma ; xi : A ` bifAg : B0ifAg \Gamma  ` B0ifAg !: BifAg i 2 I
\Gamma  ` obj(X = A)[li = &(xi : X)bifXgi2I ] : A j Obj(X)[li : BifXgi2I ]

(Val Min Update)

\Gamma  ` A !: Obj(X)[li : BfXgi21::n]
\Gamma  ` a : A0
\Gamma  ` A0 !: A \Gamma  ` m : hhli i21::kii n * k \Gamma ; Y !: A; x : Y ` b : B0fY g \Gamma  ` B0fY g !: BfY g

\Gamma  ` a:m := (Y !: A)&(x : Y )b : A

(Val Min Send)

\Gamma  ` a : A
\Gamma  ` A !: A0 j Obj(X)[li : Bi;1fXg ! \Delta  \Delta  \Delta  ! Bi;kfXg ! CfXgi21:::n; : : :]
\Gamma  ` m : hhljhB0j;1 : : : B0j;ki j21::nii
\Gamma  ` B0j;i !: Bj;ifAg j 2 1::n i 2 1::k

\Gamma  ` a ( m : CfAg

Table 3: Typing Rules for Miminum Types
(Sub All)
\Gamma  ` A0 !: A \Gamma ; X !: A0 ` B !: B0

\Gamma  ` 8(X !: A)B !: 8(X !: A0)B0

From the assumption that \Gamma  ` M !: M 0, it must be the
case that M 0 j hhli21:::n

0

i ii for some n

0 * n. Now the

proof follows immediately by an application of the (Sub
All) rule, noting that \Gamma ; Z ` [li : Zi21::n

0] !: [l

i : Zi21::n]

is derivable. \Lambda 

In the general case of message types with argument
types and SelfTypes the encoding can be defined following the same idea we just illustrated. Below we give the
case for just one argument: the case of multiple arguments is obtained by an immediate generalization.

[[ hhlihBifAgii21::nii ]]

4=

8Z 8(Y !: Obj(X)[li : BifXg ! Z i21::n]) Y ! Z
There are, however, two problems with this encoding.
The first has to do with subtyping, and arises from the
asymmetry between the invariant subtyping of object
types and the covariant subtyping of message types. As a

consequence, the encoding may be shown to preserve subtypes, only if we assume a weaker (i.e. invariant) subtyping rule for message types (or, dually, a covariant rule for
object types, which is however incompatible with method
updates).

A further, more serious, problem is that the encoding
does not seem really useful as a basis for defining an adequate encoding of terms in the presence of SelfType. To
see the problem, consider the following simple case, of a
message type with one label and no argument types. We
have:

[[ hhlii ]]

4= 8Z 8(Y !: Obj(X)[l : Z ]) Y ! Z

Now consider the object type A j Obj(X)[l : X]. It
would seem reasonable for A to be a legal substitution
for the type variable Y : this is not the case, however, as
A is not a subtype of Obj(X)[l : Z] for any legal choice
of a type Z, because this type may not contain free occurrences of X. A legal substitute for Y is, instead, the
object type Obj(X)[l : A], which however does not reflect
the fact that the return type of l is the object type itself:

9

in other words, the expressive power of SelfTypes is lost
in the encoding.

7 Conclusions
We have presented an extension of the Abadi and
Cardelli's typed calculus FOb !: and a type system that
give provision for dynamic messages. The system is a
proper extension of the original system for FOb !: from
which it also inherits the properties of type soundness and
existence of minimum types. The novelty over previous
work [Nis98] is the first-order treatment of dynamic messages: besides being technically simpler than the original
one, the new system is amenable to a smooth integration
with existing models of objects and object types found
in the literature. The existence of minimum types also is
important as it is potentially useful for developing typechecking and type inference algorithms.

We have also studied a formal relationship between
object types and message types discussing an encoding
of the latter in terms of the former. While the encoding
appears relatively satisfactory in the case of first-order
object types, in its present form it is still inadequate for
the case of SelfTypes. Work towards a more satisfactory
solution is under way at the time of writing.

References
[AC95] M. Abadi and L. Cardelli. An Imperative Objects Calculus. In P.D. Mosses, M. Nielsen, and
M.I. Schwartzbach, editors, Proceedings of TAPSOFT'95: Theory and Practice of Software Development, volume 915 of LNCS, pages 471-485.
Springer-Verlag, May 1995.

[AC96] M. Abadi and L. Cardelli. A Theory of Objects.

Monographs in Computer Science. Springer, 1996.

[BCP97] K. Bruce, L. Cardelli, and B. Pierce. Comparing

Object Encodings. In Proc. of TACS'97, volume

1281 of Lecture Notes in Computer Science, pages
415-438. Springer-Verlag, 1997.

[Bru94] K.B. Bruce. A Paradigmatic Object-Oriented Programming Language: Design, Static Typing and
Semantcs. Journal of Functional Programming,
1(4):127-206, 1994.

[BSvG95] K.B. Bruce, A. Shuett, and R. van Gent. PolyTOIL: a Type-Safe Polymorphic Object-Oriented
Language. In Proceedings of ECOOP'95: European
Conference on Object-Oriented Programming, volume 952 of LNCS. Springer-Verlag, August 1995.

[CHC90] W. Cook, W. Hill, and P. Canning. Inheritance

is not Subtyping. In Proc. of ACM Symp. POPL,
pages 125-135. ACM Press, 1990.

[CW85] L. Cardelli and P. Wegner. On Understanding

Types, Data Abstraction and Polymorphism. Computing Surveys, 17(4):471-522, 1985.

[FHM94] K. Fisher, F. Honsell, and J. C. Mitchell. A Lambda

Calculus of Objects and Method Specialization.
Nordic Journal of Computing, 1(1):3-37, 1994.

[FM95] K. Fisher and J. C. Mitchell. A Delegation-based

Object Calculus with Subtyping. In Proc. of FCT,
volume 965 of Lecture Notes in Computer Science,
pages 42-61. Springer-Verlag, 1995.

[Ghe90] G. Ghelli. Proof Theoretic Studies about a Minimal

Type System Integrating Inclusion and Parametric
Polymorphism. PhD thesis, Dipartimento di Informatica, Universit`a di Pisa, March 1990.

[Ghe98] G. Ghelli. E-mail communication. Nov. 1998.
[Mic90] J. C. Michell. Toward a Typed Foundation for

Method Specialization and Inheritance. In Proc.
of ACM Symp. POPL, pages 109-124. ACM Press,
1990.

[Nis98] Susum Nishimura. Static typing for dynamc messages. In Proc. of POPL'98. ACM Press, 1998.

[PT94] B. Pierce and D. Turner. Simple typetheoretic foundations for object-oriented programming. Journal of Functional Programming,
4(2):207-248, 1994.

10

A The Type System for FOb !:

Judgements
\Gamma  ` \Pi  well-formed environment judgement
\Gamma  ` A type judjement
\Gamma  ` A !: B subtyping judgement
\Gamma  ` a : A value typing judgement

Environments
(Env ;) (Env x) (Env X !:)

` \Pi 

\Gamma  ` A x =2 dom(\Gamma )

\Gamma ; x : A ` \Pi 

\Gamma  ` A X =2 dom(\Gamma )

\Gamma ; X !: A ` \Pi 

Subtyping
(Sub Refl) (Sub Trans) (Val Subs)

\Gamma  ` A
\Gamma  ` A !: A

\Gamma  ` A !: B \Gamma  ` B !: C

\Gamma  ` A !: C

\Gamma  ` a : A \Gamma  ` A !: B

\Gamma  ` a : B

Top
(Type Top) (Sub Top)

\Gamma  ` \Pi 
\Gamma  ` Top

\Gamma  ` A
\Gamma  ` A !: Top

Variables
(Type X !:) (Sub X) (Val x)

\Gamma 0; X !: A; \Gamma 00 ` \Pi 
\Gamma 0; X !: A; \Gamma 00 ` X

\Gamma 0; X !: A; \Gamma 00 ` \Pi 
\Gamma 0; X !: A; \Gamma 00 ` X !: A

\Gamma 0; x : A; \Gamma 00 ` \Pi 
\Gamma 0; x : A; \Gamma 00 ` x : A

Arrows
(Type !) (Sub !)
\Gamma  ` A \Gamma  ` B

\Gamma  ` A ! B

\Gamma  ` A0 !: A \Gamma  ` B !: B0

\Gamma  ` A ! B !: A0 ! B0

(Val Fun) (Val Appl)

\Gamma ; x : A ` b : B
\Gamma  ` *(x : A)b : A ! B

\Gamma  ` b : A ! B \Gamma  ` a : A

\Gamma  ` b(a) : B

11

Objects

(Type Obj)
\Gamma ; X !: T op ` BifXg Bi covariant in X 8i 2 1::n

\Gamma  ` Obj(X)[li : BifXg i21::n]

(Val Obj) A j Obj(X)[li : BifXg i21::n]

\Gamma ; xi : A ` bifAg : BifAg 8i 2 1::n
\Gamma  ` obj(X = A)[li = &(xi : X)bifXg i21::n] : A

(Sub Obj)

\Gamma  ` Obj(X)[li : BifXg i21::n+m]
\Gamma  ` Obj(X)[li : BifXg i21::n+m] !: Obj(X)[li : BifXg i21::n]

(Val Update) A0 j Obj(X)[li : BifXg i21:::n]
\Gamma  ` a : A \Gamma  ` A !: A0 \Gamma ; Y !: A; x : Y ` b : BjfY g

\Gamma  ` a:lj := (Y !: A)&(x : Y )b : A

(Val Select) A0 j Obj(X)[li : BifXg i21::n]
\Gamma  ` a : A \Gamma  ` A !: A0 \Gamma  ` j 2 1::n

\Gamma  ` a:lj : BjfAg

B Typing Rules for FObdyn!:
In the Type System of FObdyn!: there is a modified rule (Val Update) and a new rule (Val Send) that substitutes the
old (Val Select):

(Val Update) A0 j Obj(X)[li : BfXg i21:::n]
\Gamma  ` a : A \Gamma  ` A !: A0 \Gamma  ` m : hhli i21::nii \Gamma ; Y !: A; x : Y ` b : BfY g

\Gamma  ` a:m := (Y !: A)&(x : Y )b : A

(Val Send)

A0 j Obj(X)[li : Bi;1fXg ! \Delta  \Delta  \Delta  ! Bi;kfXg ! CfXgi21:::n; : : :]
\Gamma  ` a : A \Gamma  ` A !: A0 \Gamma  ` m : hhljhBj;1fAg : : : Bj;kfAgij21::nii

\Gamma  ` a ( m : CfAg

There are also new rules for message types:

Messages
(Type Message) (Sub Message)
\Gamma  ` Bi;j j 2 1 : : : k 8i 2 I

\Gamma  ` hhlihBi;1 : : : Bi;kii2Iii

\Gamma  ` B0i;j !: Bi;j 8i 2 1 : : : n \Gamma  ` hhlihBi;1 : : : Bi;kii21:::n+mii

\Gamma  ` hhlihB0i;1 : : : B0i;kii21:::nii !: hhlihBi;1 : : : Bi;kii21:::n+mii

(Val Message)

\Gamma  ` ei : Bi i 2 1:::k
\Gamma  ` lhe1:::eki : hhlhB1; : : : ; Bkiii

12