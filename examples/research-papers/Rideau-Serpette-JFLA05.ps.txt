

janvier 2005 - Journ'ees Francophones des Langages Applicatifs- JFLA05

Coq `a la conqu^ete des moulins

Laurence Rideau & Bernard Paul Serpette

Inria Sophia-Antipolis
2004 route des Lucioles - B.P. 93

F-06902 Sophia-Antipolis, Cedex

First.Last@inria.fr
http://www.inria.fr/lemme,oasis/First.Last

R'esum'e
Nous pr'esentons la certification formelle en Coq d'un algorithme utilis'e dans les compilateurs:
l'affectation parall`ele de registres. Nous proposons des sp'ecifications inductives et fonctionnelle
de l'algorithme ainsi que les preuves de correction de ces sp'ecifications. Un code fonctionnel ML
peut ^etre extrait de la sp'ecification fonctionnelle et ^etre int'egr'e au code du compilateur.

1. Introduction
Ce travail se place dans le cadre du projet Concert[3], dont l'objectif est la certification formelle
d'un compilateur avec l'assistant de preuve Coq[2, 4]. L'id'ee est de sp'ecifier et de formaliser en Coq
toutes les 'etapes de la compilation[1, 9]: cela comprend la sp'ecification des langages source, cible
et des diff'erents langages interm'ediaires, la sp'ecification de chaque 'etape de traduction entre ces
langages ainsi que les preuves de correction de ces 'etapes de traduction. Parmi les diff'erentes t^aches
d'un compilateur, on trouve aussi un certain nombre d'optimisations correspondant en g'en'eral `a des
transformations de programmes au sein du m^eme langage interm'ediaire.

L''etude pr'esent'ee ici correspond `a la certification d'un algorithme utilis'e dans une phase de traduction
dans un langage interm'ediaire: l'affectation parall`ele de registres [8]. L''etude de cet algorithme est
int'eressante de plusieurs points de vue: l'algorithme peut ^etre d'ecrit en utilisant une repr'esentation
abstraite des registres, ind'ependamment des langages interm'ediaires, et peut donc ^etre r'eutilis'e
dans le contexte d'un autre compilateur, son code est raisonnablement court, mais pr'esente des
difficult'es int'eressantes `a surmonter pour la sp'ecification et pour les preuves: structure de donn'ees
non conventionnelle, r'ecursion non structurelle.

Dans un premier temps nous pr'esentons l'affectation parall`ele (section 1.1), puis nous d'ecrivons une
structure de donn'ee adapt'ee: les moulins (section 2.1). Ensuite nous donnons deux sp'ecifications
inductives de l'algorithme: une sp'ecification non d'eterministe (section 3) et une d'eterministe (section
4), ainsi que les preuves de leur compatibilit'e et de leur correction. Enfin nous en d'eduisons
une sp'ecification fonctionnelle (section 5) dont nous donnons les preuves de coh'erences avec les
sp'ecifications pr'ec'edentes et les preuves de correction et de terminaison.

Les sp'ecifications Coq et les preuves associ'ees sont disponibles `a l'adresse suivante :
http://www-sop.inria.fr/lemme/concert/pmov/.

1.1. Pr'esentation
L'affectation parall`ele est utilis'ee de mani`ere interne par les compilateurs pour impl'ementer le
protocole d'appel des fonctions. G'en'eralement lors des premi`eres passes, le code interm'ediaire g'en'er'e
par un compilateur utilise un nombre arbitraire de registres abstraits ai. `A ce stade, un point

1

L. Rideau & B. P. Serpette

Figure 1: Exemples de moulins
d'appel d'une fonction f `a n arguments prend la forme : ar := f (a1; : : : ; an). La passe d'allocation
des registres va associer, via une fonction OE, un registre physique du processeur ('el'ement de R) `a
chaque registre abstrait. Cette passe peut n'ecessiter l'adjonction d'instructions de sauvegarde de
registre (spilling). Apr`es cette passe d'allocation des registres, le noeud d'application a la forme :
OE(ar) := f (OE(a1); : : : ; OE(an)). Une passe suivante impl'emente un protocole d'appel des fonctions en
sp'ecifiant, par exemple, que les k premiers arguments soient transmis dans les registres physiques
R1; : : : ; Rk. Supposons que k * n, il faut ins'erer les instructions assurant, qu'au moment de l'appel
de f , chaque registre OE(ai) soit bien dans le registre Ri. De mani`ere abstraite on utilise une affectation
parall`ele que l'on note (R1; : : : ; Rn) := (OE(a1); : : : ; OE(an)). Le but de l'algorithme que nous 'etudierons
est de transformer (s'erialiser) cette affectation parall`ele en une suite d'affectation simple (Ri := Rj)
ayant le m^eme comportement. Cette s'erialisation peut faire intervenir un registre temporaire, nomm'e
tmp, par exemple pour (R1; R2) := (R2; R1).

L'affectation parall`ele peut ^etre vue comme une relation de transfert sur l'ensemble des registres :
(OE(a1) 7! R1) ffl : : : ffl (OE(an) 7! Rn). Ici la relation de transfert est sp'ecifi'ee par la liste de ses arcs.

Nous noterons ffl l'op'erateur de construction des listes, suppos'e associatif `a droite.

2. Description CAML de l'algorithme imp'eratif
2.1. Pr'esentation des moulins
La seule propri'et'e que nous assure le protocole d'appel des fonctions est que les registres de destination
sont uniques : les arguments diff'erents d'une fonction ne doivent pas se retrouver dans le m^eme registre
physique. Ou, de mani`ere 'equivalente, que les registres ont au plus un pr'ed'ecesseur pour la relation de
transfert. Bien que cette propri'et'e ressemble `a une sp'ecification des for^ets (ensemble disjoint d'arbres),
elle n'interdit pas la pr'esence de cycles : (r1 7! r2) ffl (r2 7! r1). Pour avoir un arbre il faut rajouter le
fait qu'il existe un unique 'el'ement, la racine, n'ayant pas de pr'ed'ecesseur.

Les relations v'erifiant cette propri'et'e d'au plus un pr'ed'ecesseur sont des ensembles disjoints de moulins.
Un moulin est un cycle (l'axe) d'o`u s''echappent des arbres (les pales). La figure 1 pr'esente un ensemble
de moulins o`u l'on retrouve le cas g'en'eral, un arbre, un simple cycle sur quatre registres et le cas
particulier d'une boucle.

2.2. Algo intuitif bas'e sur la topologie
Dans le cas particulier d'un cycle simple, i.e. un axe sans pale, la relation de transfert est de la forme :
(rn 7! r1) ffl : : : ffl (r2 7! r3) ffl (r1 7! r2) et la s'erialisation se fait `a l'aide d'un registre temporaire tmp :

2

Don Quichotte
tmp := r1; r1 := rn; : : : ; r3 := r2; r2 := tmp.
[8] g'en'eralise ce cas particulier en proposant un algorithme bas'e sur la topologie de la relation de
transfert (i.e. n'ecessite une passe pour calculer les successeurs) : enlever un `a un tous les arcs n'ayant
pas de successeur et garder cet ordre pour les affectations s'equentielles (i.e. les pales disparaissent
petit `a petit); `a ce stade il ne reste que des cycles simples pouvant ^etre s'erialis'es selon l'algorithme
introduisant un registre temporaire.

L'algorithme que nous 'etudions, propos'e par Xavier Leroy, effectue la s'erialisation tout en d'ecouvrant
la topologie (i.e en une seule passe).

2.3. Version Caml
01 type status = To.move -- Being.moved -- Moved
02
03 let parallel.move src dst tmp =
04 let n = Array.length src in
05 let status = Array.make n To.move in
06 let rec move.one i =
07 if src.(i) !? dst.(i) then begin
08 status.(i) !- Being.moved;
09 for j = 0 to n - 1 do
10 if src.(j) = dst.(i) then
11 match status.(j) with
12 To.move -?
13 move.one j
14 -- Being.moved -?
15 printf "%s := %s;"n" tmp src.(j);
16 src.(j) !- tmp
17 -- Moved -?
18 ()
19 done;
20 printf "%s := %s;"n" dst.(i) src.(i);
21 status.(i) !- Moved
22 end in
23 for i = 0 to n - 1 do
24 if status.(i) = To.move then move.one i
25 done

L'algorithme utilise une variante d'un parcours de graphe en profondeur par la fonction move.one
prenant en argument un arc (srci 7! dsti) de la relation de transfert. Les lignes 9 et 10 correspondent
`a prendre tous les successeurs de dsti. Le cas de la ligne 17 correspond `a un arc d'ej`a analys'e. Le cas
de la ligne 12 correspond `a une r'ecursion simple. Le cas de la ligne 14 correspond `a la d'ecouverte
d'un cycle. `A la sortie de cette boucle, ligne 19, tous les noeuds atteignables par dsti ont 'et'e analys'es,
l'arc (srci 7! dsti) est s'erialis'e et est annot'e comme analys'e.

`A la d'ecouverte d'un cycle, la pile d'appel est de la forme ((rn 7! r1); : : : ; (r2 7! r3); (r1 7! r2)) et

nous analysons `a nouveau, `a la ligne 14, l'arc (r1 7! r2). L'effet de bord de la ligne 16 op`ere donc
n'ecessairement sur l'arc ayant entam'e la r'ecursion `a la fonction move.one, i.e. l'arc se trouvant au
fond de la pile.

La boucle principale, lignes 23 `a 25, assure que tous les arcs sont analys'es.

3

L. Rideau & B. P. Serpette
3. Algorithme non d'eterministe
On peut remarquer que tous les arcs de la relation de transfert d'ebutent dans l''etat To.Move (ligne
5), passent par l''etat Being.moved (ligne 8), pour finir d'efinitivement dans l''etat Moved (ligne 21).
Plut^ot que d'avoir `a g'erer une liste de statuts, nous utiliserons trois listes disjointes d'arcs. Chacunes
de ces listes contenant les arcs ayant le m^eme statut.

L'algorithme va donc extraire un 'el'ement de la liste T o move (not'ee _) pour l'ajouter dans une seconde
Being moved (not'ee oe) ou enlever un 'el'ement de cette derni`ere afin de le mettre dans la derni`ere liste
M oved (not'ee o/ ) contenant les r'esultats.

La liste Being moved est utilis'ee comme une pile en simulant les appels r'ecursifs `a la fonction
move.one, n'eanmoins on permettra la modification du dernier 'el'ement de cette pile lors de la
d'ecouverte d'un cycle.

La derni`ere liste, M oved, sert `a m'emoriser les appels `a la fonction printf, aussi les affectations
s'equentielles pr'esentent dans cette liste se feront de la droite vers la gauche.

3.1. R`egles inductives
Les r`egles inductives vont d'ecrire les diff'erentes r'e'ecritures sur le triplet de ces trois listes : (_; oe; o/ ).
Le triplet de d'epart est (_; ;; ;) o`u _ est la relation de transfert.

(_1 ffl (r 7! r) ffl _2; oe; o/ ) . (_1 ffl _2; oe; o/ ) [N op]
La premi`ere r`egle s'occupe du cas o`u la relation de transfert poss`ede un arc (r 7! r) dont la source
et la destination sont identiques. Ceci correspond au test de la ligne 7. On remarquera que dans la
version imp'erative cet arc n'est pas marqu'e avec Moved et gardera le statut de To.move jusqu'`a la fin
de l'algorithme. N'eanmoins cet arc ne peut pas provenir d'un appel r'ecursif `a la fonction move.one
car, dans ce cas, l'appelant correspondrait `a un arc (s 7! r) ce qui violerait le fait que la fonction de
transfert soit un moulin: deux arcs diff'erents ayant la m^eme destination. Ainsi il est tout `a fait valide
de remonter le test de la ligne 7 au niveau de la boucle principale `a la ligne 24.

Cette r`egle N op, telle qu'elle est 'ecrite est un cas particulier de la r`egle suivante (Start) ce qui exprime
le fait que ce test n'est pas n'ecessaire `a la validit'e de l'algorithme et peut ^etre consid'er'ee comme une
optimisation.

(_1 ffl (s 7! d) ffl _2; ;; o/ ) . (_1 ffl _2; (s 7! d); o/ ) [Start]
La r`egle Start correspond au premier appel `a la fonction move.one, i.e. `a la ligne 24. On sait que
dans ce cas aucun arc n'a le statut Being.Moved et cette r`egle sera donc la seule `a consid'erer le cas
o`u la liste Being moved est vide.

(_1 ffl (d 7! r) ffl _2; (s 7! d) ffl oe; o/ ) . (_1 ffl _2; (d 7! r) ffl (s 7! d) ffl oe; o/ ) [P ush]
La r`egle P ush correspond `a l'appel r'ecursif de la ligne 13. Si l'arc en cours d'analyse est (s 7! d) (i.e.
le sommet de la liste Being moved) et s'il existe un successeur (d 7! r) dans la liste T o move, elle
transf`ere cet arc successeur au sommet de la pile Being moved.

(_; oe ffl (s 7! d); o/ ) . (_; oe ffl (tmp 7! d); (s 7! tmp) ffl o/ ) [Loop]
La r`egle Loop correspond, dans l'esprit, au cas particulier des lignes 15 et 16 'etudiant la d'ecouverte
d'un cycle. Cette r`egle est plus g'en'erale et consid`ere qu'il n'est pas indispensable de v'erifier la pr'esence

4

Don Quichotte
d'un cycle pour ins'erer un transfert par le registre temporaire. Ainsi ces lignes 15 et 16 peuvent ^etre
aussi remont'ees au niveau de la boucle principale (ligne 24) et le fait que l'on n'utilise le registre
temporaire que lors de la pr'esence d'un cycle doit ^etre consid'er'e comme une optimisation. Le point
d'elicat sera d'imposer l'utilisation de ce registre lors d'un cycle, ceci sera r'esolu par la r`egle suivante.

N oRead(_; dn) ^ dn 6= s0
(_; (sn 7! dn) ffl oe ffl (s0 7! d0); o/ ) . (_; oe ffl (s0 7! d0); (sn 7! dn) ffl o/ ) [P op]

La r`egle P op correspond au retour d'un appel r'ecursif `a la fonction move.one. La premi`ere pr'emisse
de cette r`egle, N oRead(_; dn), qui se d'efinit formellement par (_ = _1 ffl (s 7! d) ffl _2 ) s 6= dn),
v'erifie que l'arc en cours d''etude (sn 7! dn) n'a plus de successeur dans la liste T o move et emp^eche
ainsi l'utilisation de la r`egle P ush. La seconde pr'emisse, dn 6= s0 impose l'utilisation de la r`egle Loop
dans le cas d'un cycle.

N oRead(_; dn)
(_; (s 7! d); o/ ) . (_; ;; (s 7! d) ffl o/ ) [Last]

La r`egle Last, correspondant au retour `a la boucle principale de la ligne 24, est un cas particulier de
la r`egle P op.

Pour revenir au cas particulier de la r`egle N op, on observe qu'une liste T o move de la forme ((r 7! r))
peut, soit s''eliminer par la r`egle N op, soit se r'e'ecrire en elle-m^eme en deux 'etapes (Start puis Last),
soit utiliser le registre temporaire (Start, Loop puis Last) et se r'e'ecrire en ((tmp 7! r) ffl (r 7! tmp)).
Ces trois r'esultats sont valides.

3.2. Preuves
Le th'eor`eme concluant cette sous-section exprimera que les r`egles inductives, introduites
pr'ec'edemment, permettent de transformer une relation de transfert en une liste s'equentielle
d'affectations ayant le m^eme comportement.

3.2.1. Invariant
D'efinition 1 (Invariant) Un triplet t = (_; oe; o/ ) est dit bien form'e, Ok(_; oe; o/ ), si et seulement
si :

1. _ ffl oe repr'esente un moulin : _ ffl oe = (l1 ffl (si 7! di) ffl l2 ffl (sj 7! dj) ffl l3) ) di 6= dj .
2. La liste _ ne contient pas le registre temporaire : _ = _1 ffl(s 7! d)ffl_2 ) (s 6= tmp ^ d 6= tmp).
3. La liste oe, ne peut utiliser le registre temporaire qu'en position source du dernier arc : oe =

oe1 ffl (s0 7! d0) ) d0 6= tmp et oe1 = oe2 ffl (s 7! d) ffl oe3 ) (s 6= tmp ^ d 6= tmp).

4. La liste oe est un chemin : oe = ((rn\Gamma 1 7! rn) ffl : : : ffl (r2 7! r3) ffl (r1 7! r2))

On remarque que, si _ est un moulin n'utilisant pas le registre temporaire, alors le triplet (_; ;; ;) est
bien form'e.

Lemme 1 (Conservation de l'invariant) Les r`egles de r'e'ecriture transforment des triplets bien
form'es en d'autres triplets bien form'es : (t1 . t2) ^ Ok(t1) ) Ok(t2).

Preuve Par 'etude de cas sur t1 . t2. Pour t1 = (_; oe; o/ ), la seule r`egle rajoutant un 'el'ement `a oe est
P ush, mais cet arc continue le chemin pr'esent dans oe.

5

L. Rideau & B. P. Serpette
3.2.2. S'emantiques des affectations
Afin de pouvoir exprimer la validit'e de la relation de r'e'ecriture, nous supposerons l'existence d'un
type V aleur correspondant aux contenus des registres. La valeur d'un registre se calcule via un
environnement ae, fonction du domaine des registres vers les valeurs (R ! V aleur).

Modifier un environnement ae en affectant la valeur v au registre r s''ecrit : ae[r := v].
L'ex'ecution parall`ele d'une relation de transfert dans un environnement ae est d'efinie par la fonction
Exec== :

Exec==((sn 7! dn) ffl : : : ffl (s0 7! d0); ae) = ae[d0 := ae(s0)] : : : [dn := ae(sn)]

Dans cette d'efinition nous omettons les parenth`eses car nous supposons que les relations de transfert
sont toujours des moulins et utiliserons intensivement le lemme suivant :

Lemme 2 (Ind'ependance) Si _ = _1 ffl (s 7! d) ffl _2 est un moulin alors l'ex'ecution parall`ele est
ind'ependante de l'ordre de _ : Exec==(_; ae) = Exec==((s 7! d) ffl _1 ffl _2; ae).

Preuve Par induction sur _1. Le cas de base est trivial, tandis que le pas d'induction va n'ecessiter
de prouver qu'il est possible de permuter les deux premiers 'el'ements de _1 : (ae[d0 := ae(s0)])[d1 :=
ae(s1)] = (ae[d1 := ae(s1)])[d0 := ae(s0)]. Cette 'egalit'e est v'erifi'ee d`es lors que d0 6= d1 ce que nous assure

la structure de moulin.

L'effet d'une s'equence d'affectations sur un environnement ae est :
ExecS(;; ae) = ae
ExecS((s 7! d) ffl o/; ae) = ae0[d := ae0(s)] avec ae0 = ExecS(o/; ae)

D'efinition 2 ('Equivalence des environnements) Deux environnements ae1 et ae2 sont dit 'equivalents,
ae1 j ae2 si et seulement si les valeurs des registres, autre que le temporaire, ont les m^emes valeurs
dans ces deux environnements : ae1 j ae2 , 8r 6= tmp; ae1(r) = ae2(r).

D'efinition 3 (Ex'ecution d'un triplet) Ex'ecuter un triplet (_; oe; o/ ) correspond `a ex'ecuter o/ d'une
mani`ere s'equentielle puis _ ffl oe de mani`ere parall`ele : Exec((_; oe; o/ ); ae) = Exec==(_ ffl oe; ExecS(o/; ae)).

On remarque que Exec((_; ;; ;); ae) = Exec==(_; ae) et que Exec((;; ;; o/ ); ae) = ExecS(o/; ae).

3.2.3. Correction
Lemme 3 (Conservation de l'ex'ecution sur un pas) Les r`egles de r'e'ecriture produisent des
triplets ayant la m^eme ex'ecution : (t1 . t2) ^ Ok(t1) ) 8ae; Exec(t1; ae) j Exec(t2; ae).

Preuve Par 'etude de cas sur t1 . t2 o`u t1 = (_; oe; o/ ).

ffl N op utilise le fait que ae[r := ae(r)] = ae.
ffl Start et P ush utilisent le lemme d'ind'ependance de l'ordre.
ffl Loop se fait en sachant que _ et oe n'utilisent pas le registre temporaire.
ffl P op revient `a prouver que

Exec==((sn 7! dn) ffl _ ffl oe; ExecS(o/; ae)) = Exec==(_ ffl oe; ExecS((sn 7! dn) ffl o/; ae)):
Ceci n'est valide que si le registre dn n'est pas la source d'un arc de _ ffl oe. Pour _, ceci est v'erifi'e
par la pr'emisse; pour oe, et par induction, on utilise le fait que oe est un chemin : le cas de base
est impos'e par la pr'emisse (dn 6= s0) et le pas d'induction vient avec la structure de moulin de
oe.

6

Don Quichotte
ffl Last est un cas particulier de P op.

Ce lemme s''etend facilement `a la fermeture reflexive et transitive .\Lambda  de . :
Lemme 4 (Conservation de l'ex'ecution) Plusieurs pas de r`egles de r'e'ecriture produisent des
triplets ayant la m^eme ex'ecution : (t1 .\Lambda  t2) ^ Ok(t1) ) 8ae; Exec(t1; ae) j Exec(t2; ae)

Preuve Par induction sur le nombre de pas.
Ainsi le th'eor`eme de correction devient trivial.

Th'eor`eme 1 (Correction de .\Lambda ) Si _ est un moulin n'utilisant pas le registre temporaire, et si le
triplet (_; ;; ;) peut se r'e'ecrire en un autre triplet (;; ;; o/ ) alors l'ex'ecution parall`ele de _ est 'equivalente
`a l'ex'ecution s'equentielle de o/ : Exec==(_; ae) j ExecS(o/; ae).

4. Algorithme inductif d'eterministe
L''etape suivante consiste `a d'eterminiser les r`egles inductives en imposant un ordre dans le choix des
r`egles et en sp'ecifiant l'arc `a extraire de la liste T o move pour les r`egles N op, P ush et Start.

((r 7! r) ffl _; ;; o/ ) ,! (_; ;; o/ ) [N op]

s 6= d
((s 7! d) ffl _; ;; o/ ) ,! (_; (s 7! d); o/ ) [Start]

Les deux premi`eres r`egles s'occupent du cas o`u la liste Being moved est vide et ne s'int`eressent qu'`a
l''el'ement le plus `a gauche de la liste _.

N oRead(_1; d)
(_1 ffl (d 7! r) ffl _2; (s 7! d) ffl oe; o/ ) ,! (_1 ffl _2; (d 7! r) ffl (s 7! d) ffl oe; o/ ) [P ush]

La r`egle P ush s'occupe du cas o`u l'arc en cours d'analyse a un sucesseur dans la liste _. Elle impose
de prendre le successeur le plus `a gauche.

N oRead(_; r0)
(_; (s 7! r0) ffl oe ffl (r0 7! d); o/ ) ,! (_; oe ffl (tmp 7! d); (s 7! r0) ffl (r0 7! tmp) ffl o/ ) [LoopP op]

N oRead(_; dn) ^ dn 6= s0
(_; (sn 7! dn) ffl oe ffl (s0 7! d0); o/ ) ,! (_; oe ffl (s0 7! d0); (sn 7! dn) ffl o/ ) [P op]

Ces deux r`egles s'occupent du cas o`u l'arc en cours d'analyse n'a plus de successeur dans la liste _ et
o`u la liste Being moved contient au moins deux 'el'ements. La r`egle LoopP op, pour r'efl'eter la dualit'e
avec la r`egle P op, impose la pr'esence d'un cycle. On peut remarquer que cette r`egle, contrairement
aux r`egles non d'eterministes, en profite pour d'epiler l'arc en cours d'analyse. Cette particularit'e
assure que toutes les r`egles effectuent le mouvement d'un arc, ce trait sera utilis'e pour la preuve de
terminaison.

7

L. Rideau & B. P. Serpette

N oRead(_; d)
(_; (s 7! d); o/ ) ,! (_; ;; (s 7! d) ffl o/ ) [Last]

La r`egle Last s'occupe du dernier cas o`u la liste Being moved ne contient plus qu'un seul 'el'ement.
Comme nous n'avons fait que des restrictions sur les r`egles non deterministes, les deux lemmes suivants
sont triviaux.

Lemme 5 (Inclusion ,! ` .\Lambda ) La relation ,! est incluse dans .\Lambda  : t1 ,! t2 ) t1 .\Lambda  t2.

Preuve Par 'etude de cas, seule la r`egle LoopP op fait intervenir la transitivit'e de .\Lambda .
Lemme 6 (Inclusion ,!\Lambda  ` .\Lambda ) La relation ,!\Lambda  est incluse dans .\Lambda  : t1 ,!\Lambda  t2 ) t1 .\Lambda  t2.

Preuve Triviale.
Ce qu'il est important de comprendre c'est que ces r`egles d'eterministes ne correspondent plus `a
l'algorithme imp'eratif. En effet, dans l'algorithme imp'eratif, lorsque le registre temporaire est utilis'e
(d'ecouverte d'une boucle) l'arc en cours d'analyse peut avoir encore un successeur, ce qui n'est pas le
cas dans la r`egle Loop.

Enfin, m^eme si la preuve du th'eor`eme de correction de ,!\Lambda  est triviale, il reste `a prouver le
d'eterminisme et l'existence d'une forme normale (i.e. le triplet (;; ;; o/ )). Ceci sera fait en donnant
une version fonctionnelle de ces r`egles inductives.

5. Version fonctionnelle

`A partir des r`egles inductives d'eterministes, il est facile de construire la fonction stepf , correspondant
`a une 'etape de calcul de l'algorithme. La fonction g'en'erale P mov a naturellement la forme suivante:

8S; P mov S = match S with ((nil; nil); ) ) S j ) Pmov (stepf S) end:

La fonction ainsi d'efinie n''etant pas structurellement r'ecursive (l'appel r'ecursif se fait sur stepf (S) et
non sur un sous-terme de S), une telle d'efinition n'est pas accept'ee directement par Coq. Pour d'efinir
notre fonction, nous avons utilis'e les outils de construction de fonctions r'ecursives g'en'erales propos'es
par Balaa et Bertot [5]. Pour cela nous devons d'abord d'efinir la fonction stepf correspondant `a une
it'eration du calcul, puis une relation bien fond'ee qui sera utilis'ee pour justifier la terminaison et enfin
le th'eor`eme montrant que l'appel r'ecursif se fait bien sur un pr'ed'ecesseur (par la relation bien fond'ee)
de l'argument de la fonction.

5.1. La fonction d'ex'ecution d'un pas de l'algorithme
La fonction stepf que nous avons d'efinie s'appuie directement sur les r`egles inductives d'eterministes
d'ecrites pr'ec'edemment (associ'ees `a la relation ,!), elle prend en argument un 'etat S (un triplet
(t; b; l)) et retourne un nouveau triplet. Le calcul se fait par cas:

Definition stepf (S : State) : State :=

match S with

(;, ;, ) ) S (* cas d'arr^et *)
j ((s, d ) :: tl, ;, l ) )

match eq nat dec s d with

8

Don Quichotte
left ) (tl, ;, l ) (* s=d, [Nop] *)
j right ) (tl, (s, d ) :: ;, l ) (* s6=d, [Start] *)
end
j (t, (s, d ) :: b, l ) )

match split move t d with

Some ((t1, r, t2 )) )

(t1 ++ t2, (d, r ) :: ((s, d ) :: b), l ) (* t = t1 ffl (d; r) ffl t2, [Push] *)
j None )

match b with

; ) (t, ;, (s, d ) :: l ) (* [Last] *)
j )

match eq nat dec d (fst (last b)) with

left )

(t, replace last s b, (s, d ) :: ((d, tmp) :: l )) (*b = ffl (d; ), [LoopPop]*)
j right ) (t, b, (s, d ) :: l ) (* [Pop] *)
end end end end.

Le premier cas ne correspond `a aucune des r`egles de la sp'ecification inductive: c'est le cas d'arr^et de
la r'ecursion associ'e au triplet (;; ;; o/ ).
La fonction eq nat dec, fonction standard de la librairie Arith de Coq, permet de choisir entre le cas
o`u les registres donn'es en argument sont 'egaux (cas left) ou diff'erents (cas right).
La fonction split move prend en argument une liste d'arcs t et un registre d. Si le registre est une
source d'un arc de la liste t, la fonction retourne l'arc correspondant (d; ), et les deux sous-listes
entourant l'arc trouv'e. Ceci permet de casser la liste t en t1 ffl (d; r) ffl t2 correspond `a l'application de
la r`egle [Push].
Enfin, la fonction replace last s prend en argument une liste b d'arcs et remplace dans b, la source du
dernier arc de b par le registre tmp: hb ffl (d; r) devient hb ffl (tmp; r) (r`egle [LoopPop]).
La d'efinition de la fonction stepf 'etant tr`es proche de la sp'ecification inductive d'eterministe de
l'algorithme, il est facile de montrer le th'eor`eme:

Th'eor`eme 2 (Compatibilit'e de stepf et ,!) Pour tout triplet S = (t; b; l) non trivial (i.e. S 6=
(;; ;; o/ )), S est en relation avec stepf (S) par ,!: 8o/; S 6= (;; ;; o/ ) ) S ,! stepf S

Preuve Par 'etude de cas sur la composition de S et application de la bonne r`egle de la relation ,!
pour chaque cas.

5.2. La fonction r'ecursive g'en'erale
La fonction r'ecursive g'en'erale se construit par it'eration de la fonction stepf . Pour assurer la
terminaison nous devons exhiber une relation OE bien fond'ee telle que stepf (S) OE S, ce qui revient
`a trouver une fonction de mesure sur les triplets qui soit d'ecroissante `a chaque appel de stepf (`a
l'exception du cas d'arr^et (;; ;; o/ )). En 'etudiant les r`egles de l'algorithme d'eterministe, et en regardant
plus pr'ecis'ement les tailles des listes T o move et Being move, on s'aper,coit qu'il y a:

ffl soit suppression d'un arc de la liste T o move, la liste Being move restant inchang'ee: r`egle [Nop]
ffl soit transfert d'un arc de la liste T o move vers la liste Being move, r`egles [Start] et [Push]
ffl soit la liste T o move reste inchang'ee alors que la liste Being move perd un arc par transfert

vers la liste M oved, r`egles [LoopPop], [Pop] et [Last].

On voit donc que soit l'une des listes T o move ou Being move perd un 'el'ement, l'autre liste restant
inchang'ee, soit il y a transfert de T o move vers Being move. On assure la d'ecroissance en accordant
un poids plus fort aux arcs de la liste T o move comme dans la fonction mesure suivante:

9

L. Rideau & B. P. Serpette
D'efinition 4 (La mesure d'un triplet) mesure(t; b; m) = 2 \Lambda  length(t) + length(b).
On montre ensuite facilement le lemme:
Lemme 7 (D'ecroissance de la mesure pour ,!) S1 ,! S2 ) mesure(S2) ! mesure(S1).

Preuve Par inversion de la relation ,!, et le calcul de la mesure dans tous les cas.
En utilisant le th'eor`eme 2 de compatibilit'e de stepf et ,!, on obtient trivialement le lemme:
Lemme 8 (D'ecroissance de la mesure pour stepf ) S 6= (;; ;; o/ ) ) mesure(stepf (S)) !
mesure(S).

Pour obtenir une relation bien fond'ee `a partir de notre mesure, nous utilisons la librairie Wf nat
standard de Coq. Cette librairie fournit la fonction ltof de construction d'une relation `a partir d'une
fonction quelconque de type A ! nat et la preuve que cette relation est bien fond'ee. Dans notre
cas (ltof mesure) est la relation qui au couple (S1, S2) associe la relation d'ordre mesure(S1) !
mesure(S2), et (well f ounded ltof mesure) est la preuve que la relation (ltof mesure) est bien
fond'ee.
Enfin, pour utiliser l'outil Recursive Definition de Balaa&Bertot, nous devons fournir l''equation
de point fixe de notre fonction r'ecursive g'en'erale; dans notre cas:

8S; P mov S = match S with ((nil; nil); ) ) S j ) Pmov (stepf S) end:
On a alors tous les 'el'ements pour appeler l'outil Recursive Definition:
Recursive Definition Pmov (State!State) (ltof mesure) (well founded ltof mesure) stepf dec

(8 S, Pmov S = match S with ((nil,nil ), ) ) S j ) Pmov (stepf S ) end ).

o`u stepf dec est le nom du lemme 8 dans Coq. Le syst`eme g'en`ere et prouve alors le th'eor`eme de
terminaison d''enonc'e:
P mov terminate :

8x : State; fv j 9 p ; (8 k : nat;

p ! k ! 8 def : State \Gamma  ? State; iter (State \Gamma  ? State) k P mov F def x = v)g.

O`u P mov F est la fonctionnelle appliquant l''equation de point fixe `a son argument (ici def ). On remarque que ce th'eor`eme donne en prime le r'esultat du calcul dans v, d'o`u la fonction r'ecursive g'en'erale:

P mov x = (let (v; ) := P mov terminate x) in v:
Le syst`eme fournit aussi une nouvelle 'equation de point fixe adapt'ee au th'eor`eme de terminaison, qui
sera 'eventuellement utilis'ee pour les preuves ult'erieures:
P mov equation :

8 S; P mov S =

(let (p; ) := S in let (m0; m1) := p in (*S = (m0; m1; )*)

match m0 with

j nil ) match m1 with

j nil ) S
j :: ) P mov (stepf S)
end j :: =? P mov (stepf S)
end)
Notons que la nouvelle 'equation de point fixe a 'et'e obtenue par d'epliage des cas de l''equation donn'ee
en argument `a Recursive Definition.
On prouve alors facilement le th'eor`eme de correction de la fonction r'ecursive Pmov:

Th'eor`eme 3 (Conservation de l'ex'ecution de Pmov) l'ex'ecution de Pmov sur un triplet bien
form'e produit un triplet ayant la m^eme ex'ecution : Ok(S) ) 8ae; Exec(S; ae) j Exec(P mov(S); ae)

10

Don Quichotte
Preuve par 'elimination sur S en utilisant la relation bien fond'ee associ'ee `a la fonction
mesure:(ltof mesure), (i.e. en supposant le th'eoreme vrai pour tout y de mesure inf'erieure `a x, en
particulier un pr'ed'ecesseur de x par stepf ), puis en utilisant l''equation de point fixe P mov equation,
et en se ramenant `a la propri'et'e de conservation de l'ex'ecution par la relation ,!\Lambda  (par le th'eoreme 2

de compatibilit'e de stepf et ,!).
Enfin, pour conclure, l''etude de la version fonctionnelle de notre algorithme, nous avons utilis'e
l'extraction de Coq pour extraire en Ocaml le code de notre fonction P mov et obtenir ainsi un
code fonctionnel certifi'e de l'affectation parall`ele, int'egrable au compilateur.

6. Conclusion
Nous avons d'emontr'e la correction et la terminaison d'un algorithme de s'erialisation d'une affectation
parall`ele. Cet algorithme ne correspond pas exactement `a l'algorithme imp'eratif propos'e par Xavier
Leroy.
D'une part, l'algorithme fonctionnel d'etecte un cycle qu'`a partir de l'arc ayant initi'e la r'ecursion `a la
fonction move.one (i.e. le dernier 'el'ement de la liste Being moved), alors que l'algorithme imp'eratif
recherche le cycle `a priori n'importe o`u dans cette liste Being moved. Le fait qu'il est suffisant de
rechercher le cycle `a partir du fond de pile est induit dans la preuve de correction de la relation . (cas
de la r`egle P op o`u l'on prouve que tous les 'el'ements de oe outre le dernier ne peuvent pas avoir dn
comme source).
D'autre part, le cot'e imp'eratif de l'algorithme (effets de bord) n'est pas abord'e. Nous 'etudions la
possibilit'e d'utiliser Why [7, 6] mais les boucles imbriqu'ees et le nombre de tableaux trait'es (src,
dst et status) impliquent l'usage d'invariants de grosse taille, et les 'enonc'es d'obligations de preuve
g'en'er'es par le syst`eme sont tr`es gros et peu manipulables. D'autre part, les effets de bords dans
les vecteurs doivent n'ecessairement faire intervenir des lemmes de non aliasing, difficiles `a prouver.
Mais nous ne d'esesp'erons pas de parvenir `a prouver l'algorithme imp'eratif en utilisant Why, tout en
esp'erant pouvoir r'eutiliser les preuves d'ecrites ici.

Remerciements
Nous remercions Xavier Leroy, qui nous a donn'e l'id'ee de cette 'etude et nous a fourni l'algorithme de
d'epart en Caml.

Bibliographie
[1] A.V. Aho, R. Sethi, and J. D. Ullman. Compilers : principles, techniques and tools. Addison

Wesley, 1986.

[2] Yves Bertot and Pierre Cast'eran. Interactive Theorem Proving and Program Development,

Coq'Art:the Calculus of Inductive Constructions. Springer-Verlag, 2004.

[3] L''equipe Concert. L'action de recherche coop'erative Concert.

http://www-sop.inria.fr/lemme/concert.

[4] Coq development team. The Coq proof assistant. Documentation, system download. Contact:

http://coq.inria.fr/.

[5] Antonia Balaa et Yves Bertot. Fonctions r'ecursives g'en'erales par it'eration en th'eorie des types.

In Journ'ees Francophones pour les Langages Applicatifs, January 2002.

11

L. Rideau & B. P. Serpette
[6] J.-C. Filli^atre. Verification of Non-Functional Programs using Interpretations in Type Theory.

Journal of Functional Programming, 13(4):709-745, July 2003.

[7] Jean-Christophe Filli^atre. The why software. http://why.lri.fr/.
[8] Cathy May. The parallel assignment problem redefined. IEEE Transactions on Software

Engineering, 15(6):821-824, June 1989.

[9] Steven S. Muchnick. Advanced compiler design and implementation. Morgan Kaufmann, 1997.

12