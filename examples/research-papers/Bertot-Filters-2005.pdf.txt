

Filters on CoInductive Streams,
an Application to Eratosthenes' Sieve

Yves Bertot
INRIA Sophia Antipolis
Yves.Bertot@sophia.inria.fr

Abstract. We present the formal description of an algorithm to filter values from
an infinite steam using a type theory based prover. The key aspect is that filters are
partial co-recursive functions and we solve the problem of expressing partiality.
We then show how to prove properties of this filter algorithm and we study an
application computing the stream of all prime numbers.

Our objective is to describe a formal proof of correctness for the following Haskell [14]
program in a type theory-based proof verification system, like the Coq system [10, 1].

sieve (p:rest) = p:sieve [r | r <- rest, r `rem` p /= 0]
primes = sieve [2..]

This program is a functional implementation of Eratosthenes' sieve that consists in removing all multiples of previously found primes from the sequence of natural numbers.
We want to prove that the expression primes is the stream containing all the prime
numbers in increasing order.

This work relies on co-inductive types [5, 12, 13] because the program manipulates
infinite lists, also known as streams. This example was used as an illustration of a program and its proof of correctness in a language for co-routines in [15]. The exact formulation of the program given here was found in [7], who describes it as a re-phrasing
of an program SASL [21]. A proof of Eratosthenes' sieve in type theory was already
studied in 1993 [16], but their program has a different structure and does not exhibit
the filter problem that is central here. Another program computing the stream of prime
numbers is given as example in [8], which relies on a more general notion of ultrametric spaces to combine inductive and co-inductive aspects in recursive definitions. It
is later extended to sheaves [9].

Before performing the verification proof of such a program in type theory, we need
to be able to formulate it. This is difficult, because type theory based frameworks only
provide restricted capabilities for the definition of recursive functions, which basically
ensure that all functions are total. The Haskell program uses a filter function. This function receives a boolean predicate and a stream as argument and it is supposed to take
from the stream all the elements of the stream that satisfy the predicate and place them
in the resulting stream. Because the result is an infinite stream, it means that an infinity
of values should be found in the input, but this is not always possible and actually depends on the input: filter functions are partial. Our principal contribution is actually to
find a solution to the problem a large class of partial co-recursive functions.

P. Urzyczyn (Ed.): TLCA 2005, LNCS 3461, pp. 102-115, 2005.c\Delta  Springer-Verlag Berlin Heidelberg 2005

Filters on CoInductive Streams, an Application to Eratosthenes' Sieve 103
When computing on usual inductive structures, the termination of computation is
usually ensured by a syntactic restriction on the way functions may be defined: they
have to be "guarded-by-destructors". Intuitively, this contraint imposes a bound on the
number of possible recursive calls using the size of the algebraic term given as input. In
spite of its apparent simplicity, this criterion is quite powerful, because inductive types
are more general than simple algebraic types: infinitely branching nodes are allowed
and it is only the absence of infinite branches that is used to restrict computation.

For functions that produce terms in co-inductive types, recursive functions are also
allowed, but this time restrictions are not placed on the way the input is used, but on
the way the output data is produced. A common syntactic criterion is to accept a recursive call to a co-recursive function only if some information has been produced in the
result, in the form of a constructor . The terminology is that calls must be "guarded-byconstructors" [12]. In their usual form, filters do not respect this syntactic criterion.

We propose to combine insights coming from reasoning techniques on linear temporal logic [4, 6] and on general recursion with partial functions, essentially the techique
advocated in [11, 2]. We transpose this technique to the Calculus of Inductive Constructions, the underlying theory for the Coq system, with some added difficulties coming
from the use of two sorts. Coping with these two sorts also has advantages; we obtain
the possibility to extract our model back to conventional programming languages and
to execute the programs that were proved correct.

In a first part we give an overview of co-recursive programming techniques in the
Calculus of Constructions. In a second part we show that filters cannot be programmed
directly, mainly because not all streams are valid inputs for filters, and we describe a
few notions of linear temporal logic to characterize the valid inputs. We show that this
can be used as a basis to program a filter function. In a third part, we describe how this
adapts to the context of Eratosthene's sieve. The fourth part concludes and underlines
the opportunities for future improvement.

1 Co-induction and Co-recursion
Co-inductive types are defined by giving together a type and a collection of constructors. A pattern-matching construct expresses that all elements of a co-inductive type
are obtained through one of the constructors. However, there is no obligation that the
process of constructing a term in a co-inductive type should be finite as is the case for
inductive types [19, 12].

For instance, we can work in a context where some type A is declared and use the
type of streams of elements of A. We later instantiate A with the type Z of integers.

CoInductive str : Set := SCons: A \Delta  str \Delta  str.
A stream of type str is like a list of elements of A: it has a first element and a tail, grouped
together using the constructor SCons. Inductive definitions of lists usually contain a
constructor for the empty list, but here there is none: all our streams are infinite.

Writing programs with streams as inputs, we have to avoid traversing the whole data
structure, because this operation never terminates. In the calculus of constructions, there
are a few safeguard that prevent this. The first safeguard is that computation of values in

104 Y. Bertot
co-inductive types is not performed unless explicitely requested by a pattern-matching
operation.

The second safeguard is that the definitions of recursive functions returning coinductive types must respect a few constraints, like for recursive functions over inductive types, except that the constraints are not expressed in terms of using the input but in
terms of producing the output. The intuitive motto is "every recursive call must produce
some information". In practice, every recursive call must be embedded in a constructor
of the co-inductive type, the whole expression being allowed to appear only inside a
pattern-matching construct, an abstraction, or another constructor of this co-inductive
type. We say that such a recursive function is guarded by constructors.

The criterion is theoretically justified by the fact that a co-inductive type is a final
co-algebra in the category of co-algebras associated to the collection of constructors
given in the co-inductive definition and a guarded function actually defines another coalgebra in this category. The existence of value in the final co-algebra is a consequence
of the finality property.

Here is an example of a well-formed function, that will be used in our work (in this
example, the type A is not used implicitely anymore and we use the type of streams of
integers, str Z).

CoFixpoint nums (n : Z) : str Z := SCons n (nums (n+1))
Every recursive call produces a new element of the stream. The value "nums 2" is
exactly the model for the Haskell value [2 ..].

Proofs by co-induction are co-recursive functions whose type concludes on a coinductive predicate, a type with logical content (a co-inductive type in sort Prop).
When performing a proof by co-induction, we have the same constraints as when defining a co-recursive function: the co-inductive hypothesis expresses the same logical content as the whole theorem, but it can only be used to prove a statement appearing as a
premise of one of the constructors in the co-inductive predicate.

2 The Filter Problem
A filter function is a function that takes a predicate and a stream as arguments and returns the stream that contains all the elements of the argument that satisfy the predicate.
It can be programmed in Haskell using the following text:

filter f (x:tl) | f x = x:(filter f tl)
filter f (x:tl) = (filter f tl)

The notation [x | x <- rest, x `rem` p /= 0] actually stands for the following more traditional functional expression:

filter (\x -> x `rem` p /= 0) rest
When translated into Coq, this gives the following (invalid) code:
CoFixpoint filter (f:A\Delta Prop)(s:str) : str :=

match s with

Filters on CoInductive Streams, an Application to Eratosthenes' Sieve 105
SCons x tl =>
match f x with

true => SCons x (filter f tl)
| false => filter f tl
end.

There are more palatable notations, this formulation emphasizes the fact that the second
recursive call appearing in this program is not valid: it is a recursive call not embedded inside a constructor. The function needs to perform several recursive calls before
returning the next data and this is rejected. This is consistent with the constraint that
there should be no infinite computation: if we take a predicate and a stream where no
element satisfies the predicate, the program will loop forever without producing any
result. Understanding this counter-example gives us a key to a technique to model filter
functions.

2.1 Characterizing Valid Filter Inputs
If we want to use a filter function, we need to give it arguments that won't make it loop.
We use the same technique as in in [11, 2]: an extra argument expresses that the input
satisfies the right conditions to ensure data production.

For a given predicate P, a stream is correct if we can find an element of the stream
that satisfies the predicate and if the sub-stream starting after that element is also correct.
We can simplify this analysis by saying that a stream is correct if we can find an element
satisfying the predicate and if its tail is also correct.

That there is one element satisfying the predicate actually is an inductive property,
not a co-inductive one, so we will characterize the correct streams for a given predicate
using both an inductive predicate and a co-inductive predicate.

This is reminiscent of linear temporal logic, viewing the different elements of the
stream as a succession of states in time. The property that the predicate is eventually
satisfied means that the property eventually P is satisfied. The property that must
be repeated for all streams is an always (eventually P). The encoding of these
linear logic predicates as inductive predicates has already been studied in [4, 6] have
already studied how these linear logic predicates can be encoded as inductive predicates.
In our case, we assume that we are working in a context where the predicate P is given,
and we encode directly the combination of always and eventually as a predicate
on streams, which we call F_infinite (the predicates always, eventually and
F_infinite are similar to the ones with the same name in [1]).

Inductive eventually : str \Delta  Prop :=

ev_b: \Theta x s, P x \Delta  eventually (SCons x s)
| ev_r: \Theta x s, eventually s \Delta  eventually (SCons x s).

CoInductive always : str \Delta  Prop :=

as_cons: \Theta x s, P x \Delta  always s \Delta  always (SCons x s).

CoInductive F_infinite : str \Delta  Prop :=

al_cons:

106 Y. Bertot

\Theta x s, eventually (SCons x s) \Delta  F_infinite s \Delta 

F_infinite (SCons x s).

Now, a filter function should have the following type :

\Theta s, F_infinite s \Delta  s
We have shown that characterizing the correct inputs for the filter function relies on
both a co-inductive and an inductive part; this suggests that the filter function should
have both a recursive part and a co-recursive part. The recursive part is responsible for
finding the first element, making as many recursive calls as necessary without producing
any data, but being guarded by an eventually property on the input, when the first
element is found, we can produce it and have a co-recursive call, which is now valid.

Programming the Recursive Part. The recursive part of the filter function is defined
by recursion on the ad-hoc predicate eventually. It also uses a function P_dec that
is supposed to compute whether the property P is satisfied or not.

Here is a first attempt where we only produce the first value that satisfies the predicate.

Fixpoint

pre_filter_i (s:str)(h:eventually s){struct h}:A :=
match s as b return s = b \Delta  A with

SCons x s' =>

fun heq =>

match P_dec x with

left _ => x
| right hn => pre_filter_i s'

(eventually_inv s h x s' heq hn)
end
end (refl_equal s).

The theorem eventually_inv has the following statement:
\Theta s, eventually s \Delta \Theta 

x s', s = SCons x s'\Delta  not(P x) \Delta  eventually s'

For this definition to be accepted, the expression eventually_inv s h x s'
heq hn must be recognized as a sub-term of h. This is achieved because this proof is
actually obtained through a pattern-matching construct on the proof h. In this patternmatching construct, we must ensure that the sub-expression that is returned in each
possible case is a sub-term of h. There are two cases.

1. Either the proof h was obtained with the constructor ev_r applied to three arguments arguments x1, s1, and h1. In this case, s1 = s\Delta  and h1 is a sub-term of h
that is also a proof of eventually s1. We can return h1.
2. Either the proof h was obtained with the constructor ev_b applied to x1, s1,

and hp. In this case, x1 = x and hp is a proof that P x1 holds. The fact hp is
inconsistent with the fact hn which must be a proof of not(P x). Because of this
inconsistency, we are relieved from the need to produce a sub-term proof.

Filters on CoInductive Streams, an Application to Eratosthenes' Sieve 107
In other words, we only need to produce a sub-term proof for the consistent cases. When
the constructor that is used does not contain a sub-term proof for the recursive call, the
fact that this constructor may have been used is inconsistent.

The function pre_filter_i is not satisfactory, because we also need the recursive function to produce the stream, on which filtering carries on, together with a proof
that this stream contains an infinity of satisfactory elements. Thus we want to program
a function filter_i with the following type:

\Theta s, eventually s \Delta  F_infinite s \Delta 

{x:A, P x}*{s':str, F_infinite s'}

This function takes one extra argument that is a proof that all the sub-streams eventually
satisfy the predicate, it returns two pieces of data annotated with logical information.
The first piece of data is a number x and the annotation is a proof that x satisfies the
predicate P, the second piece of data is a stream s' and the annotation is a proof that an
infinity of elements of s' satisfy P. We do not describe the code of filter_i here,
it has the same structure as the function pre_filter_i, but it contains more code to
handle the logical information.

Programming the Co-recursive Part. Assuming the filter_i function and a theorem always_eventually, which indicates that any stream that satisfies the predicate F_infinite also satisfies eventually, we can produce the filter function, which contains a single co-recursive call using the data returned by filter_i.

CoFixpoint filter (s : str) (hs : F_infinite s): str :=

let (a, b) := filter_i s (always_eventually s hs) hs in
let (n, hn) := a in let (s', hs') := b in
SCons n (filter s' hs').

Proving Properties of the Result Stream. Because the filter function has a recursive and a co-recursive part, all proofs about the resulting stream will have an inductive
and a co-inductive part. For instance, we can prove that every property that is satisfied by all the elements of the initial stream is also satisfied by all the elements of the
resulting stream. To state this theorem we have to change our implicit notations: the
predicates always and F_infinite and the function filter are not implicitely
applied to P anymore. This results in extra arguments for the various predicates and
functions.

Theorem filter_keep:\Theta 

(P Q:A \Delta  Prop)(P_dec:\Theta x,{P x}+{not(P x)})(s:str)

(h:F_infinite P s),
always Q s \Delta  always Q (filter P P_dec s h).

To establish this theorem, we first have to prove that the element and the stream returned by filter_i satisfy the properties Q and always Q, respectively. This proof
uses an induction over a proof of eventually P s. The theorem has the following
statement:

108 Y. Bertot
Theorem filter_i_keep:\Theta 

(P Q:A \Delta  Prop)(P_dec:\Theta x,{P x}+{not(P x)})(s:str)

(h:eventually P s)(ha : F_infinite P s),
always Q s \Delta \Theta 

x hx s' hs',
filter_i P P_dec s h ha =
(exist (fun n => P n) x hx,

exist (fun s => F_infinite P s) s' hs') \Delta 
Q x /\ always Q s'.

This proof is tricky and we have to use a maximal induction principle as described in
[1] (sect. 14.1.5).

We can also prove that all elements of the resulting stream satisfy the predicate P.

Theorem filter_always:\Theta 

(s:str)(h:F_infinite s), always (filter s h).
Proof.

cofix.
intros s h; rewrite (st_dec_eq (filter s h)); simpl.
case (filter_i s (always_eventually s h) h).
intros [n hn][s' hs']; apply as_cons.
assumption.
apply filter_always.
Qed.

We give the script to perform the proof using the tactic language provided in Coq. The
cofix tactic provides an assumption that expresses exactly the same statement as the
theorem we want to prove, but this assumption can only be used after a use of as_cons
(the constructor of always). Here we need to prove that the first element satisfies P,
but this is already given in the result of filter_i, so that we do not need an extra
inductive proof.

This proof contains a rewriting step with a theorem st_dec_eq. This theorem is
used to force the evaluation of the co-inductive value (filter s h) because otherwise, co-inductive values remain unevaluated. This method to force evaluation for
at least one step is described in [1], along with other techniques for proofs about coinductive data.

Non-local Properties. With only filter_always and filter_keep, there are
two important characteristics that we are still unable to express. The first characteristic
is that no value present in the input and satisfying P is forgotten, the second is that
the elements in the result are in the same order, with no repetition as long as there were
no repetitions in the input. These characteristics seem more complex to express because
they are not local properties of each stream element taken separately, but they are global
properties of the streams. We propose a solution to express them as properties between
consecutive elements, using a new co-inductive predicate named connected. Intuitively, a stream is connected by some binary relation R with respect to some value x
if any two consecutive elements of the stream are connected by R and the stream's first
element is connected with x. Here is the co-inductive definition:

Filters on CoInductive Streams, an Application to Eratosthenes' Sieve 109
CoInductive connected(R:A\Delta A\Delta Prop):A\Delta str\Delta Prop:=

connected_cons:\Theta 

k x s, R k x \Delta  connected R x s \Delta 

connected R k (SCons x s).

For instance, to express that some stream contains all the natural numbers above a
given k that satisfy the property P in increasing order, we can use the following binary
relation:

Definition step_all P x y :=

x < y /\ (\Theta z, x < z < y \Delta  not(P z)) /\ P y

and we say that the stream satisfies the property connected (step_all P) k.
We proved the following two theorems:

Theorem step_all_always :\Theta 

P k s, connected (step_all P) k s \Delta  always P s.

Theorem step_all_present :\Theta 

P k s,

connected (step_all P) k s \Delta \Theta 

x, k < x \Delta  P x \Delta  eventually (fun y => y=x) s.

The first theorem expresses that all numbers in the stream satisfy P, and the second one
expresses that all numbers larger than k and satisfying P are in the stream.

Our main theorem for filter will simply express that it maps any connected
stream for a relation R1 to a connected stream for a relation R2, provided the relations
R1 and R2 satisfy proper conditions with respect to P.

Theorem filter_connected:\Theta 

(R1 R2:A \Delta  A \Delta  Prop),
(\Theta x y z, R1 x y \Delta  not(P y) \Delta  R2 y z \Delta  R2 x z) \Delta 
(\Theta x y, P y \Delta  R1 x y \Delta  R2 x y) \Delta \Theta 

s (h:F_infinite s) x,

connected R1 x s \Delta  connected R2 x (filter s h).

The two conditions that R1 and R2 must satisfy express that if x1, . . . xk is a sequence
of values such that P x1 and P xk hold, not(P xi) holds for all the other indices i from
1 and k, and R1 xi xi+1 holds, then R2 x1 xk holds.

The theorem filter_connected sepersedes the other two theorems. The theorem filter_always is a obtained with filter_connected for R1 the relation
that is always satisfied and R2 the relation of x and y that holds if and only if P y
holds. The theorem filter_keep Q is a corollary for R1 and R2 that are both the
relation of x and y that holds if and only if Q y holds.

We thus have a generic implementation of a filter function, together with a powerful
generic theorem to prove most of its properties. This package can be re-used for any
development using filters on arbitrary streams, as long as users provide the predicate, the
decision function, and proofs that the streams taken as arguments satisfy the predicate

110 Y. Bertot
infinitely many times. To perform proofs about the filtered streams, users simply need
to exhibit the relations R1 and R2 and proofs of the properties they have to satisfy. Even
though we used a clever technique to implement the filter function, it can be used and
reasoned about with much simpler proof techniques.

Some properties are not captured by the theorem filter_connected. For instance, if the input stream contains several instances of the same element satisfying P
then the same number of instances will occur in the result, but this cannot be expressed
using the connected predicate only.

3 Application to Eratosthenes' Sieve
We can now come back to our initial objective and use our filter function to model
Eratosthenes' sieve.

3.1 The Sieve's Specification
Defining Primality. Our model does not follow strictly the initial Haskell program in
the sense that we change our filtering predicate for a predicate not_mult m, which
accepts all numbers that are not multiples of m and we use a function mult_dec with
the following type:\Theta 

m, m > 0 \Delta  \Theta n, {not_mult m n}+{not(not_mult m n)}
We use an auxiliary notion of partial primes. We say that a number n is partially prime
up to another number m if it is not a multiple of any number larger than 1 and smaller
than m (the bounds are excluded). This notion is useful to characterize the streams that
are given as arguments to the filter function, as we see later. We then define the
notion of pre-prime numbers, which are partially prime up to themselves. The preprime numbers actually are 0, 1, and the prime numbers. We prove a few theorems
around these notions:

partial_prime_le. If a number is partially prime up to m, it is partial prime up
to any positive n less than or equal to m.

partial_prime_step. If a number is partially prime up to m and not a multiple
of m, then it is partially prime up to 1 + m .

pre_prime_decompose. For every positive number n that is not pre-prime, there
exists a pre-prime divisor of n between 1 and n (bounds excluded).

infinite_primes. For every number, there exists a larger pre-prime number.
partial_prime_next. If a number is partially prime up to m and there are no preprime numbers between m and n (m included, n excluded), then it is partially prime up
to n. The proof of this theorem uses the previous one.

Specifications for Input and Output Streams. Obviously the connected predicate
is well-suited to express that some stream contains all the prime numbers above a given
bound, using the following binary relation:

Filters on CoInductive Streams, an Application to Eratosthenes' Sieve 111
Definition step_prime := step_all pre_prime.
The input must be a stream containing partial primes, so we use connected with thefollowing relation to describe this specification:

Definition step_partial_prime m := step_all (partial_prime m).

This gives us different binary relations for different values of m.

Main Theorems. We have two main theorems concerning the filter function. The first
theorem expresses that the filter function can be used. We need to express that the right
F_infinite property holds to use the filter function. This is expressed with the
following theorem.

Theorem partial_primes_to_F_infinite:\Theta 

m, 1 < m \Delta \Theta 
k s, 1 < k \Delta  connected (step_partial_prime m) k s \Delta 
F_infinite (not_mult m) s.

The proof of this theorem relies on the basic theorem that there are infinitely many
primes. It contains both a co-inductive step to prove that the stream tail also satisfies the
F_infinite property and an inductive step to prove that we can find a number that
is not a multiple of m in the stream. The inductive part of the proof is done by general
induction over the distance to an arbitrary prime number above the first element of the
stream, this distance is bound to decrease and stay positive as we traverse the stream
while finding only multiples of m, because this arbitrary prime number is necessary in
the stream and not a multiple of m.

The second theorem about the filter function shows that when h is a proof that
m is positive the function, filter (not_mult m) (mult_dec m h) maps any
stream satisfying

connected (step_partial_prime m) k
to a stream satisfying
connected (step_partial_prime (m + 1)) k.
This theorem is not proved using any form of induction, we only need to check that
the step_partial_prime relations satisfy the right conditions for the theorem
filter_connected.The other theorems concentrate on streams that are connected for the relations

step_partial_prime. First, the theorem partial_prime_next, which wedescribed in section 3.1, can be lifted to connected streams. Second, the first element of
some connected streams are prime numbers:
Theorem pre_prime_connect_partial_prime:\Delta 

m s, 0 <= m \Lambda 
connected (step_partial_prime(m + 1)) m s \Lambda  pre_prime (hd s).

112 Y. Bertot
3.2 Obtaining the Main Function
The streams that are manipulated in the main function are the streams of all partialprimes up to

m, starting at m. For this reason, we have defined another property thatcharacterizes the main streams.

Definition start_partial_primes s :=

1 < hd s /\ connected (step_partial_prime (hd s)) (hd s) (tl s).

After filtering out the multiples of the stream's first element, we obtain a new streamwhere the first element

p is itself prime and the rest is another stream that satisfies theproperty
start_partial_primes. This property is the invariant that is respectedby arguments to

sieve throughout the recursion, this invariant is expressed in a the-orem named
start_partial_primes_invariant. With this invariant we cannow define a Coq model for the

sieve function.

CoFixpoint sieve s: start_partial_primes s \Lambda  str Z :=

match s return start_partial_primes s \Lambda  str Z with

SCons p rest =>

fun H : start_partial_primes (SCons p rest) =>
let (Hm, Hpprs) := H in
let Ha := partial_primes_to_F_infinite p Hm p rest Hm Hpprs
in SCons p

(sieve

(filter (not_mult p) (mult_dec p (lt1_gt0 _ Hm)) rest Ha)
(start_partial_primes_invariant p rest Ha Hm Hpprs))
end.

Although this definition is cluttered with logical information, the reader should be
convinced that this function really follows the same structure as the initial Haskell function we used as a guideline: construct a stream with the first element of the input and
then call the sieve function on the result of filtering out the multiples of this first element. We can show that the result is connected for the property step_prime, this is
a simple proof by co-induction.The last step is to verify that the stream of natural numbers starting from

k is alsothe streams of partial primes up to 2 starting from
k (this theorem is called pprs2) andcan construct the stream of all prime numbers (
lt12 is a proof of 1 < 2 and le22 isa proof of 2 <= 3):

Definition primes := sieve (nums 2)(conj lt12 (pprs2 2 le22)).

We finally obtain the following theorem.
Theorem pre_primes: connected step_prime 1 primes.
Using the theorems step_all_always and step_all_present, we show that
all the prime numbers and only prime numbers are in the result. The proof has been
verified using the Coq system. The files are available at the following address:
ftp://ftp-sop.inria.fr/lemme/Yves.Bertot/filters.tar.gz

3.3 Code Extraction
We can map the sieve function back to Haskell code using the extraction facility
[17, 20]. The code we obtain for the sieve function is close to the one we initially

Filters on CoInductive Streams, an Application to Eratosthenes' Sieve 113
intended to certify, except that it uses a re-defined type of streams, instead of using the
built-in type of lists.

sieve s =

case s of

SCons p rest \Delta 
SCons p (sieve (filter (\x \Delta  mult_dec p x) rest))

The code we obtain for the filter function is less easy to recognize. A simple
difference with the original code is that the extracted code uses its own datatype for
boolean values, where Left is used to represent True and Right is used to represent False. The main difference is that the function is decomposed into two recursive
functions. However, we maintain that this code is equivalent, up to the unfolding/folding
technique of [3] to the initial filter.

filter_i p_dec s =

case s of

SCons x s' \Delta 

(case p_dec x of

Left \Delta  Pair x s'
Right \Delta  filter_i p_dec s')

filter p_dec s =

case filter_i p_dec s of

Pair a b \Delta  SCons a (filter p_dec b)

4 Conclusion
Our first experiments was actually carried out on a more complex but very similar program, stated as follows:

fm a n (x:l) | n < x = fm a (n+a) (x:l)
fm a n (x:l) | n = x = fm a (n+a) l
fm a n (x:l) | x < n = x:(fm a n l)

sieve (x:l) = x:(sieve (fm x (x+x) l))
primes = sieve [2 ..]

The function fm actually performs the filter step of removing all the multiples of a
number in a stream, but it avoids the computation of remainders by keeping the next
expected multiple in an auxiliary variable. This is probably closer to the initial description of the sieve by Eratosthenes. This function has an internal state and it does not
behave in the same manner as filter. Actually, there are streams for which filter
(not_mult m) ... behaves properly and fm does not, since this function relies
more crucially on the property that all the values found in the streams are in increasing
order. Another significant difference is that this paper presents a separation between algorithm description and proof development, mostly because we believe this makes the

114 Y. Bertot
method easier to understand. In our previous work, we practiced a more "integrated"
development, where the algorithm and the proof that it satisfies its specifications were
described at the same time. In spite of these differences, defining this function and reasoning about it still relies on the same technique of mixing inductive and co-inductive
predicates and developing an auxiliary function that is recursive on the inductive predicate. This previous work was done together with Damien Galliot as part of a student
project in 2003.

The first result of this paper is to show that we can model more general recursive
programming than what seems imposed by the basic "guarded-by-constructors" constraint. We believe this work describes an improvement on the domain of co-inductive
reasoning that is similar to the improvement brought by well-founded recursion when
compared to plain structural recursion. The key point was to adapt the technique of adhoc predicates for partial functions to co-inductive structures while respecting the sort
constraints of the calculus of constructions. This was made possible thanks to a remark
by C. Paulin-Mohring that sub-terms were not restricted to variables. This approach can
be re-used to other more practical applications of co-inductive data. In particular, we
think it can be adapted to the co-inductive data used to implement real number arithmetic as proposed in [18].

The second important contribution is to describe a filter function in a general form,
together with a general theorem that makes it possible to prove properties of this function's result. While the function relies on a lot of expertise in the description of inductive
and co-inductive programs, the general theorem makes it possible to relieve users from
the task of performing inductive or co-inductive proofs, by simply coming back to relations between successive elements of the input and the output. We have shown the
usability of our general theorem on the example of Eratosthenes' sieve. It is interesting
to compare our proof to the one proposed in [15]. Our proof only uses local notions: the
properties of two consecutive elements in a stream, while their proof uses more general
notions concerning whole streams.

Acknowledgements
The author wishes to thank Pierre Caste'ran for teaching him the techniques of coinduction in the Calculus of Inductive Constructions and for his remarks on early drafts
of this paper, Gilles Kahn for discussions on the sieve example, Venanzio Capretta for
sharing his knowledge on the technique of recursion on an ad-hoc predicate, Christine Paulin-Mohring for describing the extensions to the guard systems, and Laurence
Rideau and Laurent The'ry for their comments on early drafts of the paper.

References

1. Yves Bertot and Pierre Caste'ran. Interactive Theorem Proving and Program Development,

Coq'Art:the Calculus of Inductive Constructions. Springer-Verlag, 2004.
2. Ana Bove. Simple general recursion in type theory. Nordic Journal of Computing, 8(1):22-

42, 2001.
3. Rod M. Burstall and John Darlington. A transformation system for developing recursive

programs. Journal of the ACM, 24(1):44-67, 1977.

Filters on CoInductive Streams, an Application to Eratosthenes' Sieve 115
4. Pierre Caste'ran and Davy Rouillard. Reasoning about parametrized automata. In Proceedings, 8-th International Conference on Real-Time System, volume 8, pages 107-119, 2000.
5. Thierry Coquand. Infinite objects in Type Theory. In Henk Barendregt and Tobias Nipkow,

editors, Types for Proofs and Programs, volume 806 of LNCS, pages 62-78. Springer Verlag,
1993.
6. Solange Coupet-Grimal. An axiomatization of linear temporal logic in the calculus of inductive constructions. Journal of Logic and Computation, 13(6):801-813, 2003.
7. Antony J. T. Davie. An introduction to functional programming systems using Haskell. Cambridge Computer Science texts. Cambridge University Press, 1992.
8. Pietro di Gianantonio and Marino Miculan. A unifying approach to recursive and corecursive definitions. In Herman Geuvers and Freek Wiedijk, editors, Types for Proofs and
Programs, volume 2646 of LNCS, pages 148-161. Springer Verlag, 2003.
9. Pietro di Gianantonio and Marino Miculan. Unifying recursive and co-recursive definitions

in sheaf categories. In Igora Walukiewicz, editor, Foundations of Software Science and Computation Structures (FOSSACS'04), volume 2987 of LNCS. Springer Verlag, 2004.
10. Gilles Dowek, Amy Felty, Hugo Herbelin, Ge'rard Huet, Chet Murthy, Catherine Parent,

Christine Paulin-Mohring, and Benjamin Werner. The Coq Proof Assistant User's Guide.
INRIA, May 1993. Version 5.8.
11. Catherine Dubois and Ve'ronique Viguie' Donzeau-Gouge. A step towards the mechanization

of partial functions: domains as inductive predicates, July 1998. www.cs.bham.ac.uk/~
mmk/cade98-partiality.
12. Eduardo Gime'nez. Codifying guarded definitions with recursive schemes. In Peter Dybjer,

Bengt Nordstro"m, and Jan Smith, editors, Types for proofs and Programs, volume 996 of
LNCS, pages 39-59. Springer Verlag, 1994.
13. Eduardo Gime'nez. An application of co-inductive types in Coq: Verification of the alternating bit protocol. In Proceedings of the 1995 Workshop on Types for Proofs and Programs,
volume 1158 of Lecture Notes in Computer Science, pages 135-152. Springer-Verlag, 1995.
14. P. Hudak, S. Peyton Jones, P. Wadler, et al. Report on the Programming Language Haskell.

Yale University, New Haven, Connecticut, USA, 1992. Version 1.2.
15. Gilles Kahn and David B. MacQueen. Coroutines and networks of parallel processes. In

IFIP Congress 77, pages 993-998. North-Holland, 1977.
16. Franc,ois Leclerc and Christine Paulin-Mohring. Programming with streams in coq. A case

study: the sieve of Eratosthenes. In Henk Barendregt and Tobias Nipkow, editors, Types for
Proofs and Progams, volume 806 of LNCS, pages 191-212. Springer Verlag, 1993.
17. Pierre Letouzey. A new extraction for Coq. In Herman Geuvers and Freek Wiedijk, editors,

TYPES 2002, volume 2646 of Lecture Notes in Computer Science. Springer-Verlag, 2003.
18. Milad Niqui. Formalising Exact Arithmetic, Representations, Algorithms, and Proofs. PhD

thesis, University of Nijmegen, September 2004. ISBN 90-9018333-7.
19. Christine Paulin-Mohring. Inductive Definitions in the System Coq - Rules and Properties.

In M. Bezem and J.-F. Groote, editors, Proceedings of the conference Typed Lambda Calculi
and Applications, number 664 in Lecture Notes in Computer Science, 1993. LIP research
report 92-49.
20. Christine Paulin-Mohring and Benjamin Werner. Synthesis of ML programs in the system

Coq. Journal of Symbolic Computation, 15:607-640, 1993.
21. David A. Turner. SASL Language Manual. St. Andrews University Department of Computer

Science, 1976.