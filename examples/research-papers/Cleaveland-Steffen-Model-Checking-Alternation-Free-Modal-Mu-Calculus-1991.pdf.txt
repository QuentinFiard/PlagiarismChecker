

A  Linear-Time  Model-Checking  Algorithm  for  the Alternation-Free  Modal  Mu-Calculus 

Rance  Cleaveland*  Bernhaxd  Steffen t 

Abstract 
We  develop a  model-checking algorithm for  a  logic that  permits propositions to  be  defined with  greatest  and  least fixed points  of mutually recursive systems of equations.  This  logic is 

as  expressive as  the  alternation-free fragment  of the  modal mu-calculus identified by Emerson and  Lei,  and  it  may  therefore be  used  to  encode  a  number  of temporal logics and  behavioral 
preorders.  Our  algorithm determines whether a  process satisfies a  formula in  time proportional to  the  product  of the  sizes  of the  process  and  the  formula;  this  improves on  the  best  known 

algorithm for similar fixed-polnt logics. 

1  I n t r o d u c t i o n  
Behavioral equivalences and preorders, and  temporal logics, have been used extensively in  automated 
verification tools for finite-state processes  [CES,  Fe, MSGS, RRSV,  RdS].  The  relations  axe typically 
used  to  relate  a  high-level  specification process  to  a  more  defiled  implementation process,  while 
temporal  logics  enable  system  designers  to  formulate  collections of properties  that  implementations 
must  satisfy.  Decision  procedures  have  been  developed for  computing  different  behavioral  relations and  for  determining  when  processes  satisfy formulas in  several temporal  logics,  and  they  have been 

incorporated into various automated tools.  Typically, these tools support  only one of these verification 

methods.  However, recent  results  point to  advantages of using the  methods  together  (cf.  [CS1,  GS]), 

and  therefore to  the  need  for  tools,  like the  Concurrency  Workbench  [CPS1,  CPS2],  which  support 
all three.  Moreover, such  combined tools  are not  necessaxily more  complex than  single-purpose tools, 
as  e.g.  preorder  checking  may  be  efficiently reduced  to  model  checking  [CS2];  the  model-checking 
algorithm in  [CS2] leads to the  most  efficient algorithm known for preorder checking. 

In this paper, we extend the  algorithm of [CS2] to deal with a logic whose propositions axe defined 
by  least,  as  well  as  greatest,  fixed  points  of mutually  recursive  systems  of equations.  This  logic is 
strictly more expressive than  the logic of [CS2];  it has the same power as the alternation-free fragment 
of the  modal  mu-calculus  [EL],  and  therefore  a  number  of different  branching-time logics,  including Computation  Tree  Logic  [CES]  and  Propositional  Dynamic  Logic  [FL],  have  uniform,  lineax-time 

encodings in it.  Moreover, the time complexity of our new algorithm is proportional to the  product of the  sizes of the process and  the formula under  consideration, and  therefore matches  the  complexity of 
the  algorithm in  [CS2]. 

The  remainder  of  the  paper  develops  along  the  following  lines.  Section  2  describes  transition 
systems,  which  serve  as  our  process  model,  and  presents our  logic.  The  section following then  gives 
our  model-checking  algorithm,  and  Section  4  shows  how  the  algorithm  may  be  applied  to  model 

checking in other logics as well as to the calculation of behavioral preorders.  The final section contains 
our  conclusions and  directions for future reseaxch. 

*Department of Computer Science, North Carolina State University, Raleigh, NC 27695-8206, USA. Researchsup- ported by National Science Foundation/DARPA Grant CCR-9014"i?fi. 

! Lehrstutd fdr Informatik H, Rheinisch-Westf'allsche Technische Hochschule Aachen, D-5100 Aachen, GERMANY. 

49 
Formulas  are  interpreted  with  respect  to  a  Taxed labeled  transition  system  (S, Act,.-*),  a  valuation 
])  : .4 ~  2 s,  and  an  environment e  :  Vat ~  28. 

~ale  =  V(A) 
[X]e  =  e(X) 
l[r  V ~2]]1~  :  H(:T~I]e U  [[~2]e 
[[Ox A 02lie  =  [[0lien  ~O2]e 

[[a]~le  =  {s  IVs '. s- ms '=~' ~  l[~]e} 

Figure  1:  The  semantics of basic formulas. 
2  P r o c e s s e s   a n d   t h e   M o d a l   M u - C a l c u l u s  
We use  labeled transition  systems  to  model processes.  These  may be formally  defined as  follows. 

Definition  2.1  A  labeled  transition system  T  is  a  triple  (S, Act,--*),  where: 

fi9 S  is  a set  of states; 
fi9 Act  is  a  set  of actions;  and 
fi9  ---* C  S  X  Act X  S  is  the  transition relation. 
Intuitively, a  labeled  transition  system  encodes  the  operational  behavior  of  a  process.  The  set  S 
represents  the  set  of  states  the  process  may  enter,  and  Act  contains  the  set  of  actions  the  process 
may  perform.  The  relation  ~  describes  the  actions  available to  states  and  the  state  transitions  that may  result  upon  execution  of  the  actions.  In  the  remainder  of  the  paper  we  use  s  ~-*  g  in  lieu  of 

Is, a,s')  G---~, and  we write  s  -~  when there  is  an  s I such  that  s  -~ s'.  I f s   -~ g  then  we  say that  s' is 
an  a-derivative  of s. 

Given a labeled transition system T  =  IS, Act, "*1, we define processes as rooted transition systems, 
i.e.  as  pairs  (T, s),  where  s  E  S  is  a  distinguished element, the  "start  state".  If the  transition system 
is obvious from the  context, we omit  reference to it;  in this  case, processes  will be identified with  their 

start  states.  Finally, when ~q and Act are finite, we say that  the labeled transition system is finite-state. 

2 . 1   S y n t a x   a n d   S e m an t i c s   o f   B a s i c   F o rm u l a s  
The logic we consider may be viewed as a variant of the modal mu-calculus [Ko], or the Hennessy-Milner 
Logic  with  recursion  [La].  Let  Vat be  a  (countable)  set  of variables,  .~  a  set  of  atomic  propositions, 
and  Act a  set  of actions.  In what  follows, X  will range over  Vat,  A  over .4,  and  a  over  Act.  Then  the 
syntax of  basic formulas is  given by the  following grammar. 

The  formal  semantics  appears  in  Figure  1.  It  is  given  with  respect  to  a  labeled  transition  system 

IS, Act, -~), a valuation ~  mapping atomic propositions to subsets of 8,  and an environment e mapping 
variables  to  subsets  of S.  Intuitively, the  semantic function maps  a  formula  to  the  set  of states  for 

which the formula is  "true".  Accordingiy, a  state  s  satisfies  A  G A  if s  is in the  valuation of A, while s 

satisfies X  if s  is an element of the set bound to X  in e.  The propositional constructs are interpreted in 

the usual fashion:  s  satisfies  01 V ~  if it  satisfies  one of the  ~  and  ~1 A ~2 if it  satisfies  both  of them. 
The  c o n s t r u c t s / a/ a n d   [a]  are  modal  operators;  s  satisfies  (a)~  if it  has  an  a-derivative satisfying  ~, 
white  n satisfies  [a]~  if each  of its  a-derivatives satisfies  ~. 

50 
2.2  S y n t a x   o f   E q u a t i o n a l   B l o c k s  
Formulas may also he defined using sets of blocks of (mutually recursive) equations.  A  block of equations 
has one of two forms - -   rain{E} or  maz{E} - -   where E  is a list of equations 

Xl  =  01 

in which each 0~ is a  basic formula and the Xi  are all distinct.  Intuitively, a  block defines n  mutually 

recursive propositions,  one  per  variable; the  precise  role played by the  maz  and  rain  indicators  will 
become clear in a  moment.  Several blocks may be used to define formulas, and the right-hand sides  of 

an equation in one block may refer to  variables appearing on the left-hand sides  of equations in other 
blocks.  In what  follows  we  assume  that  all the  variables that  appear  on  the  left-hand sides  in  a  set 

of blocks are  distinct, and  we also  impose an  additional syntactic restriction.  Define Bi  -*  Bj  if Bi 
and Bj  are  distinct and  a left-hand-side variable in Bi  appears  in a  right-hand-side expression of Bj. 
Then the  "block graph"  induced by  --~ must be  acyclic.  This  ensures that  there  are  no  alternating fized poinLs 

[EL]; we shall have more to  say on this later. 

2.3  S e m a n t i c s   o f   E q u a t i o n a l   B l o c k s  
To define the  semantics of a  set  B  of blocks, we first define the  semantics of an individual block.  Let E  be the set of equations 

Xl   =  O1 
X~  =  On. 
Then,  given  a  fixed  environment e,  we  may  build  a  function  f~  :  (2s) n  --,  (2s) n  as  follows.  Let 

~-- {81,...,Sn)  E  (2S) n,  and let e~ =  e[X1 ,-* S~,... , X ,  v-r  S,,] be the environment that results from 
e by updating the binding of Xi  to  Si.  Then 

(2s) '~ forms  a  complete lattice,  where  the  ordering, join  and  meet  operations  are  the  pointwise ex- tensions of the  set-theoretic inclusion C_, union O and intersection N, respectively.  Moreover, for any 
equation  system  E  and  environment e,  /~  is  monotonic with  respect  to  this  lattice  and  therefore, 
according to the Tarski fixed-point theorem [Ta], has both a greatesf fixed point, vf~,  and  a least fixed 
point, pf~.  In general, these may be characterized as follows. 

When the labeled transition system is fiuite-state f~  is  continuous, and the fixed points also have an 
iterative characterization.  Let 

fo  =  (s,...,s) 
]o  =  (0,...,0) 
y,+l  =  f~Cf,)  for  i  _> 0 
/,+1  =  f~(/,)  for  i  >  0. 

Then vf~  =  n~o fl,  and  pf~  =  t.J~o ],. 

51 
Blocks maz{E}  and  rain{E}  are now interpreted as  environments in the following fashion. 

[ mo . { E }] e  =  e~,~ 

So maz{E}  represents the  "greatest"  fixed point of E,  while rain{E}  represents the least. 

We  now  give  the  semantics of a  (finite)  set  of  blocks  B  satisfying  our  syntactic  condition.  Let 
Bx ,. ..,B~   be  a  topological  sorting  of the  blocks in  B  according  to  the  relation  ~  defined  above. Notice that  the syntactic restriction ensures the following:  the variables that  can appear  on the right- 

hand  side of an  equation in B i  can only appear  on the  left-hand side of equations in  blocks Bi  with 
i  <  j, if they appear on any left-hand side at all.  We now define the following sequence of environments, 
where e is given. 

e,  =  [B~]e 

e,~  =  II'B,,,]~,,,-~ 
Then  [B]e -- e,,.  Note that  the syntactic restriction ensures that  [[B]e,~ =  era. 

It is possible to  define what it  means for a  state in a  transition system to  satisfy a  formula whose 
variables are  "bound"  by a  set  of equations.  First,  we say that  a  basic proposition  ~  is  closed  with 
respect  to  a  set  of blocks B  if every variable in  ~  appears  on the  left-hand side of some  equation in 
some block in B.  We also refer to  a  set of blocks B  as closed  if each right-hand side in each block in B 
is  closed  with respect  to  B.  Then it  turns out  that  for any e  and  e' and  closed B,  [B]e =  [B]e ~.  This 
is  a  corollary of the following, more general result. 

Proposition  2.2  Let B  be  a  closed set  of blocks,  and  fi9  be  a proposition  being  closed with  respect  to 
Z.  Then.for any enmronments e  and e's  ~]([B]e) =  [~]([tHe') 

When B  is  dosed  with  respect  to  itself we often omit  reference to  e  and  speak  of  I[B], and  we write 

s  ~  fi9 where B  when fi9 and B  are closed  with respect  to  e  and s  fi9 [~][B]. 

To  illustrate  how  properties  may  be  formulated  using  sets  of  blocks  of  equations,  consider  the 
following set  containing two blocks. 1 

B~  -  m i n{ X l   =  e  ^  [a]X~  ^  (a)tt} 
B,  -  mo~{x~  =  x~  A  [siX,} 

Intuitively, the proposition X2  where {B1, B~} represents the  CTL formula  A G A F   P  - -   "it is always 
the  case that  eventually, P  will hold"  - -   for labeled  transition systems in which  Act  =  {a}.  Notice 
that  B1 --* B2,  since X1  is mentioned in the right-hand side of the equation in B2. 

2 . 4   B lo c k s   a n d   A l t e r n a t e d   N e s t i n g  
In this section we establish a  correspondence between the logic introduced in Sections 2.1  mad 2.2 and 
the  alternation-frce modal mu-caiculus. Emerson and Lei  [EL] define the notion of alternation depth 
of a  formula in the  modal  mu-calculus.  Intuitively, the  alternation depth  of a  formula refers  to  the 

"level" of mutually recursive greatest  and least fixed-polnt operators.  When no such mutual recursion 
exists, the  alternation depth is one, and the formula is  said to  be  alternation-free.  They refer to  Lpl 

as the alternation-free fragment of the full logic.  We have the following. 

T h e or e m  2.3  (Expressivlty) 

Let T  be a  transition  systems  and  let e  be an  environment  mapping formula  variables  to sets  of states 
in T.  Then: 

IHexe tt is an atomic proposition that holds of every state in every inbeled transition system. 

$2 
1.  Every formula  r  in Lpl  can  be translated in  time proportional  to  the  size  of r  into  a  block set B with 

Hr]e =  [X]l([B]e)  for  some  left-hand-side  variable  X  orB. 

e.  Fo,.  ,,,ery  block  B and   a able x  there  a/o.  ula r  in  =    r]e. 

Thus  our logic is as expressive as the  alternation-free modal mu-calculus. 

3  A  L i n e a r - T i m e   M o d e l   C h e c k e r  
In  this  section  we present  an  algorithm  for  computing  lIB] for  a  closed set  of blocks  B  with  acyclic block  graph,  given  a  finlte-state  transition  system.  The  algorithm,  solve,  extends  the  algorithm  of 

[CS2],  which only deals with  maximum fixed points.  The  main  alterations include: 

fi9 Adding the  (dual)  initialization and  update  rules for the  minimum fixed points. 

fi9 Developing a  method  for  hierarchically computing maximum  and  minimum fixed points. 
The  resulting algorithm still exhibits complexity that  is linear in  the  size of the  transition system and 
B .  

Following [AC, CS2], we restrict  our  attention  to  equations  whose right-hand  sides axe simple, i.e. 
have only variables as nontrivial subterms and  do not just  consist of a  variable.  So X4 V Xs  is simple, 
while (al(X4VXs)  and )(4 are not.  Any equation set E  may be transformed in linear time into a simple equation  set  E S with  at most  a linear blow-up in size.  Accordingly, solve has  the same complexity for 

our full logic as it  does for the  simple sublogic. 

3.1  O v e r v i e w  
As with the algorithms in  [AC, CS2], solve is bit-vector-based. Each state in 8  has a  bit vector whose 
i th entry indicates  whether or not  the  state belongs to the  set  associated with  Xi  in  the  current  stage of the  analysis.  The  algorithm then  repeatedly updates  the  bit  vectors until  they  correspond to  [[B]. 

Given B,  solve first initializes every component in  each state's bit vector as follows. 

fi9 If  the  variable  corresponding  to  the  component  is  a  left-hand  side  in  a  maz  block  then  the component is set  to  true,  with  the following exceptions. 

-  The  right-hand side of the corresponding equation is atomic, and  the state  does not  satisfy 

the  atomic proposition. 

-  The  right-hand  side of the  corresponding  equation is of the  form  (a)Xj,  and  the  state  has no  e-derlvatives. 

fi9 Dually,  if the  variable  corresponding  to  the  component  is  a  left-hand  side in  a  rain  block then the  component is  set to fa/se, with  the following exceptions. 

-  The  right-hand  side  of  the  corresponding  equation  is  atomic,  and  the  state ,satisfies the atomic proposition. 
-  The  right-hand  side of the  corresponding  equation  is  of the  form  [a]Xj,  and  the  state  has no  a-derivatives: 

The  procedure  then  topologically sorts  the  blocks in  B  with  respect  to  the  relation  --% yielding 
B1,...,B,~.  Subsequently, the  blocks are  processed  one  at  a  time  in  this  order  until  consistency  of 
the  bit-vector  annotation  with  the  semantics  of formulas  is  achieved;  this  is  done  by  successively 

setting  components  to fa/se (in the  case of maz blocks) or  true  (in the  case of rain blocks) that  cause 
inconsistency.  Notice that  because of the order of processing, after initialization each component may 

change value at  most  once. 

$3 
3.2  D a t a   S t r u c t u r e s  
Let B be a  set of m  blocks, and assume that  the list of equations in B is of the form X~ -- '~i, where i 
ranges between 1 and n.  As in [AC, CS2], each state 8 will have the following fields  associated with it. 

fi9 An array X[1..n] of bits.  Intuitively, 8.X[i]  is true if 8 belongs to the  set  associated with propo- 

sition vm'iable X~.  The array is initialized as  described above. 

fi9 An array C[1..n] of counters.  The role played by C[i]  depends on the kind of block B  in which 

X~ is a left-hand side.  If B  is a  maz block, then  C[i] contains the following. 

-  If Xi =  Xj V Xk  is an equation in B, then 8.Gill  records the number of disjuncts (0,1  or 2) 

of the right-hand side that  are true for 8.  In this  case, 8.C[i]  =  2 initially. 

-  If X~ =  (a)Xj  is in B  then 8.U[i] records the number of a-derivatlves of 8 that  ~ e   in the set 

associated with Xj.  In this case,  8.C[i] is initially set  to the number of a-derivatives that  8 
has. 

-  For other kinds of equations, C[i] is not used. 

Dually,  if B  is a  rain block, then C[i] contains the following. 

-  If Xi =  Xj A Xk is an equation in B, then 8.C[i]  records the number of conjuncts (0,1  or 2) 

of the right-hand side that  axe false for 8.  In this  case, 8.C[i]  -- 2 initially. 

-  If X~ =  [a]Xj is in  B  then 8.C[i]  records  the  number of a-derivatives of 8 that  axe not  in 

the set associated with Xj.  In this case, 8.C[i] is initially set to the number of o-derivatives 
that  8 has. 

-  Otherwise, C[i] is not used. 

fi9 A  field 8.A for every atomic proposition  A  that  indicates whether  8 satisfies  A  or  not.  This is 

assumed to be given at  the  st~t  of the algorithm. 

In addition, the algorithm maintains two other  data structures that  allow one to determine efllciently 

which state/vm'iable pairs  must be reinvestigated as  a  result of changes that  have been made  to  bit- 
vector components. 

fi9 An az~ay  M[1..m]  of  l/st~ of state-variable pairs;  (8,X~)  is  in  M~r  if X~ is  a  left-hand side  in 

block Bj  and s.X[i]  has just been changed. 

fi9 An edge-labeled directed graph G  with n  vertices, one for each left-hand-side vaxiable in B.  The 

edges are defined as follows. 

-  Xi  v  Xj  if there is  an Xk  such that  either Xj  =  X~ V Xh  or Xj  =  Xh V X~ is an equation 

in B. 

-  Xi  ~  Xj  if there is  an X~  such that  either Xj  =  Xi A Xk  or Xj  =  Xh A X~ is an equation 

i n B. 

-  X,  ~  Xj  if Xj  =  (a)X,  is in  B. 

-  x,   ~  x~  if x~  =  [a]x,  is in  v. 
Intuitively, there is an edge from X~ to Xj if the set of states associated with Xi directly influences 
the set of states associated with Xj.  This graph may be constructed in O([B{) time from B, and 
it  contains no  more  than  2n  edges,  where  n  is  the  total  number of equations in  B,  since the 

right-hand sides in B  axe simple. 

54 
3 . 3  T h e   A l g o r i t h m  
The  procedure solve computes  ~B] as follows. 

fi9 Initialize the bit-vector X  and  counter array C  for each state as  described above, and  the  array 

M  of lists as follows.  For each maz block Bj,  add pair  48, X~)  to  M[j]  if X~ is a  left-hand side of Bj  and  8.X[i]  has  been  set  to false.  For each  rain block Bj,  add  pair  (8, Xi)  to  M[j]  if Xi  is a 

left-hand side of Bj  and  8.X[i]  has  been set to  true. 
fi9 Topologically sort B, yielding B1,...  ,B,,,. 

fi9 Process each block Bi in  order. 
Block processing is performed by the  procedures m a x   and  min,  depending on  the  form of the  block. 
Each  of these routines  "applies"  the  semantics of formulas to  compute  the meaning  of the  block.  We 
describe each procedure in  turn. 

3.3.1  Pro ces sing   M a x   Blocks 
Given maz block Bj  as  an  argument, routine  m a x   repeatedly deletes a  pair  {s,Xi)  from the list  ML?] and  processes it  as follows until the  M~]  is empty. 

fi9 For every Xk  such  that  Xi  _~v Xk,  if Xh  a  is left-hand  side in  a  maz block Bt  then  the  counter 8.C[k] is decremented by one.  If s.C[/r  is now 0, then none of the disjuncts on the right-hand side 

of Xk  axe satisfied by 8,  and  8 must  be  removed from  the  set  associated with  Xk.  Accordingly, s.X[k] 

is set  to false and  the  pair  (,,Xk)  is added to  M[l]. 

fi9 For every Xs  such  that  Xi  -~ Xh,  if Xk is  s  left-hand side in  a  maz block Bz  and  s.X[k] is  true 

the  component  8.X[k]  is set  to false and  the pair  48, Xk)  is added to  M[l]. 

fi9 For every Xh  with  Xi  ~  Xk, if Xk is a  left-hand side in  a  maz block Bi then  each counter C[k] 

for  each  s ~ that  has  8  as  an  a-derivative is  decremented by  one,  and  if it  becomes  0  (meaning 

that  8' now has  no  a-derivatives satisfying X~),  then  8'.X[k]  is set  to false and  (8',Xk)  is added 
to  M[l]. 

fi9 For every XI, with  Xi  [-~ Xk  that  is  a  left-hand  side in  a  maz block BI,  each  state  s ~ having  8 

as an  a-derivative has  its X[k]-component examined, and  if it is  true  then  it is  changed to false and  (8', Xk)  is added to  M[l]. 

When M[j] is empty, the bit-vector entries for each state corresponding to  maz block Bj  contain their 
final fixed-point values.  They are guaranteed not to change further because of the order in which blocks 

are processed.  Procedure  m a x   also updates  bit-vector entries, counters  and  lists  associated with  yet- 
to-be  processed  maz  blocks.  On  the  other  hand,  bit-vector entries,  counters  and  lists  corresponding 

to  rain blocks are not  modified by the procedure above, because approximate values generated by the 
maximum fixed-point computations  can  not  be  safely used  for  rain block variables.  Accordingly, the 
data structures for these blocks must be updated in a  separate pass; m a x   does this by performing the following for each  (8,X~)  pair for which Xi  is a  left-hand side in  Bj  and  8.X[i]  is  true. 

fi9 For every Xi, such that  Xi  v  Xk, if Xh  is  a  left-hand side in  a  rain block B!  and  8.X[k]  is false 

the  component  8.X[k]  is set  to  true and  the  pair  (8,Xk)  is added to  Mill. 

fi9 For every Xk  such  that  Xi  ~  Xk,  if Xi,  is  a  left-hand  side in  a  rain block Bl  then  the  counter s.C[k] 

is  decremented by one.  If s.C[k]  is  now  O, then  both  of the  conjuncts  on  the  right-hand 
side of Xk  are  satisfied by 8,  and  s  must  be  added  to  the  set  associated with  Xh.  Accordingly, s.X[k] 

is set to  true and  the pair  (8, Xh)  is  added to  M[l]. 

55 
fi9 Fo~ every Xk  with  Xi  (-~ Xk, if Xh  is  a  left-hand side in a  mln block Bi  each  state  8 ~ having 

as an a-derivative has its  X[k]-component examined, and if it  is false  then it is  changed to  true 
and/s~,Xk) is  added  to  Mill. 

fi9 For every Xh  with Xi  [-~ Xk,  if Xk is a  left-hand side in a  rain block Bi  then each  counter U[k] 

for each 8' that has 8 as an a-derivative is decremented by one, and if it becomes 0 (meaning that 

all the  a-derivatives of 8 ~ satisfy Xi),  then ~.X[k]  is set to  true  and  Is', X~)  is added  to  Mill. 

3.3.2  Processing  Min  Blocks 
The procedure m i n  works in a completely dual fashion to max.  Again, the routine successively deletes 
pairs  /8,Xi/from the list  M[j]  until it  is empty and processes them as follows. 

fi9 For every Xk such that Xi ~  Xk, ifXk is in a rain block Bz then the counter 8.U[k] is decremented 

by one.  If 8.C[k] is now 0, then all of the conjuncts on the right-hand side of Xk  are satisfied by 
8, and 8 must be added to the set associated with Xk.  Accordingly, 8.X[k] is set to  true and the 
pair  (8, X~ I  is added  to M[l]. 

fi9 For every Xk  such that  Xi  v  Xh, if Xk  is in a  rain block Bt  and 8.X[k]  is false  the  component 

8.X[k]  is set  to  true  and the pair  (8,Xh/  is  added to  M[l]. 

fi9 For  every Xk  with  Xi  [-~  Xh,  if Xh  is  in  a  rain  block  BI  then  each  counter  C[k] for  each  s ~ 

that  has  8 as  an  a-derivative is  decremented by one, and if it  becomes 0  (meaning that  all the 
a-derivatives of 8 ~ now satisfy X~), then 8'.X[k]  is set to  true and  (8~,Xk)  is added  to Mill. 

fi9 For every Xk  with Xi  (-~ Xi,  that  is in a  rain block Bt, each state  81 having 8 as  an a-derivative 

has  its  X[k]-component examined,  and  if it  is  false  then  it  is  changed  to  true  and  (8', Xk)  is 

added to  M[l]. 

As before, when M[j] is empty the bit vectors corresponding to rain block Bj contain their final values, 
and the bit vectors, counters and lists corresponding to  rain blocks have been appropriately updated. 
The  bit  vectors,  counters and lists  corresponding to  mar blocks must be  updated  subsequently in  a 

separate pass.  m i n  does this by performing the following for each 8/Xi  pair for which Xi is a left-hand 
side in Bj  and 8.X[i]  is false. 

fi9 For every Xh  such that  Xi  -~ Xs,  if Xs  is in a  mar block Bl  and  8.X[h]  is  true the  component s.X[h] 

is set  to false and the pair  (8,Xh)  is added  to  M[l]. 

fi9 For every Xh such that Xi  v  Xk, if Xh is in a mar block Bi then the counter 8.U[k] is decremented 

by one.  If 8.U[k] is now 0, then both of the disjuncts on the right-hand side of Xk are not satisfied 
by a,  and  8 must removed from the  set  associated  with  Xh.  Accordingly, 8.X[k]  is  set  to false 

and the pair  (,,Xk)  is added  to  Mill. 

fi9 For every Xh  with Xi ~  Xh, if Xk is in a  mar block Bi each state 8' having 8 as  an a-derivative 

has  its  X[k]-component examined,  and  if it  is  true  then  it  is  changed  to  false  and  (s',Xk)  is 

added to  M[l]. 

fi9 For every Xh  with  Xi (-~ Xk, if Xh  is in a  maz block Bt  then each  counter U[k] for each  8' that 

has  8 as  an  a~derivative is  decremented by one,  and if it  becomes 0  (meaning that  none of the 

a-derivatives of 8 ~ satisfy X~), then 8~.X[k] is set to false  and  (8 ~, Xk)  is added to  M[l]. 

56 
3 .4   C o r r e c t n e s s   a n d   C o m p l e x i t y  
The  algorithm  solve  consists of a  call  to  an  initialization procedure,  a  call  to  a  topological  sorting 
routine,  and  calls  to  m a x   and  min.  It  always terminates,  since the  number of states  is  finite and 
for  any state  s  and  any i,  the  component s.X[i]  can be  changed at  most  once  during its  execution. 

Moreover, upon termination (i.e.  when all lists in M  are empty), the blt-vector annotations represent 

~B];  this  follows  from  the  fact  that  m a x   computes  the  appropriate  vf~,  while  w i n   computes  the 
appropriate pf~. 

T h e o r e m   3.1  (Correctness) Let  T  =  (S, Act, --*)  be  a  labeled  transition  system  and 13  be  a  closed  set  of  blocks  with  acyelie  block 
graph.  Then for  any  left-hand-side  variable  Xi  in  I3,  s  E  [X,]([B])  if and  only  if s.X[i]  =  true. 

Finally, we  state  and  prove  our  complexity  result,  which  is  a  straightforward  extension of  the 
complexity result stated in [CS2]. 

T h e o r e m   3.2  (Com plexity) Let T  =  (S, Act, -4)  be a  labeled  transition  system  and I3  be a  closed set  of blocks  of simple  equations. 

Then  the  worst-cane  time  eomplezity  of solve  /s  O(larl.  1131), where  larl  =  ISl +  I -~ I and  1131 /s  the total  number  of equations  in I3. 

4  Applications 
In  this  section  we  show  how  the  model-checking algorithm  presented  in  the  previous  section  may 
be  used to  implement efficiently different verification methodologies on finite-state labeled transition 
systems.  In the first subsection we illustrate how our model checker may be used to compute behavioral 
preorders.  Subsequently, we indicate how various kinds of temporal logics  may be model-checked with 
our algorithm using CTL as  an example. 

4.1  C o m p u t i n g   B e h a v i o r a l   P r e o r d e r s  
In this section we briefly outline how one may use the model-checking algorithm of the previous section 

to  compute the  prebislmulation preorder  [Wa]. In addition to  being interesting in its  own right,  this 
preorder may also be used  as  a  basis for  defining other  preorders, including various testing preorders 

[CH, CPS1, CPS2].  This account is essentially a distillation of one found in [CS2, Ste] 2.  The interested 
reader is referred to  these papers for details. 

The  prehisimulation preorder,  ~,  is  defined in  terms  of  eztended  labeled  transition  systems.  An 
extended labeled transition system T  has the form  (S, Act, ---*, {~a  [a  G Act)),  where  (S, Act, --,)  is a 
labeled transition system and the ~a are atomic formulas.  Intuitively, s  satisfies ~a if the behavior of s 
in response to  action a  is  completely  defined. 

The model-checking approach to  verifying whether sl~s2,  where Sl is  a  state  in extended labeled 
transition system T1 and s2  a  state in T2, works  in two steps: 

fi9 construct a  characteristic  block  set B  for T1, which consists of a single maz block containing one 

equation for each state in T1, and 

fi9 check  whether s~  ~  X1  where B,  where X1  is the variable associated with sl. 
The  correctness  of this  approach  relies  on  the  main  theorem  of  [Ste],  which  may  be  phrased  as 
follows. 

2The logic considered in these papers differs from the one considered here in the interpretation of the [a] modalities. Howevex, it is a simple matter to %ode up ~ these modal operators in our logic, given the ~a atomic propositions. 

57 
Th e o re m  4.1  Let T  be  an  eztended labeled transition  system  and s  one  of its  states.  Also  let  E  be the  characteristic  equation set  of T  and X,  the  variable  in E  associated with s.  Then for  any state  s ~ 

in  any  eztended labeled transition  system,  sea '  if and only  if s'  ~  X.  where{maz{E}}. 

The complexity of this  preorder-checking procedure is  proportional  to  the  product  of the  numbers 
of transitions  of the  two  transitions  systems  involved,  which  improves  published  complexity  results 

about  preorder  checking. 

4 . 2   O t h e r   L o g i c s  
Emerson  and  Lel  have shown  how  various  logics,  including  Propositional  Dynamic Logic  (PDL)  and Computation  Tree Logic (CTL),  may be translated  in linear-time  into the  alternation-free  part  of the 

modal  mu-calcnlus.  Our  logic  has  the  same  expressive  power  as  this  fragment  (Theorem  2.3),  and since  the same linear-time  translations  may be used (with  slight  modifications), our algorithm  delivers 
linear-time  model  checkers  for  PDL  and  CTL.  In  the  remainder  of this  section  we illustrate  this  by 

giving the  translation  of CTL into our logic. We first  assume  that  CTL formulas  axe in  positive  normal form,  meaning  that  all  negations  have 

been  "pushed"  inside  formulas until  they reach atomic formulas.  To illustrate  the  translation  of CTL 
formulas, then, it  suffices  to give accounts of the following formulas:  A(PuQ),  E(PuQ),  A( PUQ)  and E(PUQ).  Here  A  is  the  universal  path  quantifier,  and  E  is  the  existential  path  quantifier;  u  and  U 

represent  "weak"  and  "strong"  until path  operators,  respectively.  So a  state  satisfies  A(PuQ)  if along every computation  path  beglnnlng  with  s,  P  holds  until  Q  does;  moreover Q  is  not  required  ever to 
hold, in which case P  will  hold  everywhere. 

The  translation  is  as follows. 

A(PuQ) E(PuQ) 

A(PUQ) E(PVQ) 

=  x  ~he~  { m ~ { X   =  Q v  (P  ^  [alX)}} 
=  x  ~he.e { ~ { X   =  Q V (P  ^  (a)X)}} 
=  x  where { ~ i n { x   =  Q v  ( v   ^  [alX ^  (~)tt)}} 

=  x  where {,ni n{x  =  Q v  (P ^  {~)x)}} 

This translation  is linear-time,  and hence our model-checking algorithm yields a linear-time  model- checking algorithm  for CTL.  This  matches the  complexity for existing  CTL  model  checkers  [CES]. 

5  C o n c l u s i o n s   a n d   F u t u r e   W o r k  
In this paper,  we have presented a llnear-time  algorithm for model checking in a logic that is equivalent in expressiveness to the alternatlon-free  modal mu-calcuius.  The algorithm  extends one given in  [CS2] 

for  a  logic that  only  includes  greatest  fixed  points,  and  it  does  so  while  maintaining  the  same  time 

complexity; it runs in time proportional to the product of the sizes of the process and the formula under consideration.  The  algorithm  may also be  used  to  compute behavioral  preorders  and  to  model-check 

other logics. A  major  challenge  is  to  extend  of our  algorithm  to  handle  the  full  modal  mu-calcnlus  including 

alternating  fixed points.  We conjecture that it is possible to achieve an algorithm in this fashion whose 
worst  case time  complexity is  O((ITI**-~)*~(~)),  where  IT[  =  IS[ +1--* [,  IBI is  the  size  of 4,  and 

ad(~)  is the  alternation  depth of 4.  This would outperform the model-checking algorithm of Emerson and  Lel  [EL], which  is  the  most  efficient  algorithm  in  the  literature  for  the  full  mu-calcnlus.  Their 

algorithm  is  O( (IT[* ]~[) o~(~)+a).  In  support  of this  conjecture,  we note  that  in  the  special  case  of 

alternation-free  formulas our  approach is linear,  while  theirs  is  quadratic.  We also plan  to implement this  algorithm  as an  extension  of the  Concurrency Workbench [CPS1, CPS2]. 

58 
R e f e r e n c e s  

[AC]  Arnold,  A.,  and  P.  CrubKle. "A Linear Algorithm  To Solve Fixed-Point Equations  on Tran- sition  Systems." Information  Processing  Letters 29:57-66,  30 September 1988. 

ICES]  Clarke,  E.M., E.A. Emerson and A.P. Sistla.  "Automatic Verification of Finite State Concur- rent Systems Using Temporal Logic Specifications."  ACM  TOPLAS 8(2):244-263,  1986. 

[CH]  Cleaveland,  R.  and  M.C.B. Hennessy.  "Testing Equivalence  as  a  Bisimulation Equivalence." 

In  Proc.  Workshop  on  Automatic  Verification  Methods for  Finite-State  Systems.  LNCS 407. 

[CPS1]  Cleaveland,  R., J. Parrow and B. Steffen. "The Concurrency Workbench." In Proc.  Workshop on  Automatic  Verification  Methods for  Finite-State  Systems,  1989, LNCS 407. To appear in 

A CM  TOPLAS. 
[CPS2]  CleaveJand,  R.,  J.  Parrow and  B.  Steffen.  "A  Semantics-based  Verification  Tool for Finite- State Systems", In Proc.  9 tn Syrup.  on Protocol Specification,  Testing,  and  Verification,  1989. 

[CS1]  Cleave]and,  R. and B. Steffen.  "When is 'Partial' Complete? A Logic-Based  Proof Technique using  Partial Specifications."  In Proc.  LICS  'gO, 1990. 
[CS2]  Cleaveland,  R. and B. Steffen. "Computing Behavioural Relations,  Logically." In Proc. ICALP 

'91, 1991. 

[EL]  Emerson,  E.A.  and  C.-L.  Lei.  "Efficient  Model Checking  in  Fragments of the  Propositional Mu-Calculus."  In  Proc.  LICS  '86, 1986. 

[Fe]  Fernandez, J.-C.  Ald~baran:  Une  Syst~me  de  V~rification  par R~duction  de Processus  Com- municants.  Ph.D.  Thesis,  Universit~  de Grenoble, 1988. 
[FL]  Fischer, M., and It. Ladner. "Propositional Dynamic Logic of Regular Programs."  Journal of Computer  and System Sciences 18:194-211,  1979. 
[GS]  Graf,  S.  and  B.  StetTen. "Using  Interface Specifications  for  Compositional  Reduction."  In 

Computer-Aided  Verification  ,gO. 

[Ko]  Kozen, D.  "Results on the Propositional p-Calculus."  Theoretical  Computer Science 27:333- 354, 1983. 

[La]  Larsen, K. "Proof Systems for Hennessy-Milner  Logic with Itecursion." In Proc.  CAAP,  1988. 

[MSGS] Malhotra,  J.,  S.A.  Smolka,  A.  Giacalone  and  R.  Shapiro.  "Winston:  A  Tool for Hierarchi- cal Design  and  Simulation  of Concurrent Systems." In  Proc.  Workshop  on  Specification  and 

Verification  of Concurrent  Systems,  University of Stirllng,  Scotland, 1988. 
[ItItSV]  Itichler,  J.,  C.  Itodrlguez,  J.  Sifakis,  J.  and  Voiron.  "Verification  in  Xesar  of the  Sliding Window  Protocol."  In  Proc.  7th  Syrup.  on  Protocol  Specification,  Testing,  and  Verification, 

1987. 
[ItdS]  Roy, V. and It. de Simone.  "Auto/Autograph." In  Computer-Aided  Verification  'gO, 1990. 

[Ste]  Stef[en, B.U. "Characteristic Formulae for CCS with Divergence."  In Proc. ICALP  'sg, 1989. With A. Ing61fsd6ttir,  to appear in  Theorectical  Computer Science. 

[Ta]  Tarski,  A.  "A  Lattice-Theoretical Fixpoint  Theorem and  its  Applications."  Pacific  Journal 

of Mathematics 5, 1955. 

[Wa]  Walker,  D.  "Bisimulations  and  Divergence." In Proc.  LICS  '88, 1988. 