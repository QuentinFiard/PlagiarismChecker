

Type Inference with Constrained Types
Martin Sulzmann

\Lambda 

Yale University
Department of Computer Science

New Haven, CT 06520-8285

sulzmann@cs.yale.edu

Martin Odersky, Martin Wehr

University of Karlsruhe
Institute for Program Structures and Data Organization

Am Fasanengarten 5, 76128 Karlsruhe, Germany

fodersky,wehrg@ira.uka.de

Abstract
In this paper we present a general framework HM(X)
for Hindley/Milner style type systems with constraints.
We give a generic type inference algorithm for HM(X).
Under sufficient conditions on X, type inference will always compute the principal type of a term. We give
an extension of our HM(X) systems which deals with
subtyping. In particular, the type inference algorithm
for subtypes computes principal types. Simplification of
the constraints inferred by the type inference algorithm
is discussed in general for HM(X) and in the special case
of subtyping.

1 Introduction
We study an extension of the Hindley/Milner [Mil78]
system with constraints. Cardelli/Wegner [CW85] gave
an early survey about general research directions. Reynolds [Rey85] and Mitchell [Mit84] are foundational papers that develop basic concepts of constraints and subtyping. There are examples for extensions of the Hindley/Milner system with records [Oho95, Rem89], overloading [Jon92, Kae92, HHJW96, NP93, KC92, OWW95],
and subtyping [CCH+89, BSvG95, AW93, EST95b]. Extensions of Hindley/Milner with constraints are also increasingly popular in program analysis [DHM95, TJ92].
Palsberg [Pal95] gave an efficient inference algorithm for
a calculus of objects. The main feature of his system
is that he does not use the Hindley/Milner approach to
type inference. It remains to be seen how his approach
is related to ours.

Even though these type systems use different constraint domains, they are largely alike in their typetheoretic aspects. In this paper we present a general
framework HM(X) for Hindley/Milner style type systems with constraints, analogous to the CLP(X) framework in constraint logic programming [JM94]. Particular type systems can be obtained by instantiating the

\Lambda Supported by a Yale University Fellowship.

parameter X to a specific constraint system. The Hindley/Milner system itself is obtained by instantiating X
to the trivial constraint system.

By and large, the treatment of constraints in type
systems has been syntactic : constraints were regarded
as sets of formulas, often of a specific form. On the
other hand, constraint programming now generally uses
a semantic definition of constraint systems, taking a
constraint system as a cylindric algebra with some additional properties [HMT71, Sar93]. Cylindric algebras
define a projection operator 9_ff that binds some subset of variables _ff in the constraint. In the usual case
where constraints are boolean algebras, projection corresponds to existential quantification.

Following the lead of constraint programming, we
treat a constraint system as a cylindric algebra with a
projection operator. Projection is very useful for our
purposes for two reasons: First, projection allows us to
formulate a logically pleasing and pragmatically useful
rule (8 Intro) for quantifier introduction:

(8 Intro) C ^ D; \Gamma  ` e : o/ _ff 62 fv(C) [ fv(\Gamma )C ^ 9_ff:D; \Gamma  ` e : 8_ff:D ) o/
where C and D are constraints over the type variables
in the type context \Gamma  and the type scheme oe.

Second, projection is an important source of opportunities for simplifying constraints [Jon95, Pot96,
EST95a]. In our framework, simplifying means changing the syntactic representation of a constraint without
changing its denotation. For example, the subtyping
constraint

9fi:(ff ^ fi) ^ (fi ^ fl)

can safely be simplified to

(ff ^ fl)
since the denotation is the same for both constraints.
Without the projection operator, the two constraints
would be different, since one restricts the variable fi
while the other does not.

Two of the main strengths of the Hindley/Milner
system are the existence of a principal types theorem
and a type inference algorithm. One of the key ideas
of our paper is to present sufficient conditions on the
constraint domain X so that the principal types property carries over to HM(X). The conditions are fairly
simple and natural. For those constraint systems meeting the conditions, we present a generic type inference
algorithm that will always yield the principal type of a
term.

Additionally, we give an extension of our HM(X)
framework that deals with subtypes. The concept of
subtyping is of great importance in many record and
object calculi. We enrich our constraint system with
a subtype predicate between types o/ and o/ 0, denoted
by (o/ ^ o/ 0). In our type system we additionally have
the subsumption rule. We provide an extension of our
generic type inference algorithm that computes principal types. Previous approaches towards type inference
with subtypes [AW93, EST95b] lack this property.

In case of subtyping, simplifying constraints [Jon95,
Pot96, EST95a] becomes an important issue. Type inference simply accumulats all constraint problems and
ends up in a large constraint set. One reason is that
unification-based approaches to type inference with subtypes do not seem to apply. We discuss simplification
in general for our HM(X) framework and in the special
case of subtypes.

The rest of this paper is structured as follows: We
give a characterization of constraint systems in Section 2. A general framework HM(X) for Hindley/Milner style type systems with constraints is presented in
Section 3. In section 4 we discuss how to extend our
approach with subtyping. Simplification is discussed in
Section 5. Section 6 concludes.

2 Constraint Systems
We present a characterization of constraint systems along
the lines of Henkin [HMT71] and Saraswat [Sar93].

Definition 1 (Simple Constraint System)

A simple constraint system is a structure (\Omega ; `e )
where \Omega  is a non-empty set of tokens or (primitive)
constraints 1. The relation `e ` p\Omega  \Theta  \Omega  is a decidable
entailment relation where p\Omega  is the set of finite subsets
of \Omega . We call C 2 p\Omega  a constraint set or simply a
constraint.

1We also refer to such constraints as predicates.

A constraint system (\Omega ; `e ) must satisfy for all constraints C; D 2 p\Omega :

C1 C `e P whenever P 2 C and
C2 C `e Q whenever

C `e P for all P 2 D and D `e Q

We extend `e to be a relation on p\Omega  \Theta  p\Omega  by: C `e D
iff C `e P for every P 2 D. Furthermore, we define
C =e D iff C `e D and D `e C. The term `e C is
an abbreviation for ; `e C and true = f P j ; `e P g
represents the true element.

By the following lemma we can identify the minimal
constraint ; as an representation for true.

Lemma 1 Given a simple constraint system constraint
(\Omega ; `e ). Then true =e ;.

Remark 1 For simplicity, we omit set notation for constraints. We connect constraints by ^ instead of the
union operator [. Also, we omit to enclose simple constraints P in opening and closing braces. That means,
P ^ Q is an abbreviation for fP g [ fQg.

Definition 2 (Cylindric Constraint System) A cylindric constraint system is a structure C = (\Omega ; `e ; Var; f9ff j ff 2
Varg) such that:

ffl (\Omega ; `e ) is a simple constraint system,
ffl Var is an infinite set of variables,
ffl For each variable ff 2 Var, 9ff : p\Omega  ! p\Omega  is an

operation satisfying:

E1 C `e 9ff:C
E2 C `e D implies 9ff:C `e 9ff:D
E3 9ff:(C ^ 9ff:D) =e 9ff:C ^ 9ff:D
E4 9ff:9fi =e 9fi:9ff:C

The next definition defines the free type variables
fv(C) of a constraint C.

Definition 3 (Free Variables) Let C be a constraint.
Then fv(C) = fff j 9ff:C 6 =e Cg.

We now define satisfiability of a constraint.
Definition 4 (Satisfiability) Let C be a constraint. Then
C is satisfiable iff `e 9fv(C):C.

The next lemma states that the projection operator
does not influence the satisfiability of a constraint.

Lemma 2 Let C be a constraint. Then C is satisfiable
iff 9ff:C is satisfiable.

We now introduce a much more expressive constraint
system. We want to deal with types and substitutions.

Definition 5 (Types) A type is a member of
T =Term(\Sigma ) where Term(\Sigma ) is the term algebra T build
up from a signature \Sigma  = (Var, !). Var is a set of
variables and ! is the function constructor of arity 2.

Definition 6 (Substitutions) A substitution OE is an idempotent mapping from a set of variables Var to the term
algebra Term(\Sigma ). Let id be the identity substitution.

Definition 7 (Term Constraint System) A term constraint system DT = (\Omega ; `e ; Var; f9ff j ff 2 Varg) over
a term algebra T is a cylindric constraint system with
tokens of the form

p(o/1; : : : ; o/n) (o/i 2 T )
such that the following holds:

ffl For each pair of types o/; o/ 0 there is an equality

predicate (o/ = o/ 0) in DT , which satisfies:

D1 `e (ff = ff)
D2 (ff = fi) `e (fi = ff)
D3 (ff = fi) ^ (fi = fl) `e (ff = fl)
D4 (ff = fi) ^ 9ff:C ^ (ff = fi) `e C
D5 (ff1 = fi1) ^ (ff2 = fi2) `e

(ff1 ! ffn = fi1 ! fin)

ffl For each predicate P ,

D6 [o/ =ff]P =e 9ff:P ^ (ff = o/ )

where ff 62 fv(o/ )

Remark 2 Conditions D1 - D4 are the conditions imposed on a cylindric constraint system with diagonal elements, which is usually taken as the foundation of constraint programming languages. D4 says that equals can
be substituted for equals; it is in effect the Leibniz principle. D5 extends equality to function types. D6 connects
the syntactic operation of a substitution over predicates
with the semantic concepts of projection and equality.
Substitution is extended to arbitrary constraints in the
canonical way:

[o/ =ff](P1 ^ : : : ^ Pn) = [o/ =ff]P1 ^ : : : ^ [o/ =ff]Pn:
The intention of a term constraint system is to express unification problems through the equality predicate (=) with respect to a cylindric constraint system
C over a term algebra T .

Some basic lemmas follow.

Lemma 3 (Normal Form) Let C be a constraint and
OE = [_o/ =_ff] be a substitution. Then OEC =e 9_ff:C ^ (ff1 =
o/1) ^ : : : ^ (ffn = o/n).

Lemma 4 (Substitution) Let C; D be constraints and OE
be a substitution such that C `e D. Then OEC `e OED.

Then it is an easy observation how to extend conditions D1 - D5 to arbitrary types.

Lemma 5 (Congruence) (=) is a congruence.

3 A General Framework HM(X) for Hindley/Milner Type Systems with Constraints

This sections describes a general extension HM(X) of
the Hindley/Milner type system with a constraint system X over a term algebra T . We require that X be a
cylindric constraint sytem. Our development is similar
to the original presentation [DM82].

3.1 The Type System

Values v ::= x j *x:e
Expressions e ::= v j ee j let e = x in e
Types o/ ::= ff j o/ ! o/
Type schemes oe ::= o/ j 8ff:C ) oe

The only extension compared to Hindley/Milner types
is in the definition of a quantified type scheme 8ff:C )
oe. Here, C is a constraint in X which restricts the types
that can be substituted for the type variable ff.

The typing rules can be found in Figure 1. The
most interesting rules are the (8 Intro) rule and the
(8 Elim) rule. By rule (8 Intro) we quantify some type
variables. We often use vector notation for type variables in type schemes. The term 8_ff:D ) o/ is an abbreviation for 8ff1:true ) : : : 8ffn:D ) o/ and 9_ff:D for
9ff1: : : : 9ffn:D.

Definition 8 (Typing Judgements) Let C be a constraint
in X, \Gamma  a type context and oe a type scheme. Then
C; \Gamma  ` e : oe is a typing judgement iff C; \Gamma  ` e : oe can
be derived by application of the typing rules.

Example 1 (Hindley/Milner) The Hindley/Milner
system is an instance of our type system. Let 1 =
(;; `e ; Var; f9ff j ff 2 Varg) be the miminal cylindric
constraint system. Then the Hindley/Milner system is
equal to HM(1). All constraints are considered to be
true.

We now discuss type soundness of our type system.
We use a syntactic approach to type soundness [WF91].
We have the following two reductions:

(fi) (*x:e)v \Gamma ! [v=x]e
(LET) let x = v in e \Gamma ! [v=x]e

Then, we can state the following lemma.

(VAR) C; \Gamma  ` x : oe (x : oe 2 \Gamma )

(ABS) C; \Gamma x:x : o/ ` e : o/

0

C; \Gamma x ` *x:e : o/ ! o/ 0

(APP) C; \Gamma  ` e1 : o/1 ! o/2 C; \Gamma  ` e2 : o/1C; \Gamma  ` e

1e2 : o/2

(LET) C; \Gamma x ` e : oe C; \Gamma x:x : oe ` e

0 : o/ 0

C; \Gamma x ` let x = e in e0 : o/ 0

(8 Intro) C ^ D; \Gamma  ` e : o/ _ff 62 fv(C) [ fv(\Gamma )C ^ 9_ff:D; \Gamma  ` e : 8_ff:D ) o/

(8 Elim) C; \Gamma  ` e : 8_ff:D ) o/

0 C `e [_o/ =_ff]D

C; \Gamma  ` e : [_o/=_ff]o/ 0

Figure 1: Logical type system
Lemma 6 (Subject Reduction Property) Let C; \Gamma  ` e :
oe be typing judgement and e \Gamma ! e0. Then C; \Gamma  ` e0 : oe.

We now extend the relation \Gamma ! to evaluation contexts E. We define

E[e] 7\Gamma ! E[e0] iff e \Gamma ! e0
where

E ::= [] j Ee j vE j let x = E in e:
Let 7\Gamma !\Lambda  be the reflexive and transitive closure of 7\Gamma !.
The partial function eval evaluates an expression e:

eval(e) = v iff e 7\Gamma !\Lambda  v
We write e * if e diverges. Now, we have everything at
hand to state syntactic soundness of our type system.

Theorem 1 (Syntactic Soundness) Let C; \Gamma  ` e : oe be
a typing judgement. Then e * or eval(e) = v.

In the syntactic approach to type soundness we do
not consider whether the constraints on the left hand
side of typing judgements are satisfiable or not. The
question arises how our type system deals with unsatisfiable constraints. We can state that our typing rules
are sound.

Lemma 7 The constraint of a conclusion of a typing
rule is satisfiable iff the constraints of the premises are
satisfiable.

That means whenever we derive a typing judgement
C; \Gamma  ` e : oe where C is consistent, all constraints on
the left hand side of typing judgements of the derivation
tree are satisfiable.

3.2 Type Inference
Now, we consider the type inference problem. The following definition is a generalization of the (8 Intro) rule.

Definition 9 Let C be a constraint, \Gamma  be a type context,
oe be a type scheme and _ff = (fv(oe)[fv(C))nfv(\Gamma ). Then
gen(C; \Gamma ; oe) = (9_ff:C; 8_ff:C ) oe).

The type inference algorithm can be found in Figure 2. We treat a type o/ as 8ff:true ) o/ where ff 62 fv(o/ )
to avoid a special treatment of types in the (VAR) rule.
The algorithm is formulated as a deduction system over
clauses of the form ; C; \Gamma  `W e : o/ with type context
\Gamma , expression e as input values and substitution , constraint C, type o/ as output values. For each syntactic
construct of expressions e we have one clause.

Type inference involes normalization of constraints.
In each rule except for the (ABS) rule a normalization
step is performed. Remember, on the left hand side
of typing judgements we only admit constraints in the
cylindric constraint system X whereas type inference
generally results in constraint problems in a term constraint system. That means we have to normalize a
constraint in a term constraint system attached with a
substitution OE. We want to get a constraint C in X and
a substitution .

(VAR)

x : (8_ff:D ) o/ ) 2 \Gamma  _fi new

(C; ) = normalize(D; [ _fi=_ff])

jfv(\Gamma ); C; \Gamma  `W x : o/

(ABS) ; C; \Gamma x:x : ff `

W e : o/ ff new

nfffg; C; \Gamma x `W *x:e : ff ! o/

(APP)

1; C1; \Gamma  `W e1 : o/1 2; C2; \Gamma  `W e2 : o/2

0 = 1 t 2
D = C1 ^ C1 ^ (o/1 = o/2 ! ff) ff new

(C; ) = normalize(D; 0)
jfv(\Gamma ); C; \Gamma  `W e1e2 : ff

(LET)

1; C1; \Gamma x `W e : o/ (C2; oe) = gen(C1; 1\Gamma ; o/ )

2; C3; \Gamma x:x : oe `W e0 : o/ 0
0 = 1 t 2 D = C2 ^ C3

(C; ) = normalize(D; 0)
jfv(\Gamma 

x); C; \Gamma x `W let x = e in e0 : o/ 0

Figure 2: Type inference

We give an axiomatic description of normalization in
the next section. For instance, in the Hindley/Milner
type system normalization of

(int ! bool = int ! ff)
yields (C; ) where C =e true and  = [bool=ff]. Then,
we introduce an instance relation to compare the results of the type inference algorithm. Finally, we state
the main results: soundness and completeness of type
inference.

3.2.1 Normalization
In this section we study the relationship between cylindric and term constraint systems. Below we give an
axiomatic description of normalization. First, we introduce some preliminary definitions.

Preliminaries: Assume U is a finite set of type
variables that are of interest in the situation at hand.
We need a handle to compare two substitutions.

Definition 10 Let OE, OE0 and  be substitutions. Then
 ^OE

0

U OE iff (OE0 ffi )jU = OEjU .

We write  ^ OE if 9OE0 :  ^OE

0 OE. Sometimes, we omit

the set U .

Note that this makes the "more general" substitution the smaller element in the pre-order ^U . This

choice, which reverses the usual convention in treatments of unification (e.g. [LMM87]), was made to stay
in line with the semantic notion of type instances.

We make ^U a partial order by identifying substitutions that are equal up to variable renaming, or equivalently, by defining  =U OE iff  ^U OE and OE ^U .
It follows from [LMM87] that ^U is a complete lower
semi-lattice where least upper bounds, if they exist,
correspond to unifications and greatest lower bounds
correspond to anti-unifications.

We consider now the task of normalization. Normalization means computation of a principal normal form
of a constraint D from a term constraint system and a
substitution OE.

Definition 11 (Principal Normal Form) Let C be a
cylindric constraint system, T be a term algebra and
let DT be a term constraint system. Let C 2 C and
D 2 DT be constraints and let OE, be substitutions.
Then (C; ) is a normal form of (D; OE) iff OE ^ ,
C `e D and C = C

(C; ) is principal if for all normal forms (C0; 0) of
(D; OE) we have that  ^ 0 and C0 `e 0C.

Principal normal forms are unique up to variable renaming:

Lemma 8 (Uniqueness) Let (C; ) and (C0; 0) be
principal normal forms of (D; OE). Then there is a vari(REF) `i o/ _ o/

(_ 8) C [ D `

i oe _ oe0 ff 62 tv(oe) [ tv(C)

C `i oe _ 8ff:D ) oe0

(8 _) C `

i [o/ =ff]oe _ oe0 C `e [o/ =ff]D

C `i 8ff:D ) oe _ oe0

Figure 3: Instance rules
able renaming OE0 such that C0 = OE0C and 0 = OE0 ffi .

That means computation of the principal norm form
of (D; OE) is well-defined. Given (D; OE) we can define a
function normalize by:

normalize(D; OE)
= (C; ) if (C; ) principal normal form of (D; OE)
= fail otherwise

Definition 12 (Principal Constraint Property)
Given a term algebra T . A cylindric constraint system
C has the principal constraint property if there exists
a term constraint system DT such that C ` DT and
for every constraint D 2 DT and substitution OE, either
(D; OE) does not have a normal form or (D; OE) has a
principal normal form.

We also say that a HM(X) type system has the principal constraint property if X has the principal constraint property.

In the case of the Hindley/Milner type system (or
HM(1) in terms of our notation), normalization means
simply computation of the most general unifier. We
have in this case:

normalize((o/1 = o/2); OE)
= (true; mgu(OEo/1; OEo/2) ffi OE) if OEo/1; OEo/2 are unifiable
= fail otherwise

This is easy to see. Assume first that OEo/1 and OEo/2
are unifiable and let  = mgu(OEo/1; OEo/2). Then

true `e ( ffi OE)(o/1 = o/2)
and (true;  ffi OE) is minimal because  is a most general
unifier of (OEo/1; OEo/2). On the other hand, if there is no
solution to (o/1 = o/2), no unifier exists at all. That
means, normalization fails.

In this case, the constraint system 1 itself is not
expressive enough to express failure of normalization.
The reason is all constraints in 1 are satisfiable. The
question arise, what happens if the principal normal
form of an unsatisfiable constraint exists. We can state
the following lemma.

Lemma 9 Given a term algebra T . Let C be a cylindric constraint system having the principal constraint
property. Let D 2 DT and OE be a substitution such that
OED is unsatisfiable. If (C; ) is the principal normal
form of (D; OE) then C is unsatisfiable.

3.2.2 The Instance Relation
In order to state the main results we need a handle to
compare two type schemes oe and oe0 with respect to a
constraint C. This relation is expressed by the term
C `i oe _ oe0, see Figure 3. It is possible to enforce
that all (8 _) steps are performed before (_ 8) steps.
We simply have the following new relation `i2 . All
instance rules are the same execpt for the (8 _) rule:

(8 _2) C `

i2 [o/ =ff]oe _ o/ 0 C `e [o/ =ff]D

C `i2 8ff:D ) oe _ o/ 0 :

The next lemma states that `i and `i2 are equivalent.
Lemma 10 (Equivalence) Let C be a constraint and
oe; oe0 be type schemes. Then C `i oe _ oe0 iff C `i2
oe _ oe0.

Also, the (Ref-oe), (Cut) and (Trans) rule are derivable.

Lemma 11 (Ref-oe) Let C be a constraint and oe be a
type scheme. Then we can derive C `i oe _ oe.

Lemma 12 (Cut) Let C; D be constraints and oe; oe0 be
type schemes such that D `e C and C `i oe _ oe0.
Then D `i oe _ oe0 holds.

Lemma 13 (Trans) Let C be a constraint and oe1, oe2,
oe3 be type schemes such that C `i oe1 _ oe2 and
C `i oe2 _ oe3. Then we get C `i oe1 _ oe3.

Now, we introduce a relation between so-called typing configurations (C; oe; ).

Definition 13 (Typing Configurations) Let C be a constraint, oe be a type scheme and  be a substitution such
that C = C and oe = oe. Then (C; oe; ) is a typing
configuration.

Let (C; oe; ), (C0; oe0; 0) be typing configurations and
\Gamma  be a type context. Then (C; oe; ) is more general than

(C0; oe0; 0) with respect to \Gamma  iff  ^OE

0

fv(\Gamma ) OE, C0 `

e OE0C

and C0 `i OE0oe _ oe0.

We write (C; oe; ) _\Gamma  (C0; oe0; OE).

The next lemma expresses the relationship between
typing jugdements and configurations.

Lemma 14 Let (C; oe; ), (C0; oe0; 0) be typing configurations where (C; oe; ) _\Gamma  (C0; oe0; 0), \Gamma  be a type context and C; \Gamma  ` e : oe be a typing judgement. Then we
can derive the typing judgement C0; OE\Gamma  ` e : oe0.

3.2.3 Main Results
We now present our main results. We assume that we
have a HM(X) type system which has the principal constraint property.

Theorem 2 (Soundness) Given a term e and a type
context \Gamma . If ; C; \Gamma  `W e : o/ then C; \Gamma  ` e : o/ ,
C = C and o/ = o/ .

Now, we present our completeness result. Informally speaking, we want to have the following. Given a
derivation C0; OE\Gamma  ` e : oe0, our type inference algorithm
should report a constraint that is at least as small as
C0 and a type that is at least as general as oe0. First, we
require that every type scheme in the type context OE\Gamma 
has a type instance with respect to the constraint C0.
This is reflected by the following definition.

Definition 14 Let C0 be a constraint and \Gamma 0 be a type
context. Then \Gamma 0 is satisfiable in C0 iff for every x : oe 2
\Gamma 0 there is a o/ such that C0 `i oe _ o/

It now follows the completeness result.
Theorem 3 (Completeness) Let C0; OE\Gamma  ` e : oe0 be
a typing judgement and OE\Gamma  is satisfiable in C0. Then
; C; \Gamma  `W e : o/ and (Co; oeo; ) _\Gamma  (C0; oe0; OE) where
(Co; oeo) = gen(C; \Gamma ; o/ ).

Let us briefly comment the completeness result. We
assume that we have a typing configuration (C0; oe0; OE)
such that C0; OE\Gamma  ` e : oe0. Then if we generalize the
results of the type inference algorithm, we get a more
general typing configuration.

The following corollary states that our type inference
algorithm computes principal types.

Corollary 1 (Principal Types) Let C0; \Gamma  ` e : oe0 be a
typing judgement, fv(\Gamma ) = ; and \Gamma  is satisfiable in C0.
Then id; C; \Gamma  `W e : o/ and (Co; oeo; id) _\Gamma  (C0; oe0; id)
where (Co; oeo) = gen(C; \Gamma ; o/ ).

4 A Type System with Subtyping
We now consider a type system with subtyping. The
subsumption rule is added to the logical type system in
figure 1. First, we must introduce a constraint system
that is able to express subtyping.

Definition 15 (Subtype Constraint System) A subtype
constraint system SCT over a term algebra T is a term
constraint system with the following additional properties. For each pair of types o/ and o/ 0 there is a subtype
predicate (o/ ^ o/ 0) in SCT , which satisfies:

S1 (ff = ff0) =e (ff ^ ff0) ^ (ff0 ^ ff)

S2 D `

e (ff01 ^ ff1) D `e (ff2 ^ ff02)

D `e (ff1 ! ff2 ^ ff01 ! ff02)

S3 D `

e (ff1 ^ ff2) D `e (ff2 ^ ff3)

D `e (ff1 ^ ff3)

Now, we introduce the subtype rules in Figure 4.
As for `i , we get that the (Ref-oe), (Cut) and (Trans)
rules hold. These lemmas are already stated for `i
in Lemmas 11, 12 and 13. Additionally, we have the
(! Intro) rule.

Lemma 15 (! Intro) Let C be a constraint and o/1; o/2; o/3
be types. If C `s o/ 01 ^ o/1 and C `s o/2 ^ o/ 02 then
C `s o/1 ! o/2 ^ o/ 01 ! o/ 02.

The type system can be found in Figure 4. There is
just one additional rule compared to the previous type
system, it is the (SUB) rule. Note that the (8 Elim)
rule is entailed by the (SUB) rule so there is no need
for it. Rules (VAR) - (LET) stay unchanged.

The type inference algorithm in Figure 4 is the same
except for the (APP) rule. Instead of the equality predicate (=) we have now the subtype predicate (^).

In this extension computation of the principal normal form is trivial because a subtype constraint system
SCT is expressive enough to state all constraint problems which arise during type inference. That means,
the principal constraint property holds trivially for a
subtype constraint system SCT . We get that

normalize(D; ) = (D; ):
But then our type inference algorithm reports always
the id substitution. That is true for the (VAR) rule.

Subtype rules : (ENTAIL) C `

e (o/ ^ o/ 0)

C `s o/ ^ o/ 0

(^ 8) C ^ D `

s oe ^ oe0 ff 62 tv(oe) [ tv(C)

C `s oe ^ 8ff:D ) oe0

(8 ^) C `

s [_o/ =_ff]oe ^ oe0 C `e [_o/ =_ff]D

C `s 8_ff:D ) oe ^ oe0

Logical subtype system : (SUB) C; \Gamma  ` e : oe C `

s oe ^ o/

C; \Gamma  ` e : o/

Subtype inference : (APP)

1; C1; \Gamma  `W e1 : o/1 2; C2; \Gamma  `W e2 : o/2

0 = 1 t 2
D = C1 ^ C1 ^ (o/1 ^ o/2 ! ff) ff new

(C; ) = normalize(D; 0)
jfv(\Gamma ); C; \Gamma  `W e1e2 : ff

Figure 4: Extensions for Subtyping
And whenever we have to compute a normalization we
know that normalize(D; id) = (D; id). Therefore, the
other inference rules report also the id substitution.
Consider the following example.

Example 2

id; (ff ^ fi ! fl) ^ (ff ^ fl ! ffi); ;

`W
*f:*x:f(fx) : ff ! fi ! ffi:

We get the same main results as already stated in
Section 3. We have not exploited the treatment of
records. The reason is we only admit the function constructor ! in the term algebra T . It is straightforward
to extend the term algebra T with further type constructors T . The encoding of records is postponed to
future work.

Related Work:
Our extension is most closely related to the one of the
Hopkins Object Group [EST95b]. But instead of simply
duplicating the constraint in the (8 Intro) rule we split
it up into two versions, one existentially quantified the
other universally quantified. Consider the constraint

C = (ff ^ fi) ^ (fi ^ fl):
If we quantify the type variable fi we get the constraint
9fi:C which can safely be simplified to (ff ^ fl) since
the denotation is the same for both constraints. The

type inference algorithm of the Hopkins Object Group
keeps the constraint C. That means their type inference algorithm ends up in a large constraint set whereas
our framework gives a semantic basis for simplifications
by the projection operator. But there is also another
reason why simplification becomes an important issue.
We have already mentioned that the subtype constraint
system is expressive enough to state all constraint problems which arise during type inference. Then type inference simply accumulats all constraint problems and
also in our case we end up in a large constraint set.
That means, the reported constraints are very verbose
and hard to interpret. In the next section we discuss
simplification in more detail.

5 Simplification
A current trend in research for type inference with constrained types is to simplify constraints, see [Pot96,
EST95a]. The problem is that the reported constraints
are to precise. It is very difficult for the programmer to
interpret the constraints. During type inference many
intermediate type variables are introduced. We want
to hide such type variables and make them invisible to
the programmer. By the projection operator 9_ff we
can bind type variables _ff in a constraint. The following lemma expresses under which circumstances we
can bind type variables by the projection operator, that

means making them invisible to the programmer.
Lemma 16 Let C; \Gamma  ` e : oe be a typing judgement and

_ff 62 fv(\Gamma ) [ fv(oe). Then 9_ff:C; \Gamma  ` e : oe.

Based on the above lemma we are able to state the
following simplification rule:

(SIMP) C; \Gamma  ` e : oe _ff 62 fv(\Gamma ) [ fv(oe)9_ff:C; \Gamma  ` e : oe
Pottier [Pot96] and the Hopkins Object Group [EST95a]
developped independently methods to remove unreachable constraints. The (SIMP) rule gives a semantic justification for doing so.

They also examine some other simplification techniques:

ffl Replacing a variable with its bound:

For instance, if a type variable occurs only positively in a type, we can replace this type variable
with its lower bound.

ffl Merging of variables:

We consider now subtyping. If we have a typing
judgement C; \Gamma  ` e : oe and the cyclic constraint
(ff ^ ff0) ^ (ff0 ^ ff) is entailed by C and furthermore ff0 is not free in \Gamma  then we can substitute ff0
with ff.

All of these techniques involve computation of a substitution. This substitution is applied to the given typing judgement. We can state the following substitution
rule which follows immediately from Lemma 14:

(SUBST)

C; OE\Gamma  ` e : oe OE ^OE

0 

OE0jfv(\Gamma ) = id C `e C C `i oe ^ oe

C; OE\Gamma  ` e : oe

We need the conditions

OE0jfv(\Gamma ) = id C `e C C `i oe ^ oe
to ensure that application of the (SUBST) rule is complete. That means the typing judgement of the conclusion should be as least as general as the typing judgement of the premise.

We believe that our framework supports a semantic basis for simplifications. Our semantic definition
of constraint systems allows us to change the syntactic
representation of a constraint without changing its denotation. Also, we sketched how to integrate already
existing simplification techniques [Pot96, EST95a].

6 Conclusion
We have presented a general framework HM(X) for Hindley/Milner style type systems with constraints. Constraint systems are introduced in terms of cylindric algebras. We have introduced a new formulation of the
(8 Intro) rule. Also, if the constraint domain X has
the principal normal form property we get the principal type property. To design a full language or static
analysis based on our approach, one must simply check
that the conditions on the constraint system are met. If
this is the case, one gets a type inference algorithm and
the principal type property for free. We have outlined
this procedure for a language extension with subtyping. The embedding of object oriented features such
as overloading and records will be presented in future
work.

Acknowledgements
We would like to thank the anonymous referees for their
helpful suggestions.

References
[AW93] Alexander Aiken and Edward L. Wimmers.

Type inclusion constraints and type inference. In FPCA '93: Conference on Functional Programming Languages and Computer Architecture, Copenhagen, Denmark,
pages 31-41, New York, June 1993. ACM
Press.

[BSvG95] Kim B. Bruce, Angela Schuett, and Robert

van Gent. Polytoil: A type-safe polymorphic object-oriented language (extended abstract). In Proceeding of ECOOP, pages 27-
51, LNCS 952, 1995. Springer Verlag.

[CCH+89] Peter Canning, William Cook, Walter Hill,

Walter Olthoff, and John C. Mitchell. Fbounded polymorphism for object-oriented
programming. In Functional Programming Languages and Computer Architecture, pages 273-280, September 1989.

[CW85] Luca Cardelli and Peter Wegner. On understanding types, data abstraction, and polymorphism. Computing Surveys, 17(4):471-
522, December 1985.

[DHM95] Dirk Dussart, Fritz Henglein, and Christian

Mossin. Polymorphic recursion and subtype
quantifications: Polymorphic binding-time

analysis in polynomial time. In Alan Mycroft, editor, Proceedings of SAS, pages 118-
135. Springer Verlag, September 1995.

[DM82] Luis Damas and Robin Milner. Principal

type schemes for functional programs. January 1982.

[EST95a] J. Eifrig, S. Smith, and V. Trifonov. Sound

polymorphic type inference for objects. In
OOPSLA, 1995.

[EST95b] J. Eifrig, S. Smith, and V. Trifonov. Type

inference for recursivly constrained types
and its application to object oriented programming. In Electronic Notes in Theoretical Computer Science, volume 1, 1995.

[HHJW96] Cordelia V. Hall, Kevin Hammond, Simon L. Peyton Jones, and Philip L.
Wadler. Type classes in haskell. TOPLAS,
18(2):109-138, March 1996.

[HMT71] L. Henkin, J.D. Monk, and A. Tarski. Cylindric Algebras. North-Holland Publishing
Company, 1971.

[JM94] Joxan Jaffar and Michael Maher. Constraint

logic programming: A survey. Journal of
Loagic Programming, 19,20:503-581, 1994.

[Jon92] Mark P. Jones. Qualified Types: Theory and

Practice. D.phil. thesis, Oxford University,
September 1992.

[Jon95] Mark P. Jones. Simplifying and improving

qualified types. In Proc. FPCA'95 Conf.
on Functional Programming Languages and
Computer Architecture, 1995.

[Kae92] Stefan Kaes. Type inference in the presence of overloading, subtyping, and recursive types. pages 193-204, June 1992.

[KC92] Martin Odersky Kung Chen, Paul Hudak.

Parametric type classes. In Proc. of Lisp
and F.P., pages 170-181. ACM, 1992.

[LMM87] J. Lassez, M. Maher, and K. Marriott.

Unification revisited. In J. Minker, editor, Foundations of Deductive Databases
and Logic Programming. Morgan Kauffman,
1987.

[Mil78] Robin Milner. A theory of type polymorphism in programming. Journal of Computer and System Sciences, 17:348-375, Dec
1978.

[Mit84] John C. Mitchell. Coercion and type inference. In Proceedings of the 11th ACM
Symposium on Principles of Programming
Languages, pages 175-185, 1984.

[NP93] Tobias Nipkow and Christian Prehofer.

Type checking type classes. POPL, pages
409-418, 1993.

[Oho95] Atsushi Ohori. A polymorphic record

calculus and its compilation. TOPLAS,
17(6):805-843, November 1995.

[OWW95] Martin Odersky, Philip Wadler, and Martin Wehr. A second look at overloading. In Proc. ACM Conf. on Functional
Programming and Computer Architecture,
pages 135-1469, June 1995.

[Pal95] Jens Palsberg. Efficient inference of object

types. 123(2):198-209, December 1995.

[Pot96] Francois Pottier. Simplifying subtyping constraints. In International Conference on
Functional Programming, page 122 to 133,
May 1996.

[Rem89] D. Remy. Typechecking records and variants in a natural extension of ML. pages
77-88. ACM, January 1989.

[Rey85] John C. Reynolds.

Three approaches to type structure. In Proceedings TAPSOFT/CAAP 1985, pages 97-
138. Springer-Verlag, 1985. Lecture Notes in
Computer Science 185.

[Sar93] Vijay A. Saraswat. Concurrent Constraint

Programming. Logic Programming Series, ACM Doctoral Dissertation Award Series. MIT Press, Cambridge, Massachusetts,
1993.

[Sul96] Martin Sulzmann. Proof of the properties for constrained types. Technical report,
University of Karlsruhe, 1996.

[TJ92] Jean-Pierre Talpin and Pierre Jouvelot.

The type and effect discipline. In Seventh Annual IEEE Symposium on Logic in
Computer Science, Santa Cruz, California,
pages 162-173, Los Alamitos, California,
June 1992. IEEE Computer Society Press.

[WF91] Andrew K. Wright and Matthias Felleisen.

A syntactic approach to type soundness.
Technical Report Rice COMP TR91-160,
Rice University, Houston, Texas, 1991.