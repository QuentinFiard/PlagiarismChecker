

The Undecidability of
Mitchell's Subtyping Relationship

\Lambda 

J. B. Wells
jbw@cs.bu.edu
Dept. of Computer Science

Boston University
Boston, MA 02215, U.S.A.

December 10, 1995

Abstract
Mitchell defined and axiomatized a subtyping relationship (also known
as containment, coercibility, or subsumption) over the types of System F
(with "!" and "8"). This subtyping relationship is quite simple and does
not involve bounded quantification. Tiuryn and Urzyczyn quite recently
proved this subtyping relationship to be undecidable. This paper supplies a new undecidability proof for this subtyping relationship. First, a
new syntax-directed axiomatization of the subtyping relationship is defined. Then, this axiomatization is used to prove a reduction from the
undecidable problem of semi-unification to subtyping. The undecidability of subtyping implies the undecidability of type checking for System F
extended with Mitchell's subtyping, also known as "F plus eta".

1 Introduction
1.1 Background and Motivation
Mitchell originally defined his subtyping relationship, which he called containment, to account for a particular meaning of the type constructor "!" in his
semantics for System F. Mitchell devised a notion of a type inference model for
System F where the meaning of a typing statement "M : o/ " is that the meaning
of M belongs to a set of *-term meanings associated with the meaning of o/ .
This is written as [[M]] 2 D[[o/]] .

\Lambda This work is partly supported by NSF grants CCR-9113196 and CCR-9417382.

1

In the general case of a type inference model for System F, it is not true
that:

([[M]] \Delta  D[[o/]]) ` D[[ae]] ) [[M]] 2 D[[o/!ae]](1)
The reverse implication is true:

[[M]] 2 D[[o/!ae]] ) ([[M]] \Delta  D[[o/]]) ` D[[ae]]
This corresponds to the fact that extensionally equal *-terms can not be given
the same types in System F. For example, the *-term (*x:M x) where x is fresh
can be assigned more types than M .

It is quite natural to consider requiring type inference models to satisfy (1).
The stronger semantic restriction on "!" leads to there being fewer models.
Fewer models result in more sound typings that are satisfied by all models.
Thus, adding the restriction allows more *-terms to be typed.

Mitchell describes two ways to make the type system at the syntactic level
reflect the addition of the requirement (1) at the semantic level. The first way
is to add the eta type inference rule to System F:

(j) A ` *x:M x : oe ! o/A ` M : oe ! o/ x 62 FV(M )
This can be seen as requiring extensionally equal *-terms to be given the same
types. The second way is to add the containment rule (more often called subsumption by others):

(cont) A ` M : oeA ` M : o/ oe ` o/
where oe ` o/ stands for D[[oe]] ` D[[o/]] (thus explaining the name "containment").
Mitchell provides an axiomatization (see Section 2.3) that syntactically captures
this semantic notion. This axiomatization is what is commonly thought of as
Mitchell's subtyping relationship.

Until quite recently, it has been an open problem whether the subtyping
relationship is even decidable. Longo, Milsted, and Soloviev recently devised a
new axiomatization of the subtyping relationship (see Section 2.3) which does
not contain the (trans) rule:

(trans) ae ` oe; oe ` o/ae ` o/
Of course, the relationship is still transitive without this rule. Using this new
axiomatization, Tiuryn and Urzyczyn recently proved the undecidability of the
subtyping relationship by a reduction from the halting problem for 2-counter
automata [TU95]. As well as the undecidability of subtyping, Tiuryn and Urzyczyn's result implies the undecidability of type checking for System F extended

2

with subtyping (also known as "F plus eta"). Type checking is the problem
where given a set of type assumptions A, a *-term M , and a type o/ , one asks
whether A ` M : o/ can be derived. There is a trivial reduction from subtyping to type checking where the subtyping question "oe ` o/ " becomes the type
checking question "fx : oeg ` x : o/ ".

1.2 Contribution of This Paper
This paper contributes two new results:

1. A new, syntax-directed axiomatization of Mitchell's subtyping relationship is defined and proven equivalent to the other axiomatizations. The
axiomatization of Longo, Milsted, and Soloviev is used as an intermediate
step.

This new rule system is syntax-directed in the sense that the syntax of oe
uniquely determines the final rule used in proving that oe is a subtype of o/ .
The syntax-directed nature of the rules provides the important ability to
decompose subtypings. A key result of this paper is that the subtyping:

8~ff:(oeL ! oeR) ` 8~fl:(o/L ! o/R)
can be decomposed into two subtypings:

o/L ` 8~fi:(oeL[~ff := ~ae ])
8~fi:(oeR[~ff := ~ae ]) ` o/R

2. The undecidable problem of semi-unification is reduced to the problem

of deciding Mitchell's subtyping relationship. This supplies an alternate
proof of the undecidability of subtyping. It also is a good example of how
the syntax-directed axiomatization of subtyping makes it easy to prove
properties of subtyping.

This undecidability result is also interesting because of the way it proves
that type checking for System F extended with subtyping ("F plus eta")
is undecidable. Type checking for System F without subtyping was also
proven undecidable by a reduction from semi-unification [Wel94]. Thus,
the type checking problem is undecidable for both versions of System F
for the same reason.

1.3 Future Work
It has also been an open problem whether typability in System F extended with
Mitchell's subtyping is decidable. Using the new syntax-directed axiomatization of subtyping, I have recently discovered a proof of the undecidability of
typability in System F extended with subtyping. The overall structure of the

3

proof is similar to way typability was proven undecidable for System F without
subtyping [Wel94], but the lower-level details are quite different. The paper will
be available soon.

1.4 Acknowledgements
Jerzy Tiuryn helped me by clearing up some misconceptions I had about the
decidability of Mitchell's subtyping relationship.

Trevor Jim inspired this research by asking me at LICS '95 to prove the
undecidability of typability in System F extended with Mitchell's subtyping.
He also made me aware of Tiuryn's paper on bicoercibility [Tiu95], which was
essential for my understanding of Mitchell's subtyping relationship.

Assaf Kfoury provided much support and encouragement.

2 Definitions and Foundation
This section introduces basic definitions, notation, and background results by
other researchers that are used in this paper.

2.1 General Notation
In general, for any entity X mentioned in this paper, the notation ~Xn denotes
the sequence X1X2 \Delta  \Delta  \Delta  Xn. The notation ~X denotes ~Xn for some natural number
n that is either unspecified or clear from the context. ~X may also be used to
stand for either the set fX1; X2; : : : ; Xng or the comma-separated sequence
X1; X2; : : : ; Xn, depending on the context.

2.2 Types
The set of types T is built from the countably infinite set of type variables V
using the "!" and "8" type constructors as specified by the grammar

T::= Vj (T! T) j (8 V:T)
Small Greek letters from the beginning of the alphabet (e.g. ff, fi, fl, ffi) are
metavariables over V and small Greek letters towards the end of the alphabet
(e.g. oe and o/ ) are metavariables over T. When writing types, the arrows associate to the right so that oe ! o/ ! ae stands for the type oe ! (o/ ! ae). The scope
of "8:" extends as far to the right as possible. The notation 8~ff:oe stands for
8ff1: \Delta  \Delta  \Delta  :8ffk:oe, which in turn stands for 8ff1:(\Delta  \Delta  \Delta  (8ffk:oe) \Delta  \Delta  \Delta  ). The symbol ? is
shorthand for 8ff:ff.

The notation oe[ff1 := o/1; : : : ; ffn := o/n] denotes the result of simultaneously
substituting o/i for all free occurrences of ffi in oe, renaming 8-bound variables in
oe as necessary to avoid capturing free variables of o/i. This may be abbreviated

4

as oe[~ff := ~o/ ]. For a substitution S = [~ff := ~oe], the notation S(o/ ) is short for
o/ [~ff := ~oe], the notation RAN(S) stands for ~oe, and the notation DOM(S) stands
for ~ff. A renaming of free type variables is a substitution [~ff := ~fi] whose range
contains only type variables.

The expressions FTV(o/ ) and BTV(o/ ) denote the free and 8-bound type
variables of type o/ , respectively. For a set of types X, the notation FTV(X)
denotes So/2XFTV(o/ ).

We have several conventions about how quantifiers in types are treated.

1. Reordering of adjacent quantifiers and ff-conversion of types is allowed at

any time. For example, we consider the types 8ff:8fi:ff ! fi, 8fi:8ff:fi ! ff,
and 8fi:8ff:ff ! fi to all be equal.

2. Using ff-conversion we assume that no variable is 8-bound more than once

in any type, that the 8-bound type variables of any two type instances are
disjoint, and that all 8-bound type variables of any type instance are
disjoint from the free type variables of another type instance.

3. If oe = 8ff:o/ and ff =2 FTV(o/ ), then "8ff" is a redundant quantifier. We

do not allow redundant quantifiers to affect the meaning of a type. For
example, we consider the types 8fi:8ff:ff and 8ff:ff to be equal.

We may view a type as a tree where each "!" corresponds to an internal
node, quantifiers are node labels, and other type variable occurrences are leaf
nodes. We may refer to particular nodes in the tree by paths from the root
where "R" denotes following a right branch and "L" a left branch. Let capital
Greek letters (e.g. \Pi , \Delta , \Gamma ) range over these paths. For example, the type fi
occurs at position LR in the type (ff ! fi) ! fl.

The notion of whether a type's position within another type is positive or
negative is defined as follows. A type considered as a part of itself occurs
positively. If oe occurs positively (respectively negatively) in o/ , then it occurs
positively (resp. negatively) in both ae ! o/ and 8ff:o/ and negatively (resp.
positively) in o/ ! ae. Equivalently, a position is positive if and only if the path
to that position contains an even number of occurrences of "L", otherwise it is
negative.

5

2.3 Subtyping
Mitchell's axiomatization of the subtyping relationship [Mit88] is given by the
following rules.

(sub) 8~ff:oe ` 8~fi:(oe[~ff := ~o/ ]) ~fi 62 FTV(8~ff:oe)
(distr) 8~ff:(oe ! o/ ) ` (8~ff:oe) ! (8~ff:o/ )
(!) oe2 ` oe1; o/1 ` o/2oe

1 ! o/1 ` oe2 ! o/2

(trans) ae ` oe; oe ` o/ae ` o/

(congruence) oe ` o/8ff:oe ` 8ff:o/
Longo, Milsted, and Soloviev give another axiomatization of the subtyping
relationship called System F `co [LMS95]. (This name is used because when the
inference rules of the system are labelled with proof terms, it becomes a fragment
of System F.) It goes as follows.

(ax) oe `co oe
(!) oe2 `co oe1; o/1 `co o/2oe

1 ! o/1 `co oe2 ! o/2

(8-left) oe[ff := ae] `co o/8ff:oe `

co o/

(8n-right) oe `co ae1 ! \Delta  \Delta  \Delta  ! aen ! o/oe `

co ae1 ! \Delta  \Delta  \Delta  ! aen ! (8ff:o/ ) ff 62 FTV(foe; ~aeg)

Theorem 11 in [LMS95] states that oe ` o/ if and only if oe `co o/ . Hence, the
two systems may be used interchangeably. A type oe is a subtype of type o/ if
and only if there is a derivation in Mitchell's system that oe ` o/ and there is a
derivation in System F `co that oe `co o/ .

Definition 2.1 (Sub) The subtyping problem: Given an arbitrary pair of
types oe and o/ , is it the case that oe ` o/ ?

2.4 Bicoercibility
If oe is a subtype of o/ and o/ is also a subtype of oe, then oe and o/ are bicoercible,
which we write as oe j o/ . Tiuryn has proven that the following axiomatization

6

captures precisely the notion of bicoercibility [Tiu95].

(A1) oe j oe
(A2) 8ff:8fi:oe j 8fi:8ff:oe
(A3) 8ff:oe j oe[ff := ?] all occurrences of ff in oe are positive
(A4) 8ff:(oe ! o/ ) j oe ! 8ff:o/ ff 62 FTV(oe) and ff occurs negatively in o/
(arrow) oe j oe

0; o/ j o/ 0

oe ! o/ j oe0 ! o/ 0

(quant) oe j oe

0

8ff:oe j 8ff:oe0

(trans) oe j ae; ae j o/oe j o/

(symm) oe j o/o/ j oe
Lemma 2.2 If oe j o/ , then the following properties hold.

1. oe and o/ have the same tree skeleton.
2. If \Pi  is a leaf in oe and o/ , then there is a quantifier for \Pi  in oe if and only

if there is one in o/ . If there is no quantifier, then the free variable at \Pi 
in oe is the same as the free variable at \Pi  in o/ . If there is a quantifier for
\Pi , then either it occurs at a positive position in both oe and o/ or it occurs
at a negative position in both.

3. If \Pi  and \Delta  are leaves in oe and o/ , \Pi  is a positive position, \Delta  is a negative

position, and both \Pi  and \Delta  are quantified by the same quantifier in oe,
then both \Pi  and \Delta  are quantified by the same quantifier in o/ and for any
other leaf \Gamma  it is the case that \Gamma  has the same quantifier as \Pi  in oe if and
only if this is also the case in o/ .

Proof: By inspection of the rules that axiomatize bicoercibility. \Xi 
Lemma 2.3 If (oeL ! oeR) j (o/L ! o/R) then oeL j o/L and oeR j o/R.
Proof: This is Lemma 6 in [Tiu95]. \Xi 

7

2.5 Semi-Unification
For convenience, we define semi-unification using a first-order signature containing the single infix binary function symbol "!" and for the case where there
are only two pairs of terms. (The general definition of semi-unification is reducible to this special case [Pud88, KTU93] and the proof that semi-unification
is undecidable is actually for this special case [KTU93].) The set of algebraic
terms T is defined by the grammar T ::= Vj (T ! T ). This definition is chosen
because it allows mapping terms onto types. In fact, T ae T.

An instance \Gamma  of semi-unification is set of two pairs

\Gamma  = f o/1 .^_1; o/2 .^_2 g
where o/1; o/2; _1; _2 2 T . (The use of the symbol "^" is an established convention. The dot is added in " .^" to make it clear that unification is involved.)

An open substitution is a function S : V! T that differs from the identity on
only finitely many variables and which extends naturally to a homomorphism
S : T ! T so that S(oe ! o/ ) = S(oe) ! S(o/ ). An open substitution S is a
solution for an instance \Gamma  of semi-unification if and only if there also exist open
substitutions S1; S2 such that S1(S(o/1)) = S(_1) and S2(S(o/2)) = S(_2).

Definition 2.4 (SUP) The semi-unification problem: Given an arbitrary instance \Gamma  of semi-unification, does \Gamma  have a solution?

3 Alternate Inference Rules for Subtyping
This section introduces an alternate set of inference rules for Mitchell's subtyping relationship which have some useful properties which will be used in the
next section.

Consider the following new rule system, which we call the syntax-directed
subtyping rules.

(var) ff ^ ff
(?) ? ^ oe
(f!) o/L ^ 8~fi:(oeL[~ff := ~ae ]); 8~fi:(oeR[~ff := ~ae ]) ^ o/R8~ff:(oe

L ! oeR) ^ 8~fl:(o/L ! o/R)

where ~fi 62 FTV(oeL ! oeR) and ~fl 62 FTV(8~ff:(oeL ! oeR))

This system is syntax-directed because if oe ^ o/ can be derived, then the last
rule used in the derivation is uniquely determined by the syntax of oe. The
syntax-directed nature of this rule system gives us the following nice property.

8

Lemma 3.1 If oe ^ o/ and oe = 8~ff:(oeL ! oeR) for some types oeL and oeR and
some type variables ~ff, then o/ = 8~fl:(o/L ! o/R) for some types o/L and o/R and
some type variables ~fl 62 FTV(oe) and there exist some types ~ae and some type
variables ~fi 62 FTV(oeL ! oeR) such that:

o/L ^ 8~fi:(oeL[~ff := ~ae ]) and 8~fi:(oeR[~ff := ~ae ]) ^ o/R
Proof: If oe ^ o/ then there is a derivation of this fact using only the rules (var),
(?), and (f!). If oe contains an "!", then the last rule used must have been
(f!). The claim of the lemma is simply the implications of this fact. \Xi 

This new rule system is another axiomatization of Mitchell's subtyping relationship.

Theorem 3.2 For all types oe and o/ , it holds that oe ^ o/ if and only if oe ` o/ .
Proof: The two directions of the equivalence are proven separately.

1. To prove that oe ^ o/ implies oe ` o/ , we show that every rule for "^" is an

admissible rule using "`". We prove each rule separately.

(a) (var) This rule is a special case of (sub).
(b) (?) This rule is a special case of (sub).
(c) (f!) It is given that:

o/L ` 8~fi:(oeL[~ff := ~ae ])
8~fi:(oeR[~ff := ~ae ]) ` o/R

~fi 62 FTV(oeL ! oeR)

~fl 62 FTV(8~ff:(oeL ! oeR))

and it is desired to show that:

8~ff:(oeL ! oeR) ` 8~fl:(o/L ! o/R)
By (!) it is the case that:

(8~fi:(oeL[~ff := ~ae ])) ! (8~fi:(oeR[~ff := ~ae ])) ` o/L ! o/R
By (distr) it is true that:
8~fi:((oeL[~ff:=~ae ])!(oeR[~ff:=~ae ])) ` (8~fi:(oeL[~ff:=~ae ]))!(8~fi:(oeR[~ff:=~ae ]))
which is the same as:

8~fi:((oeL ! oeR)[~ff := ~ae ]) ` (8~fi:(oeL[~ff := ~ae ])) ! (8~fi:(oeR[~ff := ~ae ]))

9

By (sub) and the restriction on ~fi:

8~ff:(oeL ! oeR) ` 8~fi:((oeL ! oeR)[~ff := ~ae ])
By three uses of (trans):

8~ff:(oeL ! oeR) ` o/L ! o/R
By (congruence) it is the case that:

8~fl:8~ff:(oeL ! oeR) ` 8~fl:(o/L ! o/R)
By (sub) and the restriction on ~fl:

8~ff:(oeL ! oeR) ` 8~fl:8~ff:(oeL ! oeR)
Then (trans) gives the desired result:

8~ff:(oeL ! oeR) ` 8~fl:(o/L ! o/R)
2. To prove that oe ` o/ implies oe ^ o/ , we show that every rule for system `co

is an admissible rule in system ^. We prove each rule separately. Remember while reading this that we do not allow the possibility of redundant
quantifiers.

(a) (ax) We want to prove oe ^ oe for any type oe. The proof goes by

induction on the structure of oe.

i. (oe = ff) This case is exactly the rule (var).
ii. (oe = ae ! o/ ) By inductive hypothesis, ae ^ ae and o/ ^ o/ . Then by

rule (f!) it holds that (ae ! o/ ) ^ (ae ! o/ ).

iii. (oe = 8ff:o/ ) By cases of whether o/ contains an "!".

A. (o/ = ff) By (?) it holds that 8ff:ff ^ 8ff:ff.
B. (o/ = 8~fl:(o/L ! o/R)) By the inductive hypothesis, o/L ^ o/L

and o/R ^ o/R. Thus, we have that:

o/L ^ o/L[ff; ~fl := ff; ~fl] and o/R[ff; ~fl := ff; ~fl] ^ o/R
Thus, by (f!) it holds that:

8ff:8~fl:(o/L ! o/R) ^ 8ff:8~fl:(o/L ! o/R)
which is the desired result.
(b) (!) This is a special case of (f!).
(c) (8-left) We are given that oe[ff := ae] ^ o/ and we wish to show that

8ff:oe ^ o/ . By cases on whether oe contains an "!":

10

i. (oe = ff) By (?) it holds that 8ff:ff ^ o/ .
ii. (oe = 8~fl:(oeL ! oeR)) We assume by ff-conversion that FTV(ae) "

~fl = ?. Thus, oe[ff := ae] = 8~fl:((oeL ! oeR)[ff := ae]). It is easy

to see that o/ contains an "!", so let o/ = 8~ffi:(o/L ! o/R) where
~ffi 62 FTV(8~fl:((oeL ! oeR)[ff :=ae])). By Lemma 3.1, it must be the

case that:

o/L ^ 8~fi:(oeL[ff; ~fl := ae; ~ss]) and 8~fi:(oeR[ff; ~fl := ae; ~ss]) ^ o/R
for some ~ss and ~fi 62 FTV((oeL ! oeR)[ff := ae]). We assume by ffconversion that ff 62 ~fi. Thus, ~fi 62 FTV(oeL ! oeR). It is obvious
that ~ffi 62 FTV(8ff:oe). Thus, by rule (f!) it holds that:

8ff:8~fl:(oeL ! oeR) ^ 8~ffi:(o/L ! o/R)
which is the desired result.
(d) (8n-right) We are given that

oe ^ ae1 ! \Delta  \Delta  \Delta  ! aen ! o/
where ff 62 FTV(foe; ~aeg) and we wish to show that

oe ^ ae1 ! \Delta  \Delta  \Delta  ! aen ! 8ff:o/
By cases on whether oe contains an "!".
i. (oe = ?) By (?) it holds that oe ^ ae1 ! \Delta  \Delta  \Delta  ! aen ! 8ff:o/ .
ii. (oe = 8~fl:(oeL ! oeR)) By induction on n.

A. (n = 0) Let o/ = 8~ffi:(o/L ! o/R) where ~ffi 62 FTV(oe). It must be

the case that

o/L ^ 8~fi:(oeL[~fl := ~ae ]) and 8~fi:(oeR[~fl := ~ae ]) ^ o/R
for some ~ae and ~fi 62 FTV(oeL ! oeR). Thus, by (f!) we have
that 8~fl:(oeL ! oeR) ^ 8ff:8~ffi:(o/L ! o/R) which is exactly oe ^
8ff:o/ , the desired result.

B. (n ? 0) It must be the case that

ae1 ^ 8~fi:(oeL[~fl := ~ae ])
8~fi:(oeR[~fl := ~ae ]) ^ ae2 ! \Delta  \Delta  \Delta  ! aen ! o/

for some ~ae and ~fi 62 FTV(oeL ! oeR). By cases depending on
whether ff 2 FTV(8~fi:(oeR[~fl := ~ae ])).

11

ffl Suppose it is the case that ff 2 FTV(8~fi:(oeR[~fl := ~ae ])).

Since ff 62 FTV(oe), it must be that ff appears in one of
the ~ae. Observe that we have already shown (8-left) and
(80-right) to be admissible for "^". By (8-left) it must be
that:

8ff:8~fi:(oeR[~fl := ~ae ]) ^ ae2 ! \Delta  \Delta  \Delta  ! aen ! o/
By the induction hypothesis (for n \Gamma  1) it must be true
that:

8ff:8~fi:(oeR[~fl := ~ae ]) ^ ae2 ! \Delta  \Delta  \Delta  ! aen ! 8ffo/
By (80-right) it is the case that ae1 ^ 8ff:8~fi:(oeL[~fl := ~ae ]).
By (f!) we have:

8~fl:(oeL ! oeR) ^ ae1 ! \Delta  \Delta  \Delta  ! aen ! 8ff:o/
which is the desired result.
ffl Suppose that ff 62 FTV(8~fi:(oeR[~fl := ~ae ])). Then by induction hypothesis:

8~fi:(oeR[~fl := ~ae ]) ^ ae2 ! \Delta  \Delta  \Delta  ! aen ! 8ff:o/
Then (f!) gives the desired result:

8~fl:(oeL ! oeR) ^ ae1 ! \Delta  \Delta  \Delta  ! aen ! 8ff:o/
\Xi 

Now that we have proven that Mitchell's subtyping rules are equivalent to
the syntax-directed subtyping rules, we may use them interchangeably.

4 Reducing Semi-Unification to Subtyping
This section contains the reduction from semi-unification to Mitchell's subtyping
relationship, which proves the undecidability of the latter.

Theorem 4.1 SUP is reducible to Sub. Specifically, given an arbitrary instance
of SUP:

\Gamma  = f oe1 .^o/1; oe2 .^o/2 g

we can construct a pair of types _ and ss such that _ ^ ss if and only if \Gamma  has a
solution.

12

Proof: Let ~fl = FTV(foe1; oe2; o/1; o/2g). With no loss of generality, assume that
FTV(foe1; oe2g) ' FTV(fo/1; o/2g). Let ae stand for ae ! ae. Define _ and ss as
follows:

_ = 8fi:((fi ! ((fi ! fi ! ?) ! ?) ! fi) ! ?)
ss = ss1 ! ?
ss1 = 8~ff:8~fl:( ((oe1 ! oe2) ! ?)

! ( ( ((o/1 ! ff1) ! ?)

! ((ff2 ! o/2) ! ?)
! ?)

! ?)
! ((oe1 ! oe2) ! ?))

We now prove that there is a solution for \Gamma  if and only if _ ^ ss.

First, we prove that _ ^ ss is equivalent to the existence of several substitutions that satisfy a set of four other subtypings. We do this by deconstructing
_ ^ ss using repeated applications of Lemma 3.1.

Since _ contains an "!", one use of Lemma 3.1 shows that _ ^ ss if and
only if there exist a substitution T1 whose domain is ffig and a set of variables

~ffi1 drawn only from the fresh variables in FTV(RAN(T1)) such that:

ss1 ^ 8 ~ffi1:T1(fi ! ((fi ! fi ! ?) ! ?) ! fi)(2)

? ^ ?

The astute reader will notice that ? ^ ? is always true. From now on, whenever
an application of Lemma 3.1 generates ? ^ ? as one of the two subtypings that
must be true, we will ignore it. Lemma 3.1 again tells us that subtyping (2)
holds if and only if there exist a substitution T2 whose domain is ~ff [ ~fl and a
set of variables ~ffi2 drawn only from the fresh variables in FTV(RAN(T2)) such
that:

T1(fi) ^ 8 ~ffi2:T2((oe1 ! oe2) ! ?)(3)
and also:

8 ~ffi2:T2( ( ( ((o/1 ! ff1) ! ?)

! ((ff2 ! o/2) ! ?)
! ?)
! ?)
! ((oe1 ! oe2) ! ?))

(4)

^ T1(((fi ! fi ! ?) ! ?) ! fi)
Lemma 3.1 gives the result that subtyping (4) holds if and only if there exist
a substitution T3 whose domain is ~ffi2 and a set of variables ~ffi3 drawn from the

13

fresh variables in FTV(RAN(T3)) such that the following subtypings hold:

T1((fi ! fi ! ?) ! ?) ^ 8 ~ffi3:T3(T2( ( ((o/1 ! ff1) ! ?)

! ((ff2 ! o/2) ! ?)
! ?)
! ?))

(5)

8 ~ffi3:T3(T2((oe1 ! oe2) ! ?)) ^ T1(fi)(6)
From (5) by Lemma 3.1 we get this equivalent subtyping:

T3(T2(((o/1 ! ff1) ! ?) ! ((ff2 ! o/2) ! ?) ! ?)) ^ T1(fi ! fi ! ?)(7)
Lemma 3.1 gives us these subtypings that are equivalent to subtyping (7):

T1(fi) ^ T3(T2((o/1 ! ff1) ! ?))(8)
T3(T2(((ff2 ! o/2) ! ?) ! ?) ^ T1(fi ! ?)(9)

From (9) by Lemma 3.1 we get this subtyping:

T1(fi) ^ T3(T2((ff2 ! o/2) ! ?))(10)
Thus, by repeated use of Lemma 3.1 we have learned that _ ^ ss if and only
if there exist three substitutions T1, T2, and T3 and three sets of variables ~ffi1,~
ffi2, and ~ffi3 such that these subtypings are true:

T1(fi) ^ 8 ~ffi2:T2((oe1 ! oe2) ! ?)(3)
8 ~ffi3:T3(T2((oe1 ! oe2) ! ?)) ^ T1(fi)(6)

T1(fi) ^ T3(T2((o/1 ! ff1) ! ?))(8)
T1(fi) ^ T3(T2((ff2 ! o/2) ! ?))(10)

and these constraints are satisfied:

DOM(T1) = ffig
DOM(T2) = ~ff [ ~fl

~ffi2 2 FTV(RAN(T2)) \Gamma  (~ff [ ~fl)

DOM(T3) = ~ffi2

~ffi3 2 FTV(RAN(T3)) \Gamma  (FTV(RAN(T2)) \Gamma  ~ffi2)

Now we show that these subtypings and constraints are satisfied if and only
if \Gamma  has a solution. The two directions of the equivalence are proven separately.

1. Suppose \Gamma  has a solution. In other words, there are open substitutions S,

S1, and S2 such that:

S1(S(oe1)) = S(o/1) and S2(S(oe2)) = S(o/2)

14

Pick T1, T2, T3, ~ffi1, ~ffi2, and ~ffi3 so that the following equations are true:

T2(ff1) = S1(S(oe2))
T2(ff2) = S2(S(oe1))

T2(fli) = S(fli)

~ffi1 = ?
~ffi2 = FTV(RAN(S))

T1(fi) = 8 ~ffi2:S((oe1 ! oe2) ! ?)
T3(ff) = ff0 (i.e. a renaming)

~ffi3 = T3( ~ffi2)

Then the subtypings (3), (6), (8), and (10) become the following:

8 ~ffi2:S((oe1 ! oe2) ! ?) ^ 8 ~ffi2:S((oe1 ! oe2) ! ?)(11)
8 ~ffi3:T3(S((oe1 ! oe2) ! ?)) ^ 8 ~ffi2:S((oe1 ! oe2) ! ?)(12)

8 ~ffi2:S((oe1 ! oe2) ! ?) ^ T3((S(o/1) ! S1(S(oe2))) ! ?)(13)
8 ~ffi2:S((oe1 ! oe2) ! ?) ^ T3((S2(S(oe1)) ! S(o/2)) ! ?)(14)

It is easy to check that (11), (12), (13), and (14) are true.
2. Suppose _ ^ ss is true. Then the subtypings (3), (6), (8), and (10) and

their associated constraints must be true.

By the (sub) rule, the following subtyping holds:

8 ~ffi2:T2((oe1 ! oe2) ! ?) ^ 8 ~ffi3:T3(T2((oe1 ! oe2) ! ?))(15)
By (15), (3), and (6), the following bicoercibility holds:

T1(fi) j 8 ~ffi2:T2((oe1 ! oe2) ! ?) j 8 ~ffi3:T3(T2((oe1 ! oe2) ! ?))(16)

Let T4 be the result of restricting the domain of T3 to FTV(T2(~fl). Thus,
it is the case that:

8 ~ffi2:T2((oe1 ! oe2) ! ?) j 8 ~ffi3:T4(T2((oe1 ! oe2) ! ?))
If for some ffi2;i it were the case that T4(ffi2;i) contained an "!", then
this would mean that two bicoercible types had different tree skeletons,
contradicting property 1 of Lemma 2.2, Thus, every member of RAN(T4)
is either ? or a type variable. Now observe that every free variable in
T2((oe1 ! oe2) ! ?) occurs in at least one positive position and at least one
negative position. If for some ffi2;i it were the case that T4(ffi2;i) = ?, then
there would be a negative occurrence of ffi2;i at \Pi  such that the quantifier

15

for \Pi  in 8 ~ffi2:T2((oe1 ! oe2)!?) was at a positive position (the root) but the
quantifier for \Pi  in 8 ~ffi3:T4(T2((oe1 ! oe2) ! ?)) was at a negative position
(at \Pi ). This would contradict property 2 of Lemma 2.2. Thus, every
member of RAN(T4) is a type variable. If for i 6= j it were the case that
T4(ffi2;i) = T4(ffi2;j), then this would contradict property 3 of Lemma 2.2.
Thus, T4 is a renaming of type variables.

By (16), (8), and (10), the following subtypings must hold:

8 ~ffi2:T2((oe1 ! oe2) ! ?) ^ T3(T2((o/1 ! ff1) ! ?))
8 ~ffi2:T2((oe1 ! oe2) ! ?) ^ T3(T2((ff2 ! o/2) ! ?))

By Lemma 3.1, there must exist substitutions T5 and T6 with the appropriate domains and sets of variables ~ffi5 and ~ffi6 satisfying the appropriate
constraints such that these subtypings must then be true:

T3(T2(o/1 ! ff1)) ^ 8 ~ffi5:T5(T2(oe1 ! oe2))
T3(T2(ff2 ! o/2)) ^ 8 ~ffi6:T6(T2(oe1 ! oe2))

This is shorthand for these subtypings:

T3(T2((o/1 ! ff1) ! (o/1 ! ff1))) ^ 8 ~ffi5:T5(T2((oe1 ! oe2) ! (oe1 ! oe2)))
T3(T2((ff2 ! o/2) ! (ff2 ! o/2))) ^ 8 ~ffi6:T6(T2((oe1 ! oe2) ! (oe1 ! oe2)))

By Lemma 3.1, we now get four subtypings which can actually be written
as the following two bicoercibilities:

T5(T2(oe1 ! oe2)) j T3(T2(o/1 ! ff1))
T6(T2(oe1 ! oe2)) j T3(T2(ff2 ! o/2))

By Lemma 2.3, this is equivalent to these four bicoercibilities:

T5(T2(oe1)) j T3(T2(o/1)) T5(T2(oe2)) j T3(T2(ff1))
T6(T2(oe2)) j T3(T2(o/2)) T6(T2(oe1)) j T3(T2(ff2))

We will ignore the bicoercibilities in the right column. The left pair are
equivalent to these, with T4 used instead of T3:

T5(T2(oe1)) j T4(T2(o/1))
T6(T2(oe2)) j T4(T2(o/2))

Since T4 is a renaming of type variables, it is reasonable to consider its
inverse, T \Gamma 14 . Clearly, the following equations must be true:

T \Gamma 14 (T5(T2(oe1))) j T2(o/1)
T \Gamma 14 (T6(T2(oe2))) j T2(o/2)

16

At this point, the existence of a solution for \Gamma  has almost been shown.
The only problem can be if T2, T5, and T6 mention quantifiers in their
ranges. It is sufficient to erase these quantifiers to produce a solution for
\Gamma . Pick a type variable " such that " 62 DOM(T5) [ DOM(T6) [ RAN(T4).
Define E to erase quantifiers as follows:

E(ff) = ff
E(oe ! o/ ) = E(oe) ! E(o/ )

E(8ff:oe) = E(oe[ff := "])

It is the case that if oe j o/ , then E(oe) = E(o/ ). (This is because oe and
o/ can only differ in the positions of quantifiers and the names of bound
variables.) Thus, it follows that:

E(T \Gamma 14 (T5(T2(oe1)))) = E(T2(o/1))
E(T \Gamma 14 (T6(T2(oe2)))) = E(T2(o/2))

Define open substitutions S, S1, and S2 as follows:

S = T2 ffi E
S1 = T5 ffi T \Gamma 14 ffi E
S2 = T6 ffi T \Gamma 14 ffi E

Thus, we know that:

S1(T2(oe1)) = S(o/1)
S2(T2(oe2)) = S(o/2)

It is easy to see that for any substitution T where " 62 DOM(T ) that
T ffi E = E ffi T ffi E. Thus, T2 ffi S1 = S ffi S1 and T2 ffi S2 = S ffi S2. This gives
the desired result:

S1(S(oe1)) = S(o/1)
S2(S(oe2)) = S(o/2)

\Xi 
Theorem 4.2 Sub is undecidable, i.e. it is undecidable whether oe ^ o/ for
arbitrary oe and o/ .

Proof: By Theorem 4.1, SUP is reducible to Sub. SUP was proven to be
undecidable by Kfoury, Tiuryn, and Urzyczyn [KTU93]. \Xi 

17

References
[KTU93] A. J. Kfoury, J. Tiuryn, and P. Urzyczyn. The undecidability of the

semi-unification problem. Inf. Comput., 102(1):83-101, Jan. 1993.

[LMS95] G. Longo, K. Milsted, and S. Soloviev. A logic of subtyping. In Proc.

10th Ann. IEEE Symp. Logic Comput. Sci., pp. 292-299, June 26-29,
1995.

[Mit88] J. C. Mitchell. Polymorphic type inference and containment. Inf.

Comput., 76(2/3):211-249, Feb./Mar. 1988.

[Pud88] P. Pudl'ak. On a unification problem related to Kreisel's conjecture.

Commentationes Mathematicae Universitatis Carolinae, 29(3):551-
556, 1988. Prague, Czechoslovakia.

[Tiu95] J. Tiuryn. Equational axiomatization of bicoercibility for polymorphic

types. Technical Report 95-004, Comp. Sci. Dept., Boston Univ., Feb.
1995. URL: ftp://cs-ftp.bu.edu/techreports/95-004-coercibility.ps.Z.

[TU95] J. Tiuryn and P. Urzyczyn. The subtyping problem for second-order

types is undecidable.
Technical report, Inst. of Informatics, Univ. of Warsaw, Nov. 1995.
URL: ftp://ftp.mimuw.edu.pl/pub/users/urzy/sub-undec.ps.Z.

[Wel94] J. B. Wells. Typability and type checking in the second-order *-

calculus are equivalent and undecidable. In Proc. 9th Ann. IEEE
Symp. Logic Comput. Sci., July 4-6, 1994.

18