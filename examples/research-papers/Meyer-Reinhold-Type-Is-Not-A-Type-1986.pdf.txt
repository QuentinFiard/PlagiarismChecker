

~%,rpe' I~ N o t   a  T y p e :   P r e l h u ~ a r g   lleport 

Albert  R.  Meyer  and  Mark  B.  Reinhold 

Laborat ory  for  Comput er  Science 
Massachusetts  L~stitute  of Technology 

Cambridge,  MA  02139 

A b s t r a c t o   A  function  has  a  dependen~  Yype when  the 
type  of  its  result  depends  upon  the  value  of  its  argu~ 
mont.  Dependent  types originated in the  type theory 
of  intuitionistic mathem ati cs  and  have  reappeared  in- 

dependently  in  progr ammi ng  languages  such  as CLU, 

Pebble,  and  Russell.  Some of these  languages  make  the 
a~sumption  t hat   there  exists  a  ~ype-of-alt-~ypez which 
is  its  own  type  as  well  as  the  Wpe  of  M1 other  types. 

Girard proved that this approach  is  inconsistent from 

the  perspective  of  mtultionistic logic.  We  apply  Gi~ 
rard's  techniques to establish that the  typ~ofoM14ypes 

assumption creates serious pathologies from a  program- 
ming  perspective:  a  system  using  this  assumption  is 
inherently  not  normMi~ing,  term  equality  is  undecic~ 
able,  and  the  resulting  theory  fails  to be  a  conservative 
extension  of the  theory  of  the  underlying  base  types. 
The  failure  of  conservative  extension  means  that clas~ 
sical  reasoning  about   programs  in  such  a  system  is  not 

sound, 

1.  I m t r o d u e t ~ o n  
Dependent  types. A function  has a dependent  type when 
the  type  of its  result  depends  upon  the  value  of its  ar- 
gument. 

A  simple  example  of  a  function  which  has  a  depen- 
dent  Wpe  is  the  unary function zero_vector  which  when 

applied  to an integer  n  returns an  n-vector  of  seroes. 
No  particularly  appropriate  type  wesents  itse]f for  the 

This research was ~uppoAed  by NSF grant no. DCRo8511180. 
Permission  to  copy without  fee  all  or  p~r~ of this  material  is granted provided that the cople~ are not made or distributed for 

direct commercial advantage, the ACM copyright notice and the title of the publication and it8 date appear~ and notice is given 

that  copying is by permi~i0n of the A~oci~tion for Computing Machinery.  To  copy otherwise,  or  ~o republish,  requireg  a  fee 
and/or  ~pecific permilmion. 

(C)  1986  ACM-0-89791-175-X-1/86-0287  $00.75 

range of zero_vector,  and  hence zsre_vsc~or itself is typP 
cAly not  assigned  a simple functional  type.  For this re~. 
son,  a  parameteri~ed  type  constructor  like  v ec to r (R) ,  
which  denotes  the  type  of integer  vector,  of length  g,  is 

a  built-ln  %ature  of m any  p rog ra m mi n g  languages.  In 
pr ogramm ing  languages  with  Aeher  type  systems,  e.g0, 
CLU  [lg],  a  type  constructor  {o~  parame*eri~ed  dus- 

ter  in  CLU  terminology)  ~uch  a~  )~n:inL~eetor{n)  can 
even  be  user-defined.  In  any  case,  the  type  of the  value 

zs~o_~ec~or(n)  can  be  described  ~  v e c t o r ( n ) .  

The  function  An:intovector(n)  defines  the  ~rpe  d 
the  value  of  zero_vector  at  ire  argument  n  and  thus  is 

a  good  candidate  for  specifying  the  dependent  type  of 

zero_vector.  However,  to  m a i n t An   a  use%l  distinction 
between  % n:i nt.vect or( n)  in  its  role  as  a  %notion and 
in its role  as a  type, we use  11 in  place of A as  a  syntactic 
marker  for  type  expressions.  T h a t   is,  we write 

where  ~:'  ls  r a m   a~  ~ha~ type'. 

Ordinary  %nction  types  can  be regarded  as  a  speclel 
case  d  dependent  types.  T h at   is,  the  type  (~--~ t}  of 
Nnctions  fr om   arguments  of  type  s  to  vzdues  of  type 
is  simply  (Hx:s.~)  where  z  is  chosen  to  be  some  fresh 
identifier. 

A  more  provocative  example  involves  finding  a  type 
for  the  Nnction 

f  :  (A~:inthf  (x =  0)  t h e n   4  elee  t r u e ) .  
Tha t   is,  f ( 0 ) =   4,  and.  f ( n )   =  l;rue  for  any  integer 
n  #  O.  Typically,  f  would  be  considered  untypable  (or 
perhaps  would  b~  assigned  some  loophole  type  such  as 
h l g - *   any)~  but  we  can  easily  assign  an  informative 
dependent  type  t~  f ,  namely, 

r  =  0)  th e n   m t   else  bo o l ). 
Of coarse, Mlowing~uch  a  type  for f  m%v undermine  the 
uti]ity of the  type system.  The  difficulty is t hat  the  type 

297 

involves the  test  C a  =  0)  which  may require  the  corapao 

ration  of ~  azbitrarT  integer  expression.  If that is the 
cas%  then constructive  type&ecking  becomes  unlikel N 

~ince  the  distAnce;ion between  type computation  and  are 

bi rt H"  computation  disappears.  Nevertheless,  under 
suitable  restrictions  it  is possible  to  define rich  systems 
of dependent  types,  in  whidh  %actions  such  as  /  above 

are  typable,  while  retedning  effective  typechecklngo 

.Polymor'phic types.  A  particularly  ~4ch effectivelyotyped 
calculus  is  A a  ,  the  polymorpMc  (or  second,oorder) A- 

calculus  {15~ 29],  The  polymorphic  A-calculus  allows 

variables  ranging  over  the  class  of  all  types  (second.. 

order variabtes)~ reflecting  facilities available m  Ads  [1], 
CLU, Russell  [4,  11],  and  other  programming  languages. 

%~iables  ranging  over objects  of some  particular  type 
are  called  tlns~orde~ variableso  {Note  that  a  variable  of 
type  int o-, Ant ranging  over fsnctions would  be  called 

fi~t,~..order in  this  context,)  N  AA~ the  fi~t-order  bindo 
iag operators  A and  fl are  paralleled  by the  correspon& 
ins  operators  A and  A,  for  secondo, order  variableso  J~%r 

example,  the  polymorphic  identity  %notion  I  can  be 

w~Jtten (izoAy:x.y)o  This means  that  f  can be  applied 

to  any argament  ~ which is a  type, and  returns as its 
value the identity  function  on  t~ cog../(lug)  is the ideao 
try %notion on  integers  which when in turn applied  to 

amy integer  ,n  yields  no  Si:nce the  type  of  if(t) is ~ --~ t, 
we  assign  f  itself  the  polymorphic  type  (Ax.z ~  c). 

A striking  %stare  of the  polymorphic calculus is that 
a  polymorphic  function  may be  appl%d  to  any type,  ino 
ch:ding  its own:  I{A xo x-, x)  is the  identRy functir.~n on 

identity  %nctionso  This  turss out  to W e   the  system 
enormous  expressive  power  while  retaining  easy  type~ 
checking  of  a  very  irlormative  kind  [12].  {This  kind  of 

indirect  ci.rcutarity~  reminiscent  of  the  dbecgly  cbcular 
selfoapplicadon potable in the  nntyped  localcnlus,  rates 

out any naive setotheoreglc explanation  of the semantics 

of terms  or  types [5, 28].) 

In particular,  l A  retains  five surprising  and  vMuable 
properties  possessed  by the  more familiar finitelyotyped 
A~ealculss {2, Appendix  A]: 

{t)  Provable  equality  is  sharacterised  by  a  set  of di- 

reefed row:rite  rules {reduction)  satisfymg the cone 

flaence  {Ch~ch~Rosser)  propergy~ 

{2)  Reduction  ~  strongly  normalizing  {te~ninaging), 

Le.  eve W  way  of  applying  redactions  to  a  term 
eventually  leads  to  a  term  i~  norrad  fsrm  whic'h 
cannot  be  farther  reduced, 

(a) The  equational  gheo~ T  d  terms  is decidable., 

{4)  The  theo~7  of type  ~ e r ~ i o n s   s:t  is decidable. 
{5)  Tf[e polymorphic th~.~ry of any algebraic stracture 

is ~ conservative extension  of the ordb~a<y {As. 

first-order  in  the  usual  sense)  equational  theory  of 
the  structure;  in  other  words,  the  equations  b~ 

tween  terms  of" the  algebra  provable  using  A ~  are 
jrast  those  in  the  original  theorw, 

Several  other  rich  calcali  wRh  fira,-  and  second-order 
dependent  types have been  developed which retain  these 

properties  while allowing type constralcgors  like those in 

the  examples  above  [19~ 21,  10~ g,  23,  24~ 7]. 

The  *ype-of-ML*ypes assumFtiO~o The  application  of  a 
polymo:iphic  %action  to  a  gyps  argument  is  evaluated 

by substRution  {fl,oreduction)  exactly  as for an  ordinary 

A-expression;  e.g.  (Az,a)~  can  be  reduced  by  substi. 
tuting  s  for  M1 free  occurrences  of the  variable  ~  in  ao 

Because of the distinction  between the first-  and second: 
order  binding  operators  A and  A  (Kkewise  t~  and  zX), a 

duplicate  set  of computation  rules  is  generally  needed 
for fi~to  and  second-oMer  terms.  The  system  would be 

simpler  ff we  could  use  Ao  and  H-binding  for  second- 
order  variables. 

One  comprehensive  way  to  do  this  is  to  introduce  a 
type-ofoalgtypes,  %  such  that  fur.  Then,  for  exaanpl% 
the  polymorphic  identity  %ncgion  can  be  rewritten  as {Az:roay:x.y) 

and  its  type  as  (Hx:ros-*  X)o  ~arther, (IIx:rox 
.-~ x)  has  in  turfs  type  r  since  ig  is  a  type  exo 
pressiono  Thus  the combination of fAr, reorder dependent 

types  and  the  typ~of-all-types assumption  subsumes 

A A,  cf~ [3]o Moreover,  the vector type constructor  used 
above  can  now  easily  be  typed  as  lnt  -+  r,  and  the  ff- 
then-else construct  within  the  type  expre~ion 

{nz:int.if (~ =  O) ~he= i=t else bool) 
has type  {bool X  r  X  r)  -+ r0 

tn  shorL  the  r:r  aasuraption  exten&  and  apparently 
simplifies  systeras  of fi:r~t- and  second-order  dependent 

types. 

We  will  be  concerned  below  with  four  distinct  A- 
calculi,  namely: 

A ~  the  finitely typed  {first-order)  A-calcuhs, 
A ~  the  polymorphic  {second-order)  A-calculus, 
A r1  She  typed  Aocalculus with  H-types,  and 
A r~  A n  extended  by the  r:r  assumption. 

The  new  systera,  A n,  defined  in  Section  2,  is  designed 

to  be  one  of  the  simplest  systems  wRh  first-order  d ~  
pendent  types.  Indeed,  wRhout  the aAdRion of farther 

288 

axiom%  )i n  will be shown to be a notationM variant  of 
the finitelyotyped  A~caleulu%  I r.  In  other  words,  des 

pendent  types  appear  only  in  degenerate  form  in  i ~. 

Choosing  such  a  system  strengthens  our  (negative)  re- 
suits,  since  the  pathologies  we  exhibit  when  pin  is  ex- 
tended  with {he typo-of-ail-types assumption will surely 

apply  to any less  degenerate  system. 

Penalties  off ~he  ~ype-@alL~ypes  assump~ioeo  Program~ 
m i n t   languages  such  a8  Pebble  [fi] and  A-calculi  sudh 

ae  Margin-LSf% theory  of types  [20] with  Vpe  systems 
incorporating  a  Wpe-of-all~types seem  capable  of satls~ 
lying  two  principal  goals of a  gyps system: 

(6)  Freedom  from runtime  type-errom 
(7)  Nepresentation  independence  of  abstract  data types  Is0,  1L  22l. 

Our objective  in the rest  of this paper  is to demonstrate 
that  other valuable  properties, namely  (2)-(5)  above, 
fail even  for  the  minimal type~ofoall~types system  pirr o 

The  failure  of property  (2)  (strong  normalisation) 
ig  not  by  itseN surpr~ing,  since  in  a  general  program- 

ming  language  one  expects  terms  which  define  divero 
gent  computations  not  to  have  normal  forms.  Simio 
larly, the  failure of property  (3) {undeeidability of term 
equivalence)  is to  be  expected.  But  the  failure of prop~ 
a n y   (4)  means  that  it  is  not  decidable  whether  a  term 
has  a  given type,  and more  generally whether  two types 

are  equal.  This undermines  the  possibility  of effective 

%ratio ~  typecheeMng  before  runglrae. Finally, the  fail- 
ure  of proper~y  (5), conservative extension, is also seri- 
ous a~ we  indicate  in  Section  4 beiow. 

The  finitely  typed  A-calculus,  A ~, is well-known  to 
satisfy  the confluence  and decidability  properties  (I)- 

(4),  and  can  be  proved  trivially to satisfy property  (5) 
(conservative extension)  by  an easy model-theoretic ar- 
gument  given  La Section  4.  It  follows that  ~pare"  piE, 
which is a  notational variant d  A ~ , a l e   ~atisfies (1)-(5), 

whereas the extension of A n  to I rr  by the single a~dom 

r:r  destroys everything  but  confluence. 

We  remark  that  in  order  to  identify r:r  ag the  mMn 
culpAt,  we  plan  in  our  full  paper  also  to  argue  that 

n  -  near  the  brink  of ~xndecidability that  less A  ~  not  ~o 
forceful jolts  than  r:r  will throw  it  over ~  well.  In par- 
ticular, we  will ~how that  pin  can  be  safely extended  in 

other  ways, for example to ~ubsume  pia, while preserw 
ing properties  (i)-(5}. 

Girard'8  aparadox ~. There  is a  purely formal correspon- 
dence, known ag the Nrmufae-~-~yp~  anatogy~ between 

some Aocalculi and intuitlonistic logks [8, 16].  Types axe 

seen  a~ logical '.propositions, and  (closed)  toexpressions 

are proofs of the propoeltions whi*   are their" types.  The 
intuitionistieally provable propositlons are exactly those 

types ~ for which closed terms  of type $ exist,  tntuitiono 
istic  absurdity  is  the  proposition  that  all  propositions 

are  provable;  in  a  Aocatculus  this corresponds  to  the 
type  (Hx:r.x).  So in A-calculi  where  the  %rmuI~e~a~ 
types  analogy  hold%  there  are  no  closed  A-expressions 

of type  (gx:r.x). 

An  early formulation  of hlghe>order  intuitionisQc 
logic  b ~ e d   upon  ~he  typeoofoMlotypes agsumption  wag 

laid  out  by  MartinoLgf [20]; the  k~calcuhxs  correspond- 
Lug  to this logic  subsumes  pi~'r  Shortly after  Martin~ 

LSf's proposal,  Girard [15] showed  that  the system wag 
batuitinnNtlcatly  incons~tent.  A  closed  term  of  Wpe 

(Hx:r.x)  can  actually be  extracted  from  Girard's  proof. 

Ntuitionistic inconsistency by no means implies that 
~he  associated A~calculus is  trivial; on  the  contrapt,  the 
theory is so rich that it ~  undecidable.  From a programo 

mi n t  perspective,  the  ability  to  define  a  term  of type 

(Hx:rox) in a pi-cMculus is not intrlnskally objectionable 
and  does not  appear  to  have  the  negative consequences 
noted  above. 

However,  one  ~echnlcal consequence  of intuitionistie 
inconsistency turns out go be  fairly immediate:  the  cal- 
culus  ie Inot  strongly  normalisingo  Indeed,  it  is e ~ y   to 
show that any pure  closed terra  of type  {HX:foX) has no 
normal form  under  the  usual reduction  rMes. 

One  might  hope  to restore  normMi~ation  by  intro~ 
ducing  some  new  notion  of  reduction,  tlowever,  the 
construction of the  germ  of type (11~:fo~) .from Girard's 
proof indicates how to construct  a  fixed~point combina~ 

tot which can  then be  used to show that arbitra<g  par- 
tim recm~ive functions are numeralwise representable  in 

pi~. This implies that term  equMity in  pirr is  undecido 
able,  and therefore  f~uCher implies that  no complete set 
of effective reducglon rules  exists which are  both  con flUe 
ent and  normalising  [2].  The  presence  of a  fixedopoint 
operator  a~o  emily implie~ that  the calcukts  is  not 

conservative  extenelon of algebraic  equational theories, 

2.  A  pi-calculu~  w i t h   dependen %  ~ype~ 

Ix We  now  formallse  pi  ,  the  A-calculus  with  dependent 

~ypes  sket6hed  in  Section  1o 

The  yynYax  of  ~ermso Let  V  =  {xx, ~ , o .   o}  be  a  count- 
ably  infinite  set  of wrlableso  In  what  follows  a,  Q  s, 

f,  and  g  are  raetavarlables  for terms,  u,  v,  and  w  are 

ii 
L 

289 
metavariables  for  variables,  and  s  and  t  ~'e  met ava :b 
abtes  for  terms  appearing  ;~  types,  The  set  of raw  un- 
typed  terms  i g  is  the  smallest  set  defined  by  the  fop 

lowing  inductive  clauses: 

V  C  A R  (c re w   variable  is  a  tern:), 

r  6  A a  {~r'  is  a  term), 
{a b)  6  An:  (application)~ 
(),v:s.e) 6  A a  (Mabstraction), 
(n~:s,~)  ::~ ,t:  (n=abs~ract:on). 
Let  fv~a]  denote  the  sea  of free  vagiables  of  a,  defined 
h~ductively in the usual way  on the structure  of terms. 
h: raw  abstractions  it  is  possible  to  have  occu:Tences 
of v  free  in s;  for definiteness  we  adopt  the  convention 

ghag  such  oee':h~renees  are  in  ~he  scope  of % c   or  'Hv', 

but  in  fact our typing rules  wilt forbid  such occurrenceso 
The  fnnetion-spaee  expression  s --.~ ~ stands  for  (~v:s.~) 
"where  v does not  occur free in s  or to  We follow the  usual 

convention that  when  -+ appears  as a  blnagy connective, 
it  a~oeiates  to  the  right, so that  s-+ s ~ .-~ s"  abbreviates 

s ,-+ (s* -* s'}.  Application  ~ssociates  to  the  left so  el:at 

of a b  a b b r e v i a e s   ( f  a) bo 

We  adopt  the  following  wari%bte eonvenciom  if a  set 
of terms  occurs  gogetheG  %r  example,  in a  definition, 
then  a[l  bound  variables  in  these  terms  are  distinct 
from  each  other  and  from  the  free  vagiables  {2].  We 
also  identify  terms  modulo  the  uniform  renarming  of 

bound  variables  {a-conversion};  in  combination  with 
the  variable  convention this  allows  ns  to work  with  rep= 
reeentativss  of the  c~=equiveAenee clazf~eas of terms  rath er 

than  te/rm.e  themselveso*  Henceforth  ~ '   denotes  syn- 
tactic  temn equality  modulo  c~-eonversiom  The  substi- 

tution  operator  [a/v]  denoting  the  replacement  of  all 
free occurrences  of v  with  a  is defined  recur~iveIy in  'the 

usnaI  way. 

Typed  A~eulsuJi  as  proof systems.  We formulate our var- 
ious  Wped  A-calculi, i  ~  for a  one  of r,  A,  H,  or  r%  as 

proof systems  for statements  about  rearms [3].  A  state- 
ment  is  a  pa#r consisting of a  context  r ,   and  a  sentence, 

~o,  and  is  v~qoitten  P  % po  There  are  two  kinds  of sen- 

genes,  namely  equa~ons of the  fom~ a  =  b and  ~pings 
of the  %:crn ad. 

8h~ce  sentences  may  have  fre~  variabte~,  contexts  r 
are  needed  to  ~psc~fy  the  ~.ypes  of  the  t}ee  variables. 
Raw  contexts  age  d o t i n g   go  be  paaciM  functions  from 

g  to  raw  gems,  The  emp ty  context  is  written  t o ,   and 

*In ~he fu}: pa per  we  mm  p:!ifY ~hs han dling  of boun d  va~b~e:~  by 

~in g  ~  v~rian~ of d~  B:u~jn~  sameTess ~erme  [9L 

Plv:~]  denotes  the  context.  P  modified  or  extended  so 
~hat  P(v)  ~  e.  (Contexts  do  not  record  their  history; 

equals 
In  the  most  generaJ  situation,  welLfbrmed eontexts, 
equations,  and  typlngs  must  be  mutually  recursively 
definedo  This  :is because  well*formed equations  are  con- 

strMned  to be  between  typable ~erms  {of the same  ~ype), 
so  the  inference  rules  for  equations  typically  have  an- 

tecedents  which  are  ~ypingso  The  inference  males  for 
typings  must  {n turn  allow fbr equations  between  types, 
so  these  rules  ma y  have  equational  antecedentso  Fb 

nally,  the  range  of a  context  is  intended  to contain  only 

r  or  terms  e which  are  type  expressions,  #e.,  terms  such 
that  the  typing  tar  is  provable  {in  an  appropriate  con- 

text),  so  the  definition  of well-formed  con~e*t  depends 
on provabilRy of typings, 

We  wrRe  P  ~<~  99 when  the  statement  P  R  9o is  A% 
provable.  If  (A)  is  a  set  of statements,  then  An{A)  de-- 
notes  the  extended  system  obtained  by  adding  {A)  2o 

~he  axioms  of  k ~,  tn  pagticular,  A ~  will  be  defined  to 
be  kn (F o   ~  r:r). 

The  k n-cateuluso  Th e  axioms  and  inference  rules  of the 
AUocalcuhs  are presented  in  a form similar  to Gentsen% 
calculus  of  sequents  [14,  27,  21]o  Navh  rule  consists  of 

a  set  of  statements  (whirl:  have  ak'eady  been  defined 

using  the  usuad  notation,  F',  for seqnents)  cMled the  an= 
~eeeden~s and a statement  called the  eonaequenC  graph- 
ically separated  by  a  hoN~ontM  line.  In the  case  of an 

axiom or axiom scheme,  there  are no antecedents  and no 
hori~ongM line is drawn.  The  consequent d  am inference 
male is  provable  if eaa:h  antecedent  is  itself p~vableo 

All An-proofs begin with  an instance  of the  type vari- 
able  introduction  (r-vi)  axiom  scheme  since  R  is  the 
only m~iom in the system.  The  pair of statements  r  k- e4 

and  P  R ~:r  and  i~  abbreviated  r  k  e:t:r. 

Rulez  for  typing,st 
(r~vi}  rovardable introduction 

r0[~:r]  ~  v:r 
[vi)  variable  introduction 

r  e  ~:r,  v ~  dora(r) r:v:q 

vat 
{Hi)  Hdngroduetion 

r  k  (I:s:s@r 
(li}  lomtroduegion 

*  S : > air,  r{v: d  >  .:tar 

2 ~  

(~e)  H-eiLvai~aation 

r  v  o:8.  r  ,  ::(r~v:8.,):r 

{re)  type  conversion 

r  v  a:,,  r v s = t  

r  ~  a:t 

(r)  reflexivity 
(s)  symmetry 
(t)  transitivity 

R~dss /or ,yuc*iou,. 

r ~ a = a  

P V a = e  
(el)  ]e~t c~agruence 

r  ~  a:,.  r  P/:(Hv:z.t):r,  r  ~-  ]  =  ]~ 

r  e  (: ~)  =  (:' ~) 

(or)  right  congruence 

r  v  a:,.  r  P/:(H,:,o*):r,  r  v  o =  a' 

r  e  (: ~)  =  (f ~') 

(~fl)  p-conversion  of A~$erms 

r  e  o:8,  r  ~  (~:8.e):(H~,.,)," 

r  ~  ((~,:,.,)~)  =- 8lo/,l 
( ~ )   weak  extensiona~ity for  Aoterms 

r ~ s:~, rI~-I ~ e:~:~, r[~:sl ~ o =  o' 

r  ~- (~v:8.s)  =  (,~v:s.e') 

(rt~)  weak  exten~ionality for  H-terms 

(A~)  ~-conver~ion  of A-terms 

r  ~- s:r,  r  ~-/:(H~:s.,):r,  v  6  dora(r) 

r  ~  (~,:s.(/v)) =: 

(A-re)  binding  type  conversion in  A-terms 

r  ~- 8:r,  rtv :,  ] P e:~:r,  r  P  s  =  d 

r  ~  ( ~ , , . e )   =  ( ~ , , , . s )  

(H-re)  binding  type conversion in H-terms 

r  ~  (H~:,.,)  =  (H,,:c.,) 

291 

(cx)  eonte*t  extension 

(roex)  rocontext  extension 

r  ~  ~  ~ ~  domIr) 

The  rule, may  seem  cumberuome  at  first,  but  moet  of 
them  axe fomzmlations, using dependent  types~ of familo 
iar rules  of the  Arocalculuso 

We  do  not  have  time  here  to explain  in  detail  the 
severaJ  design choices  embodied  m  the  rales~  However, 

the  context  extension  rules,  (cx)  and  (r-cx),  axe worth 
noting.  These  rules  asse~  th at  what  ~  provable  in  a 
context  may a~o be  concluded when that  context  is exo 
tended  by  assigning  a  type  to  a  fresh  variable,  Such 
rules  axe generally  not  neceuaary  in  ~ystems  which  pro~ 
vide  a  con*ex~  projection rule 

r  v  v:~ 
However,  including  context  projection  seems  to  force 
complications in other males in  order  to  preserve  the  ins 
tended  behavior  of the  system.  Thus, in systems  with 

context  projection  Isogo, various  fomulation s  of  AU- 
TOMATH  [3~  31]),  the  notion of context  well~formedne~ 

i~ explicitly introduced  into the  proof system  a~ a  third 
kind of sentence.  Inference rules which extend contexts 
must  assert  that  ~he  extended  context  is  well-forrraed, 

and  rules  which  project  contexts  must  check  that  their 

antecedent  contexts  are  well-formed. 

i  key aspect  of well-formed contexts  is that  circular 
type  assignments  in  which  the  type  of  a  variable  de~ 
pends  on  the  value  of the  vaz4able  do  nor  occur,  For 
example,  a  circular  assignment  such  a8 

can  lead  to undesirable  Aoabstractions  such as 

~x: [if  (x =  O ) ~ h e n   in t   else  boo]).x 
which  are  not  typable  in  the  sy~emo  It  ~  helpful to 
realL~e in re ad ing th e  axioms and rules  of )~  that  they 

are  formulated  so  t h a t   ff  r  ~  v:8,  r  ~  (~v..a):~,  or 
r  ~  (n,:8o,):~.  then  t w i l l  not be circular and ~  c  fv[8~. 

Equiva~,~ce  of X*  ~ d   pure  ~n  The  pure  )~1~ system 
designed to  provide  the  basic  facilities for a  rich depen- 

dent  type system through  its  introduction  and elimina~ 
~ion rules for manipulating these  typeso  However, these 

~iligiee have no : ~   opportuigy  go come into play in 

the pure system because the only axioms are those for 
~@pe variable introduction.  So  until  we  add  more  as: 

iotas  ~  in  the  next  eecgion~  the  system  is very  limiged~ 

More  prec:isely~  we  can  prove  by  (i   surprisingly  in= 
g:icage but ultbnagely routine} huducgion on the length 

of A'n=p:roofs  that if  l? ~ (Hv:s2):%  then in fact v  .does 
.nee  occ~r  free ha s  or  t;  consequently  this  typing  state= 
ment  may  be  abbrevlaged  as  17 }-  {s  --+ t):r.  Ig  fo~ows 

gnat  the  only variables  v  which  can  appear  free  in a 
type  exi~ession  s,  .Le.  an s  such ghag P  ~  S:%  are  free 
type  readables,  vka,.~ I? ~  v:r~  Such  free  ~ype  variables 

behave  essentially  a~  the ground  types  of the  finitely 
typed  A=.c~/cutus,  A r. 

From  this  ob~errvagion  we can  establish  a  translation 
T  from  terms  and  contexts  of  A n  go  terme  and  type 
expree~sions  of  A'~  ~ u m i n g   that  A r  ~lows  an infinite 
number  d  ground  types. 

L e m m a   Io  r  ~n  a:~::r iff ~"  r M r : r M r ,   ~ d  

Hence  A n  m a y   be  regarded  as  a  notational variant  of 

At,,  Prom this it follows ghag A N has a  confluent system 
of reduction  rule%  is  strongly  normii~lng ,  and  eonse= 
quengly decidableo 

T h e o r e m   l .   It is decidable  whether  a  raw  sgage= 
merit  is  ,l:oprovable. 

g~ N o n o n o r m a l i a a b i l i t y   a n d   u n d e e i d a b i l i W  

By  assuming th at  t y p e '   is  a  types  we obtain from  A n  a 
~ystem  eeeengiai1y eqwivaleng go  Mactin~Lgf% 1971  the= 
o f t   of ~ypeso 

The  proof system  for  the  k~%ealculus  is just  the  A n 
proof system,  angmep~ed  with  g;he axiom 

(rr)  )2o >'~  r:r. 
(We  t h a   in  pr+enco  of  ( , d ,   (r-v0 
iota and  the  (?-<x)  rule  ace  become  redundeaugo) 

Anad~is  .of the  properties  of Art  hinges on  replaa:ing 
the equaglonal pales of 7C* by directed  rewrite  pales  {reo 
ducgions).  Namely, leg  ~  > b  be  a  new" kNd  d  sentence 
called  a  red~c~o~.  We  modKy  the  A +r  proof oysters 

go prove reduction sg  .  Rules for reductions are 
obtained  from g/he pales of I g  by replacing  M1 equations 

a  =  b by reductions  a  ~  5 and  deleting  the  reflexive and 
~cym.me~rie rules  (r),  (s),  The  key  gechnicM  fae~  aboug 

reduction  is th ~  ig :~ conguent: two terms  axe provably 

equM in some  context  iff they  have  a  common reducg 
that contexts 

As  indicated  in  the  introduction,  we  can  establish  a 
translation  ~  from  germs  and  contexts  of  A a  go  those 
d  I r"  by  replacing  ~Av'  and  ~Pv'  by  'Av:r'  and  'tIv:r', 
respectivelyo  Under  this translation ig is easy go see that 

A r  reductions  can  simulate  1 a  reductions+  Given  ghag 

Ar%reducgiou  is  confluent,  ig  is  not  }lard  go  verify  that 
the simulation  is  faigMul: 

It  follows that  the  d a t a   types  and  operations  definable 
in  the  polymorphic  k:cMcutus  ace  available  in  Afro  In 
pacticulac, using 

as  the  type  of  the  polymorphic  Church  numeral%  we 
conclude  tha*  the  prlmkive  recursive  (and  many  more) 
functions on  the  integers  are  nnmerMwise representable 

by  ~erms  of  M'*" {12]. 

So  for any primitive recur~ive function  f  with one 
integer e~rgumen%  choose a term  af  such that Fo F rr 

af:(N~+JY) and af numeralwise represents f, It is well= 
known  to be  undeeidable whether  f(n)  =  0 for some 
integer no Let g to be the p&~ial recunsive function of one  integer    gumeng  such  ghag  =  0  =  0 

for some n  7~ m  and ~  undefined  otherwise;  hence  it  is 

undecidable  whether  g(O) =  O~ 

With  a  fixed=polnt operator  Y N : ( ( N - +   N)  ~-+ N),  it 
is easy  *o construct  from  af  a  germ  ag  in  A r~  which 
nnmeratwise repr~en~s  9.  (The  confluence  of reduction 

and  the  .fact  that  numeraI~  ace  normal  forms  make  ig 
easy go chow  gha~ if g(O) =  0 then  F0 ~r~  ( %0}   =  0 

where O: N is the nnmeral for O, Showing the conver~e 
requh~es  more  detailed  information  about  the  behavior 

of YN  under  reduction.}  In  fa+A, when  g{0)  is  unde~ 
fined,  the gea~n (% O) does  not  have  a  normal (or even 

he~=normal)  form.  These to prove  ~he  undecidabiligy 
of X ~c  i~  is  su~eieng  go  construct  a  fixed~poing  combi~ 
nagor YN, 

Analysis of Giracd%  proof enables  us go construct 
a  combinagor  Y  satizfying ~he poTymorphic  f i x e d ~ p o ~  
rule:  r  >  f:(e  s) 

r+vsf=ftY  /)' 
Moreover~  this  is essentially ~he only pale  needed  go de~ 
rive  ell the  A** =provab:e ~g~emengs  about  Y~  Now Yar 

292 

simply  (Y N).  Time  ~raitat~ons prevent  u~ from ~n~ 
chding  the  con~tructlen of Y  and  a  prec~e  ana]ys~ of 

its  behavior under reduction. 

This  completes the  outline of the  proof of 

Theore~n  ~o  The equational theory of A ~* is uno 
decidable.  In fac% it is undecidable whether 

re V r~  a  =  0 
where 0 :~ %x:~o%y:Xoy  and  a  is  a raw term. 

C o r o l l a r y   t  There  m no  decidable,  confluent, 

and normalizing set of reduction rules for the equa~ 
tlona] theory of ~r~ 

&o Co nu erv at i ~ e  e ~ e n ~ i o n  

We fihstra~e conservative extension metatheorems with 

s~nple  example suggested by  Gordon Plotkln  [26]. 

Consider an  algebraic structure  ~ containing distinct 
elements  0  and  1,  a  quaternary  operator  cond  (condi- 
tional  equa],ity)~  and  a  unary  operator  s~c  (successor) 
~at~fying the  pair  of equational axioms  (A): 

~o ~ d x x yz =   y 
codex {~uc z) yz  =  z. 

It ~  eazy to find such ~tructure~, and since I =  0 ls not 
true in them, it cannot be derived from (A) by sound 

inference rules. Any  algebr~c  structure  can  be  chosen  as  the  base 

type  of  a  %*  mode]  using  the  cla~slc~  interpretation 
of function  types  s -* ~ a~  all functions  from  s to *. 

Since the rules of %~  are sound in any such model, it 
fo~ow~ that  all equations between  algebraic terms  over 

the  signature  of ~ (Le.,  ordinary fire.order  terms  with 
free  variables  of type  ~)  provable  in  A ~ (A)  are  valid in 

all  models  of  (A)o  Substitutiug  equals for  equals is a 
derived rule of A ~, and the rule of substituting equals 

for equals  is welloknown to  be  sufficient for proving  all 

the  logical  consequences  of  ~ny  set  of equation~  ax- 

ioms,  Hence,  the  equations  between  algebraic  terms 

over  the  signature of ~ provable in  A ~ (A)  coincide with 
those provable by substitutL~g e q u a l   for equ~ls~whieh 

are~ in turns exactly the equations v~id in ~]I models of 

(A)o  In ~um,  the  provable equations  between  ~gebr~c o  *  e 
~errns  do  not  change  when  we  ~w~tch to  A  ru]e~,  .g. o  ~  A  Th~   ~  what  ~  meant 

l = O i s n o t p r o w b l e ~ A   {  ),  i  i  ] 

Men of the  [fix~ordex)  equational theory of (A}.  More 

generally~ 

T h e o r e m   ~o  A ~ (~)  yields  a  conservative  exteno 
slon  of  the  equatlonM  theory  of  (~)  for  any  set 

(~)  of algebraic equationso 

Now let  (Ar~ /  be  the  set  of statements 

re  V ~:r, 

r0  V  cored u  u  v  w  =  % 

re ~ ~o~d  u  (sue  u)  v  w  =  w. 

The  correspondence  between  I*  and  I n  in  Lemma  1 

easily seen  to  continue to hold  in the  presence  of aL 
gebraic  a~dom~, ~o  ~n(An),  ~ike ~(A),  a l e   yisld~  a 
conservative extension of the  equational theory of (A). 

(We remark that we expect to prove in the full paper 
that  a  similar conservative extension theorem holds for 

AA(EA)o  Since  it  is  not  known whether  an  arbitrary 

algebraic structure can be fully and faithfully embedded 
~n some model of %A the proof of conservative extension 

cannot  proceed  along  the  mode]otheoretic lines  of the 

argument  used  above  fox' %c.  ~nsteac~ we  use  a  proofo 
theoretic  argument based  on the  confluence and strong 

normalisabfiity of A~.) 

On  the  other  hand,  in  A*~ IA~I,  the  polymorph~c 
comb~nator Y  supples  ~ closed  term  a  of type  ~ such 

that  a  =  ( ~ c  a)  ~  provable,  namely a  ~  Y  ~ ~uco But 

now, from (A)  we have 

co~dgg~ c3tY ~  D 

and 

and  since  a  =  {sac a),  we  conclude  ~  =  wo  Hence  aH 
equations between terms of the same type  are provable 

in  A c~ (An).  In  particular,  1 =  0  ls not  true  i n ,   but  is 

provable in  A~ (A n)  even  though  * satisfies  the  set  of 

adorn8  (An)~ 

T h e o r e m   5.  ~** {A n)  does not yield a  conserv~ 
rive extension o f  the  equation~ theory of the  set 

IA n }  of  algebraic equational statements above. 

This faJ~ure o f  conservative extension in Ac~ is actually 

a fam~iar one.  In  a  theory of computation on the inter 
gers,  say, one  expects  to have  dlvergent  eomputation~ 
of integer type.  In  the  ~ u a l   appro~h  of denotational 
semantics, ~UCh divergent computations are sam to come 
pure  a speci~ divergent integer valu% &~ Now #  scrv~ 

2fl8 

a~  a  fixed  point  of  ~he  ~:cce~or  functions  Although 

the  theory of integere  with  _L may not  seers  any harder 
than  the  standard  the.o<y,  the technical complications 

in proofs  about  integer  computations  caused  by  2_  has 
prompted  recent  eJ~%rts to find  better  theories  [25,  26]. 

We  expect  that the introduction  of fixed points is 
not  the  only source  of fa lhre   of conservative extension. 
Hence  "we raise  the following open problem: 

(:) Let (E) be a set of alga'orals (d  0ical flAt-.order) 

typing and  equational statements,  and  let  (fix)  be 

r0  :" =  4.(Y v). 
I~ An((iix), E)  conservatively extended by 
A-((fix), 

We  alas  mention  that we  do no~ know whether  the  r:r 

~zdom, in  ~he absence  of any o~he~r axioms, violutes cons 
~exvative extensions namely, 

a eonee  .ativo exton0:on of 
In  generals  conservative  extension  theorems  offer  the 
oppo~unity to  c~z~%" claesicM mathematics  into a  come 

v~tational  se~h:g  without change.  The  need  ~o reason 

about  divergent  v a l u ~   and more  generally  about  the 
ordering  and topological  prope~iee  typiczdly euperimo 

posed  on discrete  structea:es  iu compntationM  settings 
would be  avoided.  Ig remMns to be seen how much como 

patation theory we  can  fully develop  while  weserving 
c~a~ical reasoning. 

t~eferenee~ 

[1 t  Reference  mannM  k~r  ~he  Ads  programming  language. G.PoO.  (X)8~000,~0085~8, 

1980o 

[2] Ho P0 Barendre~o  The Lambda  C~Je~:  I~ S~fce  and Seman~is~o  Vohme 

103 of ~ugie~  in  Logic  ~nd  Phe F~u~ deai~m 4Ma~hem~ic% 

North-l{olland, Amsterdam, second ediglon,  !984o 

[3]  He JR Barendregt  and A,  P~suso Semanlics  for clae~ical 
A U T O M A T H   and related ~ys~eme. rE*errant{on and Cordrot, 59:197--147, 1983. 

[4]  He  Boehm~  Ao  Demer~  and J.  Donahueo  An  In/ermM De,criptien  4  R~sefL 

TechMeM Beport  TP~(~4~, Corne11 UMve~i~y, Compu*er Science Depar~men%  t980. 

[~] H.  B.  Brace  and  A. ire  Meyer.  The  eeman%ics of ~econd order polymorpMc 

l~rabda calculus~ In Go 1Kahn, D~ Be ~ -  
Qu~n~  a~d  G. Plo~km, edito~, Sem~nf:ic~ 4  Data  Type% 
page  131-144,  $pinger;gelqag,  Berlin,  June  1984. 

[6] ]gL Bu~tall and Be  We La~mpeono A  kernet lang~aage %r ab~rac~  da~a types amd mod~l~o  In  Go  Nab.u,  Do B.  M~ac- 

Qu~n,  and  Go Pt~kha,  edi~o~,  $em~is~  e / D ~ a   Types, 
p~g~ 1-50~ gg~inger~N%rla& BerI~n~ June  t98~. 

[7]  T.  Coquand  and  G.  Hnet.  Cons~ruc~fom: A  Higher  Of der Pros/System for M~ehanfzing 

Ai~a~hema~ic~. }{apport de Recherche  401~ INRIA~  DomMne  de  Vblucez%  78150 Roc- 

que:acour~, Prance,  M~y  1985. Presented  at  EUROCAL 85~ Linz~ Aue%rb. 

[8]  H.  B.  Curry  and Ro Fey~.  Csmbina~ory Logico ~V~lume 1, North-Holland,  Amsterdam,  1958. 

[9] N. G0 de Bruijn. Lambd~cMcuhs notation with nameless dummies,  tndago Math.,  34(5);381-392,  1972. 
[10] N. Go de Bruijno  A  survey of the  project  AUTOMATH. 
In J.  P.  Seldin  and Be Hindley, edbore,  To  If., B~ Curry: E~- ~ay8 in Combinafory Logics Larnbda C~Jculu~, and FormMi~m, 

pages  579-606,  Academic Press,  New  York,  1980. 

[11]  J.  Donahue  and  A.  Demerso  Data  ~ype~  are  values. ACA4 Tran.sacfion~ on Programming Languages and Sy~emz~ 

7(3);42~-445,  July  1985o 

[12] S.  l!~rtune,  Do Leivan%  and Ms  O'DonnelL  The expree~ siveness 

of simple and second-order  type ~trne~uree.  Journd of the ACNf, 30(t):151-185, 

January 1983o 

[13]  G.  Gentzen. Investigations into logical  deduction, h Ms E. Ssab% editor,  The  Collected Papers o/ Gerhard Genfzer~ 

North-Holland,  Amsterdam,  1969. 

[14] Go Gen~eno lnveetigation~ into logical deductiom ~Ma~h- ema~i~ehe Zeit~chrifl, 39;176-210  and 405-431,  1934. See [13] 

for an  English.  tranAation. 

[15] J.  Girard.  InferprAation  fenefieneHe  e~ glimina~ion des coupure~ dares UarithmgHque d'erdre ~upgrleure. 

Ph.D. J;heei% Unlver~it6  Parle  VII,  1972. 

[16]  We  A. Howardo  The  formulae-asqzype~  notion  of  con- 
strnc$ion. 1969o Recently peM:shed ae [17 b 

[17]  W.  A.  Howard.  The %rmnlae-a~1/2opes  notion of con- s~aractlon. In  J.  P.  Seldin  and  R.  Hlndley, editor%  To H.  B. 

Curry: .E~ay~ in  Csmbina~ory Logic, Lembda CMcutu~, and Fsrmali~m~ pages 479-490,  Academic Pre~, New 

York, 1980. 

[18] Be Li~kov, R. Atkinson, T. Bloom~ E. Moses J.  C, Schaf- fe~, 

Re Scheifler,  and  A. Snyder.  CLU   Jge/erencc Manual. Volume 114 

of Lecture Notes  in Compact  Science, Springer- Veflag~ Berlin,  1981o 

[19] P. M.~in-LSfo An  intuitionie~ic theory of ~fpee:  pred- icative  purl  In  Fo  t,~ose and  J.,  Sheperdson,  ed ito ~  Logic 

Colloquium Firs pages  78-118~  No~hoHolland, #ansterdam, 
July 1973. 

[20] P. ~/aa~in-L@f A  Theory of Types. t.~.epo~ 71-8, Depart- merit 

of ~ h e m a t i c s ,   Univerei V  of StoekhNm,  February 1971~ 

[21] No  J.  McCrackem  An  N~e~fi#a~ion 4  a  Programming Language  ~ei~h a Peomerphic  Type S~ruc~ure~ Ph.D.  thesi% 
Syracuee Univerelty, Syracuse, New York~ June 1979. 
[2~] A,  ire  Meyer  and  Jo  C~ Mitchell  Second-order  logical relations  {exSendM  ab~traec)o  In  R.  Parikh,  editor,  Legic~ 

a/Programs,  pages 225-296,  Springe>Verlag,  ]~erl~n~ June 
1985: 

[~3] Jo  C./N~chelL Lambda  CMe~4~  Mode& ~/ ~psd  P~o. ~rammi~g ;ga~gua~es. 

Ph.D, ~he~i~,..Maa, achuse~ Iae~l~ugs 
of Technlogy; Cambridge, ~ c h u s e ~ t %   Anffae~ 1984. 

294 

I24]  Jo Co IVfitche]~ and  G.  D.  Plotkin.  Abstract  types  have eydstentia.l  type.  :Lu  Princip&8  of  Programming  Languages, 
pages  3%51,  ACM,  New  York, January  1985. 

125] Lo  Paulsono  Deriving structure/ induction in LCFo In 
Go K~:b.n, D. Be MacQueen, and G. Plotkln, editors, Seman, ~ics  of DaYa  ~pes,  pages  197-214,  Sprlnger-Vertag,  Berlin, 

June  1984o [26] Co 

Do Plotklno  Persona] communication, March 1985. 

t27] D. Prawitzo Na~ur~ Deduc~ien: A  Proofo Thesretica~ SYudy. Volume 3  of Stockholm  Studies in Philosophy, Almqvist  and 

Wiksell~ Stockholm,  1965. 

[28] Jo Co Ibeynolds. Polymorphism is not set-theoretic. In 
G.  Kahn~  Do  B. M~cQueen,  and  G. D. Plotkln, editors, Semantics  of  Data  Types, pages  145-156,  Springer-Verlag, 

Berlin,  June  1984. 

I29] J. C.  Reynolds. Towards a  theory of type structure. In Be Robinet, editor, Programming Symposlura~ pages 408-425, 

$prlnger-Verlag,  Berlin,  1974. 

[30] J. C. Reynoldso Types, abstraction, and parametric poly- n~orphism. In R. E. A. Mason, editor, Information  Processin~ 

83,  pages  513-523,  North-Holland,  1983. 

[31] A. Re~us.  Abytrac$ AUTOMATH. Mathema~ical Centre Tract  160, Muthematisch  Centrum,  Amsterdam,  1983. 

295 