

Information  Processing  Letters  29  (1988)  57-66 
North-Holland 

30  September  1988 

A  LINEAR  ALGORITHM  TO  SOLVE  FIXED-POINT  EQUATIONS 

ON  TRANSITION  SYSTEMS 

Andre  ARNOLD  and  Paul  CRUBILLE 

DPpartement  d'lnformatique  *,  Uniuersif~  de  Bordeaux  I,  351,  Cows  de  la  Llbhtion,  33405  Talence,  France 

Communicated  by  L.  Kott 

Received  12  February  1988 
Revised  17  May  1988 

This  paper  gives  an  algorithm  to  compute  the  least  fixed-point  of  a  system  of  equations  over  a  transition  system.  This 
algorithm  has  a  time  complexity  linear  in  the  size  of  the  transition  system,  thus  improving  the  known  algorithms  which  are 
quadratic. 

Cet  article  donne  un  algorithme  pour  calculer  le  plus  petit  point  fixe  d'un  syst&me  d'kquations  SW un  systkme  de  transitions. 
Cet  algorithme  a  une  complexit&  en  temps  1inCaire  par  rapport  g  la  taille  du  systeme  de  transitions  alors  que  les  algorithmes 
connus  sont  quadratiques. 

Keywords:  Transition  system,  fixed-point  equation,  temporal  logics,  model-checker 
1. Introduction 

It  is  widely  acknowledged  that  transition  systems  (i.e.,  directed  graphs  with  labels  attached  to  edges  and 
vertices)  are  a  convenient  model  for  (concurrent)  processes  [4].  It  is  also  widely  acknowledged  that  some 
properties  of  processes  can  be  expressed  by  formulas  of  some  branching-time  temporal  logics.  Then,  the 
verification  that  a  process  satisfies  some  property  amounts  to  verifying  that  the  transition  system 
associated  with  the  process  is  a  model  (in  the  logical  meaning)  of  the  formula  expressing  this  property. 

In  [l],  Clarke  et  al.  have  shown  that,  for  the  branching-time  temporal  logic  CTL,  the  verification  that  a 
given  transition  system  is  a  model  of  a  given  formula  can  be  performed  in  a  time  linear  in  the  size  of  the 

transition  system. 

Extending  the  observation  made  by  Sifakis  [6],  that  properties  of  processes  can  be  expressed  by  a 
branching-time  temporal  logic  where  temporal  operators  are  least  fixed-points  of  some  recursive  equations, 

Dicky  [2]  has  proposed  a  system  of  verification  of  processes  where  a  property  is  specified  by  a  set  of 
mutually  recursive  equations  and  where  the  verification  of  such  a  property  consists  in  computing  the  least 

fixed-point  of  the  corresponding  set  of  equations.  This  is  obviously  related  to  the  p-calculus  [5],  and  more 
precisely  to  the  formulas  of  alternation  depth  1  [3]. 

The  known  algorithms  to  compute  the  least  fixed-points  of  systems  of  equations  are  quadratic  in  the 
size  of  the  transition  system  [2,3].  However,  although  every  property  expressible  in  CTL  (or  in  most  of  the 

*  Associated  with  C.N.R.S. 

\: 
0020-0~90/88/$3.50  Q  1988,  Elsevier  Science  Publishers  B.V.  (North-Holland)  51 

Volume  29,  Number  2  INFORMATION  PROCESSING  LETTERS  30  September  1988 

classical  branching-time  temporal  logics)  can  be  defined  by  a  system  of  equations,  the  difference  between 

the  complexity  of  model  checking  for  CTL  formulas  (or  formulas  of  similar  logics)  and  the  complexity  of 
computing  least  fixed-points  of  systems  of  equations  forbid,  from  a  practical  point  of  view,  to  consider 

CTL-like  logics  as  fragments  of  p-calculus. 

Here  we  propose  another  algorithm  which  is  linear  in  the  size  of  the  transition  system.  Thus,  this 
algorithmic  difference  between  CTL-like  logics  and  alternation-depth-l-p-calculus  vanishes  and  it  becomes 
possible  to  increase  the  power  of  model-checkers  without  increasing  their  time  complexity. 

Of  course,  this  decrease  of  the  time  complexity  is  possible  only  by  an  increase  of  the  space  complexity! 
More  precisely,  the  data  structure  used  by  Dicky's  algorithm  [2]  for  storing  transition  systems  has  to  be 
extended  in  two  directions: _ 

the  data  structure  has  to  contain  not  only  the  transitions  (edges)  of  the  transition  system  but  also  the 
`reverse'  transitions; 
~  not  only  boolean  variables  but  also  counters  are  associated  with  each  state  (vertex)  of  the  transition 

system. 
Since  these  counters  contain  numbers  of  transitions,  the  size  of  the  data  structure  is  then  multiplied  by  a 
factor  proportional  to  the  logarithm  of  the  size  of  the  transition  system.  Such  an  increase  of  the  size  due  to 
the  use  of  counters  also  appears  in  the  linear-time  Tarjan's  algorithm  for  computing  strongly  connected 
components  of  a  graph  [7]. 

2.  Transition  systems 

A  (finite)  transition  system  is  a  tuple  G  =  (S,  T,  a,  p),  where  S  is  a  finite  set  of  states,  T  is  a  finite  set 
of  transitions,  a  : T  -+  S  is  the  source  mapping,  and  /3 : T  +  S  is  the  target  mapping. 

Any  labelling  of  states  and  transitions  can  be  specified  by  adding  to  G  a  family  Z,,  . , Z,  of  subsets  of 
S  and  a  family  Z,`,  . . . , Zi,  of  subsets  of  T.  Then,  G  will  be  said  to  be  a  parametrized  transition  system. 

Let  us  consider  the  following  sorted  signature  D  with  two  sorts:  u,  for  states,  and  r,  for  transitions.  The 
operators  of  D  are: _ 

the  constants  O,,  1,  of  sort  a; _ 
the  constants  O,,  1,  of  sort  r; _ 
the  binary  operators  U,  ,  n,  of  sort  uu  +  a; _ 
the  binary  operators  U,,  flT  of  sort  rr  +  7; _ 

the  unary  operators  A,  A *,  B,  B *  of  sort  r  +  a; _ 
the  unary  operators  A',  B'  of  sort  u  +  r. 
Given  a  transition  system  G,  an  operator  o  of  D  is  interpreted  by  o(,.  in  the  following  way: 

(OJ,  =  (O,),  =o.  (I,),=  s,  (I&  =  T, 
(Ua)(;:P(S)  x9(S)  +9(S)  (n,),:  P(S)  x9(s)  -B(S) 

x,,  x*++x,ux*,  x,,  X*+-+X,  nx,, 

(`J7)G:S(T>  x9(T)  -+9(T)  (n,),:  p(T)x%T)  +9(T) 

y,,  Y,  c,  Y,  u  Y, 3  Y, ,  Y,  ++ Y,  n  Y2, 
A,  :  g(T)  +9(S)  BG:  p(T)  +9(S) 

YH  (44  IlE  Y},  Y-,  {m)  IfE  Yl, 
A;:  P(t)  -+9(s)  BG*:  p(T)  +9(S) 

Y++  {sES~vr:S=cY(t)=dE  Y},  Y-,  {sES~vt:s=~(t)~tE  Y}, 

58 

Volume  29,  Number  2  INFORMATION  PROCESSING  LETTERS  30  September 1988 

A;:  P(S)  +9(T)  B;:  B(S)  +9(T) 

X-,  {tETp(t)EX},  x-,  {tE  T/p(t)  EX}. 

It  is  clear  that  all  these  interpretations  are  monotonic  for  inclusion.  It  is  also  easily  checked  that 

S-A.(Y)=A;(T-  Y),  S-B,(Y)  =  B$(T-  Y), 

T-A;(X)=A;(S-X),  T-B;(X)=B;(S-X). 

Now,  let  us  consider  two  sets  of  `parameters'  :  Tp  =  { zl,.  . . , z,,}  of  sort  u,  Z?i,  =  {z;,  _ . , zj,}  of  sort 
7,  and  two  sets  of  variables  !ZH =  {x,,  . . . , x,,}  of  sort  u  and  gn=  {y,,...,y,}  of  sort  7.  If  a  subset  (z,)G 

of  S  (respectively  (z,`)~  of  T)  is  associated  with  every  parameter  z,  (respectively  z:)  (i.e.,  G  is  a  (Zp, 
Zi,)-parametrized  transition  system),  then  with  every  well-formed  term  w  over  D  u  Zp  u  Z?`;, u  T,,  u  C?j,, 

we  can  associate  a  mapping 

defined  by  induction  on  w.  This  mapping  is  obviously  monotonic. 
3.  Systems  of  equations 

Let  us  consider  two  fixed  sets  of  parameters  ZZ' and  %"'  and  two  sets  of  variables  X,,  and  "y',. A  system 
of  equations  2  over  3,  ZY',  Tn,  gm  is  a  pair  (Z,,  2,)  of  sets 

where  w,  (respectively  w:)  is  a  term  of  sort  u  (respectively  7)  over  D  U L?% 3"  U Xn  U  gm, 

For  every  (2,  Z')-parametrized  transition  system  G,  (w,),  (respectively  (w:)~)  is  a  monotonic 
mapping  from  9(S)"  x  .P(T)m  into  9(S)  (respectively  9(T)),  hence  ZG  =  ((w,)c,.  . . , (w,),, 
(we),,...,,)  is  a  monotonic  mapping  from  ~(S)"XSF'(T)"  into  itself  and  thus  has  a  least 

fixed-point 

p&=  (X 1,...,  x,,  r, ,...'  Y,). 
A  system  of  equations  2  is  said  to  be  simple  if  each  equation  has  one  of  the  following  forms: 

(1)  x  =  k,  where  k  is  a  constant  or  a  parameter  of  sort  u, 
(2)  X'X'U,  x",  (3)  x=x'n,  x", 

(4)  x  =  A(Y)>  (5)  x  =  B(Y), (6)  y  =  k',  where  k'  is  a  constant  or  a  parameter  of  sort  7, 

(7)  .!J =  Y' U,  Y",  (8)  Y =Y'  &  Y", 
(9)  Y =  A'(x),  (IO)  Y =  B'(x), 
(II)  x  =  A*(Y),  (12)  x  =  B*(y). Every  system  Z  is  equivalent  to  a  simple  system  Z'  in  the  following  sense:  @Z,  is  a  sub-vector  of  ~2;. 

Moreover,  the  `size'  of  2'  is  the  same  as  the  `size'  of  JZ if  we  define  the  size  of  2  as  being  the  number  of 
occurrences  of  elements  of  D  U 5%  S"`,  which  is  linearly  related  to  the  length  of  2. 

59 

Volume  29,  Number  2  INFORMATION  PROCESSING LETTERS  30 September 1988 

Therefore,  the  algorithm  for  computing  least  fixed-points  of  systems  of  equations  will  apply  to  simple 
systems. 

4.  The  algorithm 

The  basic  idea  of  the  algorithm  is  the  following:  with  every  state  s  E  S  and  every  variable  x  E  X 
(respectively  every  transition  t E  T  and  every  variable  y  E  %`)  we  associate  a  boolean  variable  s.x 
(respectively  t. y),  named  an  attribute  of  s  (respectively  of  t).  These  attributes  specify  the  sets  X,,  . . , X,,, 

Y,, . . . , Y,,  associated  with  the  variables  x1,.  .  , x,,  y,,  . . . , y,,, by  X={s~S~s.x=true},  Y={t~T[t.y 

=  true}. 

All  these  attributes  are  initialized  to  false  and  the  algorithm  searches  the  transition  system,  updating 
these  attributes  according  to  the  equations  until  (X,,  . . . , X,,  Y,, . .  , y,,)  is  equal  to  ~2~.  Because  of  the 
monotonicity  of  Z',,  these  attributes  can  be  changed  only  from  false  to  true,  therefore  the  number  of 
updatings  is  bounded  by  (number  of  equations)  X (size  of  G).  The  original  Dicky's  algorithm  repeats  a 

depth-first-search  algorithm  (of  time  complexity  linear  in  the  size  of  G  until  stationarity  of  the  attributes); 
hence,  the  complexity  of  this  algorithm  is  quadratic  in  the  size  of  G.  Instead  of  repeating  a  depth-first-search 

algorithm  we  propose  a  search  directed  by  previous  updatings:  only  states  and  transitions  whose  attributes 
may  be  modified  because  of  previous  modifications  have  to  be  searched  again. 

The  general  form  of  this  algorithm  is 

initialization; 
for  every  A  in  S  do  visit(s) 

where  visit(s)  is  a  recursive  procedure. 

Let  us  remark  at  this  point  that  we  use  the  control  structure:  for  every  s  in  S  do;  we  shall  also  use  the 
control  structures  for  every  t  such  that  a(t)  =  s  do,  for  every  t  such  that  P(t)  =  s  do.  Provided  an 
adequate  data  structure,  these  control  structures  can  be  implemented  in  such  a  way  that  they  can  be 
executed  in  a  time  linear  in  the  number  of  elements  to  deal  with,  for  example  by  the  use  of  linked  lists. 

With  every  state  s  E  S,  the  following  objects  are  associated: _ 

the  attributes  S.X  for  every  x  in  X,  initialized  to  false  with  the  exceptions  mentioned  below, _ 
a  boolean  `constant'  S.Z,  for  every  parameter  z  in  .ZZ'. This  constant  is  true  if  s  E  (z)(;,  and  f&e 
otherwise, 
~  for  every  variable  x  defined  by  an  equation  x  =  A*(y),  a  counter  s.C,  initialized  to  Card{  t ) s =  a(t)}. 

The  corresponding  attribute  S.X  will  be  initialized  to  true  if  s.C,  =  0,  and  to  false  otherwise, _ 

for  every  variable  x  defined  by  an  equation  x  =  B*(y),  a counter  s.Ci  initialized  to  Card{  t 1 s =  p(t)}. 
The  corresponding  attribute  S.X  is  initialized  to  true  if  s.Ci  =  0,  and  to  false  otherwise; 
-  a  boolean  variable  s.modified  initialized  to  true; _ 

a  boolean  variable  s.stacked  initialized  to  f&e. 
With  every  transition  t E  T,  the  following  boolean  variables  are  associated: _ 

the  attributes  t.y  for  y  E  %`, initialized  to  false; _ 
a  boolean  variable  t.modified  initialized  to  true. 
We  sketch  the  procedure  of  initialization  only  for  taking  it  into  account  in  the  study  of  the  complexity 
of  the  whole  algorithm. 

60 

Volume  29,  Number  2  INFORMATION  PROCESSING  LETTERS  30  September  1988 

initialization 

for  every s  in  S  do 

begin 

initialize  the  boolean  attributes  of s; d:=  0; 

for  every t such  that  a(t)  =  s  do 

begin 

initialize  the  boolean  attributes  of  t; 
d:=  d-t  1 
end; 
initialize  the  counters  s.C,  to  d 

and  the  corresponding  attributes  s.x; d := 0; 

for  every  t such  that  P(t)  =  s  do d  :=  d  +  1; 

initialize  the  counters  SC:  to  d 

and  the  corresponding  attributes  s.x; end 

With  each  equation  e  of  Z  we  associate  a  procedure  whose  argument  is  a  state  or  a  transition  and 
which  modifies  the  attribute  defined  by  this  equation. l

If  e  is  x  =  A*(y),  we  define  the  procedure  dec,  whose  argument  is  a  state: 

lIf  e  is  x  =  B*(y),  then  dec,  is  defined  in  the  same  way,  substituting  Ci  to  C,. 

With  these  procedures  dec,  we define  the  auxiliary  procedures  count,,(t)  associated  with  every  variable 
y  such  that  there  exists  at  least  one  equation  x  =  A * ( y )  or  x  =  B*(y)_ 

Let  {e,,...,  ek}  be  the  set  of  equations  in  the  form  x  =  A*(y),  and  {e;,  . . . , e;,}  the  set  of  equations  in 
the  form  x  =  B*(y),  y  fixed.  Then: 

count,(t) 

dec,,(4t))  ; .  . ; decek(4t>); dec,;(P(t>> ; . . . ; dec,;,(P(t>) 

61 

Volume  29,  Number  2  INFORMATION  PROCESSING  LETTERS 

0  If  e  is  x  =  u  where  u  is  O,,  1,  or  a  parameter  z,  then  equation,(s)  is 

s.x  :=  0; if  s.x 

has  been  modified  then 
smodified  :=  true. 

where  P  is  false,  true,  S.Z. 

0  If  e  is  x  =  x'  U  d x"  (respectively  x'  n (r x"),  equation,(s)  is 

30  September  1988 

Now,  state(s)  is  the  sequence  of  equation,(s)  for  all  equations  e  of  these  forms. l

If  e  is  an  equation  of  type  (6),  (7)  (8)  we  define  equation,(t)  in  the  same  way  as  equation,(s)  for 
equations  of  type  (1)  (2)  (3)  and  transition(t)  as  state(s)  but  with  the  following  modification: 

if  t.y  has  been  modified  then 

begin  t.modified  :=  true; 

count,(t) end 

lIf  e  is  y  =  A'(x)  (respectively  y  =  B'(x)),  then  equation,(t)  is 

t.y:=  a(t).x;  (respectivelyP(t).x) if 

t.y  has  been  modified  then begin 

t.modified  :=  true; 
count,(t) end 

and  enter(t)  is  the  sequence  of  equation,(t)  for  all  such  equations. l

If  e  is  x  =  A(y)  (respectively  x  =  B(y)),  then  equation,(t)  is 

a(t).x  :=  a(t).x  or  t.y; if 

a(t).x  is  modified  then 
cu(t).modified  :=  true 

62 

Volume  29,  Number  2  INFORMATION  PROCESSING  LETTERS  30  September  1988 

(respectively  the  same  with  P(t)  substituted  for  CX( t)),  and  leave(t)  is  the  sequence  of  all  these 

equation,(t). 

Now  we  define: 

update-transition(t) 

update  state(s) 

visit(s) 
5.  Partial  correctness 

enter(t); while 

t.modified  do begin 

t.modified  :=  false; 
transition(t) 
end; 
leave(t) 

smodified  :=  false; 
state(s); for  every 

transition  t such  that  CY(~) =  s  do 
begin  update-transition(t); 

visit@(t)) 
end; for  every 

transition  t such  that  p(t)  =  s  do 
begin  update-transition(t); 

visit(a(t)) 
end; 

if  not  s.stacked  then begin 

sstacked  :=  true; while 

s.modified  do  update-state(s) 
s.stacked  :=  false 
end 

We  assume  that  the  algorithm  terminates.  (This  will  be  proved  in  the  next  section  by  giving  an  upper 
bound  on  its  time  complexity.) 

Since  the  execution  algorithm  of  this  algorithm  consists  of  a  sequence  of  executions  of  equation,,  we 
denote  by  s.x(n)  and  t.y(n)  the  value  of  these  attributes  upon  the  termination  of  the  nth  execution  of 
equation,.  We  denote  by  X(n)  and  Y(n)  respectively  the  sets  of  states  and  transitions  they  define. 

63 

Volume  29,  Number  2  INFORMATION  PROCESSING  LETTERS  30  September  1988 

Let  us  denote  by  p(k)  the  vector  (X,(k),  . . . , X,,(k),  Y,(k),  . . . , Y,(k)).  The  following  properties  are 
immediate: 

0  X(0)  =  Y(0)  =,$; 
0  p(n)  is  an  increasing  sequence; 
o  for  every  k  and  every  equation  x  =  w  (or  y  =  w)  of  type  (l),  (2),  . . . , (lo),  we  have 

X(k+  1)  c  w,(p(k))  and  Y(k  +  1)  c  w,(p(k))  .  (*> 
Indeed,  after  execution  of  equation,(s)  we  have  s  E  X(k  +  1)  implies  s  E  X(k)  or  s  E  w,(p(k)), 
hence,  X(k  +  1)  c  X(k)  U  wG(p(k)).  Since  X(0)  c  wG(p(0))  and  since  wG  is  monotonic,  we  get  the  result 
by  induction  on  k.  The  same  holds  for  Y. l

Forevery  k  and  every  equation  x=A*(y)  we  haves.C,(k)=Card{tIa(t)=s  and  tE  Y(k)}  and 
s.x(  k)  =  true  iff  s.C,,(k)  =  0  (similarly  for  equations  x  =  B*(y)).  This  is  true  for  k  =  0.  As  soon  as  a 
transition  t  is  put  in  Y(k  +  l),  then  a(t).C,,  a(t).x,  P(t).C,,  P(t).x  are  modified  accordingly. 

Hence,  we  get,  for  every  k, 

X(k)  =A*(Y(k))  and  X(k)  =B*(Y(k))].  (*  *> 
If  we  denote  by  p  the  least  fixed-point  of  Z,  and  by  F  =  (x,,  .  . , x,,  r,,  . . . , ?,)  the  result  of  the 
algorithm  (note  that  there  exists  some  k  such  that  p  =  p(k)),  we  get  the  following  lemma. 

5.1.  Lemma.  p  c  p. 
Proof.  Since  ~(0)  c  p  we  can  prove  by  induction  that  p(k)  c  p  for  every  k: 

0  For  equations  of  type  (l),  (2),  . . . ,(lO),  because  of  (  * ): 

X(k+I)cw,(~L(k))cwc(EL)=X,  Y(k  +  I)  c  w&(k))  c  wG(PL)  =  r,. 
lFor  equations  of  type  (11)  and  (12),  because  of  (  *  * ): 

X(k+  1)  =A*(Y(k+  1))  CA*(Y)  =X,  X(k+l)=B*(Y(k+l))cB*(Y)=X.  *I 

Therefore,  in  order  to  prove  ,E =  ~1 we  need  to  prove  that  p  is  a  fixed  point  of  2,.  We  already  know, 
because  of  (  * )  and  (  *  *  ), 

xc  we(F),  yc  WG(F) 
for  every  equation  x  =  w  of  type  (l),  (2),  . . . , (lo),  and 

X=/!*(Y),  x=  B*(Y) 
for  other  equations. 

Thus,  it  remains  to  prove  that 

we(F)  c??  and  wG(ji)  c  7 
for  every  equation  x  =  w  of  type  (l),  (2),  . . . , (10). 

The  proof  of  this  inclusion  relies  upon  the  following  observations. 

5.2.  Fact.  For  any  state  s,  update-state(s)  and  state(s)  are  executed  at  least  once;  for  any  transition  t, 

update-transition(t)  and  transition(t)  are  executed  at  least  once. 

64 

Volume  29,  Number  2  INFORMATION  PROCESSING  LETTERS  30  September  1988 

At  the  first  execution  of  visit(s),  because  of  the  initialization  to  true  of  s.modified,  and  to  false  of 
s.stacked,  update-state(s)  is  executed,  and  visit(s)  is  executed  at  least  once  for  every  state. 

Since  update-state(s)  is  executed  at  least  once  for  every  state  s,  update-transition(t)  is  executed  at 
least  once  for  every  t  and  because  of  the  initialization  to  true  of  t.modified,  transition(t)  is  executed  at 
least  once. 

5.3.  Fact.  If  an  attribute  of  some  state  s  is  modified,  then  update-state(s)  will  be  executed  again  later  on. 

Zf  an  attribute  of  some  transition  t  is  modified,  then  transition(t)  will  be  executed  again  later  on. 

When  s.x  is  modified  (and  therefore  smodified  becomes  true)  either  s  is  stacked  and,  on  resumption 
of  visit(s),  update-state(s)  will  be  executed  again,  or  s  is  not  stacked,  and  then  the  modification  has 
been  performed  by  some  update-transition(t)  with  s  =  a(t)  or  s  =  P(t),  and  visit(s)  will  be  executed 

afterwards  and  also  update-state(s). 

If  t.y  is  modified,  this  modification  can  take  place  only  in  an  execution  of  enter(t)  or transition(t)  and 
then  transition(t)  will  be  executed  afterwards  at  least  once  more  again. 

5.4.  Fact.  If  the  execution  of  update-transition(t)  modifies  an  attribute  of  a(t)  or P(t),  then  update-tran- 
sition(t)  will  be  executed  again  later  on. 

Because  of  Fact  5.3,  if  an  attribute  of  s  E  {a(t),  P(t)}  is  modified,  then  update-state(s)  will  be 
executed  again  and  also  update-transition(t). 

Let  us  consider  the  last  execution  of  update-state(s);  the  attributes  of  s  are  not  modified  by  this 
execution  and  will  not  be  modified  later  on,  so  for  any  variable  x  the  unmodified  attribute  S.X  is  true  iff 
s  E  x.  It  follows  that,  for  every  equation  e:  x  =  w  of  type  (l),  (2),  (3),  the  last  execution  of  equation,(s) 

does  not  modify  anything,  hence  it  follows  that 

SEX  iff  sEwG(p). 
Since  this  is  true  for  every  s,  we  get  X=  w,(p)  for  every  equation  x  =  w  of  type  (l),  (2),  (3). 

Let  us  consider  the  last  execution  of  transition(t).  The  attributes  of  t  are  not  modified  by  this 
execution  and  will  not  be  modified  later  on:  if  they  are  modified,  it  is  by  a  new  execution  of 

update-transition(t)  which  contains  no  execution  of  transition(t),  i.e.,  by  the  sequence  enter(t); 
leave(t);  but  only  enter(t)  can  modify  these  attributes  and  then  transition(t)  will  be  executed;  a 
contradiction. 

By  the  same  reasoning  as  above  we  get  r  =  w,(F)  for  every  equation  y  =  w  of  type  (6),  (7),  (8). 
Let  us  consider  an  equation  e : x  =  A(y).  equation,(t)  is  executed  only  in  leave(t);  let  us  consider  the 
last  execution  of  equation,(t)  which  occurs  in  the  last  execution  of  update-transition(t).  Since  it  follows 

the  last  execution  of  transition(t),  we  have  t.y =  true  iff  t E  r,  and  since  the  attributes  of  a(t)  will  not  be 
modified  we  get 

a(t)EX  iff  ,(t)EXor  yEY. 
It  is  true  for  every  t  and  we  get  A(Y)  c  x.  Similarly,  B(y)  c  x  for  every  equation  x  =  B(y). 

Finally,  let  us  consider  an  equation  y  =  ,4'(x),  and  the  last  execution  of  the  corresponding  equation,(t) 
in  the  last  execution  of  update-transition(t).  Since  the  attributes  of  a(t)  remain  unmodified,  we  get 

t.y(  k)  =  true  iff  a(t)  E  X, 
hence  CY( t)  E  x  =$ t E  Y(k)  C  I;.  Since  this  is  true  for  every  t  we  get  A'(x)  c  r.  Similarly,  for  any 

equation  y  =  B'(x)  we  get  B'(X)  C  F. 

65 

INFORMATION  PROCESSING  LETTERS  30  September  1988 Volume  29,  Number  2 
6.  Complexity 

Let 

d+(s)=Card{t\cu(t)=s)  and  &(s)=Card(t\fl(t)=s}. 
If  the  control  structures  for  every  f  such  that  can  be  executed  in  a  time  linear  in  the  number  of 
transitions,  the  time  to  execute  update-state(s)  is  k,  +  k,d+(s)  +  k,d-(s)  +  k&k,(t)  +  the  time  to 
execute  some  visit(a(t)),  visit(P(t)),  where  k,,  k,,  k,  are  constants  (linearly)  depending  on  the  size  of  2, 
k,  is  the  time  to  execute  transition(t)  which  is  a  constant  linearly  depending  on  the  size  of  2  and  k,s(t)  is 

the  number  of  executions  of  transition(r)  in  update_  transition(  t). 

But  visit(cr(t)),  visit#(t))  results  in  executing  update-state.  Thus,  let  k,  be  the  time  to  execute 
initialization,  k(s)  the  number  of  times  the  procedure  update-state(s)  is  entered,  and  k(t)  the  number 
of  times  the  procedure  transition(t)  is  entered.  Then,  the  time  to  execute  the  algorithm  is 

c=  k,  +  xk(s)(k,+  k,d+(s)  +  k,d-(s))  +  xk(t)k,. s  I 

But,  k(s)  is  bounded  by  the  number  n,  of  attributes  of  states  and  k(t)  by  the  number  n,  of  attributes 
of  transitions,  hence 

c <  k,  -t  &,(k,,  +  k,d+(s)  +  k,d-(s))  +  &,k3. S  I 

But,  C,&+(s)  =  C&-(s)  =  ) T  1, thus 

c<k,+  ISIn,k,+n,(k,+k,)ITI-tk,n,ITI. 
Now, 

k,=xk;+k;d+(s)+k;d-(s)=k;,JSI+(k;+k;)JTI. S 

Since  the  constants  k,  and  k:  depend  on  the  size  12: ( of  the  system  of  equations,  and  since  II,  and  nT 
are  bounded  by  12  1, we  get 

c<KJZ\*(JSJ+JTJ). 
Hence,  we  have  the  following  result. 

Theorem.  The  least  fixed-point  of  a  system  2  of  equations  over  a  transition  system  G  can  be  computed  in  time 
boundedbyK12')2)GJ. 

References 
[l]  E.M.  Clarke,  E.A.  Emerson  and  A.P.  Sistla,  Automatic  [4]  R.M.  Keller,  Formal  verification  of  parallel  programs, 

verification  of  finite  state  concurrent  systems  using  tem-  &mm.  ACM  19  (1976)  371-384. 
poral  logic  specifications:  A  practical  approach,  ACM  [5]  D.  Kozen,  Results  on  the  propositional  p-calculus,  Thenret. 

Trans.  Programming  Languages  &  Sysfems  8  (1986)  Comput.  Sci.  27  (1983)  333-354. 
244-263.  [6]  J.  Sifakis,  A  unified  approach  for  studying  the  properties  of 
[2]  A.  Dicky,  An  algebraic  and  algorithmic  method  of  analyz-  transition  systems,  Theoret.  Comput.  Sci.  18 (1982)  227-258. 

ing  transition  systems,  Theorer.  Comput.  Sci.  46  (1986) 

285-303. 
[3]  E.A.  Emerson  and  C.-L.  Lei,  Efficient  model  checking  in 

fragments  of  the  propositional  p-calculus,  In:  Symp.  on 
Logic  in  Computer  Science,  Cambridge,  MA  (1986)  267-278. 

[7]  R.E.  Tarjan,  Depth  first  search  and  linear 

gorithms,  SIAM  J.  Comput.  1 (1972)  146-160. 

66 

graph  al- 