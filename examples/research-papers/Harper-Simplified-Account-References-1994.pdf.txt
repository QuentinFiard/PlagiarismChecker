

A Simplified Account of Polymorphic References

Robert Harper
School of Computer Science

Carnegie Mellon University

Pittsburgh, PA 15213-3891

Abstract
A proof of the soundness of Tofte's imperative type discipline with respect to a structured operational
semantics is given. The presentation is based on a semantic formalism that combines the benefits of the
approaches considered by Wright and Felleisen, and by Tofte, leading to a particularly simple proof of
soundness of Tofte's type discipline.

Keywords: formal semantics, functional programming, programming languages, type theory, references and assignment.

1 Introduction
The extension of Damas and Milner's polymorphic type system for pure functional programs [2] to accomodate mutable cells has proved to be problematic. The na"ive extension of the pure language with operations
to allocate a cell, and to retrieve and modify its contents is unsound [11]. The problem has received considerable attention, notably by Damas [3], Tofte [10, 11], and Leroy and Weiss [7]. Tofte's solution is based on
a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has
been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9]. It was subsequently noted by
Wright and Felleisen [13] that the proof of soundness can be substantially simplified if the argument is made
by induction on the length of an execution sequence, rather than on the structure of the typing derivation.
Using this method they establish the soundness of a restriction of the language to require that let-bound
expressions be values. In this note we present an alternative proof of the soundness of Tofte's imperative type
discipline using a semantic framework that is intermediate between that of Wright and Felleisen and that of
Tofte. The formalism considered admits a very simple and intuitively appealing proof of the soundness of
Tofte's type discipline, and may be of some use in subsequent studies of this and related problems.

2 A Language with Mutable Data Structures
The syntax of our illustrative language is given by the following grammar:

expressions e ::= x j l j unit j ref e j e1 := e2 j ! e j *x:e j e1 e2 j let x be e1 in e2
values v ::= x j l j unit j *x:e

The meta-variable x ranges over a countably infinite set of variables, and the meta-variable l ranges over
a countably infinite set of locations. In the above grammar unit is a constant, ref and ! are one-argument
primitive operations, and := is a two-argument primitive operation. Capture-avoiding substitution of a value
v for a free variable x in an expression e is written [v=x]e.

The syntax of type expressions is given by the following grammar:

monotypes o/ ::= t j unit j o/ ref j o/1!o/2
polytypes oe ::= o/ j 8t:oe

The meta-variable t ranges over a countably infinite set of type variables. The symbol unit is a distinguished
base type, and types of the form o/ ref stand for the type of references to values of type o/ . The set FTV(oe)

1

*; fl ` x : o/ (fl(x) * o/ ) (var)
*; fl ` l : o/ ref (*(l) = o/ ) (loc)

*; fl ` unit : unit (triv)

*; fl ` e : o/
*; fl ` ref e : o/ ref (ref)

*; fl ` e1 : o/ ref *; fl ` e2 : o/

*; fl ` e1 := e2 : unit (assign)

*; fl ` e : o/ ref

*; fl ` ! e : o/ (retrieve)

*; fl[x:o/1] ` e : o/2
*; fl ` *x:e : o/1!o/2 (x 62 dom(fl)) (abs)

*; fl ` e1 : o/2!o/ *; fl ` e2 : o/2

*; fl ` e1 e2 : o/ (app)

*; fl ` e1 : o/1 *; fl[x: Close*;fl (o/1)] ` e2 : o/2

*; fl ` let x be e1 in e2 : o/2 (x 62 dom(fl)) (let)

Table 1: Polymorphic Type Assignment
of type variables occurring freely in a polytype oe is defined as usual, as is the operation of capture-avoiding
substitution of a monotype o/ for free occurrences of a type variable t in a polytype oe, written [o/ =t]oe.

A variable typing is a function mapping a finite set of variables to polytypes. The meta-variable fl ranges
over variable typings. The polytype assigned to a variable x in a variable typing fl is fl(x), and the variable
typing fl[x:oe] is defined so that the variable x is assigned the polytype oe, and a variable x0 6= x is assigned
the polytype fl(x0). The set of type variables occuring freely in a variable typing fl, written FTV(fl), is
defined to be Sx2dom(fl) FTV(fl(x)). A location typing is a function mapping a finite set of locations to
monotypes. The meta-variable * ranges over location typings. Notational conventions similar to those for
variable typings are used for location typings.

Polymorphic type assignment is defined by a set of rules for deriving judgements of the form *; fl ` e : o/ ,
with the intended meaning that the expression e has type o/ under the assumption that the locations in
e have the monotypes ascribed by *, and the free variables in e have the polytypes ascribed by fl. The
rules of inference are given in Table 1. These rules make use of two auxiliary notions. The polymorphic
instance relation oe * o/ is defined to hold iff oe is a polytype of the form 8t1: . . .:8tn:o/ 0 and o/ is a monotype
of the form [o/1; . . . ; o/n=t1; . . .; tn]o/ 0, where o/1, . . . , o/n are monotypes. This relation is extended to polytypes
by defining oe * oe0 iff oe * o/ whenever oe0 * o/ . The polymorphic generalization of a monotype o/ relative
to a location typing * and variable typing fl, Close*;fl(o/ ), is the polytype 8t1: . . . :8tn:o/ , where FTV(o/ ) n
(FTV(*)[FTV(fl)) = f t1; . . . ; tn g. As a notational convenience, we sometimes write * ` e : o/ for *; ; ` e : o/
and Close*(o/ ) for Close*;;(o/ ).

The following lemma summarizes some important properties of the type system:

Lemma 2.1

1. (Weakening) Suppose that *; fl ` e : o/ . If l 62 dom(*), then *[l:o/ ]; fl ` e : o/ , and if x 62 dom(fl), then

*; fl[x:oe] ` e : o/ .

2

_ ` v ) v; _ (val)
_ ` e ) v; _0
_ ` ref e ) l; _0[l:=v] (l 62 dom(_

0)) (alloc)

_ ` e ) l; _0
_ ` ! e ) _0(l); _0 (contents)

_ ` e1 ) l; _1 _1 ` e2 ) v; _2

_ ` e1 := e2 ) unit; _2[l:=v] (update)

_ ` e1 ) *x:e01; _1 _1 ` e2 ) v2; _2 _2 ` [v2=x]e01 ) v; _0

_ ` e1 e2 ) v; _0 (apply)

_ ` e1 ) v1; _1 _1 ` [v1=x]e2 ) v2; _2

_ ` let x be e1 in e2 ) v2; _2 (bind)

Table 2: Operational Semantics for References
2. (Substitution) If *; fl ` v : o/ and *; fl[x:oe] ` e0 : o/ 0, and if Close*;fl(o/ ) * oe, then *; fl ` [v=x]e0 : o/ 0
3. (Specialization) If *; fl ` e : o/ and Close*;fl (o/ ) * o/ 0, the *; fl ` e : o/ 0.
The proofs are routine inductions on the structure of typing derivations. Substitution is stated only for values,
in recognition of the fact that in a call-by-value language only values are ever substituted for variables during
evaluation.

3 Semantics and Soundness
A memory _ is a partial function mapping a finite set of locations to values. The contents of a location
l 2 dom(_) is the value _(l), and we write _[l:=v] for the memory which assigns to location l the value v
and to a location l0 6= l the value _(l0). Notice that the result may either be an update of _ (if l 2 dom(_))
or an extension of _ (if l 62 dom(_)).

The operational semantics of the language is defined by a collection of rules for deriving judgements of
the form _ ` e ) v; _0, with the intended meaning that the closed expression e, when evaluated in memory
_, results in value v and memory _0. The rules of the semantics are given in Table 2.

The typing relation is extended to memories and location typings by defining _ : * to hold iff dom(_) =
dom(*), and for every l 2 dom(_), * ` l : *(l). Notice that the typing relation is defined so that _(l)
may mention locations whose type is defined by *. (Compare Tofte's account [11].) For example, suppose
that _ is the memory sending location l0 to *x:x + 1, and location l1 to *y:(! l0) y + 1, and suppose that
* is the location typing assigning the type int!int to both l0 and l1. The verification that _ : * requires
checking that * ` *y:(! l0) y + 1 : int!int, which requires determining the type assigned to location l0 by *.
As pointed out by Tofte [11], the memory _0 which assigns _(l1) to both l0 and l1 can arise as a result of
an assignment statement. To verify that _0 : * requires checking that * ` _(l0) : *(l0), which itself relies
on *(l0)! Tofte employs a "greatest fixed point" construction to account for this possibility, but no such
machinery is needed here. This is the principal advantage of our formalism. (A similar advantage accrues
to Wright and Felleisen's approach [13] and was suggested to us by them.)

We now turn to the question of soundness of the type system.

Conjecture 3.1 If _ ` e ) v; _0, and * ` e : o/ , with _ : *, then there exists *0 such that * ` *0, _0 : *0,
and *0 ` v : o/ .

3

The intention is to capture the preservation of typing under evaluation, taking account of the fact that
evaluation may allocate storage, and hence introduce "new" locations that are not governed by the initial
location typing *. Thus the location typing *0 is to be constructed as a function of the evaluation of e, as
will become apparent in the sequel.

A proof by induction on the structure of the derivation of _ ` e ) v; _0 goes through for all cases but bind.
For example, consider the expression ref e. We have _ ` ref e ) l; _0[l:=v] by alloc, * ` ref e : o/ ref by ref,
and _ : *. It follows from the definition of alloc that _ ` e ) v; _0, and from the definition of ref
that * ` e : o/ . So by induction there is a location typing *0 ' * such that _0 : *0 and *0 ` v : o/ . To
complete the proof we need only check that the location typing *00 = *0[l:=o/ ] satisfies the conditions that
_0[l:=v] : *00 and that *00 ` l : o/ ref, both of which follow from the assumptions and Lemma 2.1(1). The
other cases follow a similar pattern, with the exception of rule bind. To see where the proof breaks down,
let us consider the obvious attempt to carry it through. Our assumption is that _ ` let x be e1 in e2 ) v; _0
by bind, * ` let x be e1 in e2 : o/2 by let, and _ : *. It follows that _ ` e1 ) v1; _1 for some value v1 and
some memory _1, and that _1 ` [v1=x]e2 ) v; _0. We also have that * ` e1 : o/1 for some monotype o/1,
and that *; x: Close*(o/1) ` e2 : o/2 for some monotype o/2. By induction there is a location typing *1 ' *
such that _1 : *1 and *1 ` v1 : o/1. To complete the proof it suffices to show that *1 ` [v1=x]e2 : o/2. This
would follow from the typing assumptions governing v1 and e2 by an application of Lemma 2.1(2), provided
that we could show that Close*1(o/1) * Close*(o/1). But this holds iff FTV(*1) ` FTV(*), which does not
necessarily obtain. For example, if e1 = ref (*x:x) and o/1 has the form (t!t) ref, where t does not occur in
*, then Close*(o/1) generalizes t, whereas Close*1(o/1) does not. (This observation is due to Tofte, who also
goes on to provide a counterexample to the theorem [11].)

The simplest approach to recovering soundness is to preclude polymorphic generalization on the type of
a let-bound expression unless that expression is a value. Under this restriction the proof goes through, for
we can readily see that if _ ` v ) v0; _0, then v0 = v and _0 = _, and that if _ : * and _ : *1, with *1 ' *,
then *1 = *. Consequently, Close*1(o/1) = Close*(o/1) in the above proof sketch, and this is sufficient to
complete the proof. Following Tofte [11], we deem an expression e non-expansive iff _ ` e ) v; _0 implies
_0 = _. By restricting the bind rule so that e1 is non-expansive, we ensure that *1 = *, which suffices for
the proof. Unfortunately in any interesting language this condition is recursively undecidable, and hence
some conservative approximation must be used. Tofte chooses the simple and memorable condition that e1
be a (syntactic) value.

The requirement that polymorphic let's bind values is rather restrictive. Following ideas of MacQueen
(unpublished) and Damas [3], Tofte introduced a modification to the type system that admits a more
flexible use of polymorphism, without sacrificing soundness. Tofte's idea is to employ a marking of type
variables so as to maintain the invariant that if a type variable can occur in the type of a location in the
store, then generalization on that type variable is suppressed. The set of type variables is divided into two
countably infinite disjoint subsets, the imperative and the applicative type variables. A monotype is called
imperative iff all type variables occurring within it are imperative. The typing rule for ref is constrained
so that the type o/ of e in rule ref is required to be imperative. Polymorphic generalization must preserve
the imperative/applicative distinction, and polymorphic instantiation is defined so that an imperative type
variable may only be instantiated to an imperative monotype. In addition a restricted form of generalization,
written AppClose*;fl(o/ ), is defined similarly to Close*;fl(o/ ), with the exception that only applicative type
variables are generalized in the result; any imperative type variables remain free.

With the machinery of applicative and imperative types in hand, Tofte replaces the bind rule with the
following two rules:

*; fl ` v1 : o/1 *; fl[x: Close*;fl(o/1)] ` e2 : o/2

*; fl ` let x be v1 in e2 : o/2 (x 62 dom(fl)) (bind-val)

*; fl ` e1 : o/1 *; fl[x: AppClose*;fl(o/1)] ` e2 : o/2

*; fl ` let x be e1 in e2 : o/2 (x 62 dom(fl)) (bind-ord)

Thus if the let-bound expression is a value, it may be used polymorphically without restriction; otherwise
only the applicative type variables may be generalized.

4

The idea behind these modifications is to maintain a conservative approximation to the set of type
variables that may occur in the type of a value stored in memory. This is achieved by ensuring that if a type
variable occurs freely in the memory, then it is imperative. The converse cannot, of course, be effectively
maintained since the location typing in the soundness theorem is computed as a function of the evaluation
trace. We say that a location typing is imperative iff the type assigned to every location is imperative.

Theorem 3.2 If _ ` e ) v; _0, and * ` e : o/ , with _ : * and * imperative, then there exists *0 such that *0
is imperative, * ` *0, _0 : *0, and *0 ` v : o/ .

The proof proceeds by induction on the structure of the derivation of _ ` e ) v; _0. Consider the evaluation
rule alloc. The restriction on rule ref ensures that if ref e : o/ ref, then o/ is imperative. Consequently, the
location typing *00 = *0[x : o/ ] is imperative since, by supposition, * is imperative, and, by induction, *0 is
imperative. The significance of maintaining the imperative invariant on location typings becomes apparent
in the case of the bind rules. The rule bind-val is handled as sketched above: since v1 is a value, it is
non-expansive, consequently *1 = *, which suffices for the proof. The rule bind-ord is handled by observing
that regardless of whether *1 is a proper extension of * or not, we must have Close*1(o/1) * AppClose*(o/1),
for if a type variable t occurs freely in *1 but not in *, it must be (by induction hypothesis) imperative,
and hence is not generalized in AppClose*(o/1) (by definition of AppClose). This is sufficient to complete
the proof.

4 Conclusion
We have presented a simplified proof of the soundness of Tofte's type discipline for combining polymorphism
and mutable references in ML. The main contribution is the elimination of the need for the maximal fixed
point argument used by Tofte [11]. The methods considered here have been subsequently employed by
Greiner to establish the soundness of the "weak polymorphism" type discipline implemented in the Standard
ML of New Jersey compiler [1]. Our approach was influenced by the work of Wright and Felleisen [13] who
pioneered the use of reduction semantics to prove soundness of type assignment systems.

Several important studies of the problem of combining polymorphic type inference and computational
effects (including mutable references) have been conducted in recent years. The interested reader is referred
to the work of Gifford, Jouvelot and Talpin [6, 9], Leroy and Weiss [7], Wright [12], Hoang, Mitchell, and
Viswanathan [5], and Greiner [4] for further details and references.

The author is grateful to Matthias Felleisen, Andrew Wright, and John Greiner for their comments and
suggestions.

References

[1] Andrew W. Appel and David B. MacQueen. Standard ML of New Jersey. In J. Maluszynski and

M. Wirsing, editors, Third Int'l Symp. on Prog. Lang. Implementation and Logic Programming, pages
1-13, New York, August 1991. Springer-Verlag.

[2] Luis Damas and Robin Milner. Principal type schemes for functional programs. In Ninth ACM Symposium on Principles of Programming Languages, pages 207-212, 1982.

[3] Luis Manuel Martins Damas. Type Assignment in Programming Languages. PhD thesis, Edinburgh

University, 1985.

[4] John Greiner. Standard ml weak polymorphism can be sound. Technical Report CMU-CS-93-160,

School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, May 1993.

[5] My Hoang, John Mitchell, and Ramesh Viswanathan. Standard ML-NJ weak polymorphism and imperative constructs. In Eighth Symposium on Logic in Computer Science, 1993.

[6] Pierre Jouvelot and David Gifford. Algebraic reconstruction of types and effects. In Eighteenth ACM

Symposium on Principles of Programming Languages, pages 303-310, 1991.

5

[7] Xavier Leroy and Pierre Weis. Polymorphic type inference and assignment. In Eighteenth ACM Symposium on Principles of Programming Languages, pages 291-302, Orlando, FL, January 1991. ACM
SIGACT/SIGPLAN.

[8] Robin Milner and Mads Tofte. Co-induction in relational semantics. Technical Report ECS-LFCS-88-

65, Laboratory for the Foundations of Computer Science, Edinburgh University, Edinburgh, October
1988.

[9] Jean-Pierre Talpin and Pierre Jouvelot. The type and effect discipline. In Seventh Symposium on Logic

in Computer Science, pages 162-173, 1992.

[10] Mads Tofte. Operational Semantics and Polymorphic Type Inference. PhD thesis, Edinburgh University,

1988. Available as Edinburgh University Laboratory for Foundations of Computer Science Technical
Report ECS-LFCS-88-54.

[11] Mads Tofte. Type inference for polymorphic references. Information and Computation, 89:1-34, November 1990.

[12] Andrew Wright. Typing references by effect inference. In Proceedings of the European Symposium on

Programming, 1992.

[13] Andrew K. Wright and Matthias Felleisen. A syntactic approach to type soundness. Technical Report

TR91-160, Department of Computer Science, Rice University, July 1991. To appear, Information and
Computation.

6