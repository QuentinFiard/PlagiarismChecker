

Possible World Semantics for General Storage

in Call-By-Value

Paul Blain Levy
PPS, Universit'e Denis Diderot
Case 7014, 2 Place Jussieu, 75251 Paris Cedex 05, France

paul.levy@pps.jussieu.fr

Abstract. We describe a simple denotational semantics, using possi-
ble worlds, for a call-by-value language with ML-like storage facilities,
allowing the storage of values of any type, and the generation of new
storage cells. We first present a criticismof traditional Strachey seman-
tics for such a language- that it requires us to specify what happens when
we read non-existent cells. We then obtain our model by modifying the
Strachey semantics to avoid this problem.
We describe our model in 3 stages- first no storage of functions or recur-
sion (but allowing storage of cells), then we add recursion, and finally we
allow storage of functions. We discuss similarities and differences between
our model and Moggi's model of ground store. A significant difference
is that our model does not use monadic decomposition of the function
type.

1 Storage and Its Denotational Models
1.1 Overview
Many call-by-value (CBV) programming languages such as ML and Scheme pro-vide a facility to store values in cells, i.e. memory locations. In ML, these cells are

typed using ref: a cell storing values of type A is itself a value of type ref A.Todate, besides recent work [1] blending operational and denotational semantics,
there have been 3 ways of modelling such a CBV language denotationally:

- traditional Strachey-style semantics, used e.g. in [2]- possible world semantics, used in [3, 4, 5] to model storage of ground values

only- game semantics [6].

In this paper, we argue that Strachey-style semantics, whilst very natural fora language with a fixed set of cells, is unnatural for a language in which new
cells can be generated, because in the latter case it requires us to specify whathappens when we read a non-existent cell, something that can never occur in
reality.We modify Strachey semantics to avoid this problem, and obtain therebya surprisingly simple possible world model for general store (not just ground
store).The model is different from, and in some ways simpler than, the ground
J. Bradfield (Ed.): CSL 2002, LNCS 2471, pp. 232-246, 2002.

c\Delta  Springer-Verlag Berlin Heidelberg 2002

Possible World Semantics for General Storage in Call-By-Value 233
store model of [3, 4].One notable difference is that our model does not useMoggi's monadic decomposition of

A \Delta CBV B as A \Delta  T B [7], whereas theground store model does.

For the purposes of exposition, we consider 3 levels of liberality in languageswith storage.

1.Only ground values such as booleans and numbers can be stored.2.As well as ground values, cells themselves can be stored.
3.Any value at all--including a function--can be stored.This is the case inML and Scheme.

Languages of level 1 and 2 can also be classified according to whether theyprovide recursion.This division does not apply to languages of level 3, because
recursion can be encoded using function storage, as noted by Landin (folklore).The paper is organized as follows.We first present our criticism of Strachey
semantics and give the basic ideas of the possible world semantics.After givingthe syntax and big-semantics for the language, we present our model incremen-
tally.

- We first model level 2 storage without recursion--here we can use sets insteadof cpos.

- Then we model level 2 storage with recursion.- Finally we model level 3 storage, i.e. the full language.

We compare with the ground store model and discuss some further directions.
1.2 From Strachey-Style to Possible World Semantics
For convenience of exposition we will consider a language with the followingproperties:

- it has level 2 storage and no recursion, so that we can work with sets ratherthan cpos.
- it distinguishes between a value \Xi  \Theta v V : A and a producer \Xi  \Theta p M : A.Thelatter is an ordinary CBV term that can perform effects before producing

an answer.(Moggi's monadic metalanguage would represent it as a term oftype

T A.) This explicit distinction at the level of judgements--which we callfine-grain CBV --makes it easier to describe the semantics.

We give a summary of the traditional Strachey semantics for such a language,where we write

S for the set of states.

- A type A (and hence a context \Xi  ) denotes a set, which we think of as theset of denotations of closed values of type

A.
- A value \Xi  \Theta v V : A denotes a function from [[\Xi  ]] to [[A]].
- A producer \Xi  \Theta p M : A denotes a function from S * [[\Xi  ]] to S * [[A]].

234 Paul Blain Levy
A key question is how we are to interpret ref A.This is easy if the number ofcells is fixed.If, for example, the language provides 3 boolean-storing cells, then
ref bool will denote $3 = {0, 1, 2}.Here, we use the notation $ n for the set{0

, . . . , n \Sigma  1}, the canonical set of size n.But in languages such as ML and Scheme, new cells can be generated in

the course of execution, and the state of the memory is given by two pieces ofinformation:

- the world, which tells us how many cells there are of each type--we write Wfor the poset of worlds
- the store, which tells us what the cells contain--we write Sw for the set ofstores in a given world

w.

Thus the set S of states is given as \Delta w\Theta W Sw.The Strachey-style semantics [ 2]for such a language interprets

ref A by N.We claim, however, that this approach is problematic.For suppose

w isa world in which there are 3 boolean-storing cells and
s is a store in this worldand
M is the term

x : ref bool \Theta p read x as y. produce y : bool
What is [[M ]](w, s)(x \Phi \Delta  7) going to be in our semantics? It is quite arbitrary,because what [[

M ]](w, s)(x \Phi \Delta  7) describes is absurd: the term M , executed instate (
w, s), reads cell 7--which does not exist in world w--and returns theboolean that it finds there.This is operationally impossible precisely because

the world can only grow bigger--if there were a "destroy cell" instruction, thissituation could actually happen.

An obvious way to avoid this problem of non-existent cells is for [[M ]] to takeas arguments a state (

w, s) and an environment that makes sense in world w.Toset up such a semantics, the denotation of a type must depend on the world.For

example, if w is a world where there are 3 boolean-storing cells, then [[ref bool]]wis $3.So the above problem does not arise.

1.3 Denotation of Function Type
Recall that in the Strachey-style semantics, using S = \Delta w\Theta W Sw, the semanticsof the function type is given by

[[A \Delta  B]] = S \Delta  [[A]] \Delta  (S * [[B]])\Psi 

= \Theta 

w\Delta \Theta W(

Sw\Xi  \Delta  [[A]] \Delta  \Lambda 

w\Delta \Delta \Theta W(

Sw\Xi \Xi  * [[B]]))

This means that a value V of type A \Delta  B will be applied to a state (w\Xi , s\Xi ) andoperand

U of type A, and then terminate in some state (w\Xi \Xi , s\Xi \Xi ) with a result Wof type
B.But we know that if V is a w-value, then w\Xi  \Delta  w and U is a w\Xi -value,

Possible World Semantics for General Storage in Call-By-Value 235
and that w\Xi \Xi  \Delta  w\Xi  and W is a w\Xi \Xi -value.We therefore modify the above equationas follows:

[[A \Delta  B]]w = \Theta 

w\Delta \Delta w(

Sw\Xi  \Delta  [[A]]w\Xi  \Delta  \Lambda 

w\Delta \Delta \Delta w\Delta (

Sw\Xi \Xi  * [[B]]w\Xi \Xi )) (1)

In summary, this equation says that a w-value of type A \Delta  B, when applied ina future state (

w\Xi , s\Xi ) to an operand (a w\Xi -value of type A), will terminate ina state (
w\Xi \Xi , s\Xi \Xi ) even further in the future, returning a w\Xi \Xi -value of type B.

1.4 Relating the Different Worlds
As we move from world w to the bigger world w\Xi , each w-value of type A in theenvironment becomes a

w\Xi -value of type A.In the syntax, the conversion from w-terms to
w\Xi -terms is just a trivial inclusion, but in the denotational semantics,we must explicitly provide a function from [[

A]]w to [[A]]w\Xi , which we call [[A]]ww\Delta .We require

[[A]]wwa = a (2)
[[A]]ww\Delta \Delta  a = [[A]]w\Delta w\Delta \Delta ([[A]]ww\Delta a) for w \Theta  w\Xi  \Theta  w\Xi \Xi  (3)

In the terminology of category theory, A denotes a functor from the poset W(regarded as a category) to Set.

2 The Language
A world w is a finite multiset on types; i.e. a function from the set types oftypes to

N such that the set cells w = \Delta A\Theta types$wA is finite.We use worlds toformulate the syntax in Fig. 1.Notice that if

w \Theta  w\Xi  then every w-term is alsoa
w\Xi -term--this fact will be used implicitly in the big-step semantics.A syntactic

w-store i is a function associating to each cell (A, l) \Omega  cells wa closed
w-value of type A.By contrast we will use s to represent a denotational-semantic store--this distinction is important when we have function storage.

A syntactic state is a pair w, i where i is a syntactic w-store.We use syntacticstates to present big-step semantics in Fig. 2.

Definition 1 (observational equivalence). Given two producers \Xi  \Theta p M, N :
A, we say that M ff N when for every ground context C[*], i.e. context which isa producer of ground type

bool, and for every syntactic state w, i and every nwe have

ffiw\Xi , i\Xi (w, i, C[M ] ffl w\Xi , i\Xi , n) iff ffiw\Xi , i\Xi (w, i, C[N ] ffl w\Xi , i\Xi , n)
We similarly define ff for values.
We list in Fig. 3 some basic equivalences that all the CBV models, including theStrachey semantics, validate.

236 Paul Blain Levy
Types A -:= bool | 1 | A * A | A \Lambda  A | ref A

Rules for 1 are omitted, as it is analogous to *.
Judgements w|\Lambda  \Xi v V - A w|\Lambda  \Xi p M - A where w is a world.

In the special case w = 0, we write \Lambda  \Xi v V - A and \Lambda  \Xi p M - A.

Terms

w|\Lambda , x : A, \Lambda  \Delta  \Xi v x : A

w|\Lambda  \Xi v V - A w|\Lambda , x : A \Xi p M - B

w|\Lambda  \Xi p let V be x. M - B

w|\Lambda  \Xi v V - A
w|\Lambda  \Xi p produce V - A

w|\Lambda  \Xi p M - A w|\Lambda , x : A \Xi p N - B

w|\Lambda  \Xi p M to x. N - B

w|\Lambda  \Xi v true : bool w|\Lambda  \Xi v false : bool

w|\Lambda  \Xi v V - bool w|\Lambda  \Xi p M - B w|\Lambda  \Xi p M\Delta  - B

w|\Lambda  \Xi p if V then M else M\Delta  - B

w|\Lambda  \Xi v V - A w|\Lambda  \Xi v V \Delta  - A\Delta 

w|\Lambda  \Xi v (V, V \Delta ) : A * A\Delta 

w|\Lambda  \Xi v V - A * A\Delta  w|\Lambda , x : A, y : A\Delta  \Xi p M - B

w|\Lambda  \Xi p pm V as (x, y).M - B

w|\Lambda , x : A \Xi p M - B
w|\Lambda  \Xi v \Omega x.M - A \Lambda  B

w|\Lambda  \Xi v V - A w|\Lambda  \Xi v W - A \Lambda  B

w|\Lambda  \Xi p V `W - B

Terms For Divergence/Recursion

w|\Lambda  \Xi p diverge : B

w|\Lambda , f : A \Lambda  B, x : A \Xi p M - B

w|\Lambda  \Xi v uf\Omega x.M - A \Lambda  B
Terms For Storage

w|\Lambda  \Xi v cellAl (A, l) \Pi  cells w

w|\Lambda  \Xi v V - ref A w|\Lambda  \Xi v W - A w|\Lambda  \Xi p M - B

w|\Lambda  \Xi p V -= W. M - B

w|\Lambda  \Xi v V - ref A w|\Lambda , x : A \Xi p M - B

w|\Lambda  \Xi p read V as x. M - B

w|\Lambda  \Xi v V - A w|\Lambda , x : ref A \Xi p M - B

w|\Lambda  \Xi p new x := V. M - B

w|\Lambda  \Xi v V - ref A w|\Lambda  \Xi v V \Delta  - ref A w|\Lambda  \Xi p M - B w|\Lambda  \Xi p M\Delta  - B

w|\Lambda  \Xi p if V = V \Delta  then M else M\Delta  - B
Here, we do not allow V = V \Delta  to be a boolean value, because the operational semantics
exploits the fact that values do not need to be evaluated.

Fig. 1. Terms of fine-grain CBV

Possible World Semantics for General Storage in Call-By-Value 237
The formof the big-step semantics is w, ffi, M \Sigma  w\Delta , ffi\Delta , W where

- w, ffi is a syntactic state
- M is a closed w-producer
- w\Delta , ffi\Delta  is a syntactic state such that w\Delta  ? w
- W is a closed w\Delta -value of the same type as M.

w, ffi, M[V /x] \Sigma  w\Delta , ffi\Delta , W
w, ffi, let V be x. M \Sigma  w\Delta , ffi\Delta , W

w, ffi, produce V \Sigma  w, ffi, V

w, ffi, M \Sigma  w\Delta , ffi\Delta , V w\Delta , ffi\Delta , N[V /x] \Sigma  w\Delta \Delta , ffi\Delta \Delta , W

w, ffi, M to x. N \Sigma  w\Delta \Delta , ffi\Delta \Delta , W

w, ffi, M[V /x, V \Delta /y] \Sigma  w\Delta , ffi\Delta , W
w, ffi, pm (V, V \Delta ) as (x, y). M \Sigma  w\Delta , ffi\Delta , W

w, ffi, M[V/x] \Sigma  w\Delta , ffi\Delta , W
w, ffi, V `\Omega x.M \Sigma  w\Delta , ffi\Delta , W

w, ffi, diverge \Sigma  w\Delta , ffi\Delta , W
w, ffi, diverge \Sigma  w\Delta , ffi\Delta , W

w, ffi, M[V /x, uf\Omega x.M/f] \Sigma  w\Delta , ffi\Delta , W

w, ffi, V `uf\Omega x.M \Sigma  w\Delta , ffi\Delta , W

w, ffi, M[V /x] \Sigma  w\Delta , ffi\Delta , W
w, ffi, read cell Al as x. M \Sigma  w\Delta , ffi\Delta , W

V is the contents of A-storing cell l in ffi

w, ffi\Delta , M \Sigma  w\Delta \Delta , ffi\Delta \Delta , W
w, ffi, cell Al -= V ; M \Sigma  w\Delta \Delta , ffi\Delta \Delta , W

ffi\Delta  is ffi with A-storing cell l assigned V

w\Delta , ffi\Delta , M[cell Al/x] \Sigma  w\Delta \Delta , ffi\Delta \Delta , W
w, ffi, new x := V ; M \Sigma  w\Delta \Delta , ffi\Delta \Delta , W

(w\Delta , ffi\Delta ) is (w, ffi) extended with a cell l storing V

w, ffi, M \Sigma  w\Delta , ffi\Delta , W
w, ffi, if cell Al = cell Al then M else M\Delta  \Sigma  w\Delta , ffi\Delta , W

w, ffi, M\Delta  \Sigma  w\Delta , ffi\Delta , W (l \Upsilon = l\Delta )
w, ffi, if cell Al = cell Al\Delta  then M else M\Delta  \Sigma  w\Delta , ffi\Delta , W
Exploiting determinism, we say that wffi, M diverges when there is no w\Delta , ffi\Delta , V such
that w, ffi, M \Sigma  w\Delta , ffi\Delta , V .

Fig. 2. Big-step semantics for fine-grain CBV with storage

238 Paul Blain Levy
We employ the bound/unbound convention- when, in an equation--such as the i-law
M = \Omega x.(x`M)--the term \Lambda  \Xi c M - B occurs both in the scope of an x-binder and
not in the scope of an x-binder, we assume x \Upsilon \Pi  \Lambda  . We do not write the weakening
explicitly.

(j) let x be V. M = M[V /x]
(j) if true then M else M\Delta  = M
(j) if false then M else M\Delta  = M\Delta 
(j) pm (V, V \Delta ) as (x, y).M = M[V /x, V \Delta /y]
(j) (\Omega x.M)V = M[V /x]
(j) produce V to x. M = M[V /x]
(i) M[V /z] = if V then M[true/z] else M[false/z]
(i) M[V /z] = pm V as (x, y).M[(x, y)/z]
(i) V = \Omega x.(V x)
(i) M = M to x. produce x

(P to x. M) to y. N = P to x. (M to y. N)
(V -= W ; M) to y. N = V -= W ; (M to y. N)
(read V as x. M) to y. N = read V as x. (M to y. N)

(new x := V ; M) to y. N = new x := V ; (M to y. N)

Fig. 3. Basic CBV equivalences, using bound/unbound convention
3 Denotational Semantics without Divergence
In this section we exclude diverge and u and storage of functions, so that wecan model using sets rather than cpos.We say that a type

D is a data type ifvalues of type
D can be stored.The types of the restricted language are givenby

D ::= bool | D * D | ref D
A ::= D | bool | A * A | A \Delta  A

Proposition 1. Let M be a w-producer and s a w-store in this restricted lan-guage. Then

w, i, M ffl w\Xi , i\Xi , W for (clearly unique) w\Xi , i\Xi , W .

This is proved by a standard Tait-style argument.We now present the denota-tional semantics for this restricted language.As we stated in the introduction,

each type A in each world w denotes a set [[A]]w.These sets are given by

Sw = \Theta 

(D,l)\Theta cells w

[[D]]w

[[bool]]w = {true, false}
[[A * A\Xi ]]w = [[A]]w * [[A\Xi ]]w

[[ref A]]w = $wA

[[A \Delta  B]]w = \Theta 

w\Delta \Delta w(

Sw\Xi  \Delta  [[A]]w\Xi  \Delta  \Lambda 

w\Delta \Delta \Delta w\Delta (

Sw\Xi \Xi  * [[B]]w\Xi \Xi ))

The functions [[A]]ww\Delta  are given simply:

Possible World Semantics for General Storage in Call-By-Value 239
- [[bool]]ww\Delta  is the identity on {true, false}.- [[

A * A\Xi ]]ww\Delta  takes (a, a\Xi ) to ([[A]]ww\Delta  a, [[A]]ww\Delta a\Xi ).- [[
ref D]]ww\Delta  is the inclusion from $wD to $w\Xi D.- [[
A \Delta  B]]ww\Delta  takes a family {fw\Delta \Delta }w\Delta \Delta \Delta w to the restricted family {fw\Delta \Delta }w\Delta \Delta \Delta w\Delta .

It is easily verified that they satisfy (2)-(3).A context \Xi  is interpreted similarly.A value

w0|\Xi  \Theta v V : A will denote, for each world w \Delta  w0, a function [[V ]]wfrom [[
\Xi  ]]w to [[A]]w.These functions are related: if w0 \Theta  w \Theta  w\Xi  then

[[\Xi  ]]w

[[V ]]w \Delta \Delta 

[[\Upsilon  ]]ww\Delta  \Theta \Theta 

[[A]]w

[[A]]ww\Delta \Theta \Theta 

[[\Xi  ]]w\Xi  [[V ]]w\Delta  \Delta \Delta  [[A]]w\Xi 

must commute.(4)

Informally, (4) says that if we have an environment _ of closed w-values, substi-tute into

V and then regard the result as a closed w\Xi -value, we obtain the sameas if we regard

_ as an environment of closed w\Xi -values and substitute it into V .The special case that

w0 = 0, in which we have a value \Xi  \Theta v V : A, isinteresting.In categorical terminology,

V denotes a natural transformation from[[
\Xi  ]] to [[A]].A producer

w0|\Xi  \Theta p M : A denotes, for each w \Delta  w0, a function [[M ]]wfrom
Sw * [[\Xi  ]]w to \Delta w\Delta \Delta w(Sw\Xi  * [[A]]w\Xi ).This is because in a given state ( w, i)where

w \Delta  w0 and environment of w-values, it terminates in a state (w\Xi , i\Xi ),where
w\Xi  \Delta  w, producing a w\Xi -value.There is no required relationship betweenthe functions [[

M ]]w for different w.The semantics of terms is straightforward.

Remark 1. According to the prescription above, the denotation of a closed value
w| \Theta v V : A is an element of

{a \Omega  \Theta 

w\Delta \Delta w[[

A]]w : [[A]]w\Delta w\Delta \Delta a(w\Xi ) = a(w\Xi \Xi ) when w \Theta  w\Xi  \Theta  w\Xi \Xi }

There is an obvious bijection between this set and [[A]]w.This shows that ourthinking of [[

A]]w as the set of denotations of closed w-values of type A, whichpervades the informal parts of this paper, is in agreement with the technical

development.
Remark 2. For each datatype D, the function [[\Sigma ]] from the set of closed w-valuesof type

D to the set [[D]]w is a bijection, by induction on D.Because of this, untilSect. 6, we neglect the distinction between syntactic and denotational-semantic

store, and we write both as s.
Proposition 2 (soundness). If w, s, M ffl w\Xi , s\Xi , W then [[M ]]ws =(

w\Xi , s\Xi , [[W ]]w\Xi ).

This is proved by straightforward induction.
Corollary 1. (by Prop. 1) If M is a closed ground w-producer (i.e. producer oftype

bool) then w, i, M ffl w\Xi , i\Xi , n iff [[M ]]ws = (w\Xi , i\Xi , n). Hence terms withthe same denotation are observationally equivalent.

240 Paul Blain Levy
4 Adding Recursion
In this section, we allow the diverge and recursion constructs, but we continueto prohibit function storage.We thus avoid

Sw and [[A \Delta  B]]w being mutuallyrecursive.

In the denotational model, [[A]]w is a cpo rather than a set, although [[Dw]](for a datatype

D) and Sw will continue to be sets (or flat cpos).The functions[[
A]]ww\Delta  and [[V ]]w and [[M ]]w are required to be continuous.In the language ofcategory theory, a type denotes a functor from W to

Cpo (the category of cposand continuous functions), and a value
\Xi  \Theta v V : A again denotes a naturaltransformation.

The key semantic equation (1) must be modified for the possibility of diver-gence

[[A \Delta CBV B]]w = \Theta 

w\Delta \Delta w(

Sw\Xi  \Delta  [[A]]w\Xi  \Delta  ( \Lambda 

w\Delta \Delta \Delta w\Delta (

Sw\Xi \Xi  * [[B]]w\Xi \Xi ))\Pi ) (5)

This equation says that a w-value of type A \Delta  B, when applied in a future-world store (

w\Xi , i\Xi ) to an operand (a w\Xi -value of type A), will either diverge orterminate in state (

w\Xi \Xi , s\Xi \Xi ) returning a w\Xi \Xi -value of type B.Similarly a producer

w0|\Xi  \Theta p M : A will now denote, in each world w \Delta  w0,a continuous function [[
M ]]w from Sw * [[\Xi  ]]w to (\Delta w\Delta \Delta w(Sw\Xi  * [[A]]w\Xi ))\Pi .Thelifting allows for the possibility of divergence.The interpretation of terms is

straightforward.
Proposition 3 (soundness/adequacy).

1. If w, s, M ffl w\Xi , s\Xi , W then [[M ]]ws = (w\Xi , s\Xi , [[W ]]w\Xi ).2. If

w, s, M diverges, then [[M ]]ws = j.

Proof. (1) is straightforward.For ( 2), we define admissible relations \Theta vA w be-tween [[

A]]w and closed w-values of type A, for which a \Theta vAw V and w \Theta  ximplies ([[

A]]wx )a \Theta vAx V , and j-containing admissible relations \Theta pA w between(\Delta 

w\Delta \Delta w(Sw\Xi  * [[A]]w\Xi ))\Pi  and triples x, s, M (where x \Delta  w and s is a x-store andM is a closed x-producer of type A).These are defined by mutual induction on

types in the evident way.For data types D, we will have d \Theta vD,w V iff d = [[V ]]w.We prove that for any producer

w|A0, . . . , An\Sigma 1 \Theta p M : A, if w \Theta  x and s \Omega  Sx

and ai \Theta vAix Wi for i = 0, . . . , n \Sigma  1 then [[M ]]xs\Sigma \Delta ai \Theta pAx x, s, M [\Sigma \Sigma \Sigma \Delta Wi/xi]; andsimilarly for values.The required result is immediate.

Corollary 2. If M is a closed ground w-producer then w, i, M ffl w\Xi , i\Xi , n iff[[

M ]]ws = lift(w\Xi , i\Xi , n) and w, i, M diverges iff [[M ]]ws = j. Hence terms withthe same denotation are observationally equivalent.

5 Theory of Enriched-Compact Categories
We review some key results about solution of domain/predomain equationsfrom [8, 9].Whilst those papers work with the category Cpo\Pi  of pointed cpos

Possible World Semantics for General Storage in Call-By-Value 241
and strict continuous functions, everything generalizes1 to enriched-compact cat-egories, as we now describe. All of this material is somewhat implicit in [11].

Definition 2. -n enriched-compact category C is a Cpo-enriched categorywith the following properties.

- Each hom-cpo C(A, B) has a least element j.- Composition is bi-strict i.e. j;

g = j = f ; j.- C has a zero object i.e. an object which is both initial and terminal. (Because

of bi-strictness, just one of these properties is sufficient.)- Writing C

ep for the category of embedding-projection pairs in C, we have

that for every countable directed diagram D : D \Sigma \Delta  Cep has an O-colimit(necessarily unique up to unique isomorphism). We recall from [9] that an

O-colimit for D is defined to be a cocone (V, {(ed, pd)}d\Theta D) from D in Cepsatisfying \Xi 

d\Theta D(

pd; ed) = idV (6)

Definition 3. Let F be a locally continuous functor from C

op * C to C. Then an

invariant for F is an object D together with an isomorphism i : F (D, D) \Psi = D. Itis a minimal invariant when the least fixed point of the continuous endofunction

on C(D, D) taking e to i\Sigma 1; F (e, e); i is the identity.
Proposition 4. Let F be a locally continuous functor from C

op *C to C. Then F

has a minimal invariant, and it is unique up to unique isomorphism.
Proof. This is proved as in [8].
Definition 4. 1. A subcategory C of a category D is lluf [12] when ob C =

ob D.2. If B is a subcategory of D we write B *\Delta  D for the category with the objects

of B and the morphisms of D, i.e. the unique category C such that

B *lluf C *full D
3. A lluf admissible subcategory B of an enriched-compact category C isembedding-complete when it contains all the embeddings (and in particu-

lar the isomorphisms) in D.
Def. 4(3) is important because frequently we seek an isomorphism in a Cpo-enriched category B which is not enriched-compact (such as

Cpo).So we lookfor an enriched-compact category D that contains C as an embedding-complete

subcategory.
Proposition 5. 1. The category Cpo\Pi  is enriched-compact.2. The category Cpo is an embedding-complete subcategory of the enriched-

compact category pCpo of cpos and partial continuous functions.
1 Another generalization is to the "rational categories" of [10], but they are for call-

by-name.

242 Paul Blain Levy

3. Any small product \Pi i\Theta I Ci of enriched-compact categories is enriched-compact. If B

i * Ci is embedding-complete for all i \Omega  I, then so is\Pi 
i\Theta I Bi * \Pi i\Theta I Ci.4. Let I be a small category and C be enriched-compact. Then the functor cat-

egory [I, C] is enriched-compact.5. Let

I be a small category. Then [I, Cpo] is an embedding-complete subcate-gory of the enriched-compact category [

I, Cpo] *\Delta  [I, pCpo].

Proof. (1)-(3) are standard.(4) Given a countable directed diagram

D in [I, C], set (V i, {(edi, pdi)}d\Theta D)

to be the O-colimit in C of Di and set V i V f \Delta \Delta  V j to be \Sigma d\Theta D(pdi; Ddf ; edj)

for i f \Delta \Delta  j .The required properties are trivial.

(5) We construct the O-colimit of a countable directed diagram D in[
I, Cpo] * \Delta  [I, pCpo] as in the previous case.We need to show that

V i

V f \Delta \Delta  V j is total for any f : i \Sigma \Delta  j.Given x \Omega  V w, we know that

\Xi 
d\Theta D(

pdw; edw)x = x

Therefore, for sufficiently large d, x is in the domain of pdw.Hence, for such d, xis in the domain of

pdw; Ddf ; edw\Delta , because Ddf and edw\Delta  are total.So x is in thedomain of
V f = \Sigma d\Theta D(pdi; Ddf ; edj) as required.

6 Storing Functions
We now want to model the full language.We want to provide a cpo Sw for each
world w and a functor W

[[A]]w\Delta \Delta  Cpo for each type A.Thus we seek an object

(and isomorphism) in the category

C0 = \Theta 

w\Theta W Cpo * \Theta A\Theta types[W

, Cpo]

By Prop. 5, this is an embedding-complete subcategory of the enriched-compactcategory

C = \Theta 

w\Theta W pCpo * \Theta A\Theta types([W

, Cpo] *\Delta  [W, pCpo])

We define a locally continuous functor F from C

op * C to C in Fig. 4; its minimal

invariant is an object and isomorphism in C0--this is our semantics of types.Semantics of terms proceeds as in Sect. 4, with isomorphisms inserted where

required.
Proposition - (soundness/adequacy).

1. If w, i, M ffl w\Xi , i\Xi , W then [[M ]]ws = (w\Xi , i\Xi , [[W ]]w\Xi ).

Possible World Semantics for General Storage in Call-By-Value 243
2. If w, i, M diverges, then [[M ]]ws = j.
Proof. (1) is straightforward induction.The proof of ( 2) is obtained from that ofProp. 3(2), using Pitts' techniques [8], which generalize to an arbitrary enriched-
compact category.
Corollary 3. If M is a closed ground w-producer then w, i, M ffl w\Xi , i\Xi , n iff[[

M ]]ws = lift(w\Xi , i\Xi , n) and w, i, M diverges iff [[M ]]ws = j. Hence terms withthe same denotation are observationally equivalent.

Construction of F : C

op * C -\Lambda  C

For objects D, E

F (D, E)Sw = Y

(A,l)\Theta cells w

EA

F (D, E)boolw = {true, false}
F (D, E)boolwx b = b
F (D, E)(A*A\Delta )w = EAw * EA\Delta w

F (D, E)A*A\Delta wx = (EAwx c, EA\Delta wx c\Delta )
F (D, E)(ref A)w = $wA
F (D, E)ref A wx i = i

F (D, E)(A\Xi B)w = Y

w\Delta ?w

(DSw\Delta  \Lambda  DAw\Delta  \Lambda  ( X

w\Delta \Delta ?w\Delta 

(ESw\Delta \Delta  * EBw\Delta \Delta  ))\Pi )

F (D, E)A\Xi Bwx = \Omega x\Delta s\Delta .fx\Delta s\Delta 
For morphisms D\Delta  h \Delta \Delta  D and E k \Delta \Delta  E\Delta 

F (h, k)Sws =

8!

:

((A, l) fi\Lambda  kSws(A, l))

if kSws(A, l) is defined for all (A, l) \Pi  cells w
undefined otherwise

F (h, k)boolwb = b
F (h, k)(ref A)wi = i

F (h, k)(A*A\Delta )w(c, c\Delta ) =

8!

:

(kAwc, kA\Delta wc\Delta )

if kAwc and kA\Delta wc\Delta  are defined
undefined otherwise

F (h, k)(A\Xi B)wf = \Omega w\Delta .\Omega s\Delta .\Omega a\Delta .

8????
!?
???:

lift(w\Delta \Delta , kSw\Delta \Delta  s\Delta \Delta , kBw\Delta \Delta  b\Delta \Delta )

if hSw\Delta s\Delta  and hAw\Delta  a\Delta  are defined
and fw\Delta (hSw\Delta s\Delta )(hAw\Delta a\Delta ) = lift(w\Delta \Delta , s\Delta \Delta , b\Delta \Delta )
and kSw\Delta \Delta s\Delta \Delta  and kBw\Delta \Delta  a\Delta \Delta  are definedfl
otherwise

Fig. 4. Construction of F

244 Paul Blain Levy
7 Monadic Decomposition and the Ground-Store Model
The set model of Sect. 3 gives us the following structure on the cartesian category[W

, Set]:

(A \Delta CBV B)w = \Theta 

w\Delta \Delta w(

Sw\Xi  \Delta  Aw\Xi  \Delta  \Lambda 

w\Delta \Delta \Delta w\Delta (

Sw\Xi \Xi  * Bw\Xi \Xi ))

(A \Delta CBV B)wx = !x\Xi s\Xi .f x\Xi s\Xi 

T Bw = \Theta 

w\Delta \Delta w(

Sw\Xi  \Delta  \Lambda 

w\Delta \Delta \Delta w\Delta (

Sw\Xi \Xi  * Bw\Xi \Xi ))

T Bwx = !x\Xi s\Xi .f x\Xi s\Xi 
We know from Moggi's theory that, for any model of fine-grain CBV, when T Bis set to be 1 \Delta 

CBV B as it is here, we can extend T to a strong monad, andthen
A \Delta CBV B must be an exponential from A to T B.But the decompositionof

A \Delta CBV B as A \Delta  T B is hardly obvious here.It seems that a more naturalcategorical organization for our model is the "closed Freyd category" [13].

We recall the ground store model of [3], as generalized in [4], and see how itdiffers from ours.Let

I be the category of worlds and injections. Because we aredealing with ground store only,

S is a functor from I

op to Set: a store in a bigger

world can always be restricted to a store in a smaller world.The ground store model interprets values in the cartesian category [

I, Set].This category has exponentials described as an end

(A \Delta  B)w = \Upsilon 

w\Delta \Theta (w/I)(Aw

\Xi  \Delta  Bw\Xi ) (7)

and a strong monad described using a coend

(T B)w = Sw \Delta  \Upsilon 

w\Delta \Theta (w/I)(

Sw\Xi  * Bw\Xi ) (8)

By monadic decomposition we obtain

(A \Delta CBV B)w = \Upsilon 

w\Delta \Theta (w/I)(Aw

\Xi  \Delta  Sw\Xi  \Delta  \Upsilon  w

\Delta \Delta \Theta (w\Delta /I)

(Sw\Xi \Xi  * Bw\Xi \Xi )) (9)

whose similarity to (1) is evident.Notice the importance of the contravarianceof

S for (8) to be covariant in w, and indeed for the coend to be meaningful.Once we can store cells,

S is no longer contravariant: if w \Theta  w\Xi , a w\Xi -store s\Xi cannot necessarily be restricted to a

w-store, because some w-cell in s\Xi  mightbe storing a non-
w-cell. Another difficulty is moving from sets to cpos, becausealthough colimits of cpos exist [14], they are unwieldy.

An advantage of the ground store model over ours is that it validates theequivalences (employing the bound/unbound convention)

new x := V ; M ff M
new x := V ; new y := W ; M ff new y := W ; new x := V ; M

Possible World Semantics for General Storage in Call-By-Value 245
We hope that our work will provide a starting-point for work on parametricmodels validating these and other equivalences.

8 Relationship with Call-By-Push-Value
Finally, we mention two links between our model and the call-by-push-valuelanguage of [15].

object language The model reflects the decomposition of \Delta CBV into call-by-push-value given in [15].
metalanguage We want to use call-by-push-value as a metalanguage for thecpo equations of Sect. 6, in order to avoid having to construct the functor

Fin detail, and also to model storage combined with other effects [16].

We hope to treat these links in detail in future work.We also hope that workingwith call-by-push-value will help to establish connections with possible world
models for call-by-name [17, 18, 19, 20], especially Ghica's model for pointers [21].

Acknowledgements
Thanks to Peter O'Hearn for discussion and advice.

References

[1] Ahmed, A., Appel, A., Virga, R.: A stratified semantics of general references

embeddable in higher-order logic. In- Proceedings of IEEE Symposium on Logic
in Computer Science, Copehagen, 2002. (2002) to appear 232
[2] Kelsey, R., Clinger, W., (Editors), J. R.: Revised5 report on the algorithmic

language Scheme. ACM SIGPLAN Notices 33 (1998) 26-76 232, 234
[3] Moggi, E.: An abstract view of programming languages. Technical Report ECS-

LFCS-90-113, Dept. of Computer Science, Edinburgh Univ. (90) 232, 233, 244
[4] Plotkin, G. D., Power, A. J.: Notions of computation determine monads. InProceedings of Foundations of Software Science and Computation Structures,
Grenoble, France (FoSSaCS '02). LNCS (2002) to appear 232, 233, 244
[5] Stark, I. D. B.: Names and Higher-Order Functions. PhD thesis, University of

Cambridge (1994) 232
[6] Abramsky, S., Honda, K., McCusker, G.: A fully abstract game semantics for

general references. Proceedings, Thirteenth Annual IEEE Symposium on Logic
in Computer Science, IEEE Computer Society Press (1998) 232
[7] Moggi, E.: Notions of computation and monads. Information and Computation

93 (1991) 55-92 233
[8] Pitts, A. M.: Relational properties of domains. Information and Computation

127 (1996) 66-90 (A preliminary version of this work appeared as Cambridge
Univ. Computer Laboratory Tech. Rept. No. 321, December 1993.) 240, 241,
243
[9] Smyth, M., Plotkin, G. D.: The category-theoretic solution of recursive domain

equations. SIAM J. Computing 11 (1982) 240, 241

246 Paul Blain Levy

[10] Abramsky, S., Jagadeesan, R., Malacaria, P.: Full abstraction for PCF (extended

abstract). In Hagiya, M., Mitchell, J. C., eds.: Theoretical Aspects of Computer
Software. International Symposium TACS'94. Volume 789 of LNCS., Sendai,
Japan, Springer-Verlag (1994) 1-15 241
[11] Stark, I.: A fully abstract domain model for the ffi-calculus. In- Proceedings

of the Eleventh Annual IEEE Symposium on Logic in Computer Science, IEEE
Computer Society Press (1996) 36-42 241
[12] Freyd, P. J.: Algebraically complete categories. In Carboni, A., et al., eds.: Proc.

1990 Como Category Theory Conference, Berlin, Springer-Verlag (1991) 95-104
Lecture Notes in Mathematics Vol. 1488 241
[13] Power, A. J., Thielecke, H.: Closed Freyd- and kappa-categories. In- Proc.

ICALP '99. Volume 1644 of LNCS., Springer-Verlag, Berlin (1999) 625-634 244
[14] Jung, A.: Colimits in DCPO. 3-page manuscript, available by fax (1990) 244
[15] Levy, P. B.: Call-by-push-value- a subsuming paradigm (extended abstract).

In Girard, J. Y., ed.: Typed Lambda-Calculi and Applications. Volume 1581 of
LNCS., Springer (1999) 228-242 245
[16] Levy, P. B.: Call-by-push-value. PhD thesis, Queen Mary, University of London

(2001) 245
[17] Odersky, M.: A functional theory of local names. In ACM, ed.: Proceedings of

21st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Program-
ming Languages (POPL), New York, NY, USA, ACM Press (1994) 48-59 245
[18] O'Hearn, P. W., Tennent, R. D.: Semantics of local variables. In Fourman, M. P.,

Johnstone, P. T., Pitts, A. M., eds.: Applications of Categories in Computer Sci-
ence. Proceedings of the LMS Symposium, Durham July 1991, Cambridge Uni-
versity Press (1992) 217-238 245
[19] Oles, F. J.: A Category-Theoretic Approach to the Semantics of Programming

Languages. Ph. D. dissertation, Syracuse University (1982) 245
[20] Reynolds, J. C.: The essence of Algol. In de Bakker, J. W., van Vliet, J. C., eds.:

Algorithmic Languages, Amsterdam, North-Holland (1981) 345-372 245
[21] Ghica, D. R.: Semantics of dynamic variables in algol-like languages. Master's

thesis, Queens' University, Kingston,Ontario (1997) 245